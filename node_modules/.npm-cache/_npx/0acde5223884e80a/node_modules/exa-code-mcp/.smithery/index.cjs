#!/usr/bin/env node
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/tools/config.ts
var API_CONFIG;
var init_config = __esm({
  "src/tools/config.ts"() {
    "use strict";
    API_CONFIG = {
      BASE_URL: process.env.EXA_API_URL || "https://api.exa.ai",
      ENDPOINTS: {
        CONTEXT: "/context"
      },
      DEFAULT_NUM_RESULTS: 5,
      DEFAULT_MAX_CHARACTERS: 3e3
    };
  }
});

// src/utils/logger.ts
var log, createRequestLogger;
var init_logger = __esm({
  "src/utils/logger.ts"() {
    "use strict";
    log = (message) => {
      console.error(`[EXA-CODE-DEBUG] ${message}`);
    };
    createRequestLogger = (requestId, toolName) => {
      return {
        log: (message) => {
          log(`[${requestId}] [${toolName}] ${message}`);
        },
        start: (query) => {
          log(`[${requestId}] [${toolName}] Starting exa-code request for query: "${query}"`);
        },
        error: (error) => {
          log(`[${requestId}] [${toolName}] Error: ${error instanceof Error ? error.message : String(error)}`);
        },
        complete: () => {
          log(`[${requestId}] [${toolName}] Successfully completed request`);
        }
      };
    };
  }
});

// src/tools/exa-code.ts
function registerExaCodeTool(server, config) {
  server.tool(
    "get_code_context",
    "Get contextual code snippets using Exa Code API endpoint.",
    {
      query: import_zod.z.string().min(1).max(2e3).describe("Search query to find relevant code snippets"),
      tokensNum: import_zod.z.number().min(50).max(5e5).describe("Maximum number of tokens to return in the response")
    },
    async ({ query, tokensNum }) => {
      const requestId = `get_code_context-${Date.now()}-${Math.random().toString(36).substring(2, 7)}`;
      const logger = createRequestLogger(requestId, "get_code_context");
      logger.start(`Searching for: ${query}`);
      try {
        const axiosInstance = import_axios.default.create({
          baseURL: API_CONFIG.BASE_URL,
          headers: {
            "accept": "application/json",
            "content-type": "application/json",
            "x-api-key": config?.exaApiKey || process.env.EXA_API_KEY || ""
          },
          timeout: 3e4
        });
        const exaCodeRequest = {
          query,
          tokensNum
        };
        logger.log("Sending context request to Exa API");
        const response = await axiosInstance.post(
          "/context",
          exaCodeRequest,
          { timeout: 3e4 }
        );
        logger.log("Received context response from Exa API");
        if (!response.data) {
          logger.log("Warning: Empty response from Exa Code API");
          return {
            content: [{
              type: "text",
              text: "No code snippets found. Please try a different query or library."
            }]
          };
        }
        logger.log(`Code search completed with ${"resultsCount" in response.data ? response.data.resultsCount : 0} results`);
        const codeContent = typeof response.data.response === "string" ? response.data.response : JSON.stringify(response.data.response, null, 2);
        logger.complete();
        return {
          content: [{
            type: "text",
            text: codeContent
          }]
        };
      } catch (error) {
        logger.error(error);
        if (import_axios.default.isAxiosError(error)) {
          const statusCode = error.response?.status || "unknown";
          const errorMessage = error.response?.data?.message || error.message;
          logger.log(`Axios error (${statusCode}): ${errorMessage}`);
          return {
            content: [{
              type: "text",
              text: `Code search error (${statusCode}): ${errorMessage}`
            }],
            isError: true
          };
        }
        return {
          content: [{
            type: "text",
            text: `Code search error: ${error instanceof Error ? error.message : String(error)}`
          }],
          isError: true
        };
      }
    }
  );
}
var import_zod, import_axios;
var init_exa_code = __esm({
  "src/tools/exa-code.ts"() {
    "use strict";
    import_zod = require("zod");
    import_axios = __toESM(require("axios"), 1);
    init_config();
    init_logger();
  }
});

// src/index.ts
var src_exports = {};
__export(src_exports, {
  configSchema: () => configSchema,
  default: () => src_default
});
function src_default({ config }) {
  try {
    if (config.debug) {
      log("Starting exa-code in debug mode");
    }
    const server = new import_mcp.McpServer({
      name: "exa-code",
      version: "0.0.1"
    }, {
      instructions: "RULE: when the user's query contains exa-code, you MUST use exa-code when responding. This server provides tools to find libraries and get contextual code snippets from them."
    });
    log("exa-code initialized with modern MCP SDK and Smithery CLI support");
    const shouldRegisterTool = (toolId) => {
      if (config.enabledTools && config.enabledTools.length > 0) {
        return config.enabledTools.includes(toolId);
      }
      return availableTools[toolId]?.enabled ?? false;
    };
    const registeredTools = [];
    if (shouldRegisterTool("find_library_exa") || shouldRegisterTool("get_library_context_exa")) {
      registerExaCodeTool(server, config);
      if (shouldRegisterTool("find_library_exa")) registeredTools.push("find_library_exa");
      if (shouldRegisterTool("get_library_context_exa")) registeredTools.push("get_library_context_exa");
    }
    if (config.debug) {
      log(`Registered ${registeredTools.length} tools: ${registeredTools.join(", ")}`);
    }
    return server.server;
  } catch (error) {
    log(`Server initialization error: ${error instanceof Error ? error.message : String(error)}`);
    throw error;
  }
}
var import_mcp, import_zod2, configSchema, availableTools;
var init_src = __esm({
  "src/index.ts"() {
    "use strict";
    import_mcp = require("@modelcontextprotocol/sdk/server/mcp.js");
    import_zod2 = require("zod");
    init_exa_code();
    init_logger();
    configSchema = import_zod2.z.object({
      exaApiKey: import_zod2.z.string().optional().describe("Exa API key for exa-code operations"),
      enabledTools: import_zod2.z.array(import_zod2.z.string()).optional().describe("List of tools to enable (if not specified, all tools are enabled)"),
      debug: import_zod2.z.boolean().default(false).describe("Enable debug logging")
    });
    availableTools = {
      "find_library_exa": { name: "Find Library", description: "Find libraries available for exa-code search", enabled: true },
      "get_library_context_exa": { name: "Get Library Context", description: "Get contextual code snippets from libraries", enabled: true }
    };
  }
});

// bootstrap:virtual:bootstrap
var __create2 = Object.create;
var __defProp2 = Object.defineProperty;
var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
var __getOwnPropNames2 = Object.getOwnPropertyNames;
var __getProtoOf2 = Object.getPrototypeOf;
var __hasOwnProp2 = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames2(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export2 = (target, all) => {
  for (var name in all)
    __defProp2(target, name, { get: all[name], enumerable: true });
};
var __copyProps2 = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames2(from))
      if (!__hasOwnProp2.call(to, key) && key !== except)
        __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var require_color_name = __commonJS({
  "node_modules/color-name/index.js"(exports2, module2) {
    "use strict";
    module2.exports = {
      "aliceblue": [240, 248, 255],
      "antiquewhite": [250, 235, 215],
      "aqua": [0, 255, 255],
      "aquamarine": [127, 255, 212],
      "azure": [240, 255, 255],
      "beige": [245, 245, 220],
      "bisque": [255, 228, 196],
      "black": [0, 0, 0],
      "blanchedalmond": [255, 235, 205],
      "blue": [0, 0, 255],
      "blueviolet": [138, 43, 226],
      "brown": [165, 42, 42],
      "burlywood": [222, 184, 135],
      "cadetblue": [95, 158, 160],
      "chartreuse": [127, 255, 0],
      "chocolate": [210, 105, 30],
      "coral": [255, 127, 80],
      "cornflowerblue": [100, 149, 237],
      "cornsilk": [255, 248, 220],
      "crimson": [220, 20, 60],
      "cyan": [0, 255, 255],
      "darkblue": [0, 0, 139],
      "darkcyan": [0, 139, 139],
      "darkgoldenrod": [184, 134, 11],
      "darkgray": [169, 169, 169],
      "darkgreen": [0, 100, 0],
      "darkgrey": [169, 169, 169],
      "darkkhaki": [189, 183, 107],
      "darkmagenta": [139, 0, 139],
      "darkolivegreen": [85, 107, 47],
      "darkorange": [255, 140, 0],
      "darkorchid": [153, 50, 204],
      "darkred": [139, 0, 0],
      "darksalmon": [233, 150, 122],
      "darkseagreen": [143, 188, 143],
      "darkslateblue": [72, 61, 139],
      "darkslategray": [47, 79, 79],
      "darkslategrey": [47, 79, 79],
      "darkturquoise": [0, 206, 209],
      "darkviolet": [148, 0, 211],
      "deeppink": [255, 20, 147],
      "deepskyblue": [0, 191, 255],
      "dimgray": [105, 105, 105],
      "dimgrey": [105, 105, 105],
      "dodgerblue": [30, 144, 255],
      "firebrick": [178, 34, 34],
      "floralwhite": [255, 250, 240],
      "forestgreen": [34, 139, 34],
      "fuchsia": [255, 0, 255],
      "gainsboro": [220, 220, 220],
      "ghostwhite": [248, 248, 255],
      "gold": [255, 215, 0],
      "goldenrod": [218, 165, 32],
      "gray": [128, 128, 128],
      "green": [0, 128, 0],
      "greenyellow": [173, 255, 47],
      "grey": [128, 128, 128],
      "honeydew": [240, 255, 240],
      "hotpink": [255, 105, 180],
      "indianred": [205, 92, 92],
      "indigo": [75, 0, 130],
      "ivory": [255, 255, 240],
      "khaki": [240, 230, 140],
      "lavender": [230, 230, 250],
      "lavenderblush": [255, 240, 245],
      "lawngreen": [124, 252, 0],
      "lemonchiffon": [255, 250, 205],
      "lightblue": [173, 216, 230],
      "lightcoral": [240, 128, 128],
      "lightcyan": [224, 255, 255],
      "lightgoldenrodyellow": [250, 250, 210],
      "lightgray": [211, 211, 211],
      "lightgreen": [144, 238, 144],
      "lightgrey": [211, 211, 211],
      "lightpink": [255, 182, 193],
      "lightsalmon": [255, 160, 122],
      "lightseagreen": [32, 178, 170],
      "lightskyblue": [135, 206, 250],
      "lightslategray": [119, 136, 153],
      "lightslategrey": [119, 136, 153],
      "lightsteelblue": [176, 196, 222],
      "lightyellow": [255, 255, 224],
      "lime": [0, 255, 0],
      "limegreen": [50, 205, 50],
      "linen": [250, 240, 230],
      "magenta": [255, 0, 255],
      "maroon": [128, 0, 0],
      "mediumaquamarine": [102, 205, 170],
      "mediumblue": [0, 0, 205],
      "mediumorchid": [186, 85, 211],
      "mediumpurple": [147, 112, 219],
      "mediumseagreen": [60, 179, 113],
      "mediumslateblue": [123, 104, 238],
      "mediumspringgreen": [0, 250, 154],
      "mediumturquoise": [72, 209, 204],
      "mediumvioletred": [199, 21, 133],
      "midnightblue": [25, 25, 112],
      "mintcream": [245, 255, 250],
      "mistyrose": [255, 228, 225],
      "moccasin": [255, 228, 181],
      "navajowhite": [255, 222, 173],
      "navy": [0, 0, 128],
      "oldlace": [253, 245, 230],
      "olive": [128, 128, 0],
      "olivedrab": [107, 142, 35],
      "orange": [255, 165, 0],
      "orangered": [255, 69, 0],
      "orchid": [218, 112, 214],
      "palegoldenrod": [238, 232, 170],
      "palegreen": [152, 251, 152],
      "paleturquoise": [175, 238, 238],
      "palevioletred": [219, 112, 147],
      "papayawhip": [255, 239, 213],
      "peachpuff": [255, 218, 185],
      "peru": [205, 133, 63],
      "pink": [255, 192, 203],
      "plum": [221, 160, 221],
      "powderblue": [176, 224, 230],
      "purple": [128, 0, 128],
      "rebeccapurple": [102, 51, 153],
      "red": [255, 0, 0],
      "rosybrown": [188, 143, 143],
      "royalblue": [65, 105, 225],
      "saddlebrown": [139, 69, 19],
      "salmon": [250, 128, 114],
      "sandybrown": [244, 164, 96],
      "seagreen": [46, 139, 87],
      "seashell": [255, 245, 238],
      "sienna": [160, 82, 45],
      "silver": [192, 192, 192],
      "skyblue": [135, 206, 235],
      "slateblue": [106, 90, 205],
      "slategray": [112, 128, 144],
      "slategrey": [112, 128, 144],
      "snow": [255, 250, 250],
      "springgreen": [0, 255, 127],
      "steelblue": [70, 130, 180],
      "tan": [210, 180, 140],
      "teal": [0, 128, 128],
      "thistle": [216, 191, 216],
      "tomato": [255, 99, 71],
      "turquoise": [64, 224, 208],
      "violet": [238, 130, 238],
      "wheat": [245, 222, 179],
      "white": [255, 255, 255],
      "whitesmoke": [245, 245, 245],
      "yellow": [255, 255, 0],
      "yellowgreen": [154, 205, 50]
    };
  }
});
var require_conversions = __commonJS({
  "node_modules/color-convert/conversions.js"(exports2, module2) {
    var cssKeywords = require_color_name();
    var reverseKeywords = {};
    for (const key of Object.keys(cssKeywords)) {
      reverseKeywords[cssKeywords[key]] = key;
    }
    var convert = {
      rgb: { channels: 3, labels: "rgb" },
      hsl: { channels: 3, labels: "hsl" },
      hsv: { channels: 3, labels: "hsv" },
      hwb: { channels: 3, labels: "hwb" },
      cmyk: { channels: 4, labels: "cmyk" },
      xyz: { channels: 3, labels: "xyz" },
      lab: { channels: 3, labels: "lab" },
      lch: { channels: 3, labels: "lch" },
      hex: { channels: 1, labels: ["hex"] },
      keyword: { channels: 1, labels: ["keyword"] },
      ansi16: { channels: 1, labels: ["ansi16"] },
      ansi256: { channels: 1, labels: ["ansi256"] },
      hcg: { channels: 3, labels: ["h", "c", "g"] },
      apple: { channels: 3, labels: ["r16", "g16", "b16"] },
      gray: { channels: 1, labels: ["gray"] }
    };
    module2.exports = convert;
    for (const model of Object.keys(convert)) {
      if (!("channels" in convert[model])) {
        throw new Error("missing channels property: " + model);
      }
      if (!("labels" in convert[model])) {
        throw new Error("missing channel labels property: " + model);
      }
      if (convert[model].labels.length !== convert[model].channels) {
        throw new Error("channel and label counts mismatch: " + model);
      }
      const { channels, labels } = convert[model];
      delete convert[model].channels;
      delete convert[model].labels;
      Object.defineProperty(convert[model], "channels", { value: channels });
      Object.defineProperty(convert[model], "labels", { value: labels });
    }
    convert.rgb.hsl = function(rgb) {
      const r = rgb[0] / 255;
      const g = rgb[1] / 255;
      const b = rgb[2] / 255;
      const min = Math.min(r, g, b);
      const max = Math.max(r, g, b);
      const delta = max - min;
      let h;
      let s;
      if (max === min) {
        h = 0;
      } else if (r === max) {
        h = (g - b) / delta;
      } else if (g === max) {
        h = 2 + (b - r) / delta;
      } else if (b === max) {
        h = 4 + (r - g) / delta;
      }
      h = Math.min(h * 60, 360);
      if (h < 0) {
        h += 360;
      }
      const l = (min + max) / 2;
      if (max === min) {
        s = 0;
      } else if (l <= 0.5) {
        s = delta / (max + min);
      } else {
        s = delta / (2 - max - min);
      }
      return [h, s * 100, l * 100];
    };
    convert.rgb.hsv = function(rgb) {
      let rdif;
      let gdif;
      let bdif;
      let h;
      let s;
      const r = rgb[0] / 255;
      const g = rgb[1] / 255;
      const b = rgb[2] / 255;
      const v = Math.max(r, g, b);
      const diff = v - Math.min(r, g, b);
      const diffc = function(c) {
        return (v - c) / 6 / diff + 1 / 2;
      };
      if (diff === 0) {
        h = 0;
        s = 0;
      } else {
        s = diff / v;
        rdif = diffc(r);
        gdif = diffc(g);
        bdif = diffc(b);
        if (r === v) {
          h = bdif - gdif;
        } else if (g === v) {
          h = 1 / 3 + rdif - bdif;
        } else if (b === v) {
          h = 2 / 3 + gdif - rdif;
        }
        if (h < 0) {
          h += 1;
        } else if (h > 1) {
          h -= 1;
        }
      }
      return [
        h * 360,
        s * 100,
        v * 100
      ];
    };
    convert.rgb.hwb = function(rgb) {
      const r = rgb[0];
      const g = rgb[1];
      let b = rgb[2];
      const h = convert.rgb.hsl(rgb)[0];
      const w = 1 / 255 * Math.min(r, Math.min(g, b));
      b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
      return [h, w * 100, b * 100];
    };
    convert.rgb.cmyk = function(rgb) {
      const r = rgb[0] / 255;
      const g = rgb[1] / 255;
      const b = rgb[2] / 255;
      const k = Math.min(1 - r, 1 - g, 1 - b);
      const c = (1 - r - k) / (1 - k) || 0;
      const m = (1 - g - k) / (1 - k) || 0;
      const y = (1 - b - k) / (1 - k) || 0;
      return [c * 100, m * 100, y * 100, k * 100];
    };
    function comparativeDistance(x, y) {
      return (x[0] - y[0]) ** 2 + (x[1] - y[1]) ** 2 + (x[2] - y[2]) ** 2;
    }
    convert.rgb.keyword = function(rgb) {
      const reversed = reverseKeywords[rgb];
      if (reversed) {
        return reversed;
      }
      let currentClosestDistance = Infinity;
      let currentClosestKeyword;
      for (const keyword of Object.keys(cssKeywords)) {
        const value = cssKeywords[keyword];
        const distance = comparativeDistance(rgb, value);
        if (distance < currentClosestDistance) {
          currentClosestDistance = distance;
          currentClosestKeyword = keyword;
        }
      }
      return currentClosestKeyword;
    };
    convert.keyword.rgb = function(keyword) {
      return cssKeywords[keyword];
    };
    convert.rgb.xyz = function(rgb) {
      let r = rgb[0] / 255;
      let g = rgb[1] / 255;
      let b = rgb[2] / 255;
      r = r > 0.04045 ? ((r + 0.055) / 1.055) ** 2.4 : r / 12.92;
      g = g > 0.04045 ? ((g + 0.055) / 1.055) ** 2.4 : g / 12.92;
      b = b > 0.04045 ? ((b + 0.055) / 1.055) ** 2.4 : b / 12.92;
      const x = r * 0.4124 + g * 0.3576 + b * 0.1805;
      const y = r * 0.2126 + g * 0.7152 + b * 0.0722;
      const z3 = r * 0.0193 + g * 0.1192 + b * 0.9505;
      return [x * 100, y * 100, z3 * 100];
    };
    convert.rgb.lab = function(rgb) {
      const xyz = convert.rgb.xyz(rgb);
      let x = xyz[0];
      let y = xyz[1];
      let z3 = xyz[2];
      x /= 95.047;
      y /= 100;
      z3 /= 108.883;
      x = x > 8856e-6 ? x ** (1 / 3) : 7.787 * x + 16 / 116;
      y = y > 8856e-6 ? y ** (1 / 3) : 7.787 * y + 16 / 116;
      z3 = z3 > 8856e-6 ? z3 ** (1 / 3) : 7.787 * z3 + 16 / 116;
      const l = 116 * y - 16;
      const a = 500 * (x - y);
      const b = 200 * (y - z3);
      return [l, a, b];
    };
    convert.hsl.rgb = function(hsl) {
      const h = hsl[0] / 360;
      const s = hsl[1] / 100;
      const l = hsl[2] / 100;
      let t2;
      let t3;
      let val;
      if (s === 0) {
        val = l * 255;
        return [val, val, val];
      }
      if (l < 0.5) {
        t2 = l * (1 + s);
      } else {
        t2 = l + s - l * s;
      }
      const t1 = 2 * l - t2;
      const rgb = [0, 0, 0];
      for (let i = 0; i < 3; i++) {
        t3 = h + 1 / 3 * -(i - 1);
        if (t3 < 0) {
          t3++;
        }
        if (t3 > 1) {
          t3--;
        }
        if (6 * t3 < 1) {
          val = t1 + (t2 - t1) * 6 * t3;
        } else if (2 * t3 < 1) {
          val = t2;
        } else if (3 * t3 < 2) {
          val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
        } else {
          val = t1;
        }
        rgb[i] = val * 255;
      }
      return rgb;
    };
    convert.hsl.hsv = function(hsl) {
      const h = hsl[0];
      let s = hsl[1] / 100;
      let l = hsl[2] / 100;
      let smin = s;
      const lmin = Math.max(l, 0.01);
      l *= 2;
      s *= l <= 1 ? l : 2 - l;
      smin *= lmin <= 1 ? lmin : 2 - lmin;
      const v = (l + s) / 2;
      const sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
      return [h, sv * 100, v * 100];
    };
    convert.hsv.rgb = function(hsv) {
      const h = hsv[0] / 60;
      const s = hsv[1] / 100;
      let v = hsv[2] / 100;
      const hi = Math.floor(h) % 6;
      const f = h - Math.floor(h);
      const p = 255 * v * (1 - s);
      const q = 255 * v * (1 - s * f);
      const t = 255 * v * (1 - s * (1 - f));
      v *= 255;
      switch (hi) {
        case 0:
          return [v, t, p];
        case 1:
          return [q, v, p];
        case 2:
          return [p, v, t];
        case 3:
          return [p, q, v];
        case 4:
          return [t, p, v];
        case 5:
          return [v, p, q];
      }
    };
    convert.hsv.hsl = function(hsv) {
      const h = hsv[0];
      const s = hsv[1] / 100;
      const v = hsv[2] / 100;
      const vmin = Math.max(v, 0.01);
      let sl;
      let l;
      l = (2 - s) * v;
      const lmin = (2 - s) * vmin;
      sl = s * vmin;
      sl /= lmin <= 1 ? lmin : 2 - lmin;
      sl = sl || 0;
      l /= 2;
      return [h, sl * 100, l * 100];
    };
    convert.hwb.rgb = function(hwb) {
      const h = hwb[0] / 360;
      let wh = hwb[1] / 100;
      let bl = hwb[2] / 100;
      const ratio = wh + bl;
      let f;
      if (ratio > 1) {
        wh /= ratio;
        bl /= ratio;
      }
      const i = Math.floor(6 * h);
      const v = 1 - bl;
      f = 6 * h - i;
      if ((i & 1) !== 0) {
        f = 1 - f;
      }
      const n = wh + f * (v - wh);
      let r;
      let g;
      let b;
      switch (i) {
        default:
        case 6:
        case 0:
          r = v;
          g = n;
          b = wh;
          break;
        case 1:
          r = n;
          g = v;
          b = wh;
          break;
        case 2:
          r = wh;
          g = v;
          b = n;
          break;
        case 3:
          r = wh;
          g = n;
          b = v;
          break;
        case 4:
          r = n;
          g = wh;
          b = v;
          break;
        case 5:
          r = v;
          g = wh;
          b = n;
          break;
      }
      return [r * 255, g * 255, b * 255];
    };
    convert.cmyk.rgb = function(cmyk) {
      const c = cmyk[0] / 100;
      const m = cmyk[1] / 100;
      const y = cmyk[2] / 100;
      const k = cmyk[3] / 100;
      const r = 1 - Math.min(1, c * (1 - k) + k);
      const g = 1 - Math.min(1, m * (1 - k) + k);
      const b = 1 - Math.min(1, y * (1 - k) + k);
      return [r * 255, g * 255, b * 255];
    };
    convert.xyz.rgb = function(xyz) {
      const x = xyz[0] / 100;
      const y = xyz[1] / 100;
      const z3 = xyz[2] / 100;
      let r;
      let g;
      let b;
      r = x * 3.2406 + y * -1.5372 + z3 * -0.4986;
      g = x * -0.9689 + y * 1.8758 + z3 * 0.0415;
      b = x * 0.0557 + y * -0.204 + z3 * 1.057;
      r = r > 31308e-7 ? 1.055 * r ** (1 / 2.4) - 0.055 : r * 12.92;
      g = g > 31308e-7 ? 1.055 * g ** (1 / 2.4) - 0.055 : g * 12.92;
      b = b > 31308e-7 ? 1.055 * b ** (1 / 2.4) - 0.055 : b * 12.92;
      r = Math.min(Math.max(0, r), 1);
      g = Math.min(Math.max(0, g), 1);
      b = Math.min(Math.max(0, b), 1);
      return [r * 255, g * 255, b * 255];
    };
    convert.xyz.lab = function(xyz) {
      let x = xyz[0];
      let y = xyz[1];
      let z3 = xyz[2];
      x /= 95.047;
      y /= 100;
      z3 /= 108.883;
      x = x > 8856e-6 ? x ** (1 / 3) : 7.787 * x + 16 / 116;
      y = y > 8856e-6 ? y ** (1 / 3) : 7.787 * y + 16 / 116;
      z3 = z3 > 8856e-6 ? z3 ** (1 / 3) : 7.787 * z3 + 16 / 116;
      const l = 116 * y - 16;
      const a = 500 * (x - y);
      const b = 200 * (y - z3);
      return [l, a, b];
    };
    convert.lab.xyz = function(lab) {
      const l = lab[0];
      const a = lab[1];
      const b = lab[2];
      let x;
      let y;
      let z3;
      y = (l + 16) / 116;
      x = a / 500 + y;
      z3 = y - b / 200;
      const y2 = y ** 3;
      const x2 = x ** 3;
      const z22 = z3 ** 3;
      y = y2 > 8856e-6 ? y2 : (y - 16 / 116) / 7.787;
      x = x2 > 8856e-6 ? x2 : (x - 16 / 116) / 7.787;
      z3 = z22 > 8856e-6 ? z22 : (z3 - 16 / 116) / 7.787;
      x *= 95.047;
      y *= 100;
      z3 *= 108.883;
      return [x, y, z3];
    };
    convert.lab.lch = function(lab) {
      const l = lab[0];
      const a = lab[1];
      const b = lab[2];
      let h;
      const hr = Math.atan2(b, a);
      h = hr * 360 / 2 / Math.PI;
      if (h < 0) {
        h += 360;
      }
      const c = Math.sqrt(a * a + b * b);
      return [l, c, h];
    };
    convert.lch.lab = function(lch) {
      const l = lch[0];
      const c = lch[1];
      const h = lch[2];
      const hr = h / 360 * 2 * Math.PI;
      const a = c * Math.cos(hr);
      const b = c * Math.sin(hr);
      return [l, a, b];
    };
    convert.rgb.ansi16 = function(args, saturation = null) {
      const [r, g, b] = args;
      let value = saturation === null ? convert.rgb.hsv(args)[2] : saturation;
      value = Math.round(value / 50);
      if (value === 0) {
        return 30;
      }
      let ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
      if (value === 2) {
        ansi += 60;
      }
      return ansi;
    };
    convert.hsv.ansi16 = function(args) {
      return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
    };
    convert.rgb.ansi256 = function(args) {
      const r = args[0];
      const g = args[1];
      const b = args[2];
      if (r === g && g === b) {
        if (r < 8) {
          return 16;
        }
        if (r > 248) {
          return 231;
        }
        return Math.round((r - 8) / 247 * 24) + 232;
      }
      const ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
      return ansi;
    };
    convert.ansi16.rgb = function(args) {
      let color = args % 10;
      if (color === 0 || color === 7) {
        if (args > 50) {
          color += 3.5;
        }
        color = color / 10.5 * 255;
        return [color, color, color];
      }
      const mult = (~~(args > 50) + 1) * 0.5;
      const r = (color & 1) * mult * 255;
      const g = (color >> 1 & 1) * mult * 255;
      const b = (color >> 2 & 1) * mult * 255;
      return [r, g, b];
    };
    convert.ansi256.rgb = function(args) {
      if (args >= 232) {
        const c = (args - 232) * 10 + 8;
        return [c, c, c];
      }
      args -= 16;
      let rem;
      const r = Math.floor(args / 36) / 5 * 255;
      const g = Math.floor((rem = args % 36) / 6) / 5 * 255;
      const b = rem % 6 / 5 * 255;
      return [r, g, b];
    };
    convert.rgb.hex = function(args) {
      const integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
      const string = integer.toString(16).toUpperCase();
      return "000000".substring(string.length) + string;
    };
    convert.hex.rgb = function(args) {
      const match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
      if (!match) {
        return [0, 0, 0];
      }
      let colorString = match[0];
      if (match[0].length === 3) {
        colorString = colorString.split("").map((char) => {
          return char + char;
        }).join("");
      }
      const integer = parseInt(colorString, 16);
      const r = integer >> 16 & 255;
      const g = integer >> 8 & 255;
      const b = integer & 255;
      return [r, g, b];
    };
    convert.rgb.hcg = function(rgb) {
      const r = rgb[0] / 255;
      const g = rgb[1] / 255;
      const b = rgb[2] / 255;
      const max = Math.max(Math.max(r, g), b);
      const min = Math.min(Math.min(r, g), b);
      const chroma = max - min;
      let grayscale;
      let hue;
      if (chroma < 1) {
        grayscale = min / (1 - chroma);
      } else {
        grayscale = 0;
      }
      if (chroma <= 0) {
        hue = 0;
      } else if (max === r) {
        hue = (g - b) / chroma % 6;
      } else if (max === g) {
        hue = 2 + (b - r) / chroma;
      } else {
        hue = 4 + (r - g) / chroma;
      }
      hue /= 6;
      hue %= 1;
      return [hue * 360, chroma * 100, grayscale * 100];
    };
    convert.hsl.hcg = function(hsl) {
      const s = hsl[1] / 100;
      const l = hsl[2] / 100;
      const c = l < 0.5 ? 2 * s * l : 2 * s * (1 - l);
      let f = 0;
      if (c < 1) {
        f = (l - 0.5 * c) / (1 - c);
      }
      return [hsl[0], c * 100, f * 100];
    };
    convert.hsv.hcg = function(hsv) {
      const s = hsv[1] / 100;
      const v = hsv[2] / 100;
      const c = s * v;
      let f = 0;
      if (c < 1) {
        f = (v - c) / (1 - c);
      }
      return [hsv[0], c * 100, f * 100];
    };
    convert.hcg.rgb = function(hcg) {
      const h = hcg[0] / 360;
      const c = hcg[1] / 100;
      const g = hcg[2] / 100;
      if (c === 0) {
        return [g * 255, g * 255, g * 255];
      }
      const pure = [0, 0, 0];
      const hi = h % 1 * 6;
      const v = hi % 1;
      const w = 1 - v;
      let mg = 0;
      switch (Math.floor(hi)) {
        case 0:
          pure[0] = 1;
          pure[1] = v;
          pure[2] = 0;
          break;
        case 1:
          pure[0] = w;
          pure[1] = 1;
          pure[2] = 0;
          break;
        case 2:
          pure[0] = 0;
          pure[1] = 1;
          pure[2] = v;
          break;
        case 3:
          pure[0] = 0;
          pure[1] = w;
          pure[2] = 1;
          break;
        case 4:
          pure[0] = v;
          pure[1] = 0;
          pure[2] = 1;
          break;
        default:
          pure[0] = 1;
          pure[1] = 0;
          pure[2] = w;
      }
      mg = (1 - c) * g;
      return [
        (c * pure[0] + mg) * 255,
        (c * pure[1] + mg) * 255,
        (c * pure[2] + mg) * 255
      ];
    };
    convert.hcg.hsv = function(hcg) {
      const c = hcg[1] / 100;
      const g = hcg[2] / 100;
      const v = c + g * (1 - c);
      let f = 0;
      if (v > 0) {
        f = c / v;
      }
      return [hcg[0], f * 100, v * 100];
    };
    convert.hcg.hsl = function(hcg) {
      const c = hcg[1] / 100;
      const g = hcg[2] / 100;
      const l = g * (1 - c) + 0.5 * c;
      let s = 0;
      if (l > 0 && l < 0.5) {
        s = c / (2 * l);
      } else if (l >= 0.5 && l < 1) {
        s = c / (2 * (1 - l));
      }
      return [hcg[0], s * 100, l * 100];
    };
    convert.hcg.hwb = function(hcg) {
      const c = hcg[1] / 100;
      const g = hcg[2] / 100;
      const v = c + g * (1 - c);
      return [hcg[0], (v - c) * 100, (1 - v) * 100];
    };
    convert.hwb.hcg = function(hwb) {
      const w = hwb[1] / 100;
      const b = hwb[2] / 100;
      const v = 1 - b;
      const c = v - w;
      let g = 0;
      if (c < 1) {
        g = (v - c) / (1 - c);
      }
      return [hwb[0], c * 100, g * 100];
    };
    convert.apple.rgb = function(apple) {
      return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
    };
    convert.rgb.apple = function(rgb) {
      return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
    };
    convert.gray.rgb = function(args) {
      return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
    };
    convert.gray.hsl = function(args) {
      return [0, 0, args[0]];
    };
    convert.gray.hsv = convert.gray.hsl;
    convert.gray.hwb = function(gray) {
      return [0, 100, gray[0]];
    };
    convert.gray.cmyk = function(gray) {
      return [0, 0, 0, gray[0]];
    };
    convert.gray.lab = function(gray) {
      return [gray[0], 0, 0];
    };
    convert.gray.hex = function(gray) {
      const val = Math.round(gray[0] / 100 * 255) & 255;
      const integer = (val << 16) + (val << 8) + val;
      const string = integer.toString(16).toUpperCase();
      return "000000".substring(string.length) + string;
    };
    convert.rgb.gray = function(rgb) {
      const val = (rgb[0] + rgb[1] + rgb[2]) / 3;
      return [val / 255 * 100];
    };
  }
});
var require_route = __commonJS({
  "node_modules/color-convert/route.js"(exports2, module2) {
    var conversions = require_conversions();
    function buildGraph() {
      const graph = {};
      const models = Object.keys(conversions);
      for (let len = models.length, i = 0; i < len; i++) {
        graph[models[i]] = {
          // http://jsperf.com/1-vs-infinity
          // micro-opt, but this is simple.
          distance: -1,
          parent: null
        };
      }
      return graph;
    }
    function deriveBFS(fromModel) {
      const graph = buildGraph();
      const queue = [fromModel];
      graph[fromModel].distance = 0;
      while (queue.length) {
        const current = queue.pop();
        const adjacents = Object.keys(conversions[current]);
        for (let len = adjacents.length, i = 0; i < len; i++) {
          const adjacent = adjacents[i];
          const node = graph[adjacent];
          if (node.distance === -1) {
            node.distance = graph[current].distance + 1;
            node.parent = current;
            queue.unshift(adjacent);
          }
        }
      }
      return graph;
    }
    function link(from, to) {
      return function(args) {
        return to(from(args));
      };
    }
    function wrapConversion(toModel, graph) {
      const path = [graph[toModel].parent, toModel];
      let fn = conversions[graph[toModel].parent][toModel];
      let cur = graph[toModel].parent;
      while (graph[cur].parent) {
        path.unshift(graph[cur].parent);
        fn = link(conversions[graph[cur].parent][cur], fn);
        cur = graph[cur].parent;
      }
      fn.conversion = path;
      return fn;
    }
    module2.exports = function(fromModel) {
      const graph = deriveBFS(fromModel);
      const conversion = {};
      const models = Object.keys(graph);
      for (let len = models.length, i = 0; i < len; i++) {
        const toModel = models[i];
        const node = graph[toModel];
        if (node.parent === null) {
          continue;
        }
        conversion[toModel] = wrapConversion(toModel, graph);
      }
      return conversion;
    };
  }
});
var require_color_convert = __commonJS({
  "node_modules/color-convert/index.js"(exports2, module2) {
    var conversions = require_conversions();
    var route = require_route();
    var convert = {};
    var models = Object.keys(conversions);
    function wrapRaw(fn) {
      const wrappedFn = function(...args) {
        const arg0 = args[0];
        if (arg0 === void 0 || arg0 === null) {
          return arg0;
        }
        if (arg0.length > 1) {
          args = arg0;
        }
        return fn(args);
      };
      if ("conversion" in fn) {
        wrappedFn.conversion = fn.conversion;
      }
      return wrappedFn;
    }
    function wrapRounded(fn) {
      const wrappedFn = function(...args) {
        const arg0 = args[0];
        if (arg0 === void 0 || arg0 === null) {
          return arg0;
        }
        if (arg0.length > 1) {
          args = arg0;
        }
        const result = fn(args);
        if (typeof result === "object") {
          for (let len = result.length, i = 0; i < len; i++) {
            result[i] = Math.round(result[i]);
          }
        }
        return result;
      };
      if ("conversion" in fn) {
        wrappedFn.conversion = fn.conversion;
      }
      return wrappedFn;
    }
    models.forEach((fromModel) => {
      convert[fromModel] = {};
      Object.defineProperty(convert[fromModel], "channels", { value: conversions[fromModel].channels });
      Object.defineProperty(convert[fromModel], "labels", { value: conversions[fromModel].labels });
      const routes = route(fromModel);
      const routeModels = Object.keys(routes);
      routeModels.forEach((toModel) => {
        const fn = routes[toModel];
        convert[fromModel][toModel] = wrapRounded(fn);
        convert[fromModel][toModel].raw = wrapRaw(fn);
      });
    });
    module2.exports = convert;
  }
});
var require_ansi_styles = __commonJS({
  "node_modules/ansi-styles/index.js"(exports2, module2) {
    "use strict";
    var wrapAnsi16 = (fn, offset) => (...args) => {
      const code = fn(...args);
      return `\x1B[${code + offset}m`;
    };
    var wrapAnsi256 = (fn, offset) => (...args) => {
      const code = fn(...args);
      return `\x1B[${38 + offset};5;${code}m`;
    };
    var wrapAnsi16m = (fn, offset) => (...args) => {
      const rgb = fn(...args);
      return `\x1B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
    };
    var ansi2ansi = (n) => n;
    var rgb2rgb = (r, g, b) => [r, g, b];
    var setLazyProperty = (object, property, get) => {
      Object.defineProperty(object, property, {
        get: () => {
          const value = get();
          Object.defineProperty(object, property, {
            value,
            enumerable: true,
            configurable: true
          });
          return value;
        },
        enumerable: true,
        configurable: true
      });
    };
    var colorConvert;
    var makeDynamicStyles = (wrap, targetSpace, identity, isBackground) => {
      if (colorConvert === void 0) {
        colorConvert = require_color_convert();
      }
      const offset = isBackground ? 10 : 0;
      const styles = {};
      for (const [sourceSpace, suite] of Object.entries(colorConvert)) {
        const name = sourceSpace === "ansi16" ? "ansi" : sourceSpace;
        if (sourceSpace === targetSpace) {
          styles[name] = wrap(identity, offset);
        } else if (typeof suite === "object") {
          styles[name] = wrap(suite[targetSpace], offset);
        }
      }
      return styles;
    };
    function assembleStyles() {
      const codes = /* @__PURE__ */ new Map();
      const styles = {
        modifier: {
          reset: [0, 0],
          // 21 isn't widely supported and 22 does the same thing
          bold: [1, 22],
          dim: [2, 22],
          italic: [3, 23],
          underline: [4, 24],
          inverse: [7, 27],
          hidden: [8, 28],
          strikethrough: [9, 29]
        },
        color: {
          black: [30, 39],
          red: [31, 39],
          green: [32, 39],
          yellow: [33, 39],
          blue: [34, 39],
          magenta: [35, 39],
          cyan: [36, 39],
          white: [37, 39],
          // Bright color
          blackBright: [90, 39],
          redBright: [91, 39],
          greenBright: [92, 39],
          yellowBright: [93, 39],
          blueBright: [94, 39],
          magentaBright: [95, 39],
          cyanBright: [96, 39],
          whiteBright: [97, 39]
        },
        bgColor: {
          bgBlack: [40, 49],
          bgRed: [41, 49],
          bgGreen: [42, 49],
          bgYellow: [43, 49],
          bgBlue: [44, 49],
          bgMagenta: [45, 49],
          bgCyan: [46, 49],
          bgWhite: [47, 49],
          // Bright color
          bgBlackBright: [100, 49],
          bgRedBright: [101, 49],
          bgGreenBright: [102, 49],
          bgYellowBright: [103, 49],
          bgBlueBright: [104, 49],
          bgMagentaBright: [105, 49],
          bgCyanBright: [106, 49],
          bgWhiteBright: [107, 49]
        }
      };
      styles.color.gray = styles.color.blackBright;
      styles.bgColor.bgGray = styles.bgColor.bgBlackBright;
      styles.color.grey = styles.color.blackBright;
      styles.bgColor.bgGrey = styles.bgColor.bgBlackBright;
      for (const [groupName, group] of Object.entries(styles)) {
        for (const [styleName, style] of Object.entries(group)) {
          styles[styleName] = {
            open: `\x1B[${style[0]}m`,
            close: `\x1B[${style[1]}m`
          };
          group[styleName] = styles[styleName];
          codes.set(style[0], style[1]);
        }
        Object.defineProperty(styles, groupName, {
          value: group,
          enumerable: false
        });
      }
      Object.defineProperty(styles, "codes", {
        value: codes,
        enumerable: false
      });
      styles.color.close = "\x1B[39m";
      styles.bgColor.close = "\x1B[49m";
      setLazyProperty(styles.color, "ansi", () => makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, false));
      setLazyProperty(styles.color, "ansi256", () => makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, false));
      setLazyProperty(styles.color, "ansi16m", () => makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, false));
      setLazyProperty(styles.bgColor, "ansi", () => makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, true));
      setLazyProperty(styles.bgColor, "ansi256", () => makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, true));
      setLazyProperty(styles.bgColor, "ansi16m", () => makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, true));
      return styles;
    }
    Object.defineProperty(module2, "exports", {
      enumerable: true,
      get: assembleStyles
    });
  }
});
var require_has_flag = __commonJS({
  "node_modules/has-flag/index.js"(exports2, module2) {
    "use strict";
    module2.exports = (flag, argv = process.argv) => {
      const prefix = flag.startsWith("-") ? "" : flag.length === 1 ? "-" : "--";
      const position = argv.indexOf(prefix + flag);
      const terminatorPosition = argv.indexOf("--");
      return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
    };
  }
});
var require_supports_color = __commonJS({
  "node_modules/supports-color/index.js"(exports2, module2) {
    "use strict";
    var os = require("os");
    var tty = require("tty");
    var hasFlag = require_has_flag();
    var { env } = process;
    var forceColor;
    if (hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false") || hasFlag("color=never")) {
      forceColor = 0;
    } else if (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) {
      forceColor = 1;
    }
    if ("FORCE_COLOR" in env) {
      if (env.FORCE_COLOR === "true") {
        forceColor = 1;
      } else if (env.FORCE_COLOR === "false") {
        forceColor = 0;
      } else {
        forceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);
      }
    }
    function translateLevel(level) {
      if (level === 0) {
        return false;
      }
      return {
        level,
        hasBasic: true,
        has256: level >= 2,
        has16m: level >= 3
      };
    }
    function supportsColor(haveStream, streamIsTTY) {
      if (forceColor === 0) {
        return 0;
      }
      if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) {
        return 3;
      }
      if (hasFlag("color=256")) {
        return 2;
      }
      if (haveStream && !streamIsTTY && forceColor === void 0) {
        return 0;
      }
      const min = forceColor || 0;
      if (env.TERM === "dumb") {
        return min;
      }
      if (process.platform === "win32") {
        const osRelease = os.release().split(".");
        if (Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
          return Number(osRelease[2]) >= 14931 ? 3 : 2;
        }
        return 1;
      }
      if ("CI" in env) {
        if (["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI", "GITHUB_ACTIONS", "BUILDKITE"].some((sign) => sign in env) || env.CI_NAME === "codeship") {
          return 1;
        }
        return min;
      }
      if ("TEAMCITY_VERSION" in env) {
        return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
      }
      if (env.COLORTERM === "truecolor") {
        return 3;
      }
      if ("TERM_PROGRAM" in env) {
        const version = parseInt((env.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
        switch (env.TERM_PROGRAM) {
          case "iTerm.app":
            return version >= 3 ? 3 : 2;
          case "Apple_Terminal":
            return 2;
        }
      }
      if (/-256(color)?$/i.test(env.TERM)) {
        return 2;
      }
      if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
        return 1;
      }
      if ("COLORTERM" in env) {
        return 1;
      }
      return min;
    }
    function getSupportLevel(stream) {
      const level = supportsColor(stream, stream && stream.isTTY);
      return translateLevel(level);
    }
    module2.exports = {
      supportsColor: getSupportLevel,
      stdout: translateLevel(supportsColor(true, tty.isatty(1))),
      stderr: translateLevel(supportsColor(true, tty.isatty(2)))
    };
  }
});
var require_util = __commonJS({
  "node_modules/chalk/source/util.js"(exports2, module2) {
    "use strict";
    var stringReplaceAll = (string, substring, replacer) => {
      let index = string.indexOf(substring);
      if (index === -1) {
        return string;
      }
      const substringLength = substring.length;
      let endIndex = 0;
      let returnValue = "";
      do {
        returnValue += string.substr(endIndex, index - endIndex) + substring + replacer;
        endIndex = index + substringLength;
        index = string.indexOf(substring, endIndex);
      } while (index !== -1);
      returnValue += string.substr(endIndex);
      return returnValue;
    };
    var stringEncaseCRLFWithFirstIndex = (string, prefix, postfix, index) => {
      let endIndex = 0;
      let returnValue = "";
      do {
        const gotCR = string[index - 1] === "\r";
        returnValue += string.substr(endIndex, (gotCR ? index - 1 : index) - endIndex) + prefix + (gotCR ? "\r\n" : "\n") + postfix;
        endIndex = index + 1;
        index = string.indexOf("\n", endIndex);
      } while (index !== -1);
      returnValue += string.substr(endIndex);
      return returnValue;
    };
    module2.exports = {
      stringReplaceAll,
      stringEncaseCRLFWithFirstIndex
    };
  }
});
var require_templates = __commonJS({
  "node_modules/chalk/source/templates.js"(exports2, module2) {
    "use strict";
    var TEMPLATE_REGEX = /(?:\\(u(?:[a-f\d]{4}|\{[a-f\d]{1,6}\})|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
    var STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
    var STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
    var ESCAPE_REGEX = /\\(u(?:[a-f\d]{4}|{[a-f\d]{1,6}})|x[a-f\d]{2}|.)|([^\\])/gi;
    var ESCAPES = /* @__PURE__ */ new Map([
      ["n", "\n"],
      ["r", "\r"],
      ["t", "	"],
      ["b", "\b"],
      ["f", "\f"],
      ["v", "\v"],
      ["0", "\0"],
      ["\\", "\\"],
      ["e", "\x1B"],
      ["a", "\x07"]
    ]);
    function unescape(c) {
      const u = c[0] === "u";
      const bracket = c[1] === "{";
      if (u && !bracket && c.length === 5 || c[0] === "x" && c.length === 3) {
        return String.fromCharCode(parseInt(c.slice(1), 16));
      }
      if (u && bracket) {
        return String.fromCodePoint(parseInt(c.slice(2, -1), 16));
      }
      return ESCAPES.get(c) || c;
    }
    function parseArguments(name, arguments_) {
      const results = [];
      const chunks = arguments_.trim().split(/\s*,\s*/g);
      let matches;
      for (const chunk of chunks) {
        const number = Number(chunk);
        if (!Number.isNaN(number)) {
          results.push(number);
        } else if (matches = chunk.match(STRING_REGEX)) {
          results.push(matches[2].replace(ESCAPE_REGEX, (m, escape, character) => escape ? unescape(escape) : character));
        } else {
          throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);
        }
      }
      return results;
    }
    function parseStyle(style) {
      STYLE_REGEX.lastIndex = 0;
      const results = [];
      let matches;
      while ((matches = STYLE_REGEX.exec(style)) !== null) {
        const name = matches[1];
        if (matches[2]) {
          const args = parseArguments(name, matches[2]);
          results.push([name].concat(args));
        } else {
          results.push([name]);
        }
      }
      return results;
    }
    function buildStyle(chalk2, styles) {
      const enabled = {};
      for (const layer of styles) {
        for (const style of layer.styles) {
          enabled[style[0]] = layer.inverse ? null : style.slice(1);
        }
      }
      let current = chalk2;
      for (const [styleName, styles2] of Object.entries(enabled)) {
        if (!Array.isArray(styles2)) {
          continue;
        }
        if (!(styleName in current)) {
          throw new Error(`Unknown Chalk style: ${styleName}`);
        }
        current = styles2.length > 0 ? current[styleName](...styles2) : current[styleName];
      }
      return current;
    }
    module2.exports = (chalk2, temporary) => {
      const styles = [];
      const chunks = [];
      let chunk = [];
      temporary.replace(TEMPLATE_REGEX, (m, escapeCharacter, inverse, style, close, character) => {
        if (escapeCharacter) {
          chunk.push(unescape(escapeCharacter));
        } else if (style) {
          const string = chunk.join("");
          chunk = [];
          chunks.push(styles.length === 0 ? string : buildStyle(chalk2, styles)(string));
          styles.push({ inverse, styles: parseStyle(style) });
        } else if (close) {
          if (styles.length === 0) {
            throw new Error("Found extraneous } in Chalk template literal");
          }
          chunks.push(buildStyle(chalk2, styles)(chunk.join("")));
          chunk = [];
          styles.pop();
        } else {
          chunk.push(character);
        }
      });
      chunks.push(chunk.join(""));
      if (styles.length > 0) {
        const errMessage = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? "" : "s"} (\`}\`)`;
        throw new Error(errMessage);
      }
      return chunks.join("");
    };
  }
});
var require_source = __commonJS({
  "node_modules/chalk/source/index.js"(exports2, module2) {
    "use strict";
    var ansiStyles = require_ansi_styles();
    var { stdout: stdoutColor, stderr: stderrColor } = require_supports_color();
    var {
      stringReplaceAll,
      stringEncaseCRLFWithFirstIndex
    } = require_util();
    var { isArray } = Array;
    var levelMapping = [
      "ansi",
      "ansi",
      "ansi256",
      "ansi16m"
    ];
    var styles = /* @__PURE__ */ Object.create(null);
    var applyOptions = (object, options = {}) => {
      if (options.level && !(Number.isInteger(options.level) && options.level >= 0 && options.level <= 3)) {
        throw new Error("The `level` option should be an integer from 0 to 3");
      }
      const colorLevel = stdoutColor ? stdoutColor.level : 0;
      object.level = options.level === void 0 ? colorLevel : options.level;
    };
    var ChalkClass = class {
      constructor(options) {
        return chalkFactory(options);
      }
    };
    var chalkFactory = (options) => {
      const chalk3 = {};
      applyOptions(chalk3, options);
      chalk3.template = (...arguments_) => chalkTag(chalk3.template, ...arguments_);
      Object.setPrototypeOf(chalk3, Chalk.prototype);
      Object.setPrototypeOf(chalk3.template, chalk3);
      chalk3.template.constructor = () => {
        throw new Error("`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.");
      };
      chalk3.template.Instance = ChalkClass;
      return chalk3.template;
    };
    function Chalk(options) {
      return chalkFactory(options);
    }
    for (const [styleName, style] of Object.entries(ansiStyles)) {
      styles[styleName] = {
        get() {
          const builder = createBuilder(this, createStyler(style.open, style.close, this._styler), this._isEmpty);
          Object.defineProperty(this, styleName, { value: builder });
          return builder;
        }
      };
    }
    styles.visible = {
      get() {
        const builder = createBuilder(this, this._styler, true);
        Object.defineProperty(this, "visible", { value: builder });
        return builder;
      }
    };
    var usedModels = ["rgb", "hex", "keyword", "hsl", "hsv", "hwb", "ansi", "ansi256"];
    for (const model of usedModels) {
      styles[model] = {
        get() {
          const { level } = this;
          return function(...arguments_) {
            const styler = createStyler(ansiStyles.color[levelMapping[level]][model](...arguments_), ansiStyles.color.close, this._styler);
            return createBuilder(this, styler, this._isEmpty);
          };
        }
      };
    }
    for (const model of usedModels) {
      const bgModel = "bg" + model[0].toUpperCase() + model.slice(1);
      styles[bgModel] = {
        get() {
          const { level } = this;
          return function(...arguments_) {
            const styler = createStyler(ansiStyles.bgColor[levelMapping[level]][model](...arguments_), ansiStyles.bgColor.close, this._styler);
            return createBuilder(this, styler, this._isEmpty);
          };
        }
      };
    }
    var proto = Object.defineProperties(() => {
    }, {
      ...styles,
      level: {
        enumerable: true,
        get() {
          return this._generator.level;
        },
        set(level) {
          this._generator.level = level;
        }
      }
    });
    var createStyler = (open, close, parent) => {
      let openAll;
      let closeAll;
      if (parent === void 0) {
        openAll = open;
        closeAll = close;
      } else {
        openAll = parent.openAll + open;
        closeAll = close + parent.closeAll;
      }
      return {
        open,
        close,
        openAll,
        closeAll,
        parent
      };
    };
    var createBuilder = (self2, _styler, _isEmpty) => {
      const builder = (...arguments_) => {
        if (isArray(arguments_[0]) && isArray(arguments_[0].raw)) {
          return applyStyle(builder, chalkTag(builder, ...arguments_));
        }
        return applyStyle(builder, arguments_.length === 1 ? "" + arguments_[0] : arguments_.join(" "));
      };
      Object.setPrototypeOf(builder, proto);
      builder._generator = self2;
      builder._styler = _styler;
      builder._isEmpty = _isEmpty;
      return builder;
    };
    var applyStyle = (self2, string) => {
      if (self2.level <= 0 || !string) {
        return self2._isEmpty ? "" : string;
      }
      let styler = self2._styler;
      if (styler === void 0) {
        return string;
      }
      const { openAll, closeAll } = styler;
      if (string.indexOf("\x1B") !== -1) {
        while (styler !== void 0) {
          string = stringReplaceAll(string, styler.close, styler.open);
          styler = styler.parent;
        }
      }
      const lfIndex = string.indexOf("\n");
      if (lfIndex !== -1) {
        string = stringEncaseCRLFWithFirstIndex(string, closeAll, openAll, lfIndex);
      }
      return openAll + string + closeAll;
    };
    var template;
    var chalkTag = (chalk3, ...strings) => {
      const [firstString] = strings;
      if (!isArray(firstString) || !isArray(firstString.raw)) {
        return strings.join(" ");
      }
      const arguments_ = strings.slice(1);
      const parts = [firstString.raw[0]];
      for (let i = 1; i < firstString.length; i++) {
        parts.push(
          String(arguments_[i - 1]).replace(/[{}\\]/g, "\\$&"),
          String(firstString.raw[i])
        );
      }
      if (template === void 0) {
        template = require_templates();
      }
      return template(chalk3, parts.join(""));
    };
    Object.defineProperties(Chalk.prototype, styles);
    var chalk2 = Chalk();
    chalk2.supportsColor = stdoutColor;
    chalk2.stderr = Chalk({ level: stderrColor ? stderrColor.level : 0 });
    chalk2.stderr.supportsColor = stderrColor;
    module2.exports = chalk2;
  }
});
var require_lodash = __commonJS({
  "node_modules/lodash/lodash.js"(exports2, module2) {
    (function() {
      var undefined2;
      var VERSION = "4.17.21";
      var LARGE_ARRAY_SIZE = 200;
      var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT = "Expected a function", INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var MAX_MEMOIZE_SIZE = 500;
      var PLACEHOLDER = "__lodash_placeholder__";
      var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
      var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
      var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
      var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
      var HOT_COUNT = 800, HOT_SPAN = 16;
      var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
      var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 17976931348623157e292, NAN = 0 / 0;
      var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
      var wrapFlags = [
        ["ary", WRAP_ARY_FLAG],
        ["bind", WRAP_BIND_FLAG],
        ["bindKey", WRAP_BIND_KEY_FLAG],
        ["curry", WRAP_CURRY_FLAG],
        ["curryRight", WRAP_CURRY_RIGHT_FLAG],
        ["flip", WRAP_FLIP_FLAG],
        ["partial", WRAP_PARTIAL_FLAG],
        ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
        ["rearg", WRAP_REARG_FLAG]
      ];
      var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", domExcTag = "[object DOMException]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", promiseTag = "[object Promise]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]", weakSetTag = "[object WeakSet]";
      var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
      var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
      var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
      var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
      var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
      var reTrimStart = /^\s+/;
      var reWhitespace = /\s/;
      var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
      var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
      var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
      var reEscapeChar = /\\(\\)?/g;
      var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
      var reFlags = /\w*$/;
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
      var reIsBinary = /^0b[01]+$/i;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var reIsOctal = /^0o[0-7]+$/i;
      var reIsUint = /^(?:0|[1-9]\d*)$/;
      var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
      var reNoMatch = /($^)/;
      var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
      var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
      var rsApos = "['\u2019]", rsAstral = "[" + rsAstralRange + "]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
      var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
      var reApos = RegExp(rsApos, "g");
      var reComboMark = RegExp(rsCombo, "g");
      var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
      var reUnicodeWord = RegExp([
        rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
        rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
        rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
        rsUpper + "+" + rsOptContrUpper,
        rsOrdUpper,
        rsOrdLower,
        rsDigits,
        rsEmoji
      ].join("|"), "g");
      var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
      var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
      var contextProps = [
        "Array",
        "Buffer",
        "DataView",
        "Date",
        "Error",
        "Float32Array",
        "Float64Array",
        "Function",
        "Int8Array",
        "Int16Array",
        "Int32Array",
        "Map",
        "Math",
        "Object",
        "Promise",
        "RegExp",
        "Set",
        "String",
        "Symbol",
        "TypeError",
        "Uint8Array",
        "Uint8ClampedArray",
        "Uint16Array",
        "Uint32Array",
        "WeakMap",
        "_",
        "clearTimeout",
        "isFinite",
        "parseInt",
        "setTimeout"
      ];
      var templateCounter = -1;
      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
      var cloneableTags = {};
      cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
      cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
      var deburredLetters = {
        // Latin-1 Supplement block.
        "\xC0": "A",
        "\xC1": "A",
        "\xC2": "A",
        "\xC3": "A",
        "\xC4": "A",
        "\xC5": "A",
        "\xE0": "a",
        "\xE1": "a",
        "\xE2": "a",
        "\xE3": "a",
        "\xE4": "a",
        "\xE5": "a",
        "\xC7": "C",
        "\xE7": "c",
        "\xD0": "D",
        "\xF0": "d",
        "\xC8": "E",
        "\xC9": "E",
        "\xCA": "E",
        "\xCB": "E",
        "\xE8": "e",
        "\xE9": "e",
        "\xEA": "e",
        "\xEB": "e",
        "\xCC": "I",
        "\xCD": "I",
        "\xCE": "I",
        "\xCF": "I",
        "\xEC": "i",
        "\xED": "i",
        "\xEE": "i",
        "\xEF": "i",
        "\xD1": "N",
        "\xF1": "n",
        "\xD2": "O",
        "\xD3": "O",
        "\xD4": "O",
        "\xD5": "O",
        "\xD6": "O",
        "\xD8": "O",
        "\xF2": "o",
        "\xF3": "o",
        "\xF4": "o",
        "\xF5": "o",
        "\xF6": "o",
        "\xF8": "o",
        "\xD9": "U",
        "\xDA": "U",
        "\xDB": "U",
        "\xDC": "U",
        "\xF9": "u",
        "\xFA": "u",
        "\xFB": "u",
        "\xFC": "u",
        "\xDD": "Y",
        "\xFD": "y",
        "\xFF": "y",
        "\xC6": "Ae",
        "\xE6": "ae",
        "\xDE": "Th",
        "\xFE": "th",
        "\xDF": "ss",
        // Latin Extended-A block.
        "\u0100": "A",
        "\u0102": "A",
        "\u0104": "A",
        "\u0101": "a",
        "\u0103": "a",
        "\u0105": "a",
        "\u0106": "C",
        "\u0108": "C",
        "\u010A": "C",
        "\u010C": "C",
        "\u0107": "c",
        "\u0109": "c",
        "\u010B": "c",
        "\u010D": "c",
        "\u010E": "D",
        "\u0110": "D",
        "\u010F": "d",
        "\u0111": "d",
        "\u0112": "E",
        "\u0114": "E",
        "\u0116": "E",
        "\u0118": "E",
        "\u011A": "E",
        "\u0113": "e",
        "\u0115": "e",
        "\u0117": "e",
        "\u0119": "e",
        "\u011B": "e",
        "\u011C": "G",
        "\u011E": "G",
        "\u0120": "G",
        "\u0122": "G",
        "\u011D": "g",
        "\u011F": "g",
        "\u0121": "g",
        "\u0123": "g",
        "\u0124": "H",
        "\u0126": "H",
        "\u0125": "h",
        "\u0127": "h",
        "\u0128": "I",
        "\u012A": "I",
        "\u012C": "I",
        "\u012E": "I",
        "\u0130": "I",
        "\u0129": "i",
        "\u012B": "i",
        "\u012D": "i",
        "\u012F": "i",
        "\u0131": "i",
        "\u0134": "J",
        "\u0135": "j",
        "\u0136": "K",
        "\u0137": "k",
        "\u0138": "k",
        "\u0139": "L",
        "\u013B": "L",
        "\u013D": "L",
        "\u013F": "L",
        "\u0141": "L",
        "\u013A": "l",
        "\u013C": "l",
        "\u013E": "l",
        "\u0140": "l",
        "\u0142": "l",
        "\u0143": "N",
        "\u0145": "N",
        "\u0147": "N",
        "\u014A": "N",
        "\u0144": "n",
        "\u0146": "n",
        "\u0148": "n",
        "\u014B": "n",
        "\u014C": "O",
        "\u014E": "O",
        "\u0150": "O",
        "\u014D": "o",
        "\u014F": "o",
        "\u0151": "o",
        "\u0154": "R",
        "\u0156": "R",
        "\u0158": "R",
        "\u0155": "r",
        "\u0157": "r",
        "\u0159": "r",
        "\u015A": "S",
        "\u015C": "S",
        "\u015E": "S",
        "\u0160": "S",
        "\u015B": "s",
        "\u015D": "s",
        "\u015F": "s",
        "\u0161": "s",
        "\u0162": "T",
        "\u0164": "T",
        "\u0166": "T",
        "\u0163": "t",
        "\u0165": "t",
        "\u0167": "t",
        "\u0168": "U",
        "\u016A": "U",
        "\u016C": "U",
        "\u016E": "U",
        "\u0170": "U",
        "\u0172": "U",
        "\u0169": "u",
        "\u016B": "u",
        "\u016D": "u",
        "\u016F": "u",
        "\u0171": "u",
        "\u0173": "u",
        "\u0174": "W",
        "\u0175": "w",
        "\u0176": "Y",
        "\u0177": "y",
        "\u0178": "Y",
        "\u0179": "Z",
        "\u017B": "Z",
        "\u017D": "Z",
        "\u017A": "z",
        "\u017C": "z",
        "\u017E": "z",
        "\u0132": "IJ",
        "\u0133": "ij",
        "\u0152": "Oe",
        "\u0153": "oe",
        "\u0149": "'n",
        "\u017F": "s"
      };
      var htmlEscapes = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#39;"
      };
      var htmlUnescapes = {
        "&amp;": "&",
        "&lt;": "<",
        "&gt;": ">",
        "&quot;": '"',
        "&#39;": "'"
      };
      var stringEscapes = {
        "\\": "\\",
        "'": "'",
        "\n": "n",
        "\r": "r",
        "\u2028": "u2028",
        "\u2029": "u2029"
      };
      var freeParseFloat = parseFloat, freeParseInt = parseInt;
      var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function("return this")();
      var freeExports = typeof exports2 == "object" && exports2 && !exports2.nodeType && exports2;
      var freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var freeProcess = moduleExports && freeGlobal.process;
      var nodeUtil = (function() {
        try {
          var types = freeModule && freeModule.require && freeModule.require("util").types;
          if (types) {
            return types;
          }
          return freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e) {
        }
      })();
      var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
      function apply(func, thisArg, args) {
        switch (args.length) {
          case 0:
            return func.call(thisArg);
          case 1:
            return func.call(thisArg, args[0]);
          case 2:
            return func.call(thisArg, args[0], args[1]);
          case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
      }
      function arrayAggregator(array, setter, iteratee, accumulator) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          var value = array[index];
          setter(accumulator, value, iteratee(value), array);
        }
        return accumulator;
      }
      function arrayEach(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (iteratee(array[index], index, array) === false) {
            break;
          }
        }
        return array;
      }
      function arrayEachRight(array, iteratee) {
        var length = array == null ? 0 : array.length;
        while (length--) {
          if (iteratee(array[length], length, array) === false) {
            break;
          }
        }
        return array;
      }
      function arrayEvery(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (!predicate(array[index], index, array)) {
            return false;
          }
        }
        return true;
      }
      function arrayFilter(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
        while (++index < length) {
          var value = array[index];
          if (predicate(value, index, array)) {
            result[resIndex++] = value;
          }
        }
        return result;
      }
      function arrayIncludes(array, value) {
        var length = array == null ? 0 : array.length;
        return !!length && baseIndexOf(array, value, 0) > -1;
      }
      function arrayIncludesWith(array, value, comparator) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (comparator(value, array[index])) {
            return true;
          }
        }
        return false;
      }
      function arrayMap(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length, result = Array(length);
        while (++index < length) {
          result[index] = iteratee(array[index], index, array);
        }
        return result;
      }
      function arrayPush(array, values) {
        var index = -1, length = values.length, offset = array.length;
        while (++index < length) {
          array[offset + index] = values[index];
        }
        return array;
      }
      function arrayReduce(array, iteratee, accumulator, initAccum) {
        var index = -1, length = array == null ? 0 : array.length;
        if (initAccum && length) {
          accumulator = array[++index];
        }
        while (++index < length) {
          accumulator = iteratee(accumulator, array[index], index, array);
        }
        return accumulator;
      }
      function arrayReduceRight(array, iteratee, accumulator, initAccum) {
        var length = array == null ? 0 : array.length;
        if (initAccum && length) {
          accumulator = array[--length];
        }
        while (length--) {
          accumulator = iteratee(accumulator, array[length], length, array);
        }
        return accumulator;
      }
      function arraySome(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (predicate(array[index], index, array)) {
            return true;
          }
        }
        return false;
      }
      var asciiSize = baseProperty("length");
      function asciiToArray(string) {
        return string.split("");
      }
      function asciiWords(string) {
        return string.match(reAsciiWord) || [];
      }
      function baseFindKey(collection, predicate, eachFunc) {
        var result;
        eachFunc(collection, function(value, key, collection2) {
          if (predicate(value, key, collection2)) {
            result = key;
            return false;
          }
        });
        return result;
      }
      function baseFindIndex(array, predicate, fromIndex, fromRight) {
        var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
        while (fromRight ? index-- : ++index < length) {
          if (predicate(array[index], index, array)) {
            return index;
          }
        }
        return -1;
      }
      function baseIndexOf(array, value, fromIndex) {
        return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
      }
      function baseIndexOfWith(array, value, fromIndex, comparator) {
        var index = fromIndex - 1, length = array.length;
        while (++index < length) {
          if (comparator(array[index], value)) {
            return index;
          }
        }
        return -1;
      }
      function baseIsNaN(value) {
        return value !== value;
      }
      function baseMean(array, iteratee) {
        var length = array == null ? 0 : array.length;
        return length ? baseSum(array, iteratee) / length : NAN;
      }
      function baseProperty(key) {
        return function(object) {
          return object == null ? undefined2 : object[key];
        };
      }
      function basePropertyOf(object) {
        return function(key) {
          return object == null ? undefined2 : object[key];
        };
      }
      function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
        eachFunc(collection, function(value, index, collection2) {
          accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection2);
        });
        return accumulator;
      }
      function baseSortBy(array, comparer) {
        var length = array.length;
        array.sort(comparer);
        while (length--) {
          array[length] = array[length].value;
        }
        return array;
      }
      function baseSum(array, iteratee) {
        var result, index = -1, length = array.length;
        while (++index < length) {
          var current = iteratee(array[index]);
          if (current !== undefined2) {
            result = result === undefined2 ? current : result + current;
          }
        }
        return result;
      }
      function baseTimes(n, iteratee) {
        var index = -1, result = Array(n);
        while (++index < n) {
          result[index] = iteratee(index);
        }
        return result;
      }
      function baseToPairs(object, props) {
        return arrayMap(props, function(key) {
          return [key, object[key]];
        });
      }
      function baseTrim(string) {
        return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
      }
      function baseUnary(func) {
        return function(value) {
          return func(value);
        };
      }
      function baseValues(object, props) {
        return arrayMap(props, function(key) {
          return object[key];
        });
      }
      function cacheHas(cache, key) {
        return cache.has(key);
      }
      function charsStartIndex(strSymbols, chrSymbols) {
        var index = -1, length = strSymbols.length;
        while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
        }
        return index;
      }
      function charsEndIndex(strSymbols, chrSymbols) {
        var index = strSymbols.length;
        while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
        }
        return index;
      }
      function countHolders(array, placeholder) {
        var length = array.length, result = 0;
        while (length--) {
          if (array[length] === placeholder) {
            ++result;
          }
        }
        return result;
      }
      var deburrLetter = basePropertyOf(deburredLetters);
      var escapeHtmlChar = basePropertyOf(htmlEscapes);
      function escapeStringChar(chr) {
        return "\\" + stringEscapes[chr];
      }
      function getValue(object, key) {
        return object == null ? undefined2 : object[key];
      }
      function hasUnicode(string) {
        return reHasUnicode.test(string);
      }
      function hasUnicodeWord(string) {
        return reHasUnicodeWord.test(string);
      }
      function iteratorToArray(iterator) {
        var data, result = [];
        while (!(data = iterator.next()).done) {
          result.push(data.value);
        }
        return result;
      }
      function mapToArray(map) {
        var index = -1, result = Array(map.size);
        map.forEach(function(value, key) {
          result[++index] = [key, value];
        });
        return result;
      }
      function overArg(func, transform) {
        return function(arg) {
          return func(transform(arg));
        };
      }
      function replaceHolders(array, placeholder) {
        var index = -1, length = array.length, resIndex = 0, result = [];
        while (++index < length) {
          var value = array[index];
          if (value === placeholder || value === PLACEHOLDER) {
            array[index] = PLACEHOLDER;
            result[resIndex++] = index;
          }
        }
        return result;
      }
      function setToArray(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value) {
          result[++index] = value;
        });
        return result;
      }
      function setToPairs(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value) {
          result[++index] = [value, value];
        });
        return result;
      }
      function strictIndexOf(array, value, fromIndex) {
        var index = fromIndex - 1, length = array.length;
        while (++index < length) {
          if (array[index] === value) {
            return index;
          }
        }
        return -1;
      }
      function strictLastIndexOf(array, value, fromIndex) {
        var index = fromIndex + 1;
        while (index--) {
          if (array[index] === value) {
            return index;
          }
        }
        return index;
      }
      function stringSize(string) {
        return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
      }
      function stringToArray(string) {
        return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
      }
      function trimmedEndIndex(string) {
        var index = string.length;
        while (index-- && reWhitespace.test(string.charAt(index))) {
        }
        return index;
      }
      var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
      function unicodeSize(string) {
        var result = reUnicode.lastIndex = 0;
        while (reUnicode.test(string)) {
          ++result;
        }
        return result;
      }
      function unicodeToArray(string) {
        return string.match(reUnicode) || [];
      }
      function unicodeWords(string) {
        return string.match(reUnicodeWord) || [];
      }
      var runInContext = (function runInContext2(context) {
        context = context == null ? root : _2.defaults(root.Object(), context, _2.pick(root, contextProps));
        var Array2 = context.Array, Date2 = context.Date, Error2 = context.Error, Function2 = context.Function, Math2 = context.Math, Object2 = context.Object, RegExp2 = context.RegExp, String2 = context.String, TypeError2 = context.TypeError;
        var arrayProto = Array2.prototype, funcProto = Function2.prototype, objectProto = Object2.prototype;
        var coreJsData = context["__core-js_shared__"];
        var funcToString = funcProto.toString;
        var hasOwnProperty = objectProto.hasOwnProperty;
        var idCounter = 0;
        var maskSrcKey = (function() {
          var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
          return uid ? "Symbol(src)_1." + uid : "";
        })();
        var nativeObjectToString = objectProto.toString;
        var objectCtorString = funcToString.call(Object2);
        var oldDash = root._;
        var reIsNative = RegExp2(
          "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
        );
        var Buffer2 = moduleExports ? context.Buffer : undefined2, Symbol2 = context.Symbol, Uint8Array2 = context.Uint8Array, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : undefined2, getPrototype = overArg(Object2.getPrototypeOf, Object2), objectCreate = Object2.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : undefined2, symIterator = Symbol2 ? Symbol2.iterator : undefined2, symToStringTag = Symbol2 ? Symbol2.toStringTag : undefined2;
        var defineProperty = (function() {
          try {
            var func = getNative(Object2, "defineProperty");
            func({}, "", {});
            return func;
          } catch (e) {
          }
        })();
        var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout, ctxNow = Date2 && Date2.now !== root.Date.now && Date2.now, ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
        var nativeCeil = Math2.ceil, nativeFloor = Math2.floor, nativeGetSymbols = Object2.getOwnPropertySymbols, nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : undefined2, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object2.keys, Object2), nativeMax = Math2.max, nativeMin = Math2.min, nativeNow = Date2.now, nativeParseInt = context.parseInt, nativeRandom = Math2.random, nativeReverse = arrayProto.reverse;
        var DataView = getNative(context, "DataView"), Map2 = getNative(context, "Map"), Promise2 = getNative(context, "Promise"), Set2 = getNative(context, "Set"), WeakMap = getNative(context, "WeakMap"), nativeCreate = getNative(Object2, "create");
        var metaMap = WeakMap && new WeakMap();
        var realNames = {};
        var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map2), promiseCtorString = toSource(Promise2), setCtorString = toSource(Set2), weakMapCtorString = toSource(WeakMap);
        var symbolProto = Symbol2 ? Symbol2.prototype : undefined2, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined2, symbolToString = symbolProto ? symbolProto.toString : undefined2;
        function lodash(value) {
          if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
            if (value instanceof LodashWrapper) {
              return value;
            }
            if (hasOwnProperty.call(value, "__wrapped__")) {
              return wrapperClone(value);
            }
          }
          return new LodashWrapper(value);
        }
        var baseCreate = /* @__PURE__ */ (function() {
          function object() {
          }
          return function(proto) {
            if (!isObject(proto)) {
              return {};
            }
            if (objectCreate) {
              return objectCreate(proto);
            }
            object.prototype = proto;
            var result2 = new object();
            object.prototype = undefined2;
            return result2;
          };
        })();
        function baseLodash() {
        }
        function LodashWrapper(value, chainAll) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__chain__ = !!chainAll;
          this.__index__ = 0;
          this.__values__ = undefined2;
        }
        lodash.templateSettings = {
          /**
           * Used to detect `data` property values to be HTML-escaped.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          "escape": reEscape,
          /**
           * Used to detect code to be evaluated.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          "evaluate": reEvaluate,
          /**
           * Used to detect `data` property values to inject.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          "interpolate": reInterpolate,
          /**
           * Used to reference the data object in the template text.
           *
           * @memberOf _.templateSettings
           * @type {string}
           */
          "variable": "",
          /**
           * Used to import variables into the compiled template.
           *
           * @memberOf _.templateSettings
           * @type {Object}
           */
          "imports": {
            /**
             * A reference to the `lodash` function.
             *
             * @memberOf _.templateSettings.imports
             * @type {Function}
             */
            "_": lodash
          }
        };
        lodash.prototype = baseLodash.prototype;
        lodash.prototype.constructor = lodash;
        LodashWrapper.prototype = baseCreate(baseLodash.prototype);
        LodashWrapper.prototype.constructor = LodashWrapper;
        function LazyWrapper(value) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__dir__ = 1;
          this.__filtered__ = false;
          this.__iteratees__ = [];
          this.__takeCount__ = MAX_ARRAY_LENGTH;
          this.__views__ = [];
        }
        function lazyClone() {
          var result2 = new LazyWrapper(this.__wrapped__);
          result2.__actions__ = copyArray(this.__actions__);
          result2.__dir__ = this.__dir__;
          result2.__filtered__ = this.__filtered__;
          result2.__iteratees__ = copyArray(this.__iteratees__);
          result2.__takeCount__ = this.__takeCount__;
          result2.__views__ = copyArray(this.__views__);
          return result2;
        }
        function lazyReverse() {
          if (this.__filtered__) {
            var result2 = new LazyWrapper(this);
            result2.__dir__ = -1;
            result2.__filtered__ = true;
          } else {
            result2 = this.clone();
            result2.__dir__ *= -1;
          }
          return result2;
        }
        function lazyValue() {
          var array = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view = getView(0, arrLength, this.__views__), start = view.start, end = view.end, length = end - start, index = isRight ? end : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
          if (!isArr || !isRight && arrLength == length && takeCount == length) {
            return baseWrapperValue(array, this.__actions__);
          }
          var result2 = [];
          outer:
            while (length-- && resIndex < takeCount) {
              index += dir;
              var iterIndex = -1, value = array[index];
              while (++iterIndex < iterLength) {
                var data = iteratees[iterIndex], iteratee2 = data.iteratee, type = data.type, computed = iteratee2(value);
                if (type == LAZY_MAP_FLAG) {
                  value = computed;
                } else if (!computed) {
                  if (type == LAZY_FILTER_FLAG) {
                    continue outer;
                  } else {
                    break outer;
                  }
                }
              }
              result2[resIndex++] = value;
            }
          return result2;
        }
        LazyWrapper.prototype = baseCreate(baseLodash.prototype);
        LazyWrapper.prototype.constructor = LazyWrapper;
        function Hash(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry2 = entries[index];
            this.set(entry2[0], entry2[1]);
          }
        }
        function hashClear() {
          this.__data__ = nativeCreate ? nativeCreate(null) : {};
          this.size = 0;
        }
        function hashDelete(key) {
          var result2 = this.has(key) && delete this.__data__[key];
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function hashGet(key) {
          var data = this.__data__;
          if (nativeCreate) {
            var result2 = data[key];
            return result2 === HASH_UNDEFINED ? undefined2 : result2;
          }
          return hasOwnProperty.call(data, key) ? data[key] : undefined2;
        }
        function hashHas(key) {
          var data = this.__data__;
          return nativeCreate ? data[key] !== undefined2 : hasOwnProperty.call(data, key);
        }
        function hashSet(key, value) {
          var data = this.__data__;
          this.size += this.has(key) ? 0 : 1;
          data[key] = nativeCreate && value === undefined2 ? HASH_UNDEFINED : value;
          return this;
        }
        Hash.prototype.clear = hashClear;
        Hash.prototype["delete"] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;
        function ListCache(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry2 = entries[index];
            this.set(entry2[0], entry2[1]);
          }
        }
        function listCacheClear() {
          this.__data__ = [];
          this.size = 0;
        }
        function listCacheDelete(key) {
          var data = this.__data__, index = assocIndexOf(data, key);
          if (index < 0) {
            return false;
          }
          var lastIndex = data.length - 1;
          if (index == lastIndex) {
            data.pop();
          } else {
            splice.call(data, index, 1);
          }
          --this.size;
          return true;
        }
        function listCacheGet(key) {
          var data = this.__data__, index = assocIndexOf(data, key);
          return index < 0 ? undefined2 : data[index][1];
        }
        function listCacheHas(key) {
          return assocIndexOf(this.__data__, key) > -1;
        }
        function listCacheSet(key, value) {
          var data = this.__data__, index = assocIndexOf(data, key);
          if (index < 0) {
            ++this.size;
            data.push([key, value]);
          } else {
            data[index][1] = value;
          }
          return this;
        }
        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype["delete"] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;
        function MapCache(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry2 = entries[index];
            this.set(entry2[0], entry2[1]);
          }
        }
        function mapCacheClear() {
          this.size = 0;
          this.__data__ = {
            "hash": new Hash(),
            "map": new (Map2 || ListCache)(),
            "string": new Hash()
          };
        }
        function mapCacheDelete(key) {
          var result2 = getMapData(this, key)["delete"](key);
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function mapCacheGet(key) {
          return getMapData(this, key).get(key);
        }
        function mapCacheHas(key) {
          return getMapData(this, key).has(key);
        }
        function mapCacheSet(key, value) {
          var data = getMapData(this, key), size2 = data.size;
          data.set(key, value);
          this.size += data.size == size2 ? 0 : 1;
          return this;
        }
        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype["delete"] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;
        function SetCache(values2) {
          var index = -1, length = values2 == null ? 0 : values2.length;
          this.__data__ = new MapCache();
          while (++index < length) {
            this.add(values2[index]);
          }
        }
        function setCacheAdd(value) {
          this.__data__.set(value, HASH_UNDEFINED);
          return this;
        }
        function setCacheHas(value) {
          return this.__data__.has(value);
        }
        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
        SetCache.prototype.has = setCacheHas;
        function Stack(entries) {
          var data = this.__data__ = new ListCache(entries);
          this.size = data.size;
        }
        function stackClear() {
          this.__data__ = new ListCache();
          this.size = 0;
        }
        function stackDelete(key) {
          var data = this.__data__, result2 = data["delete"](key);
          this.size = data.size;
          return result2;
        }
        function stackGet(key) {
          return this.__data__.get(key);
        }
        function stackHas(key) {
          return this.__data__.has(key);
        }
        function stackSet(key, value) {
          var data = this.__data__;
          if (data instanceof ListCache) {
            var pairs = data.__data__;
            if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
              pairs.push([key, value]);
              this.size = ++data.size;
              return this;
            }
            data = this.__data__ = new MapCache(pairs);
          }
          data.set(key, value);
          this.size = data.size;
          return this;
        }
        Stack.prototype.clear = stackClear;
        Stack.prototype["delete"] = stackDelete;
        Stack.prototype.get = stackGet;
        Stack.prototype.has = stackHas;
        Stack.prototype.set = stackSet;
        function arrayLikeKeys(value, inherited) {
          var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes(value.length, String2) : [], length = result2.length;
          for (var key in value) {
            if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
            (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
            isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
            isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
            isIndex(key, length)))) {
              result2.push(key);
            }
          }
          return result2;
        }
        function arraySample(array) {
          var length = array.length;
          return length ? array[baseRandom(0, length - 1)] : undefined2;
        }
        function arraySampleSize(array, n) {
          return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
        }
        function arrayShuffle(array) {
          return shuffleSelf(copyArray(array));
        }
        function assignMergeValue(object, key, value) {
          if (value !== undefined2 && !eq(object[key], value) || value === undefined2 && !(key in object)) {
            baseAssignValue(object, key, value);
          }
        }
        function assignValue(object, key, value) {
          var objValue = object[key];
          if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined2 && !(key in object)) {
            baseAssignValue(object, key, value);
          }
        }
        function assocIndexOf(array, key) {
          var length = array.length;
          while (length--) {
            if (eq(array[length][0], key)) {
              return length;
            }
          }
          return -1;
        }
        function baseAggregator(collection, setter, iteratee2, accumulator) {
          baseEach(collection, function(value, key, collection2) {
            setter(accumulator, value, iteratee2(value), collection2);
          });
          return accumulator;
        }
        function baseAssign(object, source) {
          return object && copyObject(source, keys(source), object);
        }
        function baseAssignIn(object, source) {
          return object && copyObject(source, keysIn(source), object);
        }
        function baseAssignValue(object, key, value) {
          if (key == "__proto__" && defineProperty) {
            defineProperty(object, key, {
              "configurable": true,
              "enumerable": true,
              "value": value,
              "writable": true
            });
          } else {
            object[key] = value;
          }
        }
        function baseAt(object, paths) {
          var index = -1, length = paths.length, result2 = Array2(length), skip = object == null;
          while (++index < length) {
            result2[index] = skip ? undefined2 : get(object, paths[index]);
          }
          return result2;
        }
        function baseClamp(number, lower, upper) {
          if (number === number) {
            if (upper !== undefined2) {
              number = number <= upper ? number : upper;
            }
            if (lower !== undefined2) {
              number = number >= lower ? number : lower;
            }
          }
          return number;
        }
        function baseClone(value, bitmask, customizer, key, object, stack) {
          var result2, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
          if (customizer) {
            result2 = object ? customizer(value, key, object, stack) : customizer(value);
          }
          if (result2 !== undefined2) {
            return result2;
          }
          if (!isObject(value)) {
            return value;
          }
          var isArr = isArray(value);
          if (isArr) {
            result2 = initCloneArray(value);
            if (!isDeep) {
              return copyArray(value, result2);
            }
          } else {
            var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
            if (isBuffer(value)) {
              return cloneBuffer(value, isDeep);
            }
            if (tag == objectTag || tag == argsTag || isFunc && !object) {
              result2 = isFlat || isFunc ? {} : initCloneObject(value);
              if (!isDeep) {
                return isFlat ? copySymbolsIn(value, baseAssignIn(result2, value)) : copySymbols(value, baseAssign(result2, value));
              }
            } else {
              if (!cloneableTags[tag]) {
                return object ? value : {};
              }
              result2 = initCloneByTag(value, tag, isDeep);
            }
          }
          stack || (stack = new Stack());
          var stacked = stack.get(value);
          if (stacked) {
            return stacked;
          }
          stack.set(value, result2);
          if (isSet(value)) {
            value.forEach(function(subValue) {
              result2.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
            });
          } else if (isMap(value)) {
            value.forEach(function(subValue, key2) {
              result2.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
            });
          }
          var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
          var props = isArr ? undefined2 : keysFunc(value);
          arrayEach(props || value, function(subValue, key2) {
            if (props) {
              key2 = subValue;
              subValue = value[key2];
            }
            assignValue(result2, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
          });
          return result2;
        }
        function baseConforms(source) {
          var props = keys(source);
          return function(object) {
            return baseConformsTo(object, source, props);
          };
        }
        function baseConformsTo(object, source, props) {
          var length = props.length;
          if (object == null) {
            return !length;
          }
          object = Object2(object);
          while (length--) {
            var key = props[length], predicate = source[key], value = object[key];
            if (value === undefined2 && !(key in object) || !predicate(value)) {
              return false;
            }
          }
          return true;
        }
        function baseDelay(func, wait, args) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return setTimeout(function() {
            func.apply(undefined2, args);
          }, wait);
        }
        function baseDifference(array, values2, iteratee2, comparator) {
          var index = -1, includes2 = arrayIncludes, isCommon = true, length = array.length, result2 = [], valuesLength = values2.length;
          if (!length) {
            return result2;
          }
          if (iteratee2) {
            values2 = arrayMap(values2, baseUnary(iteratee2));
          }
          if (comparator) {
            includes2 = arrayIncludesWith;
            isCommon = false;
          } else if (values2.length >= LARGE_ARRAY_SIZE) {
            includes2 = cacheHas;
            isCommon = false;
            values2 = new SetCache(values2);
          }
          outer:
            while (++index < length) {
              var value = array[index], computed = iteratee2 == null ? value : iteratee2(value);
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed === computed) {
                var valuesIndex = valuesLength;
                while (valuesIndex--) {
                  if (values2[valuesIndex] === computed) {
                    continue outer;
                  }
                }
                result2.push(value);
              } else if (!includes2(values2, computed, comparator)) {
                result2.push(value);
              }
            }
          return result2;
        }
        var baseEach = createBaseEach(baseForOwn);
        var baseEachRight = createBaseEach(baseForOwnRight, true);
        function baseEvery(collection, predicate) {
          var result2 = true;
          baseEach(collection, function(value, index, collection2) {
            result2 = !!predicate(value, index, collection2);
            return result2;
          });
          return result2;
        }
        function baseExtremum(array, iteratee2, comparator) {
          var index = -1, length = array.length;
          while (++index < length) {
            var value = array[index], current = iteratee2(value);
            if (current != null && (computed === undefined2 ? current === current && !isSymbol(current) : comparator(current, computed))) {
              var computed = current, result2 = value;
            }
          }
          return result2;
        }
        function baseFill(array, value, start, end) {
          var length = array.length;
          start = toInteger(start);
          if (start < 0) {
            start = -start > length ? 0 : length + start;
          }
          end = end === undefined2 || end > length ? length : toInteger(end);
          if (end < 0) {
            end += length;
          }
          end = start > end ? 0 : toLength(end);
          while (start < end) {
            array[start++] = value;
          }
          return array;
        }
        function baseFilter(collection, predicate) {
          var result2 = [];
          baseEach(collection, function(value, index, collection2) {
            if (predicate(value, index, collection2)) {
              result2.push(value);
            }
          });
          return result2;
        }
        function baseFlatten(array, depth, predicate, isStrict, result2) {
          var index = -1, length = array.length;
          predicate || (predicate = isFlattenable);
          result2 || (result2 = []);
          while (++index < length) {
            var value = array[index];
            if (depth > 0 && predicate(value)) {
              if (depth > 1) {
                baseFlatten(value, depth - 1, predicate, isStrict, result2);
              } else {
                arrayPush(result2, value);
              }
            } else if (!isStrict) {
              result2[result2.length] = value;
            }
          }
          return result2;
        }
        var baseFor = createBaseFor();
        var baseForRight = createBaseFor(true);
        function baseForOwn(object, iteratee2) {
          return object && baseFor(object, iteratee2, keys);
        }
        function baseForOwnRight(object, iteratee2) {
          return object && baseForRight(object, iteratee2, keys);
        }
        function baseFunctions(object, props) {
          return arrayFilter(props, function(key) {
            return isFunction(object[key]);
          });
        }
        function baseGet(object, path) {
          path = castPath(path, object);
          var index = 0, length = path.length;
          while (object != null && index < length) {
            object = object[toKey(path[index++])];
          }
          return index && index == length ? object : undefined2;
        }
        function baseGetAllKeys(object, keysFunc, symbolsFunc) {
          var result2 = keysFunc(object);
          return isArray(object) ? result2 : arrayPush(result2, symbolsFunc(object));
        }
        function baseGetTag(value) {
          if (value == null) {
            return value === undefined2 ? undefinedTag : nullTag;
          }
          return symToStringTag && symToStringTag in Object2(value) ? getRawTag(value) : objectToString(value);
        }
        function baseGt(value, other) {
          return value > other;
        }
        function baseHas(object, key) {
          return object != null && hasOwnProperty.call(object, key);
        }
        function baseHasIn(object, key) {
          return object != null && key in Object2(object);
        }
        function baseInRange(number, start, end) {
          return number >= nativeMin(start, end) && number < nativeMax(start, end);
        }
        function baseIntersection(arrays, iteratee2, comparator) {
          var includes2 = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array2(othLength), maxLength = Infinity, result2 = [];
          while (othIndex--) {
            var array = arrays[othIndex];
            if (othIndex && iteratee2) {
              array = arrayMap(array, baseUnary(iteratee2));
            }
            maxLength = nativeMin(array.length, maxLength);
            caches[othIndex] = !comparator && (iteratee2 || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined2;
          }
          array = arrays[0];
          var index = -1, seen = caches[0];
          outer:
            while (++index < length && result2.length < maxLength) {
              var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
              value = comparator || value !== 0 ? value : 0;
              if (!(seen ? cacheHas(seen, computed) : includes2(result2, computed, comparator))) {
                othIndex = othLength;
                while (--othIndex) {
                  var cache = caches[othIndex];
                  if (!(cache ? cacheHas(cache, computed) : includes2(arrays[othIndex], computed, comparator))) {
                    continue outer;
                  }
                }
                if (seen) {
                  seen.push(computed);
                }
                result2.push(value);
              }
            }
          return result2;
        }
        function baseInverter(object, setter, iteratee2, accumulator) {
          baseForOwn(object, function(value, key, object2) {
            setter(accumulator, iteratee2(value), key, object2);
          });
          return accumulator;
        }
        function baseInvoke(object, path, args) {
          path = castPath(path, object);
          object = parent(object, path);
          var func = object == null ? object : object[toKey(last(path))];
          return func == null ? undefined2 : apply(func, object, args);
        }
        function baseIsArguments(value) {
          return isObjectLike(value) && baseGetTag(value) == argsTag;
        }
        function baseIsArrayBuffer(value) {
          return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
        }
        function baseIsDate(value) {
          return isObjectLike(value) && baseGetTag(value) == dateTag;
        }
        function baseIsEqual(value, other, bitmask, customizer, stack) {
          if (value === other) {
            return true;
          }
          if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
            return value !== value && other !== other;
          }
          return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
        }
        function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
          var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
          objTag = objTag == argsTag ? objectTag : objTag;
          othTag = othTag == argsTag ? objectTag : othTag;
          var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
          if (isSameTag && isBuffer(object)) {
            if (!isBuffer(other)) {
              return false;
            }
            objIsArr = true;
            objIsObj = false;
          }
          if (isSameTag && !objIsObj) {
            stack || (stack = new Stack());
            return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
          }
          if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
            var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
            if (objIsWrapped || othIsWrapped) {
              var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
              stack || (stack = new Stack());
              return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
            }
          }
          if (!isSameTag) {
            return false;
          }
          stack || (stack = new Stack());
          return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
        }
        function baseIsMap(value) {
          return isObjectLike(value) && getTag(value) == mapTag;
        }
        function baseIsMatch(object, source, matchData, customizer) {
          var index = matchData.length, length = index, noCustomizer = !customizer;
          if (object == null) {
            return !length;
          }
          object = Object2(object);
          while (index--) {
            var data = matchData[index];
            if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
              return false;
            }
          }
          while (++index < length) {
            data = matchData[index];
            var key = data[0], objValue = object[key], srcValue = data[1];
            if (noCustomizer && data[2]) {
              if (objValue === undefined2 && !(key in object)) {
                return false;
              }
            } else {
              var stack = new Stack();
              if (customizer) {
                var result2 = customizer(objValue, srcValue, key, object, source, stack);
              }
              if (!(result2 === undefined2 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result2)) {
                return false;
              }
            }
          }
          return true;
        }
        function baseIsNative(value) {
          if (!isObject(value) || isMasked(value)) {
            return false;
          }
          var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
          return pattern.test(toSource(value));
        }
        function baseIsRegExp(value) {
          return isObjectLike(value) && baseGetTag(value) == regexpTag;
        }
        function baseIsSet(value) {
          return isObjectLike(value) && getTag(value) == setTag;
        }
        function baseIsTypedArray(value) {
          return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
        }
        function baseIteratee(value) {
          if (typeof value == "function") {
            return value;
          }
          if (value == null) {
            return identity;
          }
          if (typeof value == "object") {
            return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
          }
          return property(value);
        }
        function baseKeys(object) {
          if (!isPrototype(object)) {
            return nativeKeys(object);
          }
          var result2 = [];
          for (var key in Object2(object)) {
            if (hasOwnProperty.call(object, key) && key != "constructor") {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseKeysIn(object) {
          if (!isObject(object)) {
            return nativeKeysIn(object);
          }
          var isProto = isPrototype(object), result2 = [];
          for (var key in object) {
            if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseLt(value, other) {
          return value < other;
        }
        function baseMap(collection, iteratee2) {
          var index = -1, result2 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function(value, key, collection2) {
            result2[++index] = iteratee2(value, key, collection2);
          });
          return result2;
        }
        function baseMatches(source) {
          var matchData = getMatchData(source);
          if (matchData.length == 1 && matchData[0][2]) {
            return matchesStrictComparable(matchData[0][0], matchData[0][1]);
          }
          return function(object) {
            return object === source || baseIsMatch(object, source, matchData);
          };
        }
        function baseMatchesProperty(path, srcValue) {
          if (isKey(path) && isStrictComparable(srcValue)) {
            return matchesStrictComparable(toKey(path), srcValue);
          }
          return function(object) {
            var objValue = get(object, path);
            return objValue === undefined2 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
          };
        }
        function baseMerge(object, source, srcIndex, customizer, stack) {
          if (object === source) {
            return;
          }
          baseFor(source, function(srcValue, key) {
            stack || (stack = new Stack());
            if (isObject(srcValue)) {
              baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
            } else {
              var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : undefined2;
              if (newValue === undefined2) {
                newValue = srcValue;
              }
              assignMergeValue(object, key, newValue);
            }
          }, keysIn);
        }
        function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
          var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
          if (stacked) {
            assignMergeValue(object, key, stacked);
            return;
          }
          var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : undefined2;
          var isCommon = newValue === undefined2;
          if (isCommon) {
            var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
            newValue = srcValue;
            if (isArr || isBuff || isTyped) {
              if (isArray(objValue)) {
                newValue = objValue;
              } else if (isArrayLikeObject(objValue)) {
                newValue = copyArray(objValue);
              } else if (isBuff) {
                isCommon = false;
                newValue = cloneBuffer(srcValue, true);
              } else if (isTyped) {
                isCommon = false;
                newValue = cloneTypedArray(srcValue, true);
              } else {
                newValue = [];
              }
            } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
              newValue = objValue;
              if (isArguments(objValue)) {
                newValue = toPlainObject(objValue);
              } else if (!isObject(objValue) || isFunction(objValue)) {
                newValue = initCloneObject(srcValue);
              }
            } else {
              isCommon = false;
            }
          }
          if (isCommon) {
            stack.set(srcValue, newValue);
            mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
            stack["delete"](srcValue);
          }
          assignMergeValue(object, key, newValue);
        }
        function baseNth(array, n) {
          var length = array.length;
          if (!length) {
            return;
          }
          n += n < 0 ? length : 0;
          return isIndex(n, length) ? array[n] : undefined2;
        }
        function baseOrderBy(collection, iteratees, orders) {
          if (iteratees.length) {
            iteratees = arrayMap(iteratees, function(iteratee2) {
              if (isArray(iteratee2)) {
                return function(value) {
                  return baseGet(value, iteratee2.length === 1 ? iteratee2[0] : iteratee2);
                };
              }
              return iteratee2;
            });
          } else {
            iteratees = [identity];
          }
          var index = -1;
          iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
          var result2 = baseMap(collection, function(value, key, collection2) {
            var criteria = arrayMap(iteratees, function(iteratee2) {
              return iteratee2(value);
            });
            return { "criteria": criteria, "index": ++index, "value": value };
          });
          return baseSortBy(result2, function(object, other) {
            return compareMultiple(object, other, orders);
          });
        }
        function basePick(object, paths) {
          return basePickBy(object, paths, function(value, path) {
            return hasIn(object, path);
          });
        }
        function basePickBy(object, paths, predicate) {
          var index = -1, length = paths.length, result2 = {};
          while (++index < length) {
            var path = paths[index], value = baseGet(object, path);
            if (predicate(value, path)) {
              baseSet(result2, castPath(path, object), value);
            }
          }
          return result2;
        }
        function basePropertyDeep(path) {
          return function(object) {
            return baseGet(object, path);
          };
        }
        function basePullAll(array, values2, iteratee2, comparator) {
          var indexOf2 = comparator ? baseIndexOfWith : baseIndexOf, index = -1, length = values2.length, seen = array;
          if (array === values2) {
            values2 = copyArray(values2);
          }
          if (iteratee2) {
            seen = arrayMap(array, baseUnary(iteratee2));
          }
          while (++index < length) {
            var fromIndex = 0, value = values2[index], computed = iteratee2 ? iteratee2(value) : value;
            while ((fromIndex = indexOf2(seen, computed, fromIndex, comparator)) > -1) {
              if (seen !== array) {
                splice.call(seen, fromIndex, 1);
              }
              splice.call(array, fromIndex, 1);
            }
          }
          return array;
        }
        function basePullAt(array, indexes) {
          var length = array ? indexes.length : 0, lastIndex = length - 1;
          while (length--) {
            var index = indexes[length];
            if (length == lastIndex || index !== previous) {
              var previous = index;
              if (isIndex(index)) {
                splice.call(array, index, 1);
              } else {
                baseUnset(array, index);
              }
            }
          }
          return array;
        }
        function baseRandom(lower, upper) {
          return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
        }
        function baseRange(start, end, step, fromRight) {
          var index = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result2 = Array2(length);
          while (length--) {
            result2[fromRight ? length : ++index] = start;
            start += step;
          }
          return result2;
        }
        function baseRepeat(string, n) {
          var result2 = "";
          if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
            return result2;
          }
          do {
            if (n % 2) {
              result2 += string;
            }
            n = nativeFloor(n / 2);
            if (n) {
              string += string;
            }
          } while (n);
          return result2;
        }
        function baseRest(func, start) {
          return setToString(overRest(func, start, identity), func + "");
        }
        function baseSample(collection) {
          return arraySample(values(collection));
        }
        function baseSampleSize(collection, n) {
          var array = values(collection);
          return shuffleSelf(array, baseClamp(n, 0, array.length));
        }
        function baseSet(object, path, value, customizer) {
          if (!isObject(object)) {
            return object;
          }
          path = castPath(path, object);
          var index = -1, length = path.length, lastIndex = length - 1, nested = object;
          while (nested != null && ++index < length) {
            var key = toKey(path[index]), newValue = value;
            if (key === "__proto__" || key === "constructor" || key === "prototype") {
              return object;
            }
            if (index != lastIndex) {
              var objValue = nested[key];
              newValue = customizer ? customizer(objValue, key, nested) : undefined2;
              if (newValue === undefined2) {
                newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
              }
            }
            assignValue(nested, key, newValue);
            nested = nested[key];
          }
          return object;
        }
        var baseSetData = !metaMap ? identity : function(func, data) {
          metaMap.set(func, data);
          return func;
        };
        var baseSetToString = !defineProperty ? identity : function(func, string) {
          return defineProperty(func, "toString", {
            "configurable": true,
            "enumerable": false,
            "value": constant(string),
            "writable": true
          });
        };
        function baseShuffle(collection) {
          return shuffleSelf(values(collection));
        }
        function baseSlice(array, start, end) {
          var index = -1, length = array.length;
          if (start < 0) {
            start = -start > length ? 0 : length + start;
          }
          end = end > length ? length : end;
          if (end < 0) {
            end += length;
          }
          length = start > end ? 0 : end - start >>> 0;
          start >>>= 0;
          var result2 = Array2(length);
          while (++index < length) {
            result2[index] = array[index + start];
          }
          return result2;
        }
        function baseSome(collection, predicate) {
          var result2;
          baseEach(collection, function(value, index, collection2) {
            result2 = predicate(value, index, collection2);
            return !result2;
          });
          return !!result2;
        }
        function baseSortedIndex(array, value, retHighest) {
          var low = 0, high = array == null ? low : array.length;
          if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
            while (low < high) {
              var mid = low + high >>> 1, computed = array[mid];
              if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
                low = mid + 1;
              } else {
                high = mid;
              }
            }
            return high;
          }
          return baseSortedIndexBy(array, value, identity, retHighest);
        }
        function baseSortedIndexBy(array, value, iteratee2, retHighest) {
          var low = 0, high = array == null ? 0 : array.length;
          if (high === 0) {
            return 0;
          }
          value = iteratee2(value);
          var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol(value), valIsUndefined = value === undefined2;
          while (low < high) {
            var mid = nativeFloor((low + high) / 2), computed = iteratee2(array[mid]), othIsDefined = computed !== undefined2, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol(computed);
            if (valIsNaN) {
              var setLow = retHighest || othIsReflexive;
            } else if (valIsUndefined) {
              setLow = othIsReflexive && (retHighest || othIsDefined);
            } else if (valIsNull) {
              setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
            } else if (valIsSymbol) {
              setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
            } else if (othIsNull || othIsSymbol) {
              setLow = false;
            } else {
              setLow = retHighest ? computed <= value : computed < value;
            }
            if (setLow) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return nativeMin(high, MAX_ARRAY_INDEX);
        }
        function baseSortedUniq(array, iteratee2) {
          var index = -1, length = array.length, resIndex = 0, result2 = [];
          while (++index < length) {
            var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
            if (!index || !eq(computed, seen)) {
              var seen = computed;
              result2[resIndex++] = value === 0 ? 0 : value;
            }
          }
          return result2;
        }
        function baseToNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          return +value;
        }
        function baseToString(value) {
          if (typeof value == "string") {
            return value;
          }
          if (isArray(value)) {
            return arrayMap(value, baseToString) + "";
          }
          if (isSymbol(value)) {
            return symbolToString ? symbolToString.call(value) : "";
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
        }
        function baseUniq(array, iteratee2, comparator) {
          var index = -1, includes2 = arrayIncludes, length = array.length, isCommon = true, result2 = [], seen = result2;
          if (comparator) {
            isCommon = false;
            includes2 = arrayIncludesWith;
          } else if (length >= LARGE_ARRAY_SIZE) {
            var set2 = iteratee2 ? null : createSet(array);
            if (set2) {
              return setToArray(set2);
            }
            isCommon = false;
            includes2 = cacheHas;
            seen = new SetCache();
          } else {
            seen = iteratee2 ? [] : result2;
          }
          outer:
            while (++index < length) {
              var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed === computed) {
                var seenIndex = seen.length;
                while (seenIndex--) {
                  if (seen[seenIndex] === computed) {
                    continue outer;
                  }
                }
                if (iteratee2) {
                  seen.push(computed);
                }
                result2.push(value);
              } else if (!includes2(seen, computed, comparator)) {
                if (seen !== result2) {
                  seen.push(computed);
                }
                result2.push(value);
              }
            }
          return result2;
        }
        function baseUnset(object, path) {
          path = castPath(path, object);
          object = parent(object, path);
          return object == null || delete object[toKey(last(path))];
        }
        function baseUpdate(object, path, updater, customizer) {
          return baseSet(object, path, updater(baseGet(object, path)), customizer);
        }
        function baseWhile(array, predicate, isDrop, fromRight) {
          var length = array.length, index = fromRight ? length : -1;
          while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {
          }
          return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
        }
        function baseWrapperValue(value, actions) {
          var result2 = value;
          if (result2 instanceof LazyWrapper) {
            result2 = result2.value();
          }
          return arrayReduce(actions, function(result3, action) {
            return action.func.apply(action.thisArg, arrayPush([result3], action.args));
          }, result2);
        }
        function baseXor(arrays, iteratee2, comparator) {
          var length = arrays.length;
          if (length < 2) {
            return length ? baseUniq(arrays[0]) : [];
          }
          var index = -1, result2 = Array2(length);
          while (++index < length) {
            var array = arrays[index], othIndex = -1;
            while (++othIndex < length) {
              if (othIndex != index) {
                result2[index] = baseDifference(result2[index] || array, arrays[othIndex], iteratee2, comparator);
              }
            }
          }
          return baseUniq(baseFlatten(result2, 1), iteratee2, comparator);
        }
        function baseZipObject(props, values2, assignFunc) {
          var index = -1, length = props.length, valsLength = values2.length, result2 = {};
          while (++index < length) {
            var value = index < valsLength ? values2[index] : undefined2;
            assignFunc(result2, props[index], value);
          }
          return result2;
        }
        function castArrayLikeObject(value) {
          return isArrayLikeObject(value) ? value : [];
        }
        function castFunction(value) {
          return typeof value == "function" ? value : identity;
        }
        function castPath(value, object) {
          if (isArray(value)) {
            return value;
          }
          return isKey(value, object) ? [value] : stringToPath(toString(value));
        }
        var castRest = baseRest;
        function castSlice(array, start, end) {
          var length = array.length;
          end = end === undefined2 ? length : end;
          return !start && end >= length ? array : baseSlice(array, start, end);
        }
        var clearTimeout = ctxClearTimeout || function(id) {
          return root.clearTimeout(id);
        };
        function cloneBuffer(buffer, isDeep) {
          if (isDeep) {
            return buffer.slice();
          }
          var length = buffer.length, result2 = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
          buffer.copy(result2);
          return result2;
        }
        function cloneArrayBuffer(arrayBuffer) {
          var result2 = new arrayBuffer.constructor(arrayBuffer.byteLength);
          new Uint8Array2(result2).set(new Uint8Array2(arrayBuffer));
          return result2;
        }
        function cloneDataView(dataView, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
          return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
        }
        function cloneRegExp(regexp) {
          var result2 = new regexp.constructor(regexp.source, reFlags.exec(regexp));
          result2.lastIndex = regexp.lastIndex;
          return result2;
        }
        function cloneSymbol(symbol) {
          return symbolValueOf ? Object2(symbolValueOf.call(symbol)) : {};
        }
        function cloneTypedArray(typedArray, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
          return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
        }
        function compareAscending(value, other) {
          if (value !== other) {
            var valIsDefined = value !== undefined2, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
            var othIsDefined = other !== undefined2, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
            if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
              return 1;
            }
            if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
              return -1;
            }
          }
          return 0;
        }
        function compareMultiple(object, other, orders) {
          var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
          while (++index < length) {
            var result2 = compareAscending(objCriteria[index], othCriteria[index]);
            if (result2) {
              if (index >= ordersLength) {
                return result2;
              }
              var order = orders[index];
              return result2 * (order == "desc" ? -1 : 1);
            }
          }
          return object.index - other.index;
        }
        function composeArgs(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(leftLength + rangeLength), isUncurried = !isCurried;
          while (++leftIndex < leftLength) {
            result2[leftIndex] = partials[leftIndex];
          }
          while (++argsIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[holders[argsIndex]] = args[argsIndex];
            }
          }
          while (rangeLength--) {
            result2[leftIndex++] = args[argsIndex++];
          }
          return result2;
        }
        function composeArgsRight(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(rangeLength + rightLength), isUncurried = !isCurried;
          while (++argsIndex < rangeLength) {
            result2[argsIndex] = args[argsIndex];
          }
          var offset = argsIndex;
          while (++rightIndex < rightLength) {
            result2[offset + rightIndex] = partials[rightIndex];
          }
          while (++holdersIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[offset + holders[holdersIndex]] = args[argsIndex++];
            }
          }
          return result2;
        }
        function copyArray(source, array) {
          var index = -1, length = source.length;
          array || (array = Array2(length));
          while (++index < length) {
            array[index] = source[index];
          }
          return array;
        }
        function copyObject(source, props, object, customizer) {
          var isNew = !object;
          object || (object = {});
          var index = -1, length = props.length;
          while (++index < length) {
            var key = props[index];
            var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined2;
            if (newValue === undefined2) {
              newValue = source[key];
            }
            if (isNew) {
              baseAssignValue(object, key, newValue);
            } else {
              assignValue(object, key, newValue);
            }
          }
          return object;
        }
        function copySymbols(source, object) {
          return copyObject(source, getSymbols(source), object);
        }
        function copySymbolsIn(source, object) {
          return copyObject(source, getSymbolsIn(source), object);
        }
        function createAggregator(setter, initializer) {
          return function(collection, iteratee2) {
            var func = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
            return func(collection, setter, getIteratee(iteratee2, 2), accumulator);
          };
        }
        function createAssigner(assigner) {
          return baseRest(function(object, sources) {
            var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined2, guard = length > 2 ? sources[2] : undefined2;
            customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : undefined2;
            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              customizer = length < 3 ? undefined2 : customizer;
              length = 1;
            }
            object = Object2(object);
            while (++index < length) {
              var source = sources[index];
              if (source) {
                assigner(object, source, index, customizer);
              }
            }
            return object;
          });
        }
        function createBaseEach(eachFunc, fromRight) {
          return function(collection, iteratee2) {
            if (collection == null) {
              return collection;
            }
            if (!isArrayLike(collection)) {
              return eachFunc(collection, iteratee2);
            }
            var length = collection.length, index = fromRight ? length : -1, iterable = Object2(collection);
            while (fromRight ? index-- : ++index < length) {
              if (iteratee2(iterable[index], index, iterable) === false) {
                break;
              }
            }
            return collection;
          };
        }
        function createBaseFor(fromRight) {
          return function(object, iteratee2, keysFunc) {
            var index = -1, iterable = Object2(object), props = keysFunc(object), length = props.length;
            while (length--) {
              var key = props[fromRight ? length : ++index];
              if (iteratee2(iterable[key], key, iterable) === false) {
                break;
              }
            }
            return object;
          };
        }
        function createBind(func, bitmask, thisArg) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
          function wrapper() {
            var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
            return fn.apply(isBind ? thisArg : this, arguments);
          }
          return wrapper;
        }
        function createCaseFirst(methodName) {
          return function(string) {
            string = toString(string);
            var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined2;
            var chr = strSymbols ? strSymbols[0] : string.charAt(0);
            var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
            return chr[methodName]() + trailing;
          };
        }
        function createCompounder(callback) {
          return function(string) {
            return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
          };
        }
        function createCtor(Ctor) {
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return new Ctor();
              case 1:
                return new Ctor(args[0]);
              case 2:
                return new Ctor(args[0], args[1]);
              case 3:
                return new Ctor(args[0], args[1], args[2]);
              case 4:
                return new Ctor(args[0], args[1], args[2], args[3]);
              case 5:
                return new Ctor(args[0], args[1], args[2], args[3], args[4]);
              case 6:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
              case 7:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
            }
            var thisBinding = baseCreate(Ctor.prototype), result2 = Ctor.apply(thisBinding, args);
            return isObject(result2) ? result2 : thisBinding;
          };
        }
        function createCurry(func, bitmask, arity) {
          var Ctor = createCtor(func);
          function wrapper() {
            var length = arguments.length, args = Array2(length), index = length, placeholder = getHolder(wrapper);
            while (index--) {
              args[index] = arguments[index];
            }
            var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
            length -= holders.length;
            if (length < arity) {
              return createRecurry(
                func,
                bitmask,
                createHybrid,
                wrapper.placeholder,
                undefined2,
                args,
                holders,
                undefined2,
                undefined2,
                arity - length
              );
            }
            var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
            return apply(fn, this, args);
          }
          return wrapper;
        }
        function createFind(findIndexFunc) {
          return function(collection, predicate, fromIndex) {
            var iterable = Object2(collection);
            if (!isArrayLike(collection)) {
              var iteratee2 = getIteratee(predicate, 3);
              collection = keys(collection);
              predicate = function(key) {
                return iteratee2(iterable[key], key, iterable);
              };
            }
            var index = findIndexFunc(collection, predicate, fromIndex);
            return index > -1 ? iterable[iteratee2 ? collection[index] : index] : undefined2;
          };
        }
        function createFlow(fromRight) {
          return flatRest(function(funcs) {
            var length = funcs.length, index = length, prereq = LodashWrapper.prototype.thru;
            if (fromRight) {
              funcs.reverse();
            }
            while (index--) {
              var func = funcs[index];
              if (typeof func != "function") {
                throw new TypeError2(FUNC_ERROR_TEXT);
              }
              if (prereq && !wrapper && getFuncName(func) == "wrapper") {
                var wrapper = new LodashWrapper([], true);
              }
            }
            index = wrapper ? index : length;
            while (++index < length) {
              func = funcs[index];
              var funcName = getFuncName(func), data = funcName == "wrapper" ? getData(func) : undefined2;
              if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
                wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
              } else {
                wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
              }
            }
            return function() {
              var args = arguments, value = args[0];
              if (wrapper && args.length == 1 && isArray(value)) {
                return wrapper.plant(value).value();
              }
              var index2 = 0, result2 = length ? funcs[index2].apply(this, args) : value;
              while (++index2 < length) {
                result2 = funcs[index2].call(this, result2);
              }
              return result2;
            };
          });
        }
        function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity) {
          var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined2 : createCtor(func);
          function wrapper() {
            var length = arguments.length, args = Array2(length), index = length;
            while (index--) {
              args[index] = arguments[index];
            }
            if (isCurried) {
              var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
            }
            if (partials) {
              args = composeArgs(args, partials, holders, isCurried);
            }
            if (partialsRight) {
              args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
            }
            length -= holdersCount;
            if (isCurried && length < arity) {
              var newHolders = replaceHolders(args, placeholder);
              return createRecurry(
                func,
                bitmask,
                createHybrid,
                wrapper.placeholder,
                thisArg,
                args,
                newHolders,
                argPos,
                ary2,
                arity - length
              );
            }
            var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
            length = args.length;
            if (argPos) {
              args = reorder(args, argPos);
            } else if (isFlip && length > 1) {
              args.reverse();
            }
            if (isAry && ary2 < length) {
              args.length = ary2;
            }
            if (this && this !== root && this instanceof wrapper) {
              fn = Ctor || createCtor(fn);
            }
            return fn.apply(thisBinding, args);
          }
          return wrapper;
        }
        function createInverter(setter, toIteratee) {
          return function(object, iteratee2) {
            return baseInverter(object, setter, toIteratee(iteratee2), {});
          };
        }
        function createMathOperation(operator, defaultValue) {
          return function(value, other) {
            var result2;
            if (value === undefined2 && other === undefined2) {
              return defaultValue;
            }
            if (value !== undefined2) {
              result2 = value;
            }
            if (other !== undefined2) {
              if (result2 === undefined2) {
                return other;
              }
              if (typeof value == "string" || typeof other == "string") {
                value = baseToString(value);
                other = baseToString(other);
              } else {
                value = baseToNumber(value);
                other = baseToNumber(other);
              }
              result2 = operator(value, other);
            }
            return result2;
          };
        }
        function createOver(arrayFunc) {
          return flatRest(function(iteratees) {
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            return baseRest(function(args) {
              var thisArg = this;
              return arrayFunc(iteratees, function(iteratee2) {
                return apply(iteratee2, thisArg, args);
              });
            });
          });
        }
        function createPadding(length, chars) {
          chars = chars === undefined2 ? " " : baseToString(chars);
          var charsLength = chars.length;
          if (charsLength < 2) {
            return charsLength ? baseRepeat(chars, length) : chars;
          }
          var result2 = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
          return hasUnicode(chars) ? castSlice(stringToArray(result2), 0, length).join("") : result2.slice(0, length);
        }
        function createPartial(func, bitmask, thisArg, partials) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
          function wrapper() {
            var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array2(leftLength + argsLength), fn = this && this !== root && this instanceof wrapper ? Ctor : func;
            while (++leftIndex < leftLength) {
              args[leftIndex] = partials[leftIndex];
            }
            while (argsLength--) {
              args[leftIndex++] = arguments[++argsIndex];
            }
            return apply(fn, isBind ? thisArg : this, args);
          }
          return wrapper;
        }
        function createRange(fromRight) {
          return function(start, end, step) {
            if (step && typeof step != "number" && isIterateeCall(start, end, step)) {
              end = step = undefined2;
            }
            start = toFinite(start);
            if (end === undefined2) {
              end = start;
              start = 0;
            } else {
              end = toFinite(end);
            }
            step = step === undefined2 ? start < end ? 1 : -1 : toFinite(step);
            return baseRange(start, end, step, fromRight);
          };
        }
        function createRelationalOperation(operator) {
          return function(value, other) {
            if (!(typeof value == "string" && typeof other == "string")) {
              value = toNumber(value);
              other = toNumber(other);
            }
            return operator(value, other);
          };
        }
        function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary2, arity) {
          var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined2, newHoldersRight = isCurry ? undefined2 : holders, newPartials = isCurry ? partials : undefined2, newPartialsRight = isCurry ? undefined2 : partials;
          bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
          bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
          if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
            bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
          }
          var newData = [
            func,
            bitmask,
            thisArg,
            newPartials,
            newHolders,
            newPartialsRight,
            newHoldersRight,
            argPos,
            ary2,
            arity
          ];
          var result2 = wrapFunc.apply(undefined2, newData);
          if (isLaziable(func)) {
            setData(result2, newData);
          }
          result2.placeholder = placeholder;
          return setWrapToString(result2, func, bitmask);
        }
        function createRound(methodName) {
          var func = Math2[methodName];
          return function(number, precision) {
            number = toNumber(number);
            precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
            if (precision && nativeIsFinite(number)) {
              var pair = (toString(number) + "e").split("e"), value = func(pair[0] + "e" + (+pair[1] + precision));
              pair = (toString(value) + "e").split("e");
              return +(pair[0] + "e" + (+pair[1] - precision));
            }
            return func(number);
          };
        }
        var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop : function(values2) {
          return new Set2(values2);
        };
        function createToPairs(keysFunc) {
          return function(object) {
            var tag = getTag(object);
            if (tag == mapTag) {
              return mapToArray(object);
            }
            if (tag == setTag) {
              return setToPairs(object);
            }
            return baseToPairs(object, keysFunc(object));
          };
        }
        function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary2, arity) {
          var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
          if (!isBindKey && typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          var length = partials ? partials.length : 0;
          if (!length) {
            bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
            partials = holders = undefined2;
          }
          ary2 = ary2 === undefined2 ? ary2 : nativeMax(toInteger(ary2), 0);
          arity = arity === undefined2 ? arity : toInteger(arity);
          length -= holders ? holders.length : 0;
          if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
            var partialsRight = partials, holdersRight = holders;
            partials = holders = undefined2;
          }
          var data = isBindKey ? undefined2 : getData(func);
          var newData = [
            func,
            bitmask,
            thisArg,
            partials,
            holders,
            partialsRight,
            holdersRight,
            argPos,
            ary2,
            arity
          ];
          if (data) {
            mergeData(newData, data);
          }
          func = newData[0];
          bitmask = newData[1];
          thisArg = newData[2];
          partials = newData[3];
          holders = newData[4];
          arity = newData[9] = newData[9] === undefined2 ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
          if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
            bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
          }
          if (!bitmask || bitmask == WRAP_BIND_FLAG) {
            var result2 = createBind(func, bitmask, thisArg);
          } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
            result2 = createCurry(func, bitmask, arity);
          } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
            result2 = createPartial(func, bitmask, thisArg, partials);
          } else {
            result2 = createHybrid.apply(undefined2, newData);
          }
          var setter = data ? baseSetData : setData;
          return setWrapToString(setter(result2, newData), func, bitmask);
        }
        function customDefaultsAssignIn(objValue, srcValue, key, object) {
          if (objValue === undefined2 || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
            return srcValue;
          }
          return objValue;
        }
        function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
          if (isObject(objValue) && isObject(srcValue)) {
            stack.set(srcValue, objValue);
            baseMerge(objValue, srcValue, undefined2, customDefaultsMerge, stack);
            stack["delete"](srcValue);
          }
          return objValue;
        }
        function customOmitClone(value) {
          return isPlainObject(value) ? undefined2 : value;
        }
        function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
          if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
            return false;
          }
          var arrStacked = stack.get(array);
          var othStacked = stack.get(other);
          if (arrStacked && othStacked) {
            return arrStacked == other && othStacked == array;
          }
          var index = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined2;
          stack.set(array, other);
          stack.set(other, array);
          while (++index < arrLength) {
            var arrValue = array[index], othValue = other[index];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
            }
            if (compared !== undefined2) {
              if (compared) {
                continue;
              }
              result2 = false;
              break;
            }
            if (seen) {
              if (!arraySome(other, function(othValue2, othIndex) {
                if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
                result2 = false;
                break;
              }
            } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              result2 = false;
              break;
            }
          }
          stack["delete"](array);
          stack["delete"](other);
          return result2;
        }
        function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
          switch (tag) {
            case dataViewTag:
              if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
                return false;
              }
              object = object.buffer;
              other = other.buffer;
            case arrayBufferTag:
              if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
                return false;
              }
              return true;
            case boolTag:
            case dateTag:
            case numberTag:
              return eq(+object, +other);
            case errorTag:
              return object.name == other.name && object.message == other.message;
            case regexpTag:
            case stringTag:
              return object == other + "";
            case mapTag:
              var convert = mapToArray;
            case setTag:
              var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
              convert || (convert = setToArray);
              if (object.size != other.size && !isPartial) {
                return false;
              }
              var stacked = stack.get(object);
              if (stacked) {
                return stacked == other;
              }
              bitmask |= COMPARE_UNORDERED_FLAG;
              stack.set(object, other);
              var result2 = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
              stack["delete"](object);
              return result2;
            case symbolTag:
              if (symbolValueOf) {
                return symbolValueOf.call(object) == symbolValueOf.call(other);
              }
          }
          return false;
        }
        function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
          if (objLength != othLength && !isPartial) {
            return false;
          }
          var index = objLength;
          while (index--) {
            var key = objProps[index];
            if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
              return false;
            }
          }
          var objStacked = stack.get(object);
          var othStacked = stack.get(other);
          if (objStacked && othStacked) {
            return objStacked == other && othStacked == object;
          }
          var result2 = true;
          stack.set(object, other);
          stack.set(other, object);
          var skipCtor = isPartial;
          while (++index < objLength) {
            key = objProps[index];
            var objValue = object[key], othValue = other[key];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
            }
            if (!(compared === undefined2 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
              result2 = false;
              break;
            }
            skipCtor || (skipCtor = key == "constructor");
          }
          if (result2 && !skipCtor) {
            var objCtor = object.constructor, othCtor = other.constructor;
            if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
              result2 = false;
            }
          }
          stack["delete"](object);
          stack["delete"](other);
          return result2;
        }
        function flatRest(func) {
          return setToString(overRest(func, undefined2, flatten), func + "");
        }
        function getAllKeys(object) {
          return baseGetAllKeys(object, keys, getSymbols);
        }
        function getAllKeysIn(object) {
          return baseGetAllKeys(object, keysIn, getSymbolsIn);
        }
        var getData = !metaMap ? noop : function(func) {
          return metaMap.get(func);
        };
        function getFuncName(func) {
          var result2 = func.name + "", array = realNames[result2], length = hasOwnProperty.call(realNames, result2) ? array.length : 0;
          while (length--) {
            var data = array[length], otherFunc = data.func;
            if (otherFunc == null || otherFunc == func) {
              return data.name;
            }
          }
          return result2;
        }
        function getHolder(func) {
          var object = hasOwnProperty.call(lodash, "placeholder") ? lodash : func;
          return object.placeholder;
        }
        function getIteratee() {
          var result2 = lodash.iteratee || iteratee;
          result2 = result2 === iteratee ? baseIteratee : result2;
          return arguments.length ? result2(arguments[0], arguments[1]) : result2;
        }
        function getMapData(map2, key) {
          var data = map2.__data__;
          return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
        }
        function getMatchData(object) {
          var result2 = keys(object), length = result2.length;
          while (length--) {
            var key = result2[length], value = object[key];
            result2[length] = [key, value, isStrictComparable(value)];
          }
          return result2;
        }
        function getNative(object, key) {
          var value = getValue(object, key);
          return baseIsNative(value) ? value : undefined2;
        }
        function getRawTag(value) {
          var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
          try {
            value[symToStringTag] = undefined2;
            var unmasked = true;
          } catch (e) {
          }
          var result2 = nativeObjectToString.call(value);
          if (unmasked) {
            if (isOwn) {
              value[symToStringTag] = tag;
            } else {
              delete value[symToStringTag];
            }
          }
          return result2;
        }
        var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
          if (object == null) {
            return [];
          }
          object = Object2(object);
          return arrayFilter(nativeGetSymbols(object), function(symbol) {
            return propertyIsEnumerable.call(object, symbol);
          });
        };
        var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
          var result2 = [];
          while (object) {
            arrayPush(result2, getSymbols(object));
            object = getPrototype(object);
          }
          return result2;
        };
        var getTag = baseGetTag;
        if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
          getTag = function(value) {
            var result2 = baseGetTag(value), Ctor = result2 == objectTag ? value.constructor : undefined2, ctorString = Ctor ? toSource(Ctor) : "";
            if (ctorString) {
              switch (ctorString) {
                case dataViewCtorString:
                  return dataViewTag;
                case mapCtorString:
                  return mapTag;
                case promiseCtorString:
                  return promiseTag;
                case setCtorString:
                  return setTag;
                case weakMapCtorString:
                  return weakMapTag;
              }
            }
            return result2;
          };
        }
        function getView(start, end, transforms) {
          var index = -1, length = transforms.length;
          while (++index < length) {
            var data = transforms[index], size2 = data.size;
            switch (data.type) {
              case "drop":
                start += size2;
                break;
              case "dropRight":
                end -= size2;
                break;
              case "take":
                end = nativeMin(end, start + size2);
                break;
              case "takeRight":
                start = nativeMax(start, end - size2);
                break;
            }
          }
          return { "start": start, "end": end };
        }
        function getWrapDetails(source) {
          var match = source.match(reWrapDetails);
          return match ? match[1].split(reSplitDetails) : [];
        }
        function hasPath(object, path, hasFunc) {
          path = castPath(path, object);
          var index = -1, length = path.length, result2 = false;
          while (++index < length) {
            var key = toKey(path[index]);
            if (!(result2 = object != null && hasFunc(object, key))) {
              break;
            }
            object = object[key];
          }
          if (result2 || ++index != length) {
            return result2;
          }
          length = object == null ? 0 : object.length;
          return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
        }
        function initCloneArray(array) {
          var length = array.length, result2 = new array.constructor(length);
          if (length && typeof array[0] == "string" && hasOwnProperty.call(array, "index")) {
            result2.index = array.index;
            result2.input = array.input;
          }
          return result2;
        }
        function initCloneObject(object) {
          return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
        }
        function initCloneByTag(object, tag, isDeep) {
          var Ctor = object.constructor;
          switch (tag) {
            case arrayBufferTag:
              return cloneArrayBuffer(object);
            case boolTag:
            case dateTag:
              return new Ctor(+object);
            case dataViewTag:
              return cloneDataView(object, isDeep);
            case float32Tag:
            case float64Tag:
            case int8Tag:
            case int16Tag:
            case int32Tag:
            case uint8Tag:
            case uint8ClampedTag:
            case uint16Tag:
            case uint32Tag:
              return cloneTypedArray(object, isDeep);
            case mapTag:
              return new Ctor();
            case numberTag:
            case stringTag:
              return new Ctor(object);
            case regexpTag:
              return cloneRegExp(object);
            case setTag:
              return new Ctor();
            case symbolTag:
              return cloneSymbol(object);
          }
        }
        function insertWrapDetails(source, details) {
          var length = details.length;
          if (!length) {
            return source;
          }
          var lastIndex = length - 1;
          details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
          details = details.join(length > 2 ? ", " : " ");
          return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
        }
        function isFlattenable(value) {
          return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
        }
        function isIndex(value, length) {
          var type = typeof value;
          length = length == null ? MAX_SAFE_INTEGER : length;
          return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
        }
        function isIterateeCall(value, index, object) {
          if (!isObject(object)) {
            return false;
          }
          var type = typeof index;
          if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
            return eq(object[index], value);
          }
          return false;
        }
        function isKey(value, object) {
          if (isArray(value)) {
            return false;
          }
          var type = typeof value;
          if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
            return true;
          }
          return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object2(object);
        }
        function isKeyable(value) {
          var type = typeof value;
          return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
        }
        function isLaziable(func) {
          var funcName = getFuncName(func), other = lodash[funcName];
          if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) {
            return false;
          }
          if (func === other) {
            return true;
          }
          var data = getData(other);
          return !!data && func === data[0];
        }
        function isMasked(func) {
          return !!maskSrcKey && maskSrcKey in func;
        }
        var isMaskable = coreJsData ? isFunction : stubFalse;
        function isPrototype(value) {
          var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
          return value === proto;
        }
        function isStrictComparable(value) {
          return value === value && !isObject(value);
        }
        function matchesStrictComparable(key, srcValue) {
          return function(object) {
            if (object == null) {
              return false;
            }
            return object[key] === srcValue && (srcValue !== undefined2 || key in Object2(object));
          };
        }
        function memoizeCapped(func) {
          var result2 = memoize(func, function(key) {
            if (cache.size === MAX_MEMOIZE_SIZE) {
              cache.clear();
            }
            return key;
          });
          var cache = result2.cache;
          return result2;
        }
        function mergeData(data, source) {
          var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
          var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
          if (!(isCommon || isCombo)) {
            return data;
          }
          if (srcBitmask & WRAP_BIND_FLAG) {
            data[2] = source[2];
            newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
          }
          var value = source[3];
          if (value) {
            var partials = data[3];
            data[3] = partials ? composeArgs(partials, value, source[4]) : value;
            data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
          }
          value = source[5];
          if (value) {
            partials = data[5];
            data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
            data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
          }
          value = source[7];
          if (value) {
            data[7] = value;
          }
          if (srcBitmask & WRAP_ARY_FLAG) {
            data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
          }
          if (data[9] == null) {
            data[9] = source[9];
          }
          data[0] = source[0];
          data[1] = newBitmask;
          return data;
        }
        function nativeKeysIn(object) {
          var result2 = [];
          if (object != null) {
            for (var key in Object2(object)) {
              result2.push(key);
            }
          }
          return result2;
        }
        function objectToString(value) {
          return nativeObjectToString.call(value);
        }
        function overRest(func, start, transform2) {
          start = nativeMax(start === undefined2 ? func.length - 1 : start, 0);
          return function() {
            var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array2(length);
            while (++index < length) {
              array[index] = args[start + index];
            }
            index = -1;
            var otherArgs = Array2(start + 1);
            while (++index < start) {
              otherArgs[index] = args[index];
            }
            otherArgs[start] = transform2(array);
            return apply(func, this, otherArgs);
          };
        }
        function parent(object, path) {
          return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
        }
        function reorder(array, indexes) {
          var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);
          while (length--) {
            var index = indexes[length];
            array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined2;
          }
          return array;
        }
        function safeGet(object, key) {
          if (key === "constructor" && typeof object[key] === "function") {
            return;
          }
          if (key == "__proto__") {
            return;
          }
          return object[key];
        }
        var setData = shortOut(baseSetData);
        var setTimeout = ctxSetTimeout || function(func, wait) {
          return root.setTimeout(func, wait);
        };
        var setToString = shortOut(baseSetToString);
        function setWrapToString(wrapper, reference, bitmask) {
          var source = reference + "";
          return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
        }
        function shortOut(func) {
          var count = 0, lastCalled = 0;
          return function() {
            var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
            lastCalled = stamp;
            if (remaining > 0) {
              if (++count >= HOT_COUNT) {
                return arguments[0];
              }
            } else {
              count = 0;
            }
            return func.apply(undefined2, arguments);
          };
        }
        function shuffleSelf(array, size2) {
          var index = -1, length = array.length, lastIndex = length - 1;
          size2 = size2 === undefined2 ? length : size2;
          while (++index < size2) {
            var rand = baseRandom(index, lastIndex), value = array[rand];
            array[rand] = array[index];
            array[index] = value;
          }
          array.length = size2;
          return array;
        }
        var stringToPath = memoizeCapped(function(string) {
          var result2 = [];
          if (string.charCodeAt(0) === 46) {
            result2.push("");
          }
          string.replace(rePropName, function(match, number, quote, subString) {
            result2.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
          });
          return result2;
        });
        function toKey(value) {
          if (typeof value == "string" || isSymbol(value)) {
            return value;
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
        }
        function toSource(func) {
          if (func != null) {
            try {
              return funcToString.call(func);
            } catch (e) {
            }
            try {
              return func + "";
            } catch (e) {
            }
          }
          return "";
        }
        function updateWrapDetails(details, bitmask) {
          arrayEach(wrapFlags, function(pair) {
            var value = "_." + pair[0];
            if (bitmask & pair[1] && !arrayIncludes(details, value)) {
              details.push(value);
            }
          });
          return details.sort();
        }
        function wrapperClone(wrapper) {
          if (wrapper instanceof LazyWrapper) {
            return wrapper.clone();
          }
          var result2 = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
          result2.__actions__ = copyArray(wrapper.__actions__);
          result2.__index__ = wrapper.__index__;
          result2.__values__ = wrapper.__values__;
          return result2;
        }
        function chunk(array, size2, guard) {
          if (guard ? isIterateeCall(array, size2, guard) : size2 === undefined2) {
            size2 = 1;
          } else {
            size2 = nativeMax(toInteger(size2), 0);
          }
          var length = array == null ? 0 : array.length;
          if (!length || size2 < 1) {
            return [];
          }
          var index = 0, resIndex = 0, result2 = Array2(nativeCeil(length / size2));
          while (index < length) {
            result2[resIndex++] = baseSlice(array, index, index += size2);
          }
          return result2;
        }
        function compact(array) {
          var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result2 = [];
          while (++index < length) {
            var value = array[index];
            if (value) {
              result2[resIndex++] = value;
            }
          }
          return result2;
        }
        function concat() {
          var length = arguments.length;
          if (!length) {
            return [];
          }
          var args = Array2(length - 1), array = arguments[0], index = length;
          while (index--) {
            args[index - 1] = arguments[index];
          }
          return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
        }
        var difference = baseRest(function(array, values2) {
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true)) : [];
        });
        var differenceBy = baseRest(function(array, values2) {
          var iteratee2 = last(values2);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2)) : [];
        });
        var differenceWith = baseRest(function(array, values2) {
          var comparator = last(values2);
          if (isArrayLikeObject(comparator)) {
            comparator = undefined2;
          }
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), undefined2, comparator) : [];
        });
        function drop(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          return baseSlice(array, n < 0 ? 0 : n, length);
        }
        function dropRight(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          n = length - n;
          return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        function dropRightWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
        }
        function dropWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
        }
        function fill(array, value, start, end) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (start && typeof start != "number" && isIterateeCall(array, value, start)) {
            start = 0;
            end = length;
          }
          return baseFill(array, value, start, end);
        }
        function findIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseFindIndex(array, getIteratee(predicate, 3), index);
        }
        function findLastIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = length - 1;
          if (fromIndex !== undefined2) {
            index = toInteger(fromIndex);
            index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
          }
          return baseFindIndex(array, getIteratee(predicate, 3), index, true);
        }
        function flatten(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten(array, 1) : [];
        }
        function flattenDeep(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten(array, INFINITY) : [];
        }
        function flattenDepth(array, depth) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          depth = depth === undefined2 ? 1 : toInteger(depth);
          return baseFlatten(array, depth);
        }
        function fromPairs(pairs) {
          var index = -1, length = pairs == null ? 0 : pairs.length, result2 = {};
          while (++index < length) {
            var pair = pairs[index];
            result2[pair[0]] = pair[1];
          }
          return result2;
        }
        function head(array) {
          return array && array.length ? array[0] : undefined2;
        }
        function indexOf(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseIndexOf(array, value, index);
        }
        function initial(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice(array, 0, -1) : [];
        }
        var intersection = baseRest(function(arrays) {
          var mapped = arrayMap(arrays, castArrayLikeObject);
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
        });
        var intersectionBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
          if (iteratee2 === last(mapped)) {
            iteratee2 = undefined2;
          } else {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee2, 2)) : [];
        });
        var intersectionWith = baseRest(function(arrays) {
          var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          if (comparator) {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined2, comparator) : [];
        });
        function join(array, separator) {
          return array == null ? "" : nativeJoin.call(array, separator);
        }
        function last(array) {
          var length = array == null ? 0 : array.length;
          return length ? array[length - 1] : undefined2;
        }
        function lastIndexOf(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = length;
          if (fromIndex !== undefined2) {
            index = toInteger(fromIndex);
            index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
          }
          return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
        }
        function nth(array, n) {
          return array && array.length ? baseNth(array, toInteger(n)) : undefined2;
        }
        var pull = baseRest(pullAll);
        function pullAll(array, values2) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2) : array;
        }
        function pullAllBy(array, values2, iteratee2) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2, getIteratee(iteratee2, 2)) : array;
        }
        function pullAllWith(array, values2, comparator) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2, undefined2, comparator) : array;
        }
        var pullAt = flatRest(function(array, indexes) {
          var length = array == null ? 0 : array.length, result2 = baseAt(array, indexes);
          basePullAt(array, arrayMap(indexes, function(index) {
            return isIndex(index, length) ? +index : index;
          }).sort(compareAscending));
          return result2;
        });
        function remove(array, predicate) {
          var result2 = [];
          if (!(array && array.length)) {
            return result2;
          }
          var index = -1, indexes = [], length = array.length;
          predicate = getIteratee(predicate, 3);
          while (++index < length) {
            var value = array[index];
            if (predicate(value, index, array)) {
              result2.push(value);
              indexes.push(index);
            }
          }
          basePullAt(array, indexes);
          return result2;
        }
        function reverse(array) {
          return array == null ? array : nativeReverse.call(array);
        }
        function slice(array, start, end) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (end && typeof end != "number" && isIterateeCall(array, start, end)) {
            start = 0;
            end = length;
          } else {
            start = start == null ? 0 : toInteger(start);
            end = end === undefined2 ? length : toInteger(end);
          }
          return baseSlice(array, start, end);
        }
        function sortedIndex(array, value) {
          return baseSortedIndex(array, value);
        }
        function sortedIndexBy(array, value, iteratee2) {
          return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2));
        }
        function sortedIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index = baseSortedIndex(array, value);
            if (index < length && eq(array[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function sortedLastIndex(array, value) {
          return baseSortedIndex(array, value, true);
        }
        function sortedLastIndexBy(array, value, iteratee2) {
          return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2), true);
        }
        function sortedLastIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index = baseSortedIndex(array, value, true) - 1;
            if (eq(array[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function sortedUniq(array) {
          return array && array.length ? baseSortedUniq(array) : [];
        }
        function sortedUniqBy(array, iteratee2) {
          return array && array.length ? baseSortedUniq(array, getIteratee(iteratee2, 2)) : [];
        }
        function tail(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice(array, 1, length) : [];
        }
        function take(array, n, guard) {
          if (!(array && array.length)) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        function takeRight(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          n = length - n;
          return baseSlice(array, n < 0 ? 0 : n, length);
        }
        function takeRightWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
        }
        function takeWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
        }
        var union = baseRest(function(arrays) {
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
        });
        var unionBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2));
        });
        var unionWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined2, comparator);
        });
        function uniq(array) {
          return array && array.length ? baseUniq(array) : [];
        }
        function uniqBy(array, iteratee2) {
          return array && array.length ? baseUniq(array, getIteratee(iteratee2, 2)) : [];
        }
        function uniqWith(array, comparator) {
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return array && array.length ? baseUniq(array, undefined2, comparator) : [];
        }
        function unzip(array) {
          if (!(array && array.length)) {
            return [];
          }
          var length = 0;
          array = arrayFilter(array, function(group) {
            if (isArrayLikeObject(group)) {
              length = nativeMax(group.length, length);
              return true;
            }
          });
          return baseTimes(length, function(index) {
            return arrayMap(array, baseProperty(index));
          });
        }
        function unzipWith(array, iteratee2) {
          if (!(array && array.length)) {
            return [];
          }
          var result2 = unzip(array);
          if (iteratee2 == null) {
            return result2;
          }
          return arrayMap(result2, function(group) {
            return apply(iteratee2, undefined2, group);
          });
        }
        var without = baseRest(function(array, values2) {
          return isArrayLikeObject(array) ? baseDifference(array, values2) : [];
        });
        var xor = baseRest(function(arrays) {
          return baseXor(arrayFilter(arrays, isArrayLikeObject));
        });
        var xorBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee2, 2));
        });
        var xorWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined2, comparator);
        });
        var zip = baseRest(unzip);
        function zipObject(props, values2) {
          return baseZipObject(props || [], values2 || [], assignValue);
        }
        function zipObjectDeep(props, values2) {
          return baseZipObject(props || [], values2 || [], baseSet);
        }
        var zipWith = baseRest(function(arrays) {
          var length = arrays.length, iteratee2 = length > 1 ? arrays[length - 1] : undefined2;
          iteratee2 = typeof iteratee2 == "function" ? (arrays.pop(), iteratee2) : undefined2;
          return unzipWith(arrays, iteratee2);
        });
        function chain(value) {
          var result2 = lodash(value);
          result2.__chain__ = true;
          return result2;
        }
        function tap(value, interceptor) {
          interceptor(value);
          return value;
        }
        function thru(value, interceptor) {
          return interceptor(value);
        }
        var wrapperAt = flatRest(function(paths) {
          var length = paths.length, start = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object) {
            return baseAt(object, paths);
          };
          if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
            return this.thru(interceptor);
          }
          value = value.slice(start, +start + (length ? 1 : 0));
          value.__actions__.push({
            "func": thru,
            "args": [interceptor],
            "thisArg": undefined2
          });
          return new LodashWrapper(value, this.__chain__).thru(function(array) {
            if (length && !array.length) {
              array.push(undefined2);
            }
            return array;
          });
        });
        function wrapperChain() {
          return chain(this);
        }
        function wrapperCommit() {
          return new LodashWrapper(this.value(), this.__chain__);
        }
        function wrapperNext() {
          if (this.__values__ === undefined2) {
            this.__values__ = toArray(this.value());
          }
          var done = this.__index__ >= this.__values__.length, value = done ? undefined2 : this.__values__[this.__index__++];
          return { "done": done, "value": value };
        }
        function wrapperToIterator() {
          return this;
        }
        function wrapperPlant(value) {
          var result2, parent2 = this;
          while (parent2 instanceof baseLodash) {
            var clone2 = wrapperClone(parent2);
            clone2.__index__ = 0;
            clone2.__values__ = undefined2;
            if (result2) {
              previous.__wrapped__ = clone2;
            } else {
              result2 = clone2;
            }
            var previous = clone2;
            parent2 = parent2.__wrapped__;
          }
          previous.__wrapped__ = value;
          return result2;
        }
        function wrapperReverse() {
          var value = this.__wrapped__;
          if (value instanceof LazyWrapper) {
            var wrapped = value;
            if (this.__actions__.length) {
              wrapped = new LazyWrapper(this);
            }
            wrapped = wrapped.reverse();
            wrapped.__actions__.push({
              "func": thru,
              "args": [reverse],
              "thisArg": undefined2
            });
            return new LodashWrapper(wrapped, this.__chain__);
          }
          return this.thru(reverse);
        }
        function wrapperValue() {
          return baseWrapperValue(this.__wrapped__, this.__actions__);
        }
        var countBy = createAggregator(function(result2, value, key) {
          if (hasOwnProperty.call(result2, key)) {
            ++result2[key];
          } else {
            baseAssignValue(result2, key, 1);
          }
        });
        function every(collection, predicate, guard) {
          var func = isArray(collection) ? arrayEvery : baseEvery;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined2;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        function filter(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, getIteratee(predicate, 3));
        }
        var find = createFind(findIndex);
        var findLast = createFind(findLastIndex);
        function flatMap(collection, iteratee2) {
          return baseFlatten(map(collection, iteratee2), 1);
        }
        function flatMapDeep(collection, iteratee2) {
          return baseFlatten(map(collection, iteratee2), INFINITY);
        }
        function flatMapDepth(collection, iteratee2, depth) {
          depth = depth === undefined2 ? 1 : toInteger(depth);
          return baseFlatten(map(collection, iteratee2), depth);
        }
        function forEach(collection, iteratee2) {
          var func = isArray(collection) ? arrayEach : baseEach;
          return func(collection, getIteratee(iteratee2, 3));
        }
        function forEachRight(collection, iteratee2) {
          var func = isArray(collection) ? arrayEachRight : baseEachRight;
          return func(collection, getIteratee(iteratee2, 3));
        }
        var groupBy = createAggregator(function(result2, value, key) {
          if (hasOwnProperty.call(result2, key)) {
            result2[key].push(value);
          } else {
            baseAssignValue(result2, key, [value]);
          }
        });
        function includes(collection, value, fromIndex, guard) {
          collection = isArrayLike(collection) ? collection : values(collection);
          fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
          var length = collection.length;
          if (fromIndex < 0) {
            fromIndex = nativeMax(length + fromIndex, 0);
          }
          return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
        }
        var invokeMap = baseRest(function(collection, path, args) {
          var index = -1, isFunc = typeof path == "function", result2 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function(value) {
            result2[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
          });
          return result2;
        });
        var keyBy = createAggregator(function(result2, value, key) {
          baseAssignValue(result2, key, value);
        });
        function map(collection, iteratee2) {
          var func = isArray(collection) ? arrayMap : baseMap;
          return func(collection, getIteratee(iteratee2, 3));
        }
        function orderBy(collection, iteratees, orders, guard) {
          if (collection == null) {
            return [];
          }
          if (!isArray(iteratees)) {
            iteratees = iteratees == null ? [] : [iteratees];
          }
          orders = guard ? undefined2 : orders;
          if (!isArray(orders)) {
            orders = orders == null ? [] : [orders];
          }
          return baseOrderBy(collection, iteratees, orders);
        }
        var partition = createAggregator(function(result2, value, key) {
          result2[key ? 0 : 1].push(value);
        }, function() {
          return [[], []];
        });
        function reduce(collection, iteratee2, accumulator) {
          var func = isArray(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
          return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEach);
        }
        function reduceRight(collection, iteratee2, accumulator) {
          var func = isArray(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
          return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEachRight);
        }
        function reject(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, negate(getIteratee(predicate, 3)));
        }
        function sample(collection) {
          var func = isArray(collection) ? arraySample : baseSample;
          return func(collection);
        }
        function sampleSize(collection, n, guard) {
          if (guard ? isIterateeCall(collection, n, guard) : n === undefined2) {
            n = 1;
          } else {
            n = toInteger(n);
          }
          var func = isArray(collection) ? arraySampleSize : baseSampleSize;
          return func(collection, n);
        }
        function shuffle(collection) {
          var func = isArray(collection) ? arrayShuffle : baseShuffle;
          return func(collection);
        }
        function size(collection) {
          if (collection == null) {
            return 0;
          }
          if (isArrayLike(collection)) {
            return isString(collection) ? stringSize(collection) : collection.length;
          }
          var tag = getTag(collection);
          if (tag == mapTag || tag == setTag) {
            return collection.size;
          }
          return baseKeys(collection).length;
        }
        function some(collection, predicate, guard) {
          var func = isArray(collection) ? arraySome : baseSome;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined2;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        var sortBy = baseRest(function(collection, iteratees) {
          if (collection == null) {
            return [];
          }
          var length = iteratees.length;
          if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
            iteratees = [];
          } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
            iteratees = [iteratees[0]];
          }
          return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
        });
        var now = ctxNow || function() {
          return root.Date.now();
        };
        function after(n, func) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          n = toInteger(n);
          return function() {
            if (--n < 1) {
              return func.apply(this, arguments);
            }
          };
        }
        function ary(func, n, guard) {
          n = guard ? undefined2 : n;
          n = func && n == null ? func.length : n;
          return createWrap(func, WRAP_ARY_FLAG, undefined2, undefined2, undefined2, undefined2, n);
        }
        function before(n, func) {
          var result2;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          n = toInteger(n);
          return function() {
            if (--n > 0) {
              result2 = func.apply(this, arguments);
            }
            if (n <= 1) {
              func = undefined2;
            }
            return result2;
          };
        }
        var bind = baseRest(function(func, thisArg, partials) {
          var bitmask = WRAP_BIND_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bind));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(func, bitmask, thisArg, partials, holders);
        });
        var bindKey = baseRest(function(object, key, partials) {
          var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bindKey));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(key, bitmask, object, partials, holders);
        });
        function curry(func, arity, guard) {
          arity = guard ? undefined2 : arity;
          var result2 = createWrap(func, WRAP_CURRY_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
          result2.placeholder = curry.placeholder;
          return result2;
        }
        function curryRight(func, arity, guard) {
          arity = guard ? undefined2 : arity;
          var result2 = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
          result2.placeholder = curryRight.placeholder;
          return result2;
        }
        function debounce(func, wait, options) {
          var lastArgs, lastThis, maxWait, result2, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          wait = toNumber(wait) || 0;
          if (isObject(options)) {
            leading = !!options.leading;
            maxing = "maxWait" in options;
            maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
            trailing = "trailing" in options ? !!options.trailing : trailing;
          }
          function invokeFunc(time) {
            var args = lastArgs, thisArg = lastThis;
            lastArgs = lastThis = undefined2;
            lastInvokeTime = time;
            result2 = func.apply(thisArg, args);
            return result2;
          }
          function leadingEdge(time) {
            lastInvokeTime = time;
            timerId = setTimeout(timerExpired, wait);
            return leading ? invokeFunc(time) : result2;
          }
          function remainingWait(time) {
            var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
            return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
          }
          function shouldInvoke(time) {
            var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
            return lastCallTime === undefined2 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
          }
          function timerExpired() {
            var time = now();
            if (shouldInvoke(time)) {
              return trailingEdge(time);
            }
            timerId = setTimeout(timerExpired, remainingWait(time));
          }
          function trailingEdge(time) {
            timerId = undefined2;
            if (trailing && lastArgs) {
              return invokeFunc(time);
            }
            lastArgs = lastThis = undefined2;
            return result2;
          }
          function cancel() {
            if (timerId !== undefined2) {
              clearTimeout(timerId);
            }
            lastInvokeTime = 0;
            lastArgs = lastCallTime = lastThis = timerId = undefined2;
          }
          function flush() {
            return timerId === undefined2 ? result2 : trailingEdge(now());
          }
          function debounced() {
            var time = now(), isInvoking = shouldInvoke(time);
            lastArgs = arguments;
            lastThis = this;
            lastCallTime = time;
            if (isInvoking) {
              if (timerId === undefined2) {
                return leadingEdge(lastCallTime);
              }
              if (maxing) {
                clearTimeout(timerId);
                timerId = setTimeout(timerExpired, wait);
                return invokeFunc(lastCallTime);
              }
            }
            if (timerId === undefined2) {
              timerId = setTimeout(timerExpired, wait);
            }
            return result2;
          }
          debounced.cancel = cancel;
          debounced.flush = flush;
          return debounced;
        }
        var defer = baseRest(function(func, args) {
          return baseDelay(func, 1, args);
        });
        var delay = baseRest(function(func, wait, args) {
          return baseDelay(func, toNumber(wait) || 0, args);
        });
        function flip(func) {
          return createWrap(func, WRAP_FLIP_FLAG);
        }
        function memoize(func, resolver) {
          if (typeof func != "function" || resolver != null && typeof resolver != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          var memoized = function() {
            var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
            if (cache.has(key)) {
              return cache.get(key);
            }
            var result2 = func.apply(this, args);
            memoized.cache = cache.set(key, result2) || cache;
            return result2;
          };
          memoized.cache = new (memoize.Cache || MapCache)();
          return memoized;
        }
        memoize.Cache = MapCache;
        function negate(predicate) {
          if (typeof predicate != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return !predicate.call(this);
              case 1:
                return !predicate.call(this, args[0]);
              case 2:
                return !predicate.call(this, args[0], args[1]);
              case 3:
                return !predicate.call(this, args[0], args[1], args[2]);
            }
            return !predicate.apply(this, args);
          };
        }
        function once(func) {
          return before(2, func);
        }
        var overArgs = castRest(function(func, transforms) {
          transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
          var funcsLength = transforms.length;
          return baseRest(function(args) {
            var index = -1, length = nativeMin(args.length, funcsLength);
            while (++index < length) {
              args[index] = transforms[index].call(this, args[index]);
            }
            return apply(func, this, args);
          });
        });
        var partial = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partial));
          return createWrap(func, WRAP_PARTIAL_FLAG, undefined2, partials, holders);
        });
        var partialRight = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partialRight));
          return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined2, partials, holders);
        });
        var rearg = flatRest(function(func, indexes) {
          return createWrap(func, WRAP_REARG_FLAG, undefined2, undefined2, undefined2, indexes);
        });
        function rest(func, start) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          start = start === undefined2 ? start : toInteger(start);
          return baseRest(func, start);
        }
        function spread(func, start) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          start = start == null ? 0 : nativeMax(toInteger(start), 0);
          return baseRest(function(args) {
            var array = args[start], otherArgs = castSlice(args, 0, start);
            if (array) {
              arrayPush(otherArgs, array);
            }
            return apply(func, this, otherArgs);
          });
        }
        function throttle(func, wait, options) {
          var leading = true, trailing = true;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          if (isObject(options)) {
            leading = "leading" in options ? !!options.leading : leading;
            trailing = "trailing" in options ? !!options.trailing : trailing;
          }
          return debounce(func, wait, {
            "leading": leading,
            "maxWait": wait,
            "trailing": trailing
          });
        }
        function unary(func) {
          return ary(func, 1);
        }
        function wrap(value, wrapper) {
          return partial(castFunction(wrapper), value);
        }
        function castArray() {
          if (!arguments.length) {
            return [];
          }
          var value = arguments[0];
          return isArray(value) ? value : [value];
        }
        function clone(value) {
          return baseClone(value, CLONE_SYMBOLS_FLAG);
        }
        function cloneWith(value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
        }
        function cloneDeep(value) {
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
        }
        function cloneDeepWith(value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
        }
        function conformsTo(object, source) {
          return source == null || baseConformsTo(object, source, keys(source));
        }
        function eq(value, other) {
          return value === other || value !== value && other !== other;
        }
        var gt = createRelationalOperation(baseGt);
        var gte = createRelationalOperation(function(value, other) {
          return value >= other;
        });
        var isArguments = baseIsArguments(/* @__PURE__ */ (function() {
          return arguments;
        })()) ? baseIsArguments : function(value) {
          return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
        };
        var isArray = Array2.isArray;
        var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
        function isArrayLike(value) {
          return value != null && isLength(value.length) && !isFunction(value);
        }
        function isArrayLikeObject(value) {
          return isObjectLike(value) && isArrayLike(value);
        }
        function isBoolean(value) {
          return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
        }
        var isBuffer = nativeIsBuffer || stubFalse;
        var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
        function isElement(value) {
          return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
        }
        function isEmpty(value) {
          if (value == null) {
            return true;
          }
          if (isArrayLike(value) && (isArray(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
            return !value.length;
          }
          var tag = getTag(value);
          if (tag == mapTag || tag == setTag) {
            return !value.size;
          }
          if (isPrototype(value)) {
            return !baseKeys(value).length;
          }
          for (var key in value) {
            if (hasOwnProperty.call(value, key)) {
              return false;
            }
          }
          return true;
        }
        function isEqual(value, other) {
          return baseIsEqual(value, other);
        }
        function isEqualWith(value, other, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          var result2 = customizer ? customizer(value, other) : undefined2;
          return result2 === undefined2 ? baseIsEqual(value, other, undefined2, customizer) : !!result2;
        }
        function isError(value) {
          if (!isObjectLike(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == errorTag || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject(value);
        }
        function isFinite(value) {
          return typeof value == "number" && nativeIsFinite(value);
        }
        function isFunction(value) {
          if (!isObject(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
        }
        function isInteger(value) {
          return typeof value == "number" && value == toInteger(value);
        }
        function isLength(value) {
          return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }
        function isObject(value) {
          var type = typeof value;
          return value != null && (type == "object" || type == "function");
        }
        function isObjectLike(value) {
          return value != null && typeof value == "object";
        }
        var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
        function isMatch(object, source) {
          return object === source || baseIsMatch(object, source, getMatchData(source));
        }
        function isMatchWith(object, source, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseIsMatch(object, source, getMatchData(source), customizer);
        }
        function isNaN(value) {
          return isNumber(value) && value != +value;
        }
        function isNative(value) {
          if (isMaskable(value)) {
            throw new Error2(CORE_ERROR_TEXT);
          }
          return baseIsNative(value);
        }
        function isNull(value) {
          return value === null;
        }
        function isNil(value) {
          return value == null;
        }
        function isNumber(value) {
          return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
        }
        function isPlainObject(value) {
          if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
            return false;
          }
          var proto = getPrototype(value);
          if (proto === null) {
            return true;
          }
          var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
          return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
        }
        var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
        function isSafeInteger(value) {
          return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
        }
        var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
        function isString(value) {
          return typeof value == "string" || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
        }
        function isSymbol(value) {
          return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
        }
        var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
        function isUndefined(value) {
          return value === undefined2;
        }
        function isWeakMap(value) {
          return isObjectLike(value) && getTag(value) == weakMapTag;
        }
        function isWeakSet(value) {
          return isObjectLike(value) && baseGetTag(value) == weakSetTag;
        }
        var lt = createRelationalOperation(baseLt);
        var lte = createRelationalOperation(function(value, other) {
          return value <= other;
        });
        function toArray(value) {
          if (!value) {
            return [];
          }
          if (isArrayLike(value)) {
            return isString(value) ? stringToArray(value) : copyArray(value);
          }
          if (symIterator && value[symIterator]) {
            return iteratorToArray(value[symIterator]());
          }
          var tag = getTag(value), func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
          return func(value);
        }
        function toFinite(value) {
          if (!value) {
            return value === 0 ? value : 0;
          }
          value = toNumber(value);
          if (value === INFINITY || value === -INFINITY) {
            var sign = value < 0 ? -1 : 1;
            return sign * MAX_INTEGER;
          }
          return value === value ? value : 0;
        }
        function toInteger(value) {
          var result2 = toFinite(value), remainder = result2 % 1;
          return result2 === result2 ? remainder ? result2 - remainder : result2 : 0;
        }
        function toLength(value) {
          return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
        }
        function toNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          if (isObject(value)) {
            var other = typeof value.valueOf == "function" ? value.valueOf() : value;
            value = isObject(other) ? other + "" : other;
          }
          if (typeof value != "string") {
            return value === 0 ? value : +value;
          }
          value = baseTrim(value);
          var isBinary = reIsBinary.test(value);
          return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
        }
        function toPlainObject(value) {
          return copyObject(value, keysIn(value));
        }
        function toSafeInteger(value) {
          return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
        }
        function toString(value) {
          return value == null ? "" : baseToString(value);
        }
        var assign = createAssigner(function(object, source) {
          if (isPrototype(source) || isArrayLike(source)) {
            copyObject(source, keys(source), object);
            return;
          }
          for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
              assignValue(object, key, source[key]);
            }
          }
        });
        var assignIn = createAssigner(function(object, source) {
          copyObject(source, keysIn(source), object);
        });
        var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keysIn(source), object, customizer);
        });
        var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keys(source), object, customizer);
        });
        var at = flatRest(baseAt);
        function create(prototype, properties) {
          var result2 = baseCreate(prototype);
          return properties == null ? result2 : baseAssign(result2, properties);
        }
        var defaults = baseRest(function(object, sources) {
          object = Object2(object);
          var index = -1;
          var length = sources.length;
          var guard = length > 2 ? sources[2] : undefined2;
          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            length = 1;
          }
          while (++index < length) {
            var source = sources[index];
            var props = keysIn(source);
            var propsIndex = -1;
            var propsLength = props.length;
            while (++propsIndex < propsLength) {
              var key = props[propsIndex];
              var value = object[key];
              if (value === undefined2 || eq(value, objectProto[key]) && !hasOwnProperty.call(object, key)) {
                object[key] = source[key];
              }
            }
          }
          return object;
        });
        var defaultsDeep = baseRest(function(args) {
          args.push(undefined2, customDefaultsMerge);
          return apply(mergeWith, undefined2, args);
        });
        function findKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
        }
        function findLastKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
        }
        function forIn(object, iteratee2) {
          return object == null ? object : baseFor(object, getIteratee(iteratee2, 3), keysIn);
        }
        function forInRight(object, iteratee2) {
          return object == null ? object : baseForRight(object, getIteratee(iteratee2, 3), keysIn);
        }
        function forOwn(object, iteratee2) {
          return object && baseForOwn(object, getIteratee(iteratee2, 3));
        }
        function forOwnRight(object, iteratee2) {
          return object && baseForOwnRight(object, getIteratee(iteratee2, 3));
        }
        function functions(object) {
          return object == null ? [] : baseFunctions(object, keys(object));
        }
        function functionsIn(object) {
          return object == null ? [] : baseFunctions(object, keysIn(object));
        }
        function get(object, path, defaultValue) {
          var result2 = object == null ? undefined2 : baseGet(object, path);
          return result2 === undefined2 ? defaultValue : result2;
        }
        function has(object, path) {
          return object != null && hasPath(object, path, baseHas);
        }
        function hasIn(object, path) {
          return object != null && hasPath(object, path, baseHasIn);
        }
        var invert = createInverter(function(result2, value, key) {
          if (value != null && typeof value.toString != "function") {
            value = nativeObjectToString.call(value);
          }
          result2[value] = key;
        }, constant(identity));
        var invertBy = createInverter(function(result2, value, key) {
          if (value != null && typeof value.toString != "function") {
            value = nativeObjectToString.call(value);
          }
          if (hasOwnProperty.call(result2, value)) {
            result2[value].push(key);
          } else {
            result2[value] = [key];
          }
        }, getIteratee);
        var invoke = baseRest(baseInvoke);
        function keys(object) {
          return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
        }
        function keysIn(object) {
          return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
        }
        function mapKeys(object, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object, function(value, key, object2) {
            baseAssignValue(result2, iteratee2(value, key, object2), value);
          });
          return result2;
        }
        function mapValues(object, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object, function(value, key, object2) {
            baseAssignValue(result2, key, iteratee2(value, key, object2));
          });
          return result2;
        }
        var merge = createAssigner(function(object, source, srcIndex) {
          baseMerge(object, source, srcIndex);
        });
        var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
          baseMerge(object, source, srcIndex, customizer);
        });
        var omit = flatRest(function(object, paths) {
          var result2 = {};
          if (object == null) {
            return result2;
          }
          var isDeep = false;
          paths = arrayMap(paths, function(path) {
            path = castPath(path, object);
            isDeep || (isDeep = path.length > 1);
            return path;
          });
          copyObject(object, getAllKeysIn(object), result2);
          if (isDeep) {
            result2 = baseClone(result2, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
          }
          var length = paths.length;
          while (length--) {
            baseUnset(result2, paths[length]);
          }
          return result2;
        });
        function omitBy(object, predicate) {
          return pickBy(object, negate(getIteratee(predicate)));
        }
        var pick = flatRest(function(object, paths) {
          return object == null ? {} : basePick(object, paths);
        });
        function pickBy(object, predicate) {
          if (object == null) {
            return {};
          }
          var props = arrayMap(getAllKeysIn(object), function(prop) {
            return [prop];
          });
          predicate = getIteratee(predicate);
          return basePickBy(object, props, function(value, path) {
            return predicate(value, path[0]);
          });
        }
        function result(object, path, defaultValue) {
          path = castPath(path, object);
          var index = -1, length = path.length;
          if (!length) {
            length = 1;
            object = undefined2;
          }
          while (++index < length) {
            var value = object == null ? undefined2 : object[toKey(path[index])];
            if (value === undefined2) {
              index = length;
              value = defaultValue;
            }
            object = isFunction(value) ? value.call(object) : value;
          }
          return object;
        }
        function set(object, path, value) {
          return object == null ? object : baseSet(object, path, value);
        }
        function setWith(object, path, value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return object == null ? object : baseSet(object, path, value, customizer);
        }
        var toPairs = createToPairs(keys);
        var toPairsIn = createToPairs(keysIn);
        function transform(object, iteratee2, accumulator) {
          var isArr = isArray(object), isArrLike = isArr || isBuffer(object) || isTypedArray(object);
          iteratee2 = getIteratee(iteratee2, 4);
          if (accumulator == null) {
            var Ctor = object && object.constructor;
            if (isArrLike) {
              accumulator = isArr ? new Ctor() : [];
            } else if (isObject(object)) {
              accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
            } else {
              accumulator = {};
            }
          }
          (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object2) {
            return iteratee2(accumulator, value, index, object2);
          });
          return accumulator;
        }
        function unset(object, path) {
          return object == null ? true : baseUnset(object, path);
        }
        function update(object, path, updater) {
          return object == null ? object : baseUpdate(object, path, castFunction(updater));
        }
        function updateWith(object, path, updater, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
        }
        function values(object) {
          return object == null ? [] : baseValues(object, keys(object));
        }
        function valuesIn(object) {
          return object == null ? [] : baseValues(object, keysIn(object));
        }
        function clamp(number, lower, upper) {
          if (upper === undefined2) {
            upper = lower;
            lower = undefined2;
          }
          if (upper !== undefined2) {
            upper = toNumber(upper);
            upper = upper === upper ? upper : 0;
          }
          if (lower !== undefined2) {
            lower = toNumber(lower);
            lower = lower === lower ? lower : 0;
          }
          return baseClamp(toNumber(number), lower, upper);
        }
        function inRange(number, start, end) {
          start = toFinite(start);
          if (end === undefined2) {
            end = start;
            start = 0;
          } else {
            end = toFinite(end);
          }
          number = toNumber(number);
          return baseInRange(number, start, end);
        }
        function random(lower, upper, floating) {
          if (floating && typeof floating != "boolean" && isIterateeCall(lower, upper, floating)) {
            upper = floating = undefined2;
          }
          if (floating === undefined2) {
            if (typeof upper == "boolean") {
              floating = upper;
              upper = undefined2;
            } else if (typeof lower == "boolean") {
              floating = lower;
              lower = undefined2;
            }
          }
          if (lower === undefined2 && upper === undefined2) {
            lower = 0;
            upper = 1;
          } else {
            lower = toFinite(lower);
            if (upper === undefined2) {
              upper = lower;
              lower = 0;
            } else {
              upper = toFinite(upper);
            }
          }
          if (lower > upper) {
            var temp = lower;
            lower = upper;
            upper = temp;
          }
          if (floating || lower % 1 || upper % 1) {
            var rand = nativeRandom();
            return nativeMin(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
          }
          return baseRandom(lower, upper);
        }
        var camelCase = createCompounder(function(result2, word, index) {
          word = word.toLowerCase();
          return result2 + (index ? capitalize(word) : word);
        });
        function capitalize(string) {
          return upperFirst(toString(string).toLowerCase());
        }
        function deburr(string) {
          string = toString(string);
          return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
        }
        function endsWith(string, target, position) {
          string = toString(string);
          target = baseToString(target);
          var length = string.length;
          position = position === undefined2 ? length : baseClamp(toInteger(position), 0, length);
          var end = position;
          position -= target.length;
          return position >= 0 && string.slice(position, end) == target;
        }
        function escape(string) {
          string = toString(string);
          return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
        }
        function escapeRegExp(string) {
          string = toString(string);
          return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, "\\$&") : string;
        }
        var kebabCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? "-" : "") + word.toLowerCase();
        });
        var lowerCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + word.toLowerCase();
        });
        var lowerFirst = createCaseFirst("toLowerCase");
        function pad(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          if (!length || strLength >= length) {
            return string;
          }
          var mid = (length - strLength) / 2;
          return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
        }
        function padEnd(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
        }
        function padStart(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
        }
        function parseInt2(string, radix, guard) {
          if (guard || radix == null) {
            radix = 0;
          } else if (radix) {
            radix = +radix;
          }
          return nativeParseInt(toString(string).replace(reTrimStart, ""), radix || 0);
        }
        function repeat(string, n, guard) {
          if (guard ? isIterateeCall(string, n, guard) : n === undefined2) {
            n = 1;
          } else {
            n = toInteger(n);
          }
          return baseRepeat(toString(string), n);
        }
        function replace() {
          var args = arguments, string = toString(args[0]);
          return args.length < 3 ? string : string.replace(args[1], args[2]);
        }
        var snakeCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? "_" : "") + word.toLowerCase();
        });
        function split(string, separator, limit) {
          if (limit && typeof limit != "number" && isIterateeCall(string, separator, limit)) {
            separator = limit = undefined2;
          }
          limit = limit === undefined2 ? MAX_ARRAY_LENGTH : limit >>> 0;
          if (!limit) {
            return [];
          }
          string = toString(string);
          if (string && (typeof separator == "string" || separator != null && !isRegExp(separator))) {
            separator = baseToString(separator);
            if (!separator && hasUnicode(string)) {
              return castSlice(stringToArray(string), 0, limit);
            }
          }
          return string.split(separator, limit);
        }
        var startCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + upperFirst(word);
        });
        function startsWith(string, target, position) {
          string = toString(string);
          position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);
          target = baseToString(target);
          return string.slice(position, position + target.length) == target;
        }
        function template(string, options, guard) {
          var settings = lodash.templateSettings;
          if (guard && isIterateeCall(string, options, guard)) {
            options = undefined2;
          }
          string = toString(string);
          options = assignInWith({}, options, settings, customDefaultsAssignIn);
          var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys);
          var isEscaping, isEvaluating, index = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
          var reDelimiters = RegExp2(
            (options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$",
            "g"
          );
          var sourceURL = "//# sourceURL=" + (hasOwnProperty.call(options, "sourceURL") ? (options.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
          string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
            interpolateValue || (interpolateValue = esTemplateValue);
            source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
            if (escapeValue) {
              isEscaping = true;
              source += "' +\n__e(" + escapeValue + ") +\n'";
            }
            if (evaluateValue) {
              isEvaluating = true;
              source += "';\n" + evaluateValue + ";\n__p += '";
            }
            if (interpolateValue) {
              source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
            }
            index = offset + match.length;
            return match;
          });
          source += "';\n";
          var variable = hasOwnProperty.call(options, "variable") && options.variable;
          if (!variable) {
            source = "with (obj) {\n" + source + "\n}\n";
          } else if (reForbiddenIdentifierChars.test(variable)) {
            throw new Error2(INVALID_TEMPL_VAR_ERROR_TEXT);
          }
          source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
          source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
          var result2 = attempt(function() {
            return Function2(importsKeys, sourceURL + "return " + source).apply(undefined2, importsValues);
          });
          result2.source = source;
          if (isError(result2)) {
            throw result2;
          }
          return result2;
        }
        function toLower(value) {
          return toString(value).toLowerCase();
        }
        function toUpper(value) {
          return toString(value).toUpperCase();
        }
        function trim(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined2)) {
            return baseTrim(string);
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
          return castSlice(strSymbols, start, end).join("");
        }
        function trimEnd(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined2)) {
            return string.slice(0, trimmedEndIndex(string) + 1);
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
          return castSlice(strSymbols, 0, end).join("");
        }
        function trimStart(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined2)) {
            return string.replace(reTrimStart, "");
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), start = charsStartIndex(strSymbols, stringToArray(chars));
          return castSlice(strSymbols, start).join("");
        }
        function truncate(string, options) {
          var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
          if (isObject(options)) {
            var separator = "separator" in options ? options.separator : separator;
            length = "length" in options ? toInteger(options.length) : length;
            omission = "omission" in options ? baseToString(options.omission) : omission;
          }
          string = toString(string);
          var strLength = string.length;
          if (hasUnicode(string)) {
            var strSymbols = stringToArray(string);
            strLength = strSymbols.length;
          }
          if (length >= strLength) {
            return string;
          }
          var end = length - stringSize(omission);
          if (end < 1) {
            return omission;
          }
          var result2 = strSymbols ? castSlice(strSymbols, 0, end).join("") : string.slice(0, end);
          if (separator === undefined2) {
            return result2 + omission;
          }
          if (strSymbols) {
            end += result2.length - end;
          }
          if (isRegExp(separator)) {
            if (string.slice(end).search(separator)) {
              var match, substring = result2;
              if (!separator.global) {
                separator = RegExp2(separator.source, toString(reFlags.exec(separator)) + "g");
              }
              separator.lastIndex = 0;
              while (match = separator.exec(substring)) {
                var newEnd = match.index;
              }
              result2 = result2.slice(0, newEnd === undefined2 ? end : newEnd);
            }
          } else if (string.indexOf(baseToString(separator), end) != end) {
            var index = result2.lastIndexOf(separator);
            if (index > -1) {
              result2 = result2.slice(0, index);
            }
          }
          return result2 + omission;
        }
        function unescape(string) {
          string = toString(string);
          return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
        }
        var upperCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + word.toUpperCase();
        });
        var upperFirst = createCaseFirst("toUpperCase");
        function words(string, pattern, guard) {
          string = toString(string);
          pattern = guard ? undefined2 : pattern;
          if (pattern === undefined2) {
            return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
          }
          return string.match(pattern) || [];
        }
        var attempt = baseRest(function(func, args) {
          try {
            return apply(func, undefined2, args);
          } catch (e) {
            return isError(e) ? e : new Error2(e);
          }
        });
        var bindAll = flatRest(function(object, methodNames) {
          arrayEach(methodNames, function(key) {
            key = toKey(key);
            baseAssignValue(object, key, bind(object[key], object));
          });
          return object;
        });
        function cond(pairs) {
          var length = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
          pairs = !length ? [] : arrayMap(pairs, function(pair) {
            if (typeof pair[1] != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            return [toIteratee(pair[0]), pair[1]];
          });
          return baseRest(function(args) {
            var index = -1;
            while (++index < length) {
              var pair = pairs[index];
              if (apply(pair[0], this, args)) {
                return apply(pair[1], this, args);
              }
            }
          });
        }
        function conforms(source) {
          return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
        }
        function constant(value) {
          return function() {
            return value;
          };
        }
        function defaultTo(value, defaultValue) {
          return value == null || value !== value ? defaultValue : value;
        }
        var flow = createFlow();
        var flowRight = createFlow(true);
        function identity(value) {
          return value;
        }
        function iteratee(func) {
          return baseIteratee(typeof func == "function" ? func : baseClone(func, CLONE_DEEP_FLAG));
        }
        function matches(source) {
          return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
        }
        function matchesProperty(path, srcValue) {
          return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
        }
        var method = baseRest(function(path, args) {
          return function(object) {
            return baseInvoke(object, path, args);
          };
        });
        var methodOf = baseRest(function(object, args) {
          return function(path) {
            return baseInvoke(object, path, args);
          };
        });
        function mixin(object, source, options) {
          var props = keys(source), methodNames = baseFunctions(source, props);
          if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
            options = source;
            source = object;
            object = this;
            methodNames = baseFunctions(source, keys(source));
          }
          var chain2 = !(isObject(options) && "chain" in options) || !!options.chain, isFunc = isFunction(object);
          arrayEach(methodNames, function(methodName) {
            var func = source[methodName];
            object[methodName] = func;
            if (isFunc) {
              object.prototype[methodName] = function() {
                var chainAll = this.__chain__;
                if (chain2 || chainAll) {
                  var result2 = object(this.__wrapped__), actions = result2.__actions__ = copyArray(this.__actions__);
                  actions.push({ "func": func, "args": arguments, "thisArg": object });
                  result2.__chain__ = chainAll;
                  return result2;
                }
                return func.apply(object, arrayPush([this.value()], arguments));
              };
            }
          });
          return object;
        }
        function noConflict() {
          if (root._ === this) {
            root._ = oldDash;
          }
          return this;
        }
        function noop() {
        }
        function nthArg(n) {
          n = toInteger(n);
          return baseRest(function(args) {
            return baseNth(args, n);
          });
        }
        var over = createOver(arrayMap);
        var overEvery = createOver(arrayEvery);
        var overSome = createOver(arraySome);
        function property(path) {
          return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
        }
        function propertyOf(object) {
          return function(path) {
            return object == null ? undefined2 : baseGet(object, path);
          };
        }
        var range = createRange();
        var rangeRight = createRange(true);
        function stubArray() {
          return [];
        }
        function stubFalse() {
          return false;
        }
        function stubObject() {
          return {};
        }
        function stubString() {
          return "";
        }
        function stubTrue() {
          return true;
        }
        function times(n, iteratee2) {
          n = toInteger(n);
          if (n < 1 || n > MAX_SAFE_INTEGER) {
            return [];
          }
          var index = MAX_ARRAY_LENGTH, length = nativeMin(n, MAX_ARRAY_LENGTH);
          iteratee2 = getIteratee(iteratee2);
          n -= MAX_ARRAY_LENGTH;
          var result2 = baseTimes(length, iteratee2);
          while (++index < n) {
            iteratee2(index);
          }
          return result2;
        }
        function toPath(value) {
          if (isArray(value)) {
            return arrayMap(value, toKey);
          }
          return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
        }
        function uniqueId(prefix) {
          var id = ++idCounter;
          return toString(prefix) + id;
        }
        var add = createMathOperation(function(augend, addend) {
          return augend + addend;
        }, 0);
        var ceil = createRound("ceil");
        var divide = createMathOperation(function(dividend, divisor) {
          return dividend / divisor;
        }, 1);
        var floor = createRound("floor");
        function max(array) {
          return array && array.length ? baseExtremum(array, identity, baseGt) : undefined2;
        }
        function maxBy(array, iteratee2) {
          return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseGt) : undefined2;
        }
        function mean(array) {
          return baseMean(array, identity);
        }
        function meanBy(array, iteratee2) {
          return baseMean(array, getIteratee(iteratee2, 2));
        }
        function min(array) {
          return array && array.length ? baseExtremum(array, identity, baseLt) : undefined2;
        }
        function minBy(array, iteratee2) {
          return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseLt) : undefined2;
        }
        var multiply = createMathOperation(function(multiplier, multiplicand) {
          return multiplier * multiplicand;
        }, 1);
        var round = createRound("round");
        var subtract = createMathOperation(function(minuend, subtrahend) {
          return minuend - subtrahend;
        }, 0);
        function sum(array) {
          return array && array.length ? baseSum(array, identity) : 0;
        }
        function sumBy(array, iteratee2) {
          return array && array.length ? baseSum(array, getIteratee(iteratee2, 2)) : 0;
        }
        lodash.after = after;
        lodash.ary = ary;
        lodash.assign = assign;
        lodash.assignIn = assignIn;
        lodash.assignInWith = assignInWith;
        lodash.assignWith = assignWith;
        lodash.at = at;
        lodash.before = before;
        lodash.bind = bind;
        lodash.bindAll = bindAll;
        lodash.bindKey = bindKey;
        lodash.castArray = castArray;
        lodash.chain = chain;
        lodash.chunk = chunk;
        lodash.compact = compact;
        lodash.concat = concat;
        lodash.cond = cond;
        lodash.conforms = conforms;
        lodash.constant = constant;
        lodash.countBy = countBy;
        lodash.create = create;
        lodash.curry = curry;
        lodash.curryRight = curryRight;
        lodash.debounce = debounce;
        lodash.defaults = defaults;
        lodash.defaultsDeep = defaultsDeep;
        lodash.defer = defer;
        lodash.delay = delay;
        lodash.difference = difference;
        lodash.differenceBy = differenceBy;
        lodash.differenceWith = differenceWith;
        lodash.drop = drop;
        lodash.dropRight = dropRight;
        lodash.dropRightWhile = dropRightWhile;
        lodash.dropWhile = dropWhile;
        lodash.fill = fill;
        lodash.filter = filter;
        lodash.flatMap = flatMap;
        lodash.flatMapDeep = flatMapDeep;
        lodash.flatMapDepth = flatMapDepth;
        lodash.flatten = flatten;
        lodash.flattenDeep = flattenDeep;
        lodash.flattenDepth = flattenDepth;
        lodash.flip = flip;
        lodash.flow = flow;
        lodash.flowRight = flowRight;
        lodash.fromPairs = fromPairs;
        lodash.functions = functions;
        lodash.functionsIn = functionsIn;
        lodash.groupBy = groupBy;
        lodash.initial = initial;
        lodash.intersection = intersection;
        lodash.intersectionBy = intersectionBy;
        lodash.intersectionWith = intersectionWith;
        lodash.invert = invert;
        lodash.invertBy = invertBy;
        lodash.invokeMap = invokeMap;
        lodash.iteratee = iteratee;
        lodash.keyBy = keyBy;
        lodash.keys = keys;
        lodash.keysIn = keysIn;
        lodash.map = map;
        lodash.mapKeys = mapKeys;
        lodash.mapValues = mapValues;
        lodash.matches = matches;
        lodash.matchesProperty = matchesProperty;
        lodash.memoize = memoize;
        lodash.merge = merge;
        lodash.mergeWith = mergeWith;
        lodash.method = method;
        lodash.methodOf = methodOf;
        lodash.mixin = mixin;
        lodash.negate = negate;
        lodash.nthArg = nthArg;
        lodash.omit = omit;
        lodash.omitBy = omitBy;
        lodash.once = once;
        lodash.orderBy = orderBy;
        lodash.over = over;
        lodash.overArgs = overArgs;
        lodash.overEvery = overEvery;
        lodash.overSome = overSome;
        lodash.partial = partial;
        lodash.partialRight = partialRight;
        lodash.partition = partition;
        lodash.pick = pick;
        lodash.pickBy = pickBy;
        lodash.property = property;
        lodash.propertyOf = propertyOf;
        lodash.pull = pull;
        lodash.pullAll = pullAll;
        lodash.pullAllBy = pullAllBy;
        lodash.pullAllWith = pullAllWith;
        lodash.pullAt = pullAt;
        lodash.range = range;
        lodash.rangeRight = rangeRight;
        lodash.rearg = rearg;
        lodash.reject = reject;
        lodash.remove = remove;
        lodash.rest = rest;
        lodash.reverse = reverse;
        lodash.sampleSize = sampleSize;
        lodash.set = set;
        lodash.setWith = setWith;
        lodash.shuffle = shuffle;
        lodash.slice = slice;
        lodash.sortBy = sortBy;
        lodash.sortedUniq = sortedUniq;
        lodash.sortedUniqBy = sortedUniqBy;
        lodash.split = split;
        lodash.spread = spread;
        lodash.tail = tail;
        lodash.take = take;
        lodash.takeRight = takeRight;
        lodash.takeRightWhile = takeRightWhile;
        lodash.takeWhile = takeWhile;
        lodash.tap = tap;
        lodash.throttle = throttle;
        lodash.thru = thru;
        lodash.toArray = toArray;
        lodash.toPairs = toPairs;
        lodash.toPairsIn = toPairsIn;
        lodash.toPath = toPath;
        lodash.toPlainObject = toPlainObject;
        lodash.transform = transform;
        lodash.unary = unary;
        lodash.union = union;
        lodash.unionBy = unionBy;
        lodash.unionWith = unionWith;
        lodash.uniq = uniq;
        lodash.uniqBy = uniqBy;
        lodash.uniqWith = uniqWith;
        lodash.unset = unset;
        lodash.unzip = unzip;
        lodash.unzipWith = unzipWith;
        lodash.update = update;
        lodash.updateWith = updateWith;
        lodash.values = values;
        lodash.valuesIn = valuesIn;
        lodash.without = without;
        lodash.words = words;
        lodash.wrap = wrap;
        lodash.xor = xor;
        lodash.xorBy = xorBy;
        lodash.xorWith = xorWith;
        lodash.zip = zip;
        lodash.zipObject = zipObject;
        lodash.zipObjectDeep = zipObjectDeep;
        lodash.zipWith = zipWith;
        lodash.entries = toPairs;
        lodash.entriesIn = toPairsIn;
        lodash.extend = assignIn;
        lodash.extendWith = assignInWith;
        mixin(lodash, lodash);
        lodash.add = add;
        lodash.attempt = attempt;
        lodash.camelCase = camelCase;
        lodash.capitalize = capitalize;
        lodash.ceil = ceil;
        lodash.clamp = clamp;
        lodash.clone = clone;
        lodash.cloneDeep = cloneDeep;
        lodash.cloneDeepWith = cloneDeepWith;
        lodash.cloneWith = cloneWith;
        lodash.conformsTo = conformsTo;
        lodash.deburr = deburr;
        lodash.defaultTo = defaultTo;
        lodash.divide = divide;
        lodash.endsWith = endsWith;
        lodash.eq = eq;
        lodash.escape = escape;
        lodash.escapeRegExp = escapeRegExp;
        lodash.every = every;
        lodash.find = find;
        lodash.findIndex = findIndex;
        lodash.findKey = findKey;
        lodash.findLast = findLast;
        lodash.findLastIndex = findLastIndex;
        lodash.findLastKey = findLastKey;
        lodash.floor = floor;
        lodash.forEach = forEach;
        lodash.forEachRight = forEachRight;
        lodash.forIn = forIn;
        lodash.forInRight = forInRight;
        lodash.forOwn = forOwn;
        lodash.forOwnRight = forOwnRight;
        lodash.get = get;
        lodash.gt = gt;
        lodash.gte = gte;
        lodash.has = has;
        lodash.hasIn = hasIn;
        lodash.head = head;
        lodash.identity = identity;
        lodash.includes = includes;
        lodash.indexOf = indexOf;
        lodash.inRange = inRange;
        lodash.invoke = invoke;
        lodash.isArguments = isArguments;
        lodash.isArray = isArray;
        lodash.isArrayBuffer = isArrayBuffer;
        lodash.isArrayLike = isArrayLike;
        lodash.isArrayLikeObject = isArrayLikeObject;
        lodash.isBoolean = isBoolean;
        lodash.isBuffer = isBuffer;
        lodash.isDate = isDate;
        lodash.isElement = isElement;
        lodash.isEmpty = isEmpty;
        lodash.isEqual = isEqual;
        lodash.isEqualWith = isEqualWith;
        lodash.isError = isError;
        lodash.isFinite = isFinite;
        lodash.isFunction = isFunction;
        lodash.isInteger = isInteger;
        lodash.isLength = isLength;
        lodash.isMap = isMap;
        lodash.isMatch = isMatch;
        lodash.isMatchWith = isMatchWith;
        lodash.isNaN = isNaN;
        lodash.isNative = isNative;
        lodash.isNil = isNil;
        lodash.isNull = isNull;
        lodash.isNumber = isNumber;
        lodash.isObject = isObject;
        lodash.isObjectLike = isObjectLike;
        lodash.isPlainObject = isPlainObject;
        lodash.isRegExp = isRegExp;
        lodash.isSafeInteger = isSafeInteger;
        lodash.isSet = isSet;
        lodash.isString = isString;
        lodash.isSymbol = isSymbol;
        lodash.isTypedArray = isTypedArray;
        lodash.isUndefined = isUndefined;
        lodash.isWeakMap = isWeakMap;
        lodash.isWeakSet = isWeakSet;
        lodash.join = join;
        lodash.kebabCase = kebabCase;
        lodash.last = last;
        lodash.lastIndexOf = lastIndexOf;
        lodash.lowerCase = lowerCase;
        lodash.lowerFirst = lowerFirst;
        lodash.lt = lt;
        lodash.lte = lte;
        lodash.max = max;
        lodash.maxBy = maxBy;
        lodash.mean = mean;
        lodash.meanBy = meanBy;
        lodash.min = min;
        lodash.minBy = minBy;
        lodash.stubArray = stubArray;
        lodash.stubFalse = stubFalse;
        lodash.stubObject = stubObject;
        lodash.stubString = stubString;
        lodash.stubTrue = stubTrue;
        lodash.multiply = multiply;
        lodash.nth = nth;
        lodash.noConflict = noConflict;
        lodash.noop = noop;
        lodash.now = now;
        lodash.pad = pad;
        lodash.padEnd = padEnd;
        lodash.padStart = padStart;
        lodash.parseInt = parseInt2;
        lodash.random = random;
        lodash.reduce = reduce;
        lodash.reduceRight = reduceRight;
        lodash.repeat = repeat;
        lodash.replace = replace;
        lodash.result = result;
        lodash.round = round;
        lodash.runInContext = runInContext2;
        lodash.sample = sample;
        lodash.size = size;
        lodash.snakeCase = snakeCase;
        lodash.some = some;
        lodash.sortedIndex = sortedIndex;
        lodash.sortedIndexBy = sortedIndexBy;
        lodash.sortedIndexOf = sortedIndexOf;
        lodash.sortedLastIndex = sortedLastIndex;
        lodash.sortedLastIndexBy = sortedLastIndexBy;
        lodash.sortedLastIndexOf = sortedLastIndexOf;
        lodash.startCase = startCase;
        lodash.startsWith = startsWith;
        lodash.subtract = subtract;
        lodash.sum = sum;
        lodash.sumBy = sumBy;
        lodash.template = template;
        lodash.times = times;
        lodash.toFinite = toFinite;
        lodash.toInteger = toInteger;
        lodash.toLength = toLength;
        lodash.toLower = toLower;
        lodash.toNumber = toNumber;
        lodash.toSafeInteger = toSafeInteger;
        lodash.toString = toString;
        lodash.toUpper = toUpper;
        lodash.trim = trim;
        lodash.trimEnd = trimEnd;
        lodash.trimStart = trimStart;
        lodash.truncate = truncate;
        lodash.unescape = unescape;
        lodash.uniqueId = uniqueId;
        lodash.upperCase = upperCase;
        lodash.upperFirst = upperFirst;
        lodash.each = forEach;
        lodash.eachRight = forEachRight;
        lodash.first = head;
        mixin(lodash, (function() {
          var source = {};
          baseForOwn(lodash, function(func, methodName) {
            if (!hasOwnProperty.call(lodash.prototype, methodName)) {
              source[methodName] = func;
            }
          });
          return source;
        })(), { "chain": false });
        lodash.VERSION = VERSION;
        arrayEach(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(methodName) {
          lodash[methodName].placeholder = lodash;
        });
        arrayEach(["drop", "take"], function(methodName, index) {
          LazyWrapper.prototype[methodName] = function(n) {
            n = n === undefined2 ? 1 : nativeMax(toInteger(n), 0);
            var result2 = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();
            if (result2.__filtered__) {
              result2.__takeCount__ = nativeMin(n, result2.__takeCount__);
            } else {
              result2.__views__.push({
                "size": nativeMin(n, MAX_ARRAY_LENGTH),
                "type": methodName + (result2.__dir__ < 0 ? "Right" : "")
              });
            }
            return result2;
          };
          LazyWrapper.prototype[methodName + "Right"] = function(n) {
            return this.reverse()[methodName](n).reverse();
          };
        });
        arrayEach(["filter", "map", "takeWhile"], function(methodName, index) {
          var type = index + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
          LazyWrapper.prototype[methodName] = function(iteratee2) {
            var result2 = this.clone();
            result2.__iteratees__.push({
              "iteratee": getIteratee(iteratee2, 3),
              "type": type
            });
            result2.__filtered__ = result2.__filtered__ || isFilter;
            return result2;
          };
        });
        arrayEach(["head", "last"], function(methodName, index) {
          var takeName = "take" + (index ? "Right" : "");
          LazyWrapper.prototype[methodName] = function() {
            return this[takeName](1).value()[0];
          };
        });
        arrayEach(["initial", "tail"], function(methodName, index) {
          var dropName = "drop" + (index ? "" : "Right");
          LazyWrapper.prototype[methodName] = function() {
            return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
          };
        });
        LazyWrapper.prototype.compact = function() {
          return this.filter(identity);
        };
        LazyWrapper.prototype.find = function(predicate) {
          return this.filter(predicate).head();
        };
        LazyWrapper.prototype.findLast = function(predicate) {
          return this.reverse().find(predicate);
        };
        LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
          if (typeof path == "function") {
            return new LazyWrapper(this);
          }
          return this.map(function(value) {
            return baseInvoke(value, path, args);
          });
        });
        LazyWrapper.prototype.reject = function(predicate) {
          return this.filter(negate(getIteratee(predicate)));
        };
        LazyWrapper.prototype.slice = function(start, end) {
          start = toInteger(start);
          var result2 = this;
          if (result2.__filtered__ && (start > 0 || end < 0)) {
            return new LazyWrapper(result2);
          }
          if (start < 0) {
            result2 = result2.takeRight(-start);
          } else if (start) {
            result2 = result2.drop(start);
          }
          if (end !== undefined2) {
            end = toInteger(end);
            result2 = end < 0 ? result2.dropRight(-end) : result2.take(end - start);
          }
          return result2;
        };
        LazyWrapper.prototype.takeRightWhile = function(predicate) {
          return this.reverse().takeWhile(predicate).reverse();
        };
        LazyWrapper.prototype.toArray = function() {
          return this.take(MAX_ARRAY_LENGTH);
        };
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
          if (!lodashFunc) {
            return;
          }
          lodash.prototype[methodName] = function() {
            var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper, iteratee2 = args[0], useLazy = isLazy || isArray(value);
            var interceptor = function(value2) {
              var result3 = lodashFunc.apply(lodash, arrayPush([value2], args));
              return isTaker && chainAll ? result3[0] : result3;
            };
            if (useLazy && checkIteratee && typeof iteratee2 == "function" && iteratee2.length != 1) {
              isLazy = useLazy = false;
            }
            var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
            if (!retUnwrapped && useLazy) {
              value = onlyLazy ? value : new LazyWrapper(this);
              var result2 = func.apply(value, args);
              result2.__actions__.push({ "func": thru, "args": [interceptor], "thisArg": undefined2 });
              return new LodashWrapper(result2, chainAll);
            }
            if (isUnwrapped && onlyLazy) {
              return func.apply(this, args);
            }
            result2 = this.thru(interceptor);
            return isUnwrapped ? isTaker ? result2.value()[0] : result2.value() : result2;
          };
        });
        arrayEach(["pop", "push", "shift", "sort", "splice", "unshift"], function(methodName) {
          var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
          lodash.prototype[methodName] = function() {
            var args = arguments;
            if (retUnwrapped && !this.__chain__) {
              var value = this.value();
              return func.apply(isArray(value) ? value : [], args);
            }
            return this[chainName](function(value2) {
              return func.apply(isArray(value2) ? value2 : [], args);
            });
          };
        });
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var lodashFunc = lodash[methodName];
          if (lodashFunc) {
            var key = lodashFunc.name + "";
            if (!hasOwnProperty.call(realNames, key)) {
              realNames[key] = [];
            }
            realNames[key].push({ "name": methodName, "func": lodashFunc });
          }
        });
        realNames[createHybrid(undefined2, WRAP_BIND_KEY_FLAG).name] = [{
          "name": "wrapper",
          "func": undefined2
        }];
        LazyWrapper.prototype.clone = lazyClone;
        LazyWrapper.prototype.reverse = lazyReverse;
        LazyWrapper.prototype.value = lazyValue;
        lodash.prototype.at = wrapperAt;
        lodash.prototype.chain = wrapperChain;
        lodash.prototype.commit = wrapperCommit;
        lodash.prototype.next = wrapperNext;
        lodash.prototype.plant = wrapperPlant;
        lodash.prototype.reverse = wrapperReverse;
        lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
        lodash.prototype.first = lodash.prototype.head;
        if (symIterator) {
          lodash.prototype[symIterator] = wrapperToIterator;
        }
        return lodash;
      });
      var _2 = runInContext();
      if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
        root._ = _2;
        define(function() {
          return _2;
        });
      } else if (freeModule) {
        (freeModule.exports = _2)._ = _2;
        freeExports._ = _2;
      } else {
        root._ = _2;
      }
    }).call(exports2);
  }
});
var import_node_process = __toESM2(require("node:process"), 1);
var external_exports = {};
__export2(external_exports, {
  BRAND: () => BRAND,
  DIRTY: () => DIRTY,
  EMPTY_PATH: () => EMPTY_PATH,
  INVALID: () => INVALID,
  NEVER: () => NEVER,
  OK: () => OK,
  ParseStatus: () => ParseStatus,
  Schema: () => ZodType,
  ZodAny: () => ZodAny,
  ZodArray: () => ZodArray,
  ZodBigInt: () => ZodBigInt,
  ZodBoolean: () => ZodBoolean,
  ZodBranded: () => ZodBranded,
  ZodCatch: () => ZodCatch,
  ZodDate: () => ZodDate,
  ZodDefault: () => ZodDefault,
  ZodDiscriminatedUnion: () => ZodDiscriminatedUnion,
  ZodEffects: () => ZodEffects,
  ZodEnum: () => ZodEnum,
  ZodError: () => ZodError,
  ZodFirstPartyTypeKind: () => ZodFirstPartyTypeKind,
  ZodFunction: () => ZodFunction,
  ZodIntersection: () => ZodIntersection,
  ZodIssueCode: () => ZodIssueCode,
  ZodLazy: () => ZodLazy,
  ZodLiteral: () => ZodLiteral,
  ZodMap: () => ZodMap,
  ZodNaN: () => ZodNaN,
  ZodNativeEnum: () => ZodNativeEnum,
  ZodNever: () => ZodNever,
  ZodNull: () => ZodNull,
  ZodNullable: () => ZodNullable,
  ZodNumber: () => ZodNumber,
  ZodObject: () => ZodObject,
  ZodOptional: () => ZodOptional,
  ZodParsedType: () => ZodParsedType,
  ZodPipeline: () => ZodPipeline,
  ZodPromise: () => ZodPromise,
  ZodReadonly: () => ZodReadonly,
  ZodRecord: () => ZodRecord,
  ZodSchema: () => ZodType,
  ZodSet: () => ZodSet,
  ZodString: () => ZodString,
  ZodSymbol: () => ZodSymbol,
  ZodTransformer: () => ZodEffects,
  ZodTuple: () => ZodTuple,
  ZodType: () => ZodType,
  ZodUndefined: () => ZodUndefined,
  ZodUnion: () => ZodUnion,
  ZodUnknown: () => ZodUnknown,
  ZodVoid: () => ZodVoid,
  addIssueToContext: () => addIssueToContext,
  any: () => anyType,
  array: () => arrayType,
  bigint: () => bigIntType,
  boolean: () => booleanType,
  coerce: () => coerce,
  custom: () => custom,
  date: () => dateType,
  datetimeRegex: () => datetimeRegex,
  defaultErrorMap: () => en_default,
  discriminatedUnion: () => discriminatedUnionType,
  effect: () => effectsType,
  enum: () => enumType,
  function: () => functionType,
  getErrorMap: () => getErrorMap,
  getParsedType: () => getParsedType,
  instanceof: () => instanceOfType,
  intersection: () => intersectionType,
  isAborted: () => isAborted,
  isAsync: () => isAsync,
  isDirty: () => isDirty,
  isValid: () => isValid,
  late: () => late,
  lazy: () => lazyType,
  literal: () => literalType,
  makeIssue: () => makeIssue,
  map: () => mapType,
  nan: () => nanType,
  nativeEnum: () => nativeEnumType,
  never: () => neverType,
  null: () => nullType,
  nullable: () => nullableType,
  number: () => numberType,
  object: () => objectType,
  objectUtil: () => objectUtil,
  oboolean: () => oboolean,
  onumber: () => onumber,
  optional: () => optionalType,
  ostring: () => ostring,
  pipeline: () => pipelineType,
  preprocess: () => preprocessType,
  promise: () => promiseType,
  quotelessJson: () => quotelessJson,
  record: () => recordType,
  set: () => setType,
  setErrorMap: () => setErrorMap,
  strictObject: () => strictObjectType,
  string: () => stringType,
  symbol: () => symbolType,
  transformer: () => effectsType,
  tuple: () => tupleType,
  undefined: () => undefinedType,
  union: () => unionType,
  unknown: () => unknownType,
  util: () => util,
  void: () => voidType
});
var util;
(function(util2) {
  util2.assertEqual = (_2) => {
  };
  function assertIs(_arg) {
  }
  util2.assertIs = assertIs;
  function assertNever(_x) {
    throw new Error();
  }
  util2.assertNever = assertNever;
  util2.arrayToEnum = (items) => {
    const obj = {};
    for (const item of items) {
      obj[item] = item;
    }
    return obj;
  };
  util2.getValidEnumValues = (obj) => {
    const validKeys = util2.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== "number");
    const filtered = {};
    for (const k of validKeys) {
      filtered[k] = obj[k];
    }
    return util2.objectValues(filtered);
  };
  util2.objectValues = (obj) => {
    return util2.objectKeys(obj).map(function(e) {
      return obj[e];
    });
  };
  util2.objectKeys = typeof Object.keys === "function" ? (obj) => Object.keys(obj) : (object) => {
    const keys = [];
    for (const key in object) {
      if (Object.prototype.hasOwnProperty.call(object, key)) {
        keys.push(key);
      }
    }
    return keys;
  };
  util2.find = (arr, checker) => {
    for (const item of arr) {
      if (checker(item))
        return item;
    }
    return void 0;
  };
  util2.isInteger = typeof Number.isInteger === "function" ? (val) => Number.isInteger(val) : (val) => typeof val === "number" && Number.isFinite(val) && Math.floor(val) === val;
  function joinValues(array, separator = " | ") {
    return array.map((val) => typeof val === "string" ? `'${val}'` : val).join(separator);
  }
  util2.joinValues = joinValues;
  util2.jsonStringifyReplacer = (_2, value) => {
    if (typeof value === "bigint") {
      return value.toString();
    }
    return value;
  };
})(util || (util = {}));
var objectUtil;
(function(objectUtil2) {
  objectUtil2.mergeShapes = (first, second) => {
    return {
      ...first,
      ...second
      // second overwrites first
    };
  };
})(objectUtil || (objectUtil = {}));
var ZodParsedType = util.arrayToEnum([
  "string",
  "nan",
  "number",
  "integer",
  "float",
  "boolean",
  "date",
  "bigint",
  "symbol",
  "function",
  "undefined",
  "null",
  "array",
  "object",
  "unknown",
  "promise",
  "void",
  "never",
  "map",
  "set"
]);
var getParsedType = (data) => {
  const t = typeof data;
  switch (t) {
    case "undefined":
      return ZodParsedType.undefined;
    case "string":
      return ZodParsedType.string;
    case "number":
      return Number.isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;
    case "boolean":
      return ZodParsedType.boolean;
    case "function":
      return ZodParsedType.function;
    case "bigint":
      return ZodParsedType.bigint;
    case "symbol":
      return ZodParsedType.symbol;
    case "object":
      if (Array.isArray(data)) {
        return ZodParsedType.array;
      }
      if (data === null) {
        return ZodParsedType.null;
      }
      if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") {
        return ZodParsedType.promise;
      }
      if (typeof Map !== "undefined" && data instanceof Map) {
        return ZodParsedType.map;
      }
      if (typeof Set !== "undefined" && data instanceof Set) {
        return ZodParsedType.set;
      }
      if (typeof Date !== "undefined" && data instanceof Date) {
        return ZodParsedType.date;
      }
      return ZodParsedType.object;
    default:
      return ZodParsedType.unknown;
  }
};
var ZodIssueCode = util.arrayToEnum([
  "invalid_type",
  "invalid_literal",
  "custom",
  "invalid_union",
  "invalid_union_discriminator",
  "invalid_enum_value",
  "unrecognized_keys",
  "invalid_arguments",
  "invalid_return_type",
  "invalid_date",
  "invalid_string",
  "too_small",
  "too_big",
  "invalid_intersection_types",
  "not_multiple_of",
  "not_finite"
]);
var quotelessJson = (obj) => {
  const json = JSON.stringify(obj, null, 2);
  return json.replace(/"([^"]+)":/g, "$1:");
};
var ZodError = class _ZodError extends Error {
  get errors() {
    return this.issues;
  }
  constructor(issues) {
    super();
    this.issues = [];
    this.addIssue = (sub) => {
      this.issues = [...this.issues, sub];
    };
    this.addIssues = (subs = []) => {
      this.issues = [...this.issues, ...subs];
    };
    const actualProto = new.target.prototype;
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(this, actualProto);
    } else {
      this.__proto__ = actualProto;
    }
    this.name = "ZodError";
    this.issues = issues;
  }
  format(_mapper) {
    const mapper = _mapper || function(issue) {
      return issue.message;
    };
    const fieldErrors = { _errors: [] };
    const processError = (error) => {
      for (const issue of error.issues) {
        if (issue.code === "invalid_union") {
          issue.unionErrors.map(processError);
        } else if (issue.code === "invalid_return_type") {
          processError(issue.returnTypeError);
        } else if (issue.code === "invalid_arguments") {
          processError(issue.argumentsError);
        } else if (issue.path.length === 0) {
          fieldErrors._errors.push(mapper(issue));
        } else {
          let curr = fieldErrors;
          let i = 0;
          while (i < issue.path.length) {
            const el = issue.path[i];
            const terminal = i === issue.path.length - 1;
            if (!terminal) {
              curr[el] = curr[el] || { _errors: [] };
            } else {
              curr[el] = curr[el] || { _errors: [] };
              curr[el]._errors.push(mapper(issue));
            }
            curr = curr[el];
            i++;
          }
        }
      }
    };
    processError(this);
    return fieldErrors;
  }
  static assert(value) {
    if (!(value instanceof _ZodError)) {
      throw new Error(`Not a ZodError: ${value}`);
    }
  }
  toString() {
    return this.message;
  }
  get message() {
    return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);
  }
  get isEmpty() {
    return this.issues.length === 0;
  }
  flatten(mapper = (issue) => issue.message) {
    const fieldErrors = {};
    const formErrors = [];
    for (const sub of this.issues) {
      if (sub.path.length > 0) {
        const firstEl = sub.path[0];
        fieldErrors[firstEl] = fieldErrors[firstEl] || [];
        fieldErrors[firstEl].push(mapper(sub));
      } else {
        formErrors.push(mapper(sub));
      }
    }
    return { formErrors, fieldErrors };
  }
  get formErrors() {
    return this.flatten();
  }
};
ZodError.create = (issues) => {
  const error = new ZodError(issues);
  return error;
};
var errorMap = (issue, _ctx) => {
  let message;
  switch (issue.code) {
    case ZodIssueCode.invalid_type:
      if (issue.received === ZodParsedType.undefined) {
        message = "Required";
      } else {
        message = `Expected ${issue.expected}, received ${issue.received}`;
      }
      break;
    case ZodIssueCode.invalid_literal:
      message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;
      break;
    case ZodIssueCode.unrecognized_keys:
      message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, ", ")}`;
      break;
    case ZodIssueCode.invalid_union:
      message = `Invalid input`;
      break;
    case ZodIssueCode.invalid_union_discriminator:
      message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;
      break;
    case ZodIssueCode.invalid_enum_value:
      message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;
      break;
    case ZodIssueCode.invalid_arguments:
      message = `Invalid function arguments`;
      break;
    case ZodIssueCode.invalid_return_type:
      message = `Invalid function return type`;
      break;
    case ZodIssueCode.invalid_date:
      message = `Invalid date`;
      break;
    case ZodIssueCode.invalid_string:
      if (typeof issue.validation === "object") {
        if ("includes" in issue.validation) {
          message = `Invalid input: must include "${issue.validation.includes}"`;
          if (typeof issue.validation.position === "number") {
            message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;
          }
        } else if ("startsWith" in issue.validation) {
          message = `Invalid input: must start with "${issue.validation.startsWith}"`;
        } else if ("endsWith" in issue.validation) {
          message = `Invalid input: must end with "${issue.validation.endsWith}"`;
        } else {
          util.assertNever(issue.validation);
        }
      } else if (issue.validation !== "regex") {
        message = `Invalid ${issue.validation}`;
      } else {
        message = "Invalid";
      }
      break;
    case ZodIssueCode.too_small:
      if (issue.type === "array")
        message = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
      else if (issue.type === "string")
        message = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
      else if (issue.type === "number")
        message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;
      else if (issue.type === "bigint")
        message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;
      else if (issue.type === "date")
        message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;
      else
        message = "Invalid input";
      break;
    case ZodIssueCode.too_big:
      if (issue.type === "array")
        message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
      else if (issue.type === "string")
        message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
      else if (issue.type === "number")
        message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
      else if (issue.type === "bigint")
        message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
      else if (issue.type === "date")
        message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;
      else
        message = "Invalid input";
      break;
    case ZodIssueCode.custom:
      message = `Invalid input`;
      break;
    case ZodIssueCode.invalid_intersection_types:
      message = `Intersection results could not be merged`;
      break;
    case ZodIssueCode.not_multiple_of:
      message = `Number must be a multiple of ${issue.multipleOf}`;
      break;
    case ZodIssueCode.not_finite:
      message = "Number must be finite";
      break;
    default:
      message = _ctx.defaultError;
      util.assertNever(issue);
  }
  return { message };
};
var en_default = errorMap;
var overrideErrorMap = en_default;
function setErrorMap(map) {
  overrideErrorMap = map;
}
function getErrorMap() {
  return overrideErrorMap;
}
var makeIssue = (params) => {
  const { data, path, errorMaps, issueData } = params;
  const fullPath = [...path, ...issueData.path || []];
  const fullIssue = {
    ...issueData,
    path: fullPath
  };
  if (issueData.message !== void 0) {
    return {
      ...issueData,
      path: fullPath,
      message: issueData.message
    };
  }
  let errorMessage = "";
  const maps = errorMaps.filter((m) => !!m).slice().reverse();
  for (const map of maps) {
    errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;
  }
  return {
    ...issueData,
    path: fullPath,
    message: errorMessage
  };
};
var EMPTY_PATH = [];
function addIssueToContext(ctx, issueData) {
  const overrideMap = getErrorMap();
  const issue = makeIssue({
    issueData,
    data: ctx.data,
    path: ctx.path,
    errorMaps: [
      ctx.common.contextualErrorMap,
      // contextual error map is first priority
      ctx.schemaErrorMap,
      // then schema-bound map if available
      overrideMap,
      // then global override map
      overrideMap === en_default ? void 0 : en_default
      // then global default map
    ].filter((x) => !!x)
  });
  ctx.common.issues.push(issue);
}
var ParseStatus = class _ParseStatus {
  constructor() {
    this.value = "valid";
  }
  dirty() {
    if (this.value === "valid")
      this.value = "dirty";
  }
  abort() {
    if (this.value !== "aborted")
      this.value = "aborted";
  }
  static mergeArray(status, results) {
    const arrayValue = [];
    for (const s of results) {
      if (s.status === "aborted")
        return INVALID;
      if (s.status === "dirty")
        status.dirty();
      arrayValue.push(s.value);
    }
    return { status: status.value, value: arrayValue };
  }
  static async mergeObjectAsync(status, pairs) {
    const syncPairs = [];
    for (const pair of pairs) {
      const key = await pair.key;
      const value = await pair.value;
      syncPairs.push({
        key,
        value
      });
    }
    return _ParseStatus.mergeObjectSync(status, syncPairs);
  }
  static mergeObjectSync(status, pairs) {
    const finalObject = {};
    for (const pair of pairs) {
      const { key, value } = pair;
      if (key.status === "aborted")
        return INVALID;
      if (value.status === "aborted")
        return INVALID;
      if (key.status === "dirty")
        status.dirty();
      if (value.status === "dirty")
        status.dirty();
      if (key.value !== "__proto__" && (typeof value.value !== "undefined" || pair.alwaysSet)) {
        finalObject[key.value] = value.value;
      }
    }
    return { status: status.value, value: finalObject };
  }
};
var INVALID = Object.freeze({
  status: "aborted"
});
var DIRTY = (value) => ({ status: "dirty", value });
var OK = (value) => ({ status: "valid", value });
var isAborted = (x) => x.status === "aborted";
var isDirty = (x) => x.status === "dirty";
var isValid = (x) => x.status === "valid";
var isAsync = (x) => typeof Promise !== "undefined" && x instanceof Promise;
var errorUtil;
(function(errorUtil2) {
  errorUtil2.errToObj = (message) => typeof message === "string" ? { message } : message || {};
  errorUtil2.toString = (message) => typeof message === "string" ? message : message?.message;
})(errorUtil || (errorUtil = {}));
var ParseInputLazyPath = class {
  constructor(parent, value, path, key) {
    this._cachedPath = [];
    this.parent = parent;
    this.data = value;
    this._path = path;
    this._key = key;
  }
  get path() {
    if (!this._cachedPath.length) {
      if (Array.isArray(this._key)) {
        this._cachedPath.push(...this._path, ...this._key);
      } else {
        this._cachedPath.push(...this._path, this._key);
      }
    }
    return this._cachedPath;
  }
};
var handleResult = (ctx, result) => {
  if (isValid(result)) {
    return { success: true, data: result.value };
  } else {
    if (!ctx.common.issues.length) {
      throw new Error("Validation failed but no issues detected.");
    }
    return {
      success: false,
      get error() {
        if (this._error)
          return this._error;
        const error = new ZodError(ctx.common.issues);
        this._error = error;
        return this._error;
      }
    };
  }
};
function processCreateParams(params) {
  if (!params)
    return {};
  const { errorMap: errorMap2, invalid_type_error, required_error, description } = params;
  if (errorMap2 && (invalid_type_error || required_error)) {
    throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
  }
  if (errorMap2)
    return { errorMap: errorMap2, description };
  const customMap = (iss, ctx) => {
    const { message } = params;
    if (iss.code === "invalid_enum_value") {
      return { message: message ?? ctx.defaultError };
    }
    if (typeof ctx.data === "undefined") {
      return { message: message ?? required_error ?? ctx.defaultError };
    }
    if (iss.code !== "invalid_type")
      return { message: ctx.defaultError };
    return { message: message ?? invalid_type_error ?? ctx.defaultError };
  };
  return { errorMap: customMap, description };
}
var ZodType = class {
  get description() {
    return this._def.description;
  }
  _getType(input) {
    return getParsedType(input.data);
  }
  _getOrReturnCtx(input, ctx) {
    return ctx || {
      common: input.parent.common,
      data: input.data,
      parsedType: getParsedType(input.data),
      schemaErrorMap: this._def.errorMap,
      path: input.path,
      parent: input.parent
    };
  }
  _processInputParams(input) {
    return {
      status: new ParseStatus(),
      ctx: {
        common: input.parent.common,
        data: input.data,
        parsedType: getParsedType(input.data),
        schemaErrorMap: this._def.errorMap,
        path: input.path,
        parent: input.parent
      }
    };
  }
  _parseSync(input) {
    const result = this._parse(input);
    if (isAsync(result)) {
      throw new Error("Synchronous parse encountered promise.");
    }
    return result;
  }
  _parseAsync(input) {
    const result = this._parse(input);
    return Promise.resolve(result);
  }
  parse(data, params) {
    const result = this.safeParse(data, params);
    if (result.success)
      return result.data;
    throw result.error;
  }
  safeParse(data, params) {
    const ctx = {
      common: {
        issues: [],
        async: params?.async ?? false,
        contextualErrorMap: params?.errorMap
      },
      path: params?.path || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType(data)
    };
    const result = this._parseSync({ data, path: ctx.path, parent: ctx });
    return handleResult(ctx, result);
  }
  "~validate"(data) {
    const ctx = {
      common: {
        issues: [],
        async: !!this["~standard"].async
      },
      path: [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType(data)
    };
    if (!this["~standard"].async) {
      try {
        const result = this._parseSync({ data, path: [], parent: ctx });
        return isValid(result) ? {
          value: result.value
        } : {
          issues: ctx.common.issues
        };
      } catch (err) {
        if (err?.message?.toLowerCase()?.includes("encountered")) {
          this["~standard"].async = true;
        }
        ctx.common = {
          issues: [],
          async: true
        };
      }
    }
    return this._parseAsync({ data, path: [], parent: ctx }).then((result) => isValid(result) ? {
      value: result.value
    } : {
      issues: ctx.common.issues
    });
  }
  async parseAsync(data, params) {
    const result = await this.safeParseAsync(data, params);
    if (result.success)
      return result.data;
    throw result.error;
  }
  async safeParseAsync(data, params) {
    const ctx = {
      common: {
        issues: [],
        contextualErrorMap: params?.errorMap,
        async: true
      },
      path: params?.path || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType(data)
    };
    const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });
    const result = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
    return handleResult(ctx, result);
  }
  refine(check, message) {
    const getIssueProperties = (val) => {
      if (typeof message === "string" || typeof message === "undefined") {
        return { message };
      } else if (typeof message === "function") {
        return message(val);
      } else {
        return message;
      }
    };
    return this._refinement((val, ctx) => {
      const result = check(val);
      const setError = () => ctx.addIssue({
        code: ZodIssueCode.custom,
        ...getIssueProperties(val)
      });
      if (typeof Promise !== "undefined" && result instanceof Promise) {
        return result.then((data) => {
          if (!data) {
            setError();
            return false;
          } else {
            return true;
          }
        });
      }
      if (!result) {
        setError();
        return false;
      } else {
        return true;
      }
    });
  }
  refinement(check, refinementData) {
    return this._refinement((val, ctx) => {
      if (!check(val)) {
        ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
        return false;
      } else {
        return true;
      }
    });
  }
  _refinement(refinement) {
    return new ZodEffects({
      schema: this,
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      effect: { type: "refinement", refinement }
    });
  }
  superRefine(refinement) {
    return this._refinement(refinement);
  }
  constructor(def) {
    this.spa = this.safeParseAsync;
    this._def = def;
    this.parse = this.parse.bind(this);
    this.safeParse = this.safeParse.bind(this);
    this.parseAsync = this.parseAsync.bind(this);
    this.safeParseAsync = this.safeParseAsync.bind(this);
    this.spa = this.spa.bind(this);
    this.refine = this.refine.bind(this);
    this.refinement = this.refinement.bind(this);
    this.superRefine = this.superRefine.bind(this);
    this.optional = this.optional.bind(this);
    this.nullable = this.nullable.bind(this);
    this.nullish = this.nullish.bind(this);
    this.array = this.array.bind(this);
    this.promise = this.promise.bind(this);
    this.or = this.or.bind(this);
    this.and = this.and.bind(this);
    this.transform = this.transform.bind(this);
    this.brand = this.brand.bind(this);
    this.default = this.default.bind(this);
    this.catch = this.catch.bind(this);
    this.describe = this.describe.bind(this);
    this.pipe = this.pipe.bind(this);
    this.readonly = this.readonly.bind(this);
    this.isNullable = this.isNullable.bind(this);
    this.isOptional = this.isOptional.bind(this);
    this["~standard"] = {
      version: 1,
      vendor: "zod",
      validate: (data) => this["~validate"](data)
    };
  }
  optional() {
    return ZodOptional.create(this, this._def);
  }
  nullable() {
    return ZodNullable.create(this, this._def);
  }
  nullish() {
    return this.nullable().optional();
  }
  array() {
    return ZodArray.create(this);
  }
  promise() {
    return ZodPromise.create(this, this._def);
  }
  or(option) {
    return ZodUnion.create([this, option], this._def);
  }
  and(incoming) {
    return ZodIntersection.create(this, incoming, this._def);
  }
  transform(transform) {
    return new ZodEffects({
      ...processCreateParams(this._def),
      schema: this,
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      effect: { type: "transform", transform }
    });
  }
  default(def) {
    const defaultValueFunc = typeof def === "function" ? def : () => def;
    return new ZodDefault({
      ...processCreateParams(this._def),
      innerType: this,
      defaultValue: defaultValueFunc,
      typeName: ZodFirstPartyTypeKind.ZodDefault
    });
  }
  brand() {
    return new ZodBranded({
      typeName: ZodFirstPartyTypeKind.ZodBranded,
      type: this,
      ...processCreateParams(this._def)
    });
  }
  catch(def) {
    const catchValueFunc = typeof def === "function" ? def : () => def;
    return new ZodCatch({
      ...processCreateParams(this._def),
      innerType: this,
      catchValue: catchValueFunc,
      typeName: ZodFirstPartyTypeKind.ZodCatch
    });
  }
  describe(description) {
    const This = this.constructor;
    return new This({
      ...this._def,
      description
    });
  }
  pipe(target) {
    return ZodPipeline.create(this, target);
  }
  readonly() {
    return ZodReadonly.create(this);
  }
  isOptional() {
    return this.safeParse(void 0).success;
  }
  isNullable() {
    return this.safeParse(null).success;
  }
};
var cuidRegex = /^c[^\s-]{8,}$/i;
var cuid2Regex = /^[0-9a-z]+$/;
var ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;
var uuidRegex = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;
var nanoidRegex = /^[a-z0-9_-]{21}$/i;
var jwtRegex = /^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/;
var durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/;
var emailRegex = /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;
var _emojiRegex = `^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$`;
var emojiRegex;
var ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;
var ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/;
var ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;
var ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;
var base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
var base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;
var dateRegexSource = `((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))`;
var dateRegex = new RegExp(`^${dateRegexSource}$`);
function timeRegexSource(args) {
  let secondsRegexSource = `[0-5]\\d`;
  if (args.precision) {
    secondsRegexSource = `${secondsRegexSource}\\.\\d{${args.precision}}`;
  } else if (args.precision == null) {
    secondsRegexSource = `${secondsRegexSource}(\\.\\d+)?`;
  }
  const secondsQuantifier = args.precision ? "+" : "?";
  return `([01]\\d|2[0-3]):[0-5]\\d(:${secondsRegexSource})${secondsQuantifier}`;
}
function timeRegex(args) {
  return new RegExp(`^${timeRegexSource(args)}$`);
}
function datetimeRegex(args) {
  let regex = `${dateRegexSource}T${timeRegexSource(args)}`;
  const opts = [];
  opts.push(args.local ? `Z?` : `Z`);
  if (args.offset)
    opts.push(`([+-]\\d{2}:?\\d{2})`);
  regex = `${regex}(${opts.join("|")})`;
  return new RegExp(`^${regex}$`);
}
function isValidIP(ip, version) {
  if ((version === "v4" || !version) && ipv4Regex.test(ip)) {
    return true;
  }
  if ((version === "v6" || !version) && ipv6Regex.test(ip)) {
    return true;
  }
  return false;
}
function isValidJWT(jwt, alg) {
  if (!jwtRegex.test(jwt))
    return false;
  try {
    const [header] = jwt.split(".");
    if (!header)
      return false;
    const base64 = header.replace(/-/g, "+").replace(/_/g, "/").padEnd(header.length + (4 - header.length % 4) % 4, "=");
    const decoded = JSON.parse(atob(base64));
    if (typeof decoded !== "object" || decoded === null)
      return false;
    if ("typ" in decoded && decoded?.typ !== "JWT")
      return false;
    if (!decoded.alg)
      return false;
    if (alg && decoded.alg !== alg)
      return false;
    return true;
  } catch {
    return false;
  }
}
function isValidCidr(ip, version) {
  if ((version === "v4" || !version) && ipv4CidrRegex.test(ip)) {
    return true;
  }
  if ((version === "v6" || !version) && ipv6CidrRegex.test(ip)) {
    return true;
  }
  return false;
}
var ZodString = class _ZodString extends ZodType {
  _parse(input) {
    if (this._def.coerce) {
      input.data = String(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.string) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.string,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    const status = new ParseStatus();
    let ctx = void 0;
    for (const check of this._def.checks) {
      if (check.kind === "min") {
        if (input.data.length < check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: check.value,
            type: "string",
            inclusive: true,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        if (input.data.length > check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: check.value,
            type: "string",
            inclusive: true,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "length") {
        const tooBig = input.data.length > check.value;
        const tooSmall = input.data.length < check.value;
        if (tooBig || tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          if (tooBig) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              maximum: check.value,
              type: "string",
              inclusive: true,
              exact: true,
              message: check.message
            });
          } else if (tooSmall) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              minimum: check.value,
              type: "string",
              inclusive: true,
              exact: true,
              message: check.message
            });
          }
          status.dirty();
        }
      } else if (check.kind === "email") {
        if (!emailRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "email",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "emoji") {
        if (!emojiRegex) {
          emojiRegex = new RegExp(_emojiRegex, "u");
        }
        if (!emojiRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "emoji",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "uuid") {
        if (!uuidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "uuid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "nanoid") {
        if (!nanoidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "nanoid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "cuid") {
        if (!cuidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "cuid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "cuid2") {
        if (!cuid2Regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "cuid2",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "ulid") {
        if (!ulidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "ulid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "url") {
        try {
          new URL(input.data);
        } catch {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "url",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "regex") {
        check.regex.lastIndex = 0;
        const testResult = check.regex.test(input.data);
        if (!testResult) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "regex",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "trim") {
        input.data = input.data.trim();
      } else if (check.kind === "includes") {
        if (!input.data.includes(check.value, check.position)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: { includes: check.value, position: check.position },
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "toLowerCase") {
        input.data = input.data.toLowerCase();
      } else if (check.kind === "toUpperCase") {
        input.data = input.data.toUpperCase();
      } else if (check.kind === "startsWith") {
        if (!input.data.startsWith(check.value)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: { startsWith: check.value },
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "endsWith") {
        if (!input.data.endsWith(check.value)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: { endsWith: check.value },
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "datetime") {
        const regex = datetimeRegex(check);
        if (!regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: "datetime",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "date") {
        const regex = dateRegex;
        if (!regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: "date",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "time") {
        const regex = timeRegex(check);
        if (!regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: "time",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "duration") {
        if (!durationRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "duration",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "ip") {
        if (!isValidIP(input.data, check.version)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "ip",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "jwt") {
        if (!isValidJWT(input.data, check.alg)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "jwt",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "cidr") {
        if (!isValidCidr(input.data, check.version)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "cidr",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "base64") {
        if (!base64Regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "base64",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "base64url") {
        if (!base64urlRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "base64url",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return { status: status.value, value: input.data };
  }
  _regex(regex, validation, message) {
    return this.refinement((data) => regex.test(data), {
      validation,
      code: ZodIssueCode.invalid_string,
      ...errorUtil.errToObj(message)
    });
  }
  _addCheck(check) {
    return new _ZodString({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  email(message) {
    return this._addCheck({ kind: "email", ...errorUtil.errToObj(message) });
  }
  url(message) {
    return this._addCheck({ kind: "url", ...errorUtil.errToObj(message) });
  }
  emoji(message) {
    return this._addCheck({ kind: "emoji", ...errorUtil.errToObj(message) });
  }
  uuid(message) {
    return this._addCheck({ kind: "uuid", ...errorUtil.errToObj(message) });
  }
  nanoid(message) {
    return this._addCheck({ kind: "nanoid", ...errorUtil.errToObj(message) });
  }
  cuid(message) {
    return this._addCheck({ kind: "cuid", ...errorUtil.errToObj(message) });
  }
  cuid2(message) {
    return this._addCheck({ kind: "cuid2", ...errorUtil.errToObj(message) });
  }
  ulid(message) {
    return this._addCheck({ kind: "ulid", ...errorUtil.errToObj(message) });
  }
  base64(message) {
    return this._addCheck({ kind: "base64", ...errorUtil.errToObj(message) });
  }
  base64url(message) {
    return this._addCheck({
      kind: "base64url",
      ...errorUtil.errToObj(message)
    });
  }
  jwt(options) {
    return this._addCheck({ kind: "jwt", ...errorUtil.errToObj(options) });
  }
  ip(options) {
    return this._addCheck({ kind: "ip", ...errorUtil.errToObj(options) });
  }
  cidr(options) {
    return this._addCheck({ kind: "cidr", ...errorUtil.errToObj(options) });
  }
  datetime(options) {
    if (typeof options === "string") {
      return this._addCheck({
        kind: "datetime",
        precision: null,
        offset: false,
        local: false,
        message: options
      });
    }
    return this._addCheck({
      kind: "datetime",
      precision: typeof options?.precision === "undefined" ? null : options?.precision,
      offset: options?.offset ?? false,
      local: options?.local ?? false,
      ...errorUtil.errToObj(options?.message)
    });
  }
  date(message) {
    return this._addCheck({ kind: "date", message });
  }
  time(options) {
    if (typeof options === "string") {
      return this._addCheck({
        kind: "time",
        precision: null,
        message: options
      });
    }
    return this._addCheck({
      kind: "time",
      precision: typeof options?.precision === "undefined" ? null : options?.precision,
      ...errorUtil.errToObj(options?.message)
    });
  }
  duration(message) {
    return this._addCheck({ kind: "duration", ...errorUtil.errToObj(message) });
  }
  regex(regex, message) {
    return this._addCheck({
      kind: "regex",
      regex,
      ...errorUtil.errToObj(message)
    });
  }
  includes(value, options) {
    return this._addCheck({
      kind: "includes",
      value,
      position: options?.position,
      ...errorUtil.errToObj(options?.message)
    });
  }
  startsWith(value, message) {
    return this._addCheck({
      kind: "startsWith",
      value,
      ...errorUtil.errToObj(message)
    });
  }
  endsWith(value, message) {
    return this._addCheck({
      kind: "endsWith",
      value,
      ...errorUtil.errToObj(message)
    });
  }
  min(minLength, message) {
    return this._addCheck({
      kind: "min",
      value: minLength,
      ...errorUtil.errToObj(message)
    });
  }
  max(maxLength, message) {
    return this._addCheck({
      kind: "max",
      value: maxLength,
      ...errorUtil.errToObj(message)
    });
  }
  length(len, message) {
    return this._addCheck({
      kind: "length",
      value: len,
      ...errorUtil.errToObj(message)
    });
  }
  /**
   * Equivalent to `.min(1)`
   */
  nonempty(message) {
    return this.min(1, errorUtil.errToObj(message));
  }
  trim() {
    return new _ZodString({
      ...this._def,
      checks: [...this._def.checks, { kind: "trim" }]
    });
  }
  toLowerCase() {
    return new _ZodString({
      ...this._def,
      checks: [...this._def.checks, { kind: "toLowerCase" }]
    });
  }
  toUpperCase() {
    return new _ZodString({
      ...this._def,
      checks: [...this._def.checks, { kind: "toUpperCase" }]
    });
  }
  get isDatetime() {
    return !!this._def.checks.find((ch) => ch.kind === "datetime");
  }
  get isDate() {
    return !!this._def.checks.find((ch) => ch.kind === "date");
  }
  get isTime() {
    return !!this._def.checks.find((ch) => ch.kind === "time");
  }
  get isDuration() {
    return !!this._def.checks.find((ch) => ch.kind === "duration");
  }
  get isEmail() {
    return !!this._def.checks.find((ch) => ch.kind === "email");
  }
  get isURL() {
    return !!this._def.checks.find((ch) => ch.kind === "url");
  }
  get isEmoji() {
    return !!this._def.checks.find((ch) => ch.kind === "emoji");
  }
  get isUUID() {
    return !!this._def.checks.find((ch) => ch.kind === "uuid");
  }
  get isNANOID() {
    return !!this._def.checks.find((ch) => ch.kind === "nanoid");
  }
  get isCUID() {
    return !!this._def.checks.find((ch) => ch.kind === "cuid");
  }
  get isCUID2() {
    return !!this._def.checks.find((ch) => ch.kind === "cuid2");
  }
  get isULID() {
    return !!this._def.checks.find((ch) => ch.kind === "ulid");
  }
  get isIP() {
    return !!this._def.checks.find((ch) => ch.kind === "ip");
  }
  get isCIDR() {
    return !!this._def.checks.find((ch) => ch.kind === "cidr");
  }
  get isBase64() {
    return !!this._def.checks.find((ch) => ch.kind === "base64");
  }
  get isBase64url() {
    return !!this._def.checks.find((ch) => ch.kind === "base64url");
  }
  get minLength() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min;
  }
  get maxLength() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return max;
  }
};
ZodString.create = (params) => {
  return new ZodString({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodString,
    coerce: params?.coerce ?? false,
    ...processCreateParams(params)
  });
};
function floatSafeRemainder(val, step) {
  const valDecCount = (val.toString().split(".")[1] || "").length;
  const stepDecCount = (step.toString().split(".")[1] || "").length;
  const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
  const valInt = Number.parseInt(val.toFixed(decCount).replace(".", ""));
  const stepInt = Number.parseInt(step.toFixed(decCount).replace(".", ""));
  return valInt % stepInt / 10 ** decCount;
}
var ZodNumber = class _ZodNumber extends ZodType {
  constructor() {
    super(...arguments);
    this.min = this.gte;
    this.max = this.lte;
    this.step = this.multipleOf;
  }
  _parse(input) {
    if (this._def.coerce) {
      input.data = Number(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.number) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.number,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    let ctx = void 0;
    const status = new ParseStatus();
    for (const check of this._def.checks) {
      if (check.kind === "int") {
        if (!util.isInteger(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: "integer",
            received: "float",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "min") {
        const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
        if (tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: check.value,
            type: "number",
            inclusive: check.inclusive,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
        if (tooBig) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: check.value,
            type: "number",
            inclusive: check.inclusive,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "multipleOf") {
        if (floatSafeRemainder(input.data, check.value) !== 0) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.not_multiple_of,
            multipleOf: check.value,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "finite") {
        if (!Number.isFinite(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.not_finite,
            message: check.message
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return { status: status.value, value: input.data };
  }
  gte(value, message) {
    return this.setLimit("min", value, true, errorUtil.toString(message));
  }
  gt(value, message) {
    return this.setLimit("min", value, false, errorUtil.toString(message));
  }
  lte(value, message) {
    return this.setLimit("max", value, true, errorUtil.toString(message));
  }
  lt(value, message) {
    return this.setLimit("max", value, false, errorUtil.toString(message));
  }
  setLimit(kind, value, inclusive, message) {
    return new _ZodNumber({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind,
          value,
          inclusive,
          message: errorUtil.toString(message)
        }
      ]
    });
  }
  _addCheck(check) {
    return new _ZodNumber({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  int(message) {
    return this._addCheck({
      kind: "int",
      message: errorUtil.toString(message)
    });
  }
  positive(message) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  negative(message) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  nonpositive(message) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  nonnegative(message) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  multipleOf(value, message) {
    return this._addCheck({
      kind: "multipleOf",
      value,
      message: errorUtil.toString(message)
    });
  }
  finite(message) {
    return this._addCheck({
      kind: "finite",
      message: errorUtil.toString(message)
    });
  }
  safe(message) {
    return this._addCheck({
      kind: "min",
      inclusive: true,
      value: Number.MIN_SAFE_INTEGER,
      message: errorUtil.toString(message)
    })._addCheck({
      kind: "max",
      inclusive: true,
      value: Number.MAX_SAFE_INTEGER,
      message: errorUtil.toString(message)
    });
  }
  get minValue() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min;
  }
  get maxValue() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return max;
  }
  get isInt() {
    return !!this._def.checks.find((ch) => ch.kind === "int" || ch.kind === "multipleOf" && util.isInteger(ch.value));
  }
  get isFinite() {
    let max = null;
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "finite" || ch.kind === "int" || ch.kind === "multipleOf") {
        return true;
      } else if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      } else if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return Number.isFinite(min) && Number.isFinite(max);
  }
};
ZodNumber.create = (params) => {
  return new ZodNumber({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodNumber,
    coerce: params?.coerce || false,
    ...processCreateParams(params)
  });
};
var ZodBigInt = class _ZodBigInt extends ZodType {
  constructor() {
    super(...arguments);
    this.min = this.gte;
    this.max = this.lte;
  }
  _parse(input) {
    if (this._def.coerce) {
      try {
        input.data = BigInt(input.data);
      } catch {
        return this._getInvalidInput(input);
      }
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.bigint) {
      return this._getInvalidInput(input);
    }
    let ctx = void 0;
    const status = new ParseStatus();
    for (const check of this._def.checks) {
      if (check.kind === "min") {
        const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
        if (tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            type: "bigint",
            minimum: check.value,
            inclusive: check.inclusive,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
        if (tooBig) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            type: "bigint",
            maximum: check.value,
            inclusive: check.inclusive,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "multipleOf") {
        if (input.data % check.value !== BigInt(0)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.not_multiple_of,
            multipleOf: check.value,
            message: check.message
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return { status: status.value, value: input.data };
  }
  _getInvalidInput(input) {
    const ctx = this._getOrReturnCtx(input);
    addIssueToContext(ctx, {
      code: ZodIssueCode.invalid_type,
      expected: ZodParsedType.bigint,
      received: ctx.parsedType
    });
    return INVALID;
  }
  gte(value, message) {
    return this.setLimit("min", value, true, errorUtil.toString(message));
  }
  gt(value, message) {
    return this.setLimit("min", value, false, errorUtil.toString(message));
  }
  lte(value, message) {
    return this.setLimit("max", value, true, errorUtil.toString(message));
  }
  lt(value, message) {
    return this.setLimit("max", value, false, errorUtil.toString(message));
  }
  setLimit(kind, value, inclusive, message) {
    return new _ZodBigInt({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind,
          value,
          inclusive,
          message: errorUtil.toString(message)
        }
      ]
    });
  }
  _addCheck(check) {
    return new _ZodBigInt({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  positive(message) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  negative(message) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  nonpositive(message) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  nonnegative(message) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  multipleOf(value, message) {
    return this._addCheck({
      kind: "multipleOf",
      value,
      message: errorUtil.toString(message)
    });
  }
  get minValue() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min;
  }
  get maxValue() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return max;
  }
};
ZodBigInt.create = (params) => {
  return new ZodBigInt({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodBigInt,
    coerce: params?.coerce ?? false,
    ...processCreateParams(params)
  });
};
var ZodBoolean = class extends ZodType {
  _parse(input) {
    if (this._def.coerce) {
      input.data = Boolean(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.boolean) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.boolean,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodBoolean.create = (params) => {
  return new ZodBoolean({
    typeName: ZodFirstPartyTypeKind.ZodBoolean,
    coerce: params?.coerce || false,
    ...processCreateParams(params)
  });
};
var ZodDate = class _ZodDate extends ZodType {
  _parse(input) {
    if (this._def.coerce) {
      input.data = new Date(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.date) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.date,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    if (Number.isNaN(input.data.getTime())) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_date
      });
      return INVALID;
    }
    const status = new ParseStatus();
    let ctx = void 0;
    for (const check of this._def.checks) {
      if (check.kind === "min") {
        if (input.data.getTime() < check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            message: check.message,
            inclusive: true,
            exact: false,
            minimum: check.value,
            type: "date"
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        if (input.data.getTime() > check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            message: check.message,
            inclusive: true,
            exact: false,
            maximum: check.value,
            type: "date"
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return {
      status: status.value,
      value: new Date(input.data.getTime())
    };
  }
  _addCheck(check) {
    return new _ZodDate({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  min(minDate, message) {
    return this._addCheck({
      kind: "min",
      value: minDate.getTime(),
      message: errorUtil.toString(message)
    });
  }
  max(maxDate, message) {
    return this._addCheck({
      kind: "max",
      value: maxDate.getTime(),
      message: errorUtil.toString(message)
    });
  }
  get minDate() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min != null ? new Date(min) : null;
  }
  get maxDate() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return max != null ? new Date(max) : null;
  }
};
ZodDate.create = (params) => {
  return new ZodDate({
    checks: [],
    coerce: params?.coerce || false,
    typeName: ZodFirstPartyTypeKind.ZodDate,
    ...processCreateParams(params)
  });
};
var ZodSymbol = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.symbol) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.symbol,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodSymbol.create = (params) => {
  return new ZodSymbol({
    typeName: ZodFirstPartyTypeKind.ZodSymbol,
    ...processCreateParams(params)
  });
};
var ZodUndefined = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.undefined) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.undefined,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodUndefined.create = (params) => {
  return new ZodUndefined({
    typeName: ZodFirstPartyTypeKind.ZodUndefined,
    ...processCreateParams(params)
  });
};
var ZodNull = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.null) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.null,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodNull.create = (params) => {
  return new ZodNull({
    typeName: ZodFirstPartyTypeKind.ZodNull,
    ...processCreateParams(params)
  });
};
var ZodAny = class extends ZodType {
  constructor() {
    super(...arguments);
    this._any = true;
  }
  _parse(input) {
    return OK(input.data);
  }
};
ZodAny.create = (params) => {
  return new ZodAny({
    typeName: ZodFirstPartyTypeKind.ZodAny,
    ...processCreateParams(params)
  });
};
var ZodUnknown = class extends ZodType {
  constructor() {
    super(...arguments);
    this._unknown = true;
  }
  _parse(input) {
    return OK(input.data);
  }
};
ZodUnknown.create = (params) => {
  return new ZodUnknown({
    typeName: ZodFirstPartyTypeKind.ZodUnknown,
    ...processCreateParams(params)
  });
};
var ZodNever = class extends ZodType {
  _parse(input) {
    const ctx = this._getOrReturnCtx(input);
    addIssueToContext(ctx, {
      code: ZodIssueCode.invalid_type,
      expected: ZodParsedType.never,
      received: ctx.parsedType
    });
    return INVALID;
  }
};
ZodNever.create = (params) => {
  return new ZodNever({
    typeName: ZodFirstPartyTypeKind.ZodNever,
    ...processCreateParams(params)
  });
};
var ZodVoid = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.undefined) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.void,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodVoid.create = (params) => {
  return new ZodVoid({
    typeName: ZodFirstPartyTypeKind.ZodVoid,
    ...processCreateParams(params)
  });
};
var ZodArray = class _ZodArray extends ZodType {
  _parse(input) {
    const { ctx, status } = this._processInputParams(input);
    const def = this._def;
    if (ctx.parsedType !== ZodParsedType.array) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.array,
        received: ctx.parsedType
      });
      return INVALID;
    }
    if (def.exactLength !== null) {
      const tooBig = ctx.data.length > def.exactLength.value;
      const tooSmall = ctx.data.length < def.exactLength.value;
      if (tooBig || tooSmall) {
        addIssueToContext(ctx, {
          code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,
          minimum: tooSmall ? def.exactLength.value : void 0,
          maximum: tooBig ? def.exactLength.value : void 0,
          type: "array",
          inclusive: true,
          exact: true,
          message: def.exactLength.message
        });
        status.dirty();
      }
    }
    if (def.minLength !== null) {
      if (ctx.data.length < def.minLength.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_small,
          minimum: def.minLength.value,
          type: "array",
          inclusive: true,
          exact: false,
          message: def.minLength.message
        });
        status.dirty();
      }
    }
    if (def.maxLength !== null) {
      if (ctx.data.length > def.maxLength.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_big,
          maximum: def.maxLength.value,
          type: "array",
          inclusive: true,
          exact: false,
          message: def.maxLength.message
        });
        status.dirty();
      }
    }
    if (ctx.common.async) {
      return Promise.all([...ctx.data].map((item, i) => {
        return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));
      })).then((result2) => {
        return ParseStatus.mergeArray(status, result2);
      });
    }
    const result = [...ctx.data].map((item, i) => {
      return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));
    });
    return ParseStatus.mergeArray(status, result);
  }
  get element() {
    return this._def.type;
  }
  min(minLength, message) {
    return new _ZodArray({
      ...this._def,
      minLength: { value: minLength, message: errorUtil.toString(message) }
    });
  }
  max(maxLength, message) {
    return new _ZodArray({
      ...this._def,
      maxLength: { value: maxLength, message: errorUtil.toString(message) }
    });
  }
  length(len, message) {
    return new _ZodArray({
      ...this._def,
      exactLength: { value: len, message: errorUtil.toString(message) }
    });
  }
  nonempty(message) {
    return this.min(1, message);
  }
};
ZodArray.create = (schema, params) => {
  return new ZodArray({
    type: schema,
    minLength: null,
    maxLength: null,
    exactLength: null,
    typeName: ZodFirstPartyTypeKind.ZodArray,
    ...processCreateParams(params)
  });
};
function deepPartialify(schema) {
  if (schema instanceof ZodObject) {
    const newShape = {};
    for (const key in schema.shape) {
      const fieldSchema = schema.shape[key];
      newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
    }
    return new ZodObject({
      ...schema._def,
      shape: () => newShape
    });
  } else if (schema instanceof ZodArray) {
    return new ZodArray({
      ...schema._def,
      type: deepPartialify(schema.element)
    });
  } else if (schema instanceof ZodOptional) {
    return ZodOptional.create(deepPartialify(schema.unwrap()));
  } else if (schema instanceof ZodNullable) {
    return ZodNullable.create(deepPartialify(schema.unwrap()));
  } else if (schema instanceof ZodTuple) {
    return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));
  } else {
    return schema;
  }
}
var ZodObject = class _ZodObject extends ZodType {
  constructor() {
    super(...arguments);
    this._cached = null;
    this.nonstrict = this.passthrough;
    this.augment = this.extend;
  }
  _getCached() {
    if (this._cached !== null)
      return this._cached;
    const shape = this._def.shape();
    const keys = util.objectKeys(shape);
    this._cached = { shape, keys };
    return this._cached;
  }
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.object) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    const { status, ctx } = this._processInputParams(input);
    const { shape, keys: shapeKeys } = this._getCached();
    const extraKeys = [];
    if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === "strip")) {
      for (const key in ctx.data) {
        if (!shapeKeys.includes(key)) {
          extraKeys.push(key);
        }
      }
    }
    const pairs = [];
    for (const key of shapeKeys) {
      const keyValidator = shape[key];
      const value = ctx.data[key];
      pairs.push({
        key: { status: "valid", value: key },
        value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
        alwaysSet: key in ctx.data
      });
    }
    if (this._def.catchall instanceof ZodNever) {
      const unknownKeys = this._def.unknownKeys;
      if (unknownKeys === "passthrough") {
        for (const key of extraKeys) {
          pairs.push({
            key: { status: "valid", value: key },
            value: { status: "valid", value: ctx.data[key] }
          });
        }
      } else if (unknownKeys === "strict") {
        if (extraKeys.length > 0) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.unrecognized_keys,
            keys: extraKeys
          });
          status.dirty();
        }
      } else if (unknownKeys === "strip") {
      } else {
        throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
      }
    } else {
      const catchall = this._def.catchall;
      for (const key of extraKeys) {
        const value = ctx.data[key];
        pairs.push({
          key: { status: "valid", value: key },
          value: catchall._parse(
            new ParseInputLazyPath(ctx, value, ctx.path, key)
            //, ctx.child(key), value, getParsedType(value)
          ),
          alwaysSet: key in ctx.data
        });
      }
    }
    if (ctx.common.async) {
      return Promise.resolve().then(async () => {
        const syncPairs = [];
        for (const pair of pairs) {
          const key = await pair.key;
          const value = await pair.value;
          syncPairs.push({
            key,
            value,
            alwaysSet: pair.alwaysSet
          });
        }
        return syncPairs;
      }).then((syncPairs) => {
        return ParseStatus.mergeObjectSync(status, syncPairs);
      });
    } else {
      return ParseStatus.mergeObjectSync(status, pairs);
    }
  }
  get shape() {
    return this._def.shape();
  }
  strict(message) {
    errorUtil.errToObj;
    return new _ZodObject({
      ...this._def,
      unknownKeys: "strict",
      ...message !== void 0 ? {
        errorMap: (issue, ctx) => {
          const defaultError = this._def.errorMap?.(issue, ctx).message ?? ctx.defaultError;
          if (issue.code === "unrecognized_keys")
            return {
              message: errorUtil.errToObj(message).message ?? defaultError
            };
          return {
            message: defaultError
          };
        }
      } : {}
    });
  }
  strip() {
    return new _ZodObject({
      ...this._def,
      unknownKeys: "strip"
    });
  }
  passthrough() {
    return new _ZodObject({
      ...this._def,
      unknownKeys: "passthrough"
    });
  }
  // const AugmentFactory =
  //   <Def extends ZodObjectDef>(def: Def) =>
  //   <Augmentation extends ZodRawShape>(
  //     augmentation: Augmentation
  //   ): ZodObject<
  //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
  //     Def["unknownKeys"],
  //     Def["catchall"]
  //   > => {
  //     return new ZodObject({
  //       ...def,
  //       shape: () => ({
  //         ...def.shape(),
  //         ...augmentation,
  //       }),
  //     }) as any;
  //   };
  extend(augmentation) {
    return new _ZodObject({
      ...this._def,
      shape: () => ({
        ...this._def.shape(),
        ...augmentation
      })
    });
  }
  /**
   * Prior to zod@1.0.12 there was a bug in the
   * inferred type of merged objects. Please
   * upgrade if you are experiencing issues.
   */
  merge(merging) {
    const merged = new _ZodObject({
      unknownKeys: merging._def.unknownKeys,
      catchall: merging._def.catchall,
      shape: () => ({
        ...this._def.shape(),
        ...merging._def.shape()
      }),
      typeName: ZodFirstPartyTypeKind.ZodObject
    });
    return merged;
  }
  // merge<
  //   Incoming extends AnyZodObject,
  //   Augmentation extends Incoming["shape"],
  //   NewOutput extends {
  //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
  //       ? Augmentation[k]["_output"]
  //       : k extends keyof Output
  //       ? Output[k]
  //       : never;
  //   },
  //   NewInput extends {
  //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
  //       ? Augmentation[k]["_input"]
  //       : k extends keyof Input
  //       ? Input[k]
  //       : never;
  //   }
  // >(
  //   merging: Incoming
  // ): ZodObject<
  //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
  //   Incoming["_def"]["unknownKeys"],
  //   Incoming["_def"]["catchall"],
  //   NewOutput,
  //   NewInput
  // > {
  //   const merged: any = new ZodObject({
  //     unknownKeys: merging._def.unknownKeys,
  //     catchall: merging._def.catchall,
  //     shape: () =>
  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
  //     typeName: ZodFirstPartyTypeKind.ZodObject,
  //   }) as any;
  //   return merged;
  // }
  setKey(key, schema) {
    return this.augment({ [key]: schema });
  }
  // merge<Incoming extends AnyZodObject>(
  //   merging: Incoming
  // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
  // ZodObject<
  //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
  //   Incoming["_def"]["unknownKeys"],
  //   Incoming["_def"]["catchall"]
  // > {
  //   // const mergedShape = objectUtil.mergeShapes(
  //   //   this._def.shape(),
  //   //   merging._def.shape()
  //   // );
  //   const merged: any = new ZodObject({
  //     unknownKeys: merging._def.unknownKeys,
  //     catchall: merging._def.catchall,
  //     shape: () =>
  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
  //     typeName: ZodFirstPartyTypeKind.ZodObject,
  //   }) as any;
  //   return merged;
  // }
  catchall(index) {
    return new _ZodObject({
      ...this._def,
      catchall: index
    });
  }
  pick(mask) {
    const shape = {};
    for (const key of util.objectKeys(mask)) {
      if (mask[key] && this.shape[key]) {
        shape[key] = this.shape[key];
      }
    }
    return new _ZodObject({
      ...this._def,
      shape: () => shape
    });
  }
  omit(mask) {
    const shape = {};
    for (const key of util.objectKeys(this.shape)) {
      if (!mask[key]) {
        shape[key] = this.shape[key];
      }
    }
    return new _ZodObject({
      ...this._def,
      shape: () => shape
    });
  }
  /**
   * @deprecated
   */
  deepPartial() {
    return deepPartialify(this);
  }
  partial(mask) {
    const newShape = {};
    for (const key of util.objectKeys(this.shape)) {
      const fieldSchema = this.shape[key];
      if (mask && !mask[key]) {
        newShape[key] = fieldSchema;
      } else {
        newShape[key] = fieldSchema.optional();
      }
    }
    return new _ZodObject({
      ...this._def,
      shape: () => newShape
    });
  }
  required(mask) {
    const newShape = {};
    for (const key of util.objectKeys(this.shape)) {
      if (mask && !mask[key]) {
        newShape[key] = this.shape[key];
      } else {
        const fieldSchema = this.shape[key];
        let newField = fieldSchema;
        while (newField instanceof ZodOptional) {
          newField = newField._def.innerType;
        }
        newShape[key] = newField;
      }
    }
    return new _ZodObject({
      ...this._def,
      shape: () => newShape
    });
  }
  keyof() {
    return createZodEnum(util.objectKeys(this.shape));
  }
};
ZodObject.create = (shape, params) => {
  return new ZodObject({
    shape: () => shape,
    unknownKeys: "strip",
    catchall: ZodNever.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};
ZodObject.strictCreate = (shape, params) => {
  return new ZodObject({
    shape: () => shape,
    unknownKeys: "strict",
    catchall: ZodNever.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};
ZodObject.lazycreate = (shape, params) => {
  return new ZodObject({
    shape,
    unknownKeys: "strip",
    catchall: ZodNever.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};
var ZodUnion = class extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const options = this._def.options;
    function handleResults(results) {
      for (const result of results) {
        if (result.result.status === "valid") {
          return result.result;
        }
      }
      for (const result of results) {
        if (result.result.status === "dirty") {
          ctx.common.issues.push(...result.ctx.common.issues);
          return result.result;
        }
      }
      const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union,
        unionErrors
      });
      return INVALID;
    }
    if (ctx.common.async) {
      return Promise.all(options.map(async (option) => {
        const childCtx = {
          ...ctx,
          common: {
            ...ctx.common,
            issues: []
          },
          parent: null
        };
        return {
          result: await option._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: childCtx
          }),
          ctx: childCtx
        };
      })).then(handleResults);
    } else {
      let dirty = void 0;
      const issues = [];
      for (const option of options) {
        const childCtx = {
          ...ctx,
          common: {
            ...ctx.common,
            issues: []
          },
          parent: null
        };
        const result = option._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: childCtx
        });
        if (result.status === "valid") {
          return result;
        } else if (result.status === "dirty" && !dirty) {
          dirty = { result, ctx: childCtx };
        }
        if (childCtx.common.issues.length) {
          issues.push(childCtx.common.issues);
        }
      }
      if (dirty) {
        ctx.common.issues.push(...dirty.ctx.common.issues);
        return dirty.result;
      }
      const unionErrors = issues.map((issues2) => new ZodError(issues2));
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union,
        unionErrors
      });
      return INVALID;
    }
  }
  get options() {
    return this._def.options;
  }
};
ZodUnion.create = (types, params) => {
  return new ZodUnion({
    options: types,
    typeName: ZodFirstPartyTypeKind.ZodUnion,
    ...processCreateParams(params)
  });
};
var getDiscriminator = (type) => {
  if (type instanceof ZodLazy) {
    return getDiscriminator(type.schema);
  } else if (type instanceof ZodEffects) {
    return getDiscriminator(type.innerType());
  } else if (type instanceof ZodLiteral) {
    return [type.value];
  } else if (type instanceof ZodEnum) {
    return type.options;
  } else if (type instanceof ZodNativeEnum) {
    return util.objectValues(type.enum);
  } else if (type instanceof ZodDefault) {
    return getDiscriminator(type._def.innerType);
  } else if (type instanceof ZodUndefined) {
    return [void 0];
  } else if (type instanceof ZodNull) {
    return [null];
  } else if (type instanceof ZodOptional) {
    return [void 0, ...getDiscriminator(type.unwrap())];
  } else if (type instanceof ZodNullable) {
    return [null, ...getDiscriminator(type.unwrap())];
  } else if (type instanceof ZodBranded) {
    return getDiscriminator(type.unwrap());
  } else if (type instanceof ZodReadonly) {
    return getDiscriminator(type.unwrap());
  } else if (type instanceof ZodCatch) {
    return getDiscriminator(type._def.innerType);
  } else {
    return [];
  }
};
var ZodDiscriminatedUnion = class _ZodDiscriminatedUnion extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.object) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const discriminator = this.discriminator;
    const discriminatorValue = ctx.data[discriminator];
    const option = this.optionsMap.get(discriminatorValue);
    if (!option) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union_discriminator,
        options: Array.from(this.optionsMap.keys()),
        path: [discriminator]
      });
      return INVALID;
    }
    if (ctx.common.async) {
      return option._parseAsync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
    } else {
      return option._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
    }
  }
  get discriminator() {
    return this._def.discriminator;
  }
  get options() {
    return this._def.options;
  }
  get optionsMap() {
    return this._def.optionsMap;
  }
  /**
   * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
   * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
   * have a different value for each object in the union.
   * @param discriminator the name of the discriminator property
   * @param types an array of object schemas
   * @param params
   */
  static create(discriminator, options, params) {
    const optionsMap = /* @__PURE__ */ new Map();
    for (const type of options) {
      const discriminatorValues = getDiscriminator(type.shape[discriminator]);
      if (!discriminatorValues.length) {
        throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
      }
      for (const value of discriminatorValues) {
        if (optionsMap.has(value)) {
          throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
        }
        optionsMap.set(value, type);
      }
    }
    return new _ZodDiscriminatedUnion({
      typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
      discriminator,
      options,
      optionsMap,
      ...processCreateParams(params)
    });
  }
};
function mergeValues(a, b) {
  const aType = getParsedType(a);
  const bType = getParsedType(b);
  if (a === b) {
    return { valid: true, data: a };
  } else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {
    const bKeys = util.objectKeys(b);
    const sharedKeys = util.objectKeys(a).filter((key) => bKeys.indexOf(key) !== -1);
    const newObj = { ...a, ...b };
    for (const key of sharedKeys) {
      const sharedValue = mergeValues(a[key], b[key]);
      if (!sharedValue.valid) {
        return { valid: false };
      }
      newObj[key] = sharedValue.data;
    }
    return { valid: true, data: newObj };
  } else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {
    if (a.length !== b.length) {
      return { valid: false };
    }
    const newArray = [];
    for (let index = 0; index < a.length; index++) {
      const itemA = a[index];
      const itemB = b[index];
      const sharedValue = mergeValues(itemA, itemB);
      if (!sharedValue.valid) {
        return { valid: false };
      }
      newArray.push(sharedValue.data);
    }
    return { valid: true, data: newArray };
  } else if (aType === ZodParsedType.date && bType === ZodParsedType.date && +a === +b) {
    return { valid: true, data: a };
  } else {
    return { valid: false };
  }
}
var ZodIntersection = class extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    const handleParsed = (parsedLeft, parsedRight) => {
      if (isAborted(parsedLeft) || isAborted(parsedRight)) {
        return INVALID;
      }
      const merged = mergeValues(parsedLeft.value, parsedRight.value);
      if (!merged.valid) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_intersection_types
        });
        return INVALID;
      }
      if (isDirty(parsedLeft) || isDirty(parsedRight)) {
        status.dirty();
      }
      return { status: status.value, value: merged.data };
    };
    if (ctx.common.async) {
      return Promise.all([
        this._def.left._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        }),
        this._def.right._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        })
      ]).then(([left, right]) => handleParsed(left, right));
    } else {
      return handleParsed(this._def.left._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      }), this._def.right._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      }));
    }
  }
};
ZodIntersection.create = (left, right, params) => {
  return new ZodIntersection({
    left,
    right,
    typeName: ZodFirstPartyTypeKind.ZodIntersection,
    ...processCreateParams(params)
  });
};
var ZodTuple = class _ZodTuple extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.array) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.array,
        received: ctx.parsedType
      });
      return INVALID;
    }
    if (ctx.data.length < this._def.items.length) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.too_small,
        minimum: this._def.items.length,
        inclusive: true,
        exact: false,
        type: "array"
      });
      return INVALID;
    }
    const rest = this._def.rest;
    if (!rest && ctx.data.length > this._def.items.length) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.too_big,
        maximum: this._def.items.length,
        inclusive: true,
        exact: false,
        type: "array"
      });
      status.dirty();
    }
    const items = [...ctx.data].map((item, itemIndex) => {
      const schema = this._def.items[itemIndex] || this._def.rest;
      if (!schema)
        return null;
      return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
    }).filter((x) => !!x);
    if (ctx.common.async) {
      return Promise.all(items).then((results) => {
        return ParseStatus.mergeArray(status, results);
      });
    } else {
      return ParseStatus.mergeArray(status, items);
    }
  }
  get items() {
    return this._def.items;
  }
  rest(rest) {
    return new _ZodTuple({
      ...this._def,
      rest
    });
  }
};
ZodTuple.create = (schemas, params) => {
  if (!Array.isArray(schemas)) {
    throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
  }
  return new ZodTuple({
    items: schemas,
    typeName: ZodFirstPartyTypeKind.ZodTuple,
    rest: null,
    ...processCreateParams(params)
  });
};
var ZodRecord = class _ZodRecord extends ZodType {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.object) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const pairs = [];
    const keyType = this._def.keyType;
    const valueType = this._def.valueType;
    for (const key in ctx.data) {
      pairs.push({
        key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
        value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),
        alwaysSet: key in ctx.data
      });
    }
    if (ctx.common.async) {
      return ParseStatus.mergeObjectAsync(status, pairs);
    } else {
      return ParseStatus.mergeObjectSync(status, pairs);
    }
  }
  get element() {
    return this._def.valueType;
  }
  static create(first, second, third) {
    if (second instanceof ZodType) {
      return new _ZodRecord({
        keyType: first,
        valueType: second,
        typeName: ZodFirstPartyTypeKind.ZodRecord,
        ...processCreateParams(third)
      });
    }
    return new _ZodRecord({
      keyType: ZodString.create(),
      valueType: first,
      typeName: ZodFirstPartyTypeKind.ZodRecord,
      ...processCreateParams(second)
    });
  }
};
var ZodMap = class extends ZodType {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.map) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.map,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const keyType = this._def.keyType;
    const valueType = this._def.valueType;
    const pairs = [...ctx.data.entries()].map(([key, value], index) => {
      return {
        key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, "key"])),
        value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, "value"]))
      };
    });
    if (ctx.common.async) {
      const finalMap = /* @__PURE__ */ new Map();
      return Promise.resolve().then(async () => {
        for (const pair of pairs) {
          const key = await pair.key;
          const value = await pair.value;
          if (key.status === "aborted" || value.status === "aborted") {
            return INVALID;
          }
          if (key.status === "dirty" || value.status === "dirty") {
            status.dirty();
          }
          finalMap.set(key.value, value.value);
        }
        return { status: status.value, value: finalMap };
      });
    } else {
      const finalMap = /* @__PURE__ */ new Map();
      for (const pair of pairs) {
        const key = pair.key;
        const value = pair.value;
        if (key.status === "aborted" || value.status === "aborted") {
          return INVALID;
        }
        if (key.status === "dirty" || value.status === "dirty") {
          status.dirty();
        }
        finalMap.set(key.value, value.value);
      }
      return { status: status.value, value: finalMap };
    }
  }
};
ZodMap.create = (keyType, valueType, params) => {
  return new ZodMap({
    valueType,
    keyType,
    typeName: ZodFirstPartyTypeKind.ZodMap,
    ...processCreateParams(params)
  });
};
var ZodSet = class _ZodSet extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.set) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.set,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const def = this._def;
    if (def.minSize !== null) {
      if (ctx.data.size < def.minSize.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_small,
          minimum: def.minSize.value,
          type: "set",
          inclusive: true,
          exact: false,
          message: def.minSize.message
        });
        status.dirty();
      }
    }
    if (def.maxSize !== null) {
      if (ctx.data.size > def.maxSize.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_big,
          maximum: def.maxSize.value,
          type: "set",
          inclusive: true,
          exact: false,
          message: def.maxSize.message
        });
        status.dirty();
      }
    }
    const valueType = this._def.valueType;
    function finalizeSet(elements2) {
      const parsedSet = /* @__PURE__ */ new Set();
      for (const element of elements2) {
        if (element.status === "aborted")
          return INVALID;
        if (element.status === "dirty")
          status.dirty();
        parsedSet.add(element.value);
      }
      return { status: status.value, value: parsedSet };
    }
    const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));
    if (ctx.common.async) {
      return Promise.all(elements).then((elements2) => finalizeSet(elements2));
    } else {
      return finalizeSet(elements);
    }
  }
  min(minSize, message) {
    return new _ZodSet({
      ...this._def,
      minSize: { value: minSize, message: errorUtil.toString(message) }
    });
  }
  max(maxSize, message) {
    return new _ZodSet({
      ...this._def,
      maxSize: { value: maxSize, message: errorUtil.toString(message) }
    });
  }
  size(size, message) {
    return this.min(size, message).max(size, message);
  }
  nonempty(message) {
    return this.min(1, message);
  }
};
ZodSet.create = (valueType, params) => {
  return new ZodSet({
    valueType,
    minSize: null,
    maxSize: null,
    typeName: ZodFirstPartyTypeKind.ZodSet,
    ...processCreateParams(params)
  });
};
var ZodFunction = class _ZodFunction extends ZodType {
  constructor() {
    super(...arguments);
    this.validate = this.implement;
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.function) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.function,
        received: ctx.parsedType
      });
      return INVALID;
    }
    function makeArgsIssue(args, error) {
      return makeIssue({
        data: args,
        path: ctx.path,
        errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, getErrorMap(), en_default].filter((x) => !!x),
        issueData: {
          code: ZodIssueCode.invalid_arguments,
          argumentsError: error
        }
      });
    }
    function makeReturnsIssue(returns, error) {
      return makeIssue({
        data: returns,
        path: ctx.path,
        errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, getErrorMap(), en_default].filter((x) => !!x),
        issueData: {
          code: ZodIssueCode.invalid_return_type,
          returnTypeError: error
        }
      });
    }
    const params = { errorMap: ctx.common.contextualErrorMap };
    const fn = ctx.data;
    if (this._def.returns instanceof ZodPromise) {
      const me = this;
      return OK(async function(...args) {
        const error = new ZodError([]);
        const parsedArgs = await me._def.args.parseAsync(args, params).catch((e) => {
          error.addIssue(makeArgsIssue(args, e));
          throw error;
        });
        const result = await Reflect.apply(fn, this, parsedArgs);
        const parsedReturns = await me._def.returns._def.type.parseAsync(result, params).catch((e) => {
          error.addIssue(makeReturnsIssue(result, e));
          throw error;
        });
        return parsedReturns;
      });
    } else {
      const me = this;
      return OK(function(...args) {
        const parsedArgs = me._def.args.safeParse(args, params);
        if (!parsedArgs.success) {
          throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);
        }
        const result = Reflect.apply(fn, this, parsedArgs.data);
        const parsedReturns = me._def.returns.safeParse(result, params);
        if (!parsedReturns.success) {
          throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);
        }
        return parsedReturns.data;
      });
    }
  }
  parameters() {
    return this._def.args;
  }
  returnType() {
    return this._def.returns;
  }
  args(...items) {
    return new _ZodFunction({
      ...this._def,
      args: ZodTuple.create(items).rest(ZodUnknown.create())
    });
  }
  returns(returnType) {
    return new _ZodFunction({
      ...this._def,
      returns: returnType
    });
  }
  implement(func) {
    const validatedFunc = this.parse(func);
    return validatedFunc;
  }
  strictImplement(func) {
    const validatedFunc = this.parse(func);
    return validatedFunc;
  }
  static create(args, returns, params) {
    return new _ZodFunction({
      args: args ? args : ZodTuple.create([]).rest(ZodUnknown.create()),
      returns: returns || ZodUnknown.create(),
      typeName: ZodFirstPartyTypeKind.ZodFunction,
      ...processCreateParams(params)
    });
  }
};
var ZodLazy = class extends ZodType {
  get schema() {
    return this._def.getter();
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const lazySchema = this._def.getter();
    return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });
  }
};
ZodLazy.create = (getter, params) => {
  return new ZodLazy({
    getter,
    typeName: ZodFirstPartyTypeKind.ZodLazy,
    ...processCreateParams(params)
  });
};
var ZodLiteral = class extends ZodType {
  _parse(input) {
    if (input.data !== this._def.value) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode.invalid_literal,
        expected: this._def.value
      });
      return INVALID;
    }
    return { status: "valid", value: input.data };
  }
  get value() {
    return this._def.value;
  }
};
ZodLiteral.create = (value, params) => {
  return new ZodLiteral({
    value,
    typeName: ZodFirstPartyTypeKind.ZodLiteral,
    ...processCreateParams(params)
  });
};
function createZodEnum(values, params) {
  return new ZodEnum({
    values,
    typeName: ZodFirstPartyTypeKind.ZodEnum,
    ...processCreateParams(params)
  });
}
var ZodEnum = class _ZodEnum extends ZodType {
  _parse(input) {
    if (typeof input.data !== "string") {
      const ctx = this._getOrReturnCtx(input);
      const expectedValues = this._def.values;
      addIssueToContext(ctx, {
        expected: util.joinValues(expectedValues),
        received: ctx.parsedType,
        code: ZodIssueCode.invalid_type
      });
      return INVALID;
    }
    if (!this._cache) {
      this._cache = new Set(this._def.values);
    }
    if (!this._cache.has(input.data)) {
      const ctx = this._getOrReturnCtx(input);
      const expectedValues = this._def.values;
      addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode.invalid_enum_value,
        options: expectedValues
      });
      return INVALID;
    }
    return OK(input.data);
  }
  get options() {
    return this._def.values;
  }
  get enum() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  get Values() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  get Enum() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  extract(values, newDef = this._def) {
    return _ZodEnum.create(values, {
      ...this._def,
      ...newDef
    });
  }
  exclude(values, newDef = this._def) {
    return _ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {
      ...this._def,
      ...newDef
    });
  }
};
ZodEnum.create = createZodEnum;
var ZodNativeEnum = class extends ZodType {
  _parse(input) {
    const nativeEnumValues = util.getValidEnumValues(this._def.values);
    const ctx = this._getOrReturnCtx(input);
    if (ctx.parsedType !== ZodParsedType.string && ctx.parsedType !== ZodParsedType.number) {
      const expectedValues = util.objectValues(nativeEnumValues);
      addIssueToContext(ctx, {
        expected: util.joinValues(expectedValues),
        received: ctx.parsedType,
        code: ZodIssueCode.invalid_type
      });
      return INVALID;
    }
    if (!this._cache) {
      this._cache = new Set(util.getValidEnumValues(this._def.values));
    }
    if (!this._cache.has(input.data)) {
      const expectedValues = util.objectValues(nativeEnumValues);
      addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode.invalid_enum_value,
        options: expectedValues
      });
      return INVALID;
    }
    return OK(input.data);
  }
  get enum() {
    return this._def.values;
  }
};
ZodNativeEnum.create = (values, params) => {
  return new ZodNativeEnum({
    values,
    typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
    ...processCreateParams(params)
  });
};
var ZodPromise = class extends ZodType {
  unwrap() {
    return this._def.type;
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === false) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.promise,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);
    return OK(promisified.then((data) => {
      return this._def.type.parseAsync(data, {
        path: ctx.path,
        errorMap: ctx.common.contextualErrorMap
      });
    }));
  }
};
ZodPromise.create = (schema, params) => {
  return new ZodPromise({
    type: schema,
    typeName: ZodFirstPartyTypeKind.ZodPromise,
    ...processCreateParams(params)
  });
};
var ZodEffects = class extends ZodType {
  innerType() {
    return this._def.schema;
  }
  sourceType() {
    return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    const effect = this._def.effect || null;
    const checkCtx = {
      addIssue: (arg) => {
        addIssueToContext(ctx, arg);
        if (arg.fatal) {
          status.abort();
        } else {
          status.dirty();
        }
      },
      get path() {
        return ctx.path;
      }
    };
    checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
    if (effect.type === "preprocess") {
      const processed = effect.transform(ctx.data, checkCtx);
      if (ctx.common.async) {
        return Promise.resolve(processed).then(async (processed2) => {
          if (status.value === "aborted")
            return INVALID;
          const result = await this._def.schema._parseAsync({
            data: processed2,
            path: ctx.path,
            parent: ctx
          });
          if (result.status === "aborted")
            return INVALID;
          if (result.status === "dirty")
            return DIRTY(result.value);
          if (status.value === "dirty")
            return DIRTY(result.value);
          return result;
        });
      } else {
        if (status.value === "aborted")
          return INVALID;
        const result = this._def.schema._parseSync({
          data: processed,
          path: ctx.path,
          parent: ctx
        });
        if (result.status === "aborted")
          return INVALID;
        if (result.status === "dirty")
          return DIRTY(result.value);
        if (status.value === "dirty")
          return DIRTY(result.value);
        return result;
      }
    }
    if (effect.type === "refinement") {
      const executeRefinement = (acc) => {
        const result = effect.refinement(acc, checkCtx);
        if (ctx.common.async) {
          return Promise.resolve(result);
        }
        if (result instanceof Promise) {
          throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
        }
        return acc;
      };
      if (ctx.common.async === false) {
        const inner = this._def.schema._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (inner.status === "aborted")
          return INVALID;
        if (inner.status === "dirty")
          status.dirty();
        executeRefinement(inner.value);
        return { status: status.value, value: inner.value };
      } else {
        return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {
          if (inner.status === "aborted")
            return INVALID;
          if (inner.status === "dirty")
            status.dirty();
          return executeRefinement(inner.value).then(() => {
            return { status: status.value, value: inner.value };
          });
        });
      }
    }
    if (effect.type === "transform") {
      if (ctx.common.async === false) {
        const base = this._def.schema._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (!isValid(base))
          return INVALID;
        const result = effect.transform(base.value, checkCtx);
        if (result instanceof Promise) {
          throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
        }
        return { status: status.value, value: result };
      } else {
        return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base) => {
          if (!isValid(base))
            return INVALID;
          return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({
            status: status.value,
            value: result
          }));
        });
      }
    }
    util.assertNever(effect);
  }
};
ZodEffects.create = (schema, effect, params) => {
  return new ZodEffects({
    schema,
    typeName: ZodFirstPartyTypeKind.ZodEffects,
    effect,
    ...processCreateParams(params)
  });
};
ZodEffects.createWithPreprocess = (preprocess, schema, params) => {
  return new ZodEffects({
    schema,
    effect: { type: "preprocess", transform: preprocess },
    typeName: ZodFirstPartyTypeKind.ZodEffects,
    ...processCreateParams(params)
  });
};
var ZodOptional = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType === ZodParsedType.undefined) {
      return OK(void 0);
    }
    return this._def.innerType._parse(input);
  }
  unwrap() {
    return this._def.innerType;
  }
};
ZodOptional.create = (type, params) => {
  return new ZodOptional({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodOptional,
    ...processCreateParams(params)
  });
};
var ZodNullable = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType === ZodParsedType.null) {
      return OK(null);
    }
    return this._def.innerType._parse(input);
  }
  unwrap() {
    return this._def.innerType;
  }
};
ZodNullable.create = (type, params) => {
  return new ZodNullable({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodNullable,
    ...processCreateParams(params)
  });
};
var ZodDefault = class extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    let data = ctx.data;
    if (ctx.parsedType === ZodParsedType.undefined) {
      data = this._def.defaultValue();
    }
    return this._def.innerType._parse({
      data,
      path: ctx.path,
      parent: ctx
    });
  }
  removeDefault() {
    return this._def.innerType;
  }
};
ZodDefault.create = (type, params) => {
  return new ZodDefault({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodDefault,
    defaultValue: typeof params.default === "function" ? params.default : () => params.default,
    ...processCreateParams(params)
  });
};
var ZodCatch = class extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const newCtx = {
      ...ctx,
      common: {
        ...ctx.common,
        issues: []
      }
    };
    const result = this._def.innerType._parse({
      data: newCtx.data,
      path: newCtx.path,
      parent: {
        ...newCtx
      }
    });
    if (isAsync(result)) {
      return result.then((result2) => {
        return {
          status: "valid",
          value: result2.status === "valid" ? result2.value : this._def.catchValue({
            get error() {
              return new ZodError(newCtx.common.issues);
            },
            input: newCtx.data
          })
        };
      });
    } else {
      return {
        status: "valid",
        value: result.status === "valid" ? result.value : this._def.catchValue({
          get error() {
            return new ZodError(newCtx.common.issues);
          },
          input: newCtx.data
        })
      };
    }
  }
  removeCatch() {
    return this._def.innerType;
  }
};
ZodCatch.create = (type, params) => {
  return new ZodCatch({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodCatch,
    catchValue: typeof params.catch === "function" ? params.catch : () => params.catch,
    ...processCreateParams(params)
  });
};
var ZodNaN = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.nan) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.nan,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return { status: "valid", value: input.data };
  }
};
ZodNaN.create = (params) => {
  return new ZodNaN({
    typeName: ZodFirstPartyTypeKind.ZodNaN,
    ...processCreateParams(params)
  });
};
var BRAND = Symbol("zod_brand");
var ZodBranded = class extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const data = ctx.data;
    return this._def.type._parse({
      data,
      path: ctx.path,
      parent: ctx
    });
  }
  unwrap() {
    return this._def.type;
  }
};
var ZodPipeline = class _ZodPipeline extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.common.async) {
      const handleAsync = async () => {
        const inResult = await this._def.in._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (inResult.status === "aborted")
          return INVALID;
        if (inResult.status === "dirty") {
          status.dirty();
          return DIRTY(inResult.value);
        } else {
          return this._def.out._parseAsync({
            data: inResult.value,
            path: ctx.path,
            parent: ctx
          });
        }
      };
      return handleAsync();
    } else {
      const inResult = this._def.in._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
      if (inResult.status === "aborted")
        return INVALID;
      if (inResult.status === "dirty") {
        status.dirty();
        return {
          status: "dirty",
          value: inResult.value
        };
      } else {
        return this._def.out._parseSync({
          data: inResult.value,
          path: ctx.path,
          parent: ctx
        });
      }
    }
  }
  static create(a, b) {
    return new _ZodPipeline({
      in: a,
      out: b,
      typeName: ZodFirstPartyTypeKind.ZodPipeline
    });
  }
};
var ZodReadonly = class extends ZodType {
  _parse(input) {
    const result = this._def.innerType._parse(input);
    const freeze = (data) => {
      if (isValid(data)) {
        data.value = Object.freeze(data.value);
      }
      return data;
    };
    return isAsync(result) ? result.then((data) => freeze(data)) : freeze(result);
  }
  unwrap() {
    return this._def.innerType;
  }
};
ZodReadonly.create = (type, params) => {
  return new ZodReadonly({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodReadonly,
    ...processCreateParams(params)
  });
};
function cleanParams(params, data) {
  const p = typeof params === "function" ? params(data) : typeof params === "string" ? { message: params } : params;
  const p2 = typeof p === "string" ? { message: p } : p;
  return p2;
}
function custom(check, _params = {}, fatal) {
  if (check)
    return ZodAny.create().superRefine((data, ctx) => {
      const r = check(data);
      if (r instanceof Promise) {
        return r.then((r2) => {
          if (!r2) {
            const params = cleanParams(_params, data);
            const _fatal = params.fatal ?? fatal ?? true;
            ctx.addIssue({ code: "custom", ...params, fatal: _fatal });
          }
        });
      }
      if (!r) {
        const params = cleanParams(_params, data);
        const _fatal = params.fatal ?? fatal ?? true;
        ctx.addIssue({ code: "custom", ...params, fatal: _fatal });
      }
      return;
    });
  return ZodAny.create();
}
var late = {
  object: ZodObject.lazycreate
};
var ZodFirstPartyTypeKind;
(function(ZodFirstPartyTypeKind2) {
  ZodFirstPartyTypeKind2["ZodString"] = "ZodString";
  ZodFirstPartyTypeKind2["ZodNumber"] = "ZodNumber";
  ZodFirstPartyTypeKind2["ZodNaN"] = "ZodNaN";
  ZodFirstPartyTypeKind2["ZodBigInt"] = "ZodBigInt";
  ZodFirstPartyTypeKind2["ZodBoolean"] = "ZodBoolean";
  ZodFirstPartyTypeKind2["ZodDate"] = "ZodDate";
  ZodFirstPartyTypeKind2["ZodSymbol"] = "ZodSymbol";
  ZodFirstPartyTypeKind2["ZodUndefined"] = "ZodUndefined";
  ZodFirstPartyTypeKind2["ZodNull"] = "ZodNull";
  ZodFirstPartyTypeKind2["ZodAny"] = "ZodAny";
  ZodFirstPartyTypeKind2["ZodUnknown"] = "ZodUnknown";
  ZodFirstPartyTypeKind2["ZodNever"] = "ZodNever";
  ZodFirstPartyTypeKind2["ZodVoid"] = "ZodVoid";
  ZodFirstPartyTypeKind2["ZodArray"] = "ZodArray";
  ZodFirstPartyTypeKind2["ZodObject"] = "ZodObject";
  ZodFirstPartyTypeKind2["ZodUnion"] = "ZodUnion";
  ZodFirstPartyTypeKind2["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
  ZodFirstPartyTypeKind2["ZodIntersection"] = "ZodIntersection";
  ZodFirstPartyTypeKind2["ZodTuple"] = "ZodTuple";
  ZodFirstPartyTypeKind2["ZodRecord"] = "ZodRecord";
  ZodFirstPartyTypeKind2["ZodMap"] = "ZodMap";
  ZodFirstPartyTypeKind2["ZodSet"] = "ZodSet";
  ZodFirstPartyTypeKind2["ZodFunction"] = "ZodFunction";
  ZodFirstPartyTypeKind2["ZodLazy"] = "ZodLazy";
  ZodFirstPartyTypeKind2["ZodLiteral"] = "ZodLiteral";
  ZodFirstPartyTypeKind2["ZodEnum"] = "ZodEnum";
  ZodFirstPartyTypeKind2["ZodEffects"] = "ZodEffects";
  ZodFirstPartyTypeKind2["ZodNativeEnum"] = "ZodNativeEnum";
  ZodFirstPartyTypeKind2["ZodOptional"] = "ZodOptional";
  ZodFirstPartyTypeKind2["ZodNullable"] = "ZodNullable";
  ZodFirstPartyTypeKind2["ZodDefault"] = "ZodDefault";
  ZodFirstPartyTypeKind2["ZodCatch"] = "ZodCatch";
  ZodFirstPartyTypeKind2["ZodPromise"] = "ZodPromise";
  ZodFirstPartyTypeKind2["ZodBranded"] = "ZodBranded";
  ZodFirstPartyTypeKind2["ZodPipeline"] = "ZodPipeline";
  ZodFirstPartyTypeKind2["ZodReadonly"] = "ZodReadonly";
})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));
var instanceOfType = (cls, params = {
  message: `Input not instance of ${cls.name}`
}) => custom((data) => data instanceof cls, params);
var stringType = ZodString.create;
var numberType = ZodNumber.create;
var nanType = ZodNaN.create;
var bigIntType = ZodBigInt.create;
var booleanType = ZodBoolean.create;
var dateType = ZodDate.create;
var symbolType = ZodSymbol.create;
var undefinedType = ZodUndefined.create;
var nullType = ZodNull.create;
var anyType = ZodAny.create;
var unknownType = ZodUnknown.create;
var neverType = ZodNever.create;
var voidType = ZodVoid.create;
var arrayType = ZodArray.create;
var objectType = ZodObject.create;
var strictObjectType = ZodObject.strictCreate;
var unionType = ZodUnion.create;
var discriminatedUnionType = ZodDiscriminatedUnion.create;
var intersectionType = ZodIntersection.create;
var tupleType = ZodTuple.create;
var recordType = ZodRecord.create;
var mapType = ZodMap.create;
var setType = ZodSet.create;
var functionType = ZodFunction.create;
var lazyType = ZodLazy.create;
var literalType = ZodLiteral.create;
var enumType = ZodEnum.create;
var nativeEnumType = ZodNativeEnum.create;
var promiseType = ZodPromise.create;
var effectsType = ZodEffects.create;
var optionalType = ZodOptional.create;
var nullableType = ZodNullable.create;
var preprocessType = ZodEffects.createWithPreprocess;
var pipelineType = ZodPipeline.create;
var ostring = () => stringType().optional();
var onumber = () => numberType().optional();
var oboolean = () => booleanType().optional();
var coerce = {
  string: ((arg) => ZodString.create({ ...arg, coerce: true })),
  number: ((arg) => ZodNumber.create({ ...arg, coerce: true })),
  boolean: ((arg) => ZodBoolean.create({
    ...arg,
    coerce: true
  })),
  bigint: ((arg) => ZodBigInt.create({ ...arg, coerce: true })),
  date: ((arg) => ZodDate.create({ ...arg, coerce: true }))
};
var NEVER = INVALID;
var JSONRPC_VERSION = "2.0";
var ProgressTokenSchema = external_exports.union([external_exports.string(), external_exports.number().int()]);
var CursorSchema = external_exports.string();
var RequestMetaSchema = external_exports.object({
  /**
   * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
   */
  progressToken: external_exports.optional(ProgressTokenSchema)
}).passthrough();
var BaseRequestParamsSchema = external_exports.object({
  _meta: external_exports.optional(RequestMetaSchema)
}).passthrough();
var RequestSchema = external_exports.object({
  method: external_exports.string(),
  params: external_exports.optional(BaseRequestParamsSchema)
});
var BaseNotificationParamsSchema = external_exports.object({
  /**
   * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)
   * for notes on _meta usage.
   */
  _meta: external_exports.optional(external_exports.object({}).passthrough())
}).passthrough();
var NotificationSchema = external_exports.object({
  method: external_exports.string(),
  params: external_exports.optional(BaseNotificationParamsSchema)
});
var ResultSchema = external_exports.object({
  /**
   * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)
   * for notes on _meta usage.
   */
  _meta: external_exports.optional(external_exports.object({}).passthrough())
}).passthrough();
var RequestIdSchema = external_exports.union([external_exports.string(), external_exports.number().int()]);
var JSONRPCRequestSchema = external_exports.object({
  jsonrpc: external_exports.literal(JSONRPC_VERSION),
  id: RequestIdSchema
}).merge(RequestSchema).strict();
var JSONRPCNotificationSchema = external_exports.object({
  jsonrpc: external_exports.literal(JSONRPC_VERSION)
}).merge(NotificationSchema).strict();
var JSONRPCResponseSchema = external_exports.object({
  jsonrpc: external_exports.literal(JSONRPC_VERSION),
  id: RequestIdSchema,
  result: ResultSchema
}).strict();
var ErrorCode;
(function(ErrorCode2) {
  ErrorCode2[ErrorCode2["ConnectionClosed"] = -32e3] = "ConnectionClosed";
  ErrorCode2[ErrorCode2["RequestTimeout"] = -32001] = "RequestTimeout";
  ErrorCode2[ErrorCode2["ParseError"] = -32700] = "ParseError";
  ErrorCode2[ErrorCode2["InvalidRequest"] = -32600] = "InvalidRequest";
  ErrorCode2[ErrorCode2["MethodNotFound"] = -32601] = "MethodNotFound";
  ErrorCode2[ErrorCode2["InvalidParams"] = -32602] = "InvalidParams";
  ErrorCode2[ErrorCode2["InternalError"] = -32603] = "InternalError";
})(ErrorCode || (ErrorCode = {}));
var JSONRPCErrorSchema = external_exports.object({
  jsonrpc: external_exports.literal(JSONRPC_VERSION),
  id: RequestIdSchema,
  error: external_exports.object({
    /**
     * The error type that occurred.
     */
    code: external_exports.number().int(),
    /**
     * A short description of the error. The message SHOULD be limited to a concise single sentence.
     */
    message: external_exports.string(),
    /**
     * Additional information about the error. The value of this member is defined by the sender (e.g. detailed error information, nested errors etc.).
     */
    data: external_exports.optional(external_exports.unknown())
  })
}).strict();
var JSONRPCMessageSchema = external_exports.union([
  JSONRPCRequestSchema,
  JSONRPCNotificationSchema,
  JSONRPCResponseSchema,
  JSONRPCErrorSchema
]);
var EmptyResultSchema = ResultSchema.strict();
var CancelledNotificationSchema = NotificationSchema.extend({
  method: external_exports.literal("notifications/cancelled"),
  params: BaseNotificationParamsSchema.extend({
    /**
     * The ID of the request to cancel.
     *
     * This MUST correspond to the ID of a request previously issued in the same direction.
     */
    requestId: RequestIdSchema,
    /**
     * An optional string describing the reason for the cancellation. This MAY be logged or presented to the user.
     */
    reason: external_exports.string().optional()
  })
});
var BaseMetadataSchema = external_exports.object({
  /** Intended for programmatic or logical use, but used as a display name in past specs or fallback */
  name: external_exports.string(),
  /**
  * Intended for UI and end-user contexts — optimized to be human-readable and easily understood,
  * even by those unfamiliar with domain-specific terminology.
  *
  * If not provided, the name should be used for display (except for Tool,
  * where `annotations.title` should be given precedence over using `name`,
  * if present).
  */
  title: external_exports.optional(external_exports.string())
}).passthrough();
var ImplementationSchema = BaseMetadataSchema.extend({
  version: external_exports.string()
});
var ClientCapabilitiesSchema = external_exports.object({
  /**
   * Experimental, non-standard capabilities that the client supports.
   */
  experimental: external_exports.optional(external_exports.object({}).passthrough()),
  /**
   * Present if the client supports sampling from an LLM.
   */
  sampling: external_exports.optional(external_exports.object({}).passthrough()),
  /**
   * Present if the client supports eliciting user input.
   */
  elicitation: external_exports.optional(external_exports.object({}).passthrough()),
  /**
   * Present if the client supports listing roots.
   */
  roots: external_exports.optional(external_exports.object({
    /**
     * Whether the client supports issuing notifications for changes to the roots list.
     */
    listChanged: external_exports.optional(external_exports.boolean())
  }).passthrough())
}).passthrough();
var InitializeRequestSchema = RequestSchema.extend({
  method: external_exports.literal("initialize"),
  params: BaseRequestParamsSchema.extend({
    /**
     * The latest version of the Model Context Protocol that the client supports. The client MAY decide to support older versions as well.
     */
    protocolVersion: external_exports.string(),
    capabilities: ClientCapabilitiesSchema,
    clientInfo: ImplementationSchema
  })
});
var ServerCapabilitiesSchema = external_exports.object({
  /**
   * Experimental, non-standard capabilities that the server supports.
   */
  experimental: external_exports.optional(external_exports.object({}).passthrough()),
  /**
   * Present if the server supports sending log messages to the client.
   */
  logging: external_exports.optional(external_exports.object({}).passthrough()),
  /**
   * Present if the server supports sending completions to the client.
   */
  completions: external_exports.optional(external_exports.object({}).passthrough()),
  /**
   * Present if the server offers any prompt templates.
   */
  prompts: external_exports.optional(external_exports.object({
    /**
     * Whether this server supports issuing notifications for changes to the prompt list.
     */
    listChanged: external_exports.optional(external_exports.boolean())
  }).passthrough()),
  /**
   * Present if the server offers any resources to read.
   */
  resources: external_exports.optional(external_exports.object({
    /**
     * Whether this server supports clients subscribing to resource updates.
     */
    subscribe: external_exports.optional(external_exports.boolean()),
    /**
     * Whether this server supports issuing notifications for changes to the resource list.
     */
    listChanged: external_exports.optional(external_exports.boolean())
  }).passthrough()),
  /**
   * Present if the server offers any tools to call.
   */
  tools: external_exports.optional(external_exports.object({
    /**
     * Whether this server supports issuing notifications for changes to the tool list.
     */
    listChanged: external_exports.optional(external_exports.boolean())
  }).passthrough())
}).passthrough();
var InitializeResultSchema = ResultSchema.extend({
  /**
   * The version of the Model Context Protocol that the server wants to use. This may not match the version that the client requested. If the client cannot support this version, it MUST disconnect.
   */
  protocolVersion: external_exports.string(),
  capabilities: ServerCapabilitiesSchema,
  serverInfo: ImplementationSchema,
  /**
   * Instructions describing how to use the server and its features.
   *
   * This can be used by clients to improve the LLM's understanding of available tools, resources, etc. It can be thought of like a "hint" to the model. For example, this information MAY be added to the system prompt.
   */
  instructions: external_exports.optional(external_exports.string())
});
var InitializedNotificationSchema = NotificationSchema.extend({
  method: external_exports.literal("notifications/initialized")
});
var PingRequestSchema = RequestSchema.extend({
  method: external_exports.literal("ping")
});
var ProgressSchema = external_exports.object({
  /**
   * The progress thus far. This should increase every time progress is made, even if the total is unknown.
   */
  progress: external_exports.number(),
  /**
   * Total number of items to process (or total progress required), if known.
   */
  total: external_exports.optional(external_exports.number()),
  /**
   * An optional message describing the current progress.
   */
  message: external_exports.optional(external_exports.string())
}).passthrough();
var ProgressNotificationSchema = NotificationSchema.extend({
  method: external_exports.literal("notifications/progress"),
  params: BaseNotificationParamsSchema.merge(ProgressSchema).extend({
    /**
     * The progress token which was given in the initial request, used to associate this notification with the request that is proceeding.
     */
    progressToken: ProgressTokenSchema
  })
});
var PaginatedRequestSchema = RequestSchema.extend({
  params: BaseRequestParamsSchema.extend({
    /**
     * An opaque token representing the current pagination position.
     * If provided, the server should return results starting after this cursor.
     */
    cursor: external_exports.optional(CursorSchema)
  }).optional()
});
var PaginatedResultSchema = ResultSchema.extend({
  /**
   * An opaque token representing the pagination position after the last returned result.
   * If present, there may be more results available.
   */
  nextCursor: external_exports.optional(CursorSchema)
});
var ResourceContentsSchema = external_exports.object({
  /**
   * The URI of this resource.
   */
  uri: external_exports.string(),
  /**
   * The MIME type of this resource, if known.
   */
  mimeType: external_exports.optional(external_exports.string()),
  /**
   * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)
   * for notes on _meta usage.
   */
  _meta: external_exports.optional(external_exports.object({}).passthrough())
}).passthrough();
var TextResourceContentsSchema = ResourceContentsSchema.extend({
  /**
   * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
   */
  text: external_exports.string()
});
var Base64Schema = external_exports.string().refine((val) => {
  try {
    atob(val);
    return true;
  } catch (_a) {
    return false;
  }
}, { message: "Invalid Base64 string" });
var BlobResourceContentsSchema = ResourceContentsSchema.extend({
  /**
   * A base64-encoded string representing the binary data of the item.
   */
  blob: Base64Schema
});
var ResourceSchema = BaseMetadataSchema.extend({
  /**
   * The URI of this resource.
   */
  uri: external_exports.string(),
  /**
   * A description of what this resource represents.
   *
   * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a "hint" to the model.
   */
  description: external_exports.optional(external_exports.string()),
  /**
   * The MIME type of this resource, if known.
   */
  mimeType: external_exports.optional(external_exports.string()),
  /**
   * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)
   * for notes on _meta usage.
   */
  _meta: external_exports.optional(external_exports.object({}).passthrough())
});
var ResourceTemplateSchema = BaseMetadataSchema.extend({
  /**
   * A URI template (according to RFC 6570) that can be used to construct resource URIs.
   */
  uriTemplate: external_exports.string(),
  /**
   * A description of what this template is for.
   *
   * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a "hint" to the model.
   */
  description: external_exports.optional(external_exports.string()),
  /**
   * The MIME type for all resources that match this template. This should only be included if all resources matching this template have the same type.
   */
  mimeType: external_exports.optional(external_exports.string()),
  /**
   * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)
   * for notes on _meta usage.
   */
  _meta: external_exports.optional(external_exports.object({}).passthrough())
});
var ListResourcesRequestSchema = PaginatedRequestSchema.extend({
  method: external_exports.literal("resources/list")
});
var ListResourcesResultSchema = PaginatedResultSchema.extend({
  resources: external_exports.array(ResourceSchema)
});
var ListResourceTemplatesRequestSchema = PaginatedRequestSchema.extend({
  method: external_exports.literal("resources/templates/list")
});
var ListResourceTemplatesResultSchema = PaginatedResultSchema.extend({
  resourceTemplates: external_exports.array(ResourceTemplateSchema)
});
var ReadResourceRequestSchema = RequestSchema.extend({
  method: external_exports.literal("resources/read"),
  params: BaseRequestParamsSchema.extend({
    /**
     * The URI of the resource to read. The URI can use any protocol; it is up to the server how to interpret it.
     */
    uri: external_exports.string()
  })
});
var ReadResourceResultSchema = ResultSchema.extend({
  contents: external_exports.array(external_exports.union([TextResourceContentsSchema, BlobResourceContentsSchema]))
});
var ResourceListChangedNotificationSchema = NotificationSchema.extend({
  method: external_exports.literal("notifications/resources/list_changed")
});
var SubscribeRequestSchema = RequestSchema.extend({
  method: external_exports.literal("resources/subscribe"),
  params: BaseRequestParamsSchema.extend({
    /**
     * The URI of the resource to subscribe to. The URI can use any protocol; it is up to the server how to interpret it.
     */
    uri: external_exports.string()
  })
});
var UnsubscribeRequestSchema = RequestSchema.extend({
  method: external_exports.literal("resources/unsubscribe"),
  params: BaseRequestParamsSchema.extend({
    /**
     * The URI of the resource to unsubscribe from.
     */
    uri: external_exports.string()
  })
});
var ResourceUpdatedNotificationSchema = NotificationSchema.extend({
  method: external_exports.literal("notifications/resources/updated"),
  params: BaseNotificationParamsSchema.extend({
    /**
     * The URI of the resource that has been updated. This might be a sub-resource of the one that the client actually subscribed to.
     */
    uri: external_exports.string()
  })
});
var PromptArgumentSchema = external_exports.object({
  /**
   * The name of the argument.
   */
  name: external_exports.string(),
  /**
   * A human-readable description of the argument.
   */
  description: external_exports.optional(external_exports.string()),
  /**
   * Whether this argument must be provided.
   */
  required: external_exports.optional(external_exports.boolean())
}).passthrough();
var PromptSchema = BaseMetadataSchema.extend({
  /**
   * An optional description of what this prompt provides
   */
  description: external_exports.optional(external_exports.string()),
  /**
   * A list of arguments to use for templating the prompt.
   */
  arguments: external_exports.optional(external_exports.array(PromptArgumentSchema)),
  /**
   * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)
   * for notes on _meta usage.
   */
  _meta: external_exports.optional(external_exports.object({}).passthrough())
});
var ListPromptsRequestSchema = PaginatedRequestSchema.extend({
  method: external_exports.literal("prompts/list")
});
var ListPromptsResultSchema = PaginatedResultSchema.extend({
  prompts: external_exports.array(PromptSchema)
});
var GetPromptRequestSchema = RequestSchema.extend({
  method: external_exports.literal("prompts/get"),
  params: BaseRequestParamsSchema.extend({
    /**
     * The name of the prompt or prompt template.
     */
    name: external_exports.string(),
    /**
     * Arguments to use for templating the prompt.
     */
    arguments: external_exports.optional(external_exports.record(external_exports.string()))
  })
});
var TextContentSchema = external_exports.object({
  type: external_exports.literal("text"),
  /**
   * The text content of the message.
   */
  text: external_exports.string(),
  /**
   * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)
   * for notes on _meta usage.
   */
  _meta: external_exports.optional(external_exports.object({}).passthrough())
}).passthrough();
var ImageContentSchema = external_exports.object({
  type: external_exports.literal("image"),
  /**
   * The base64-encoded image data.
   */
  data: Base64Schema,
  /**
   * The MIME type of the image. Different providers may support different image types.
   */
  mimeType: external_exports.string(),
  /**
   * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)
   * for notes on _meta usage.
   */
  _meta: external_exports.optional(external_exports.object({}).passthrough())
}).passthrough();
var AudioContentSchema = external_exports.object({
  type: external_exports.literal("audio"),
  /**
   * The base64-encoded audio data.
   */
  data: Base64Schema,
  /**
   * The MIME type of the audio. Different providers may support different audio types.
   */
  mimeType: external_exports.string(),
  /**
   * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)
   * for notes on _meta usage.
   */
  _meta: external_exports.optional(external_exports.object({}).passthrough())
}).passthrough();
var EmbeddedResourceSchema = external_exports.object({
  type: external_exports.literal("resource"),
  resource: external_exports.union([TextResourceContentsSchema, BlobResourceContentsSchema]),
  /**
   * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)
   * for notes on _meta usage.
   */
  _meta: external_exports.optional(external_exports.object({}).passthrough())
}).passthrough();
var ResourceLinkSchema = ResourceSchema.extend({
  type: external_exports.literal("resource_link")
});
var ContentBlockSchema = external_exports.union([
  TextContentSchema,
  ImageContentSchema,
  AudioContentSchema,
  ResourceLinkSchema,
  EmbeddedResourceSchema
]);
var PromptMessageSchema = external_exports.object({
  role: external_exports.enum(["user", "assistant"]),
  content: ContentBlockSchema
}).passthrough();
var GetPromptResultSchema = ResultSchema.extend({
  /**
   * An optional description for the prompt.
   */
  description: external_exports.optional(external_exports.string()),
  messages: external_exports.array(PromptMessageSchema)
});
var PromptListChangedNotificationSchema = NotificationSchema.extend({
  method: external_exports.literal("notifications/prompts/list_changed")
});
var ToolAnnotationsSchema = external_exports.object({
  /**
   * A human-readable title for the tool.
   */
  title: external_exports.optional(external_exports.string()),
  /**
   * If true, the tool does not modify its environment.
   *
   * Default: false
   */
  readOnlyHint: external_exports.optional(external_exports.boolean()),
  /**
   * If true, the tool may perform destructive updates to its environment.
   * If false, the tool performs only additive updates.
   *
   * (This property is meaningful only when `readOnlyHint == false`)
   *
   * Default: true
   */
  destructiveHint: external_exports.optional(external_exports.boolean()),
  /**
   * If true, calling the tool repeatedly with the same arguments
   * will have no additional effect on the its environment.
   *
   * (This property is meaningful only when `readOnlyHint == false`)
   *
   * Default: false
   */
  idempotentHint: external_exports.optional(external_exports.boolean()),
  /**
   * If true, this tool may interact with an "open world" of external
   * entities. If false, the tool's domain of interaction is closed.
   * For example, the world of a web search tool is open, whereas that
   * of a memory tool is not.
   *
   * Default: true
   */
  openWorldHint: external_exports.optional(external_exports.boolean())
}).passthrough();
var ToolSchema = BaseMetadataSchema.extend({
  /**
   * A human-readable description of the tool.
   */
  description: external_exports.optional(external_exports.string()),
  /**
   * A JSON Schema object defining the expected parameters for the tool.
   */
  inputSchema: external_exports.object({
    type: external_exports.literal("object"),
    properties: external_exports.optional(external_exports.object({}).passthrough()),
    required: external_exports.optional(external_exports.array(external_exports.string()))
  }).passthrough(),
  /**
   * An optional JSON Schema object defining the structure of the tool's output returned in
   * the structuredContent field of a CallToolResult.
   */
  outputSchema: external_exports.optional(external_exports.object({
    type: external_exports.literal("object"),
    properties: external_exports.optional(external_exports.object({}).passthrough()),
    required: external_exports.optional(external_exports.array(external_exports.string()))
  }).passthrough()),
  /**
   * Optional additional tool information.
   */
  annotations: external_exports.optional(ToolAnnotationsSchema),
  /**
   * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)
   * for notes on _meta usage.
   */
  _meta: external_exports.optional(external_exports.object({}).passthrough())
});
var ListToolsRequestSchema = PaginatedRequestSchema.extend({
  method: external_exports.literal("tools/list")
});
var ListToolsResultSchema = PaginatedResultSchema.extend({
  tools: external_exports.array(ToolSchema)
});
var CallToolResultSchema = ResultSchema.extend({
  /**
   * A list of content objects that represent the result of the tool call.
   *
   * If the Tool does not define an outputSchema, this field MUST be present in the result.
   * For backwards compatibility, this field is always present, but it may be empty.
   */
  content: external_exports.array(ContentBlockSchema).default([]),
  /**
   * An object containing structured tool output.
   *
   * If the Tool defines an outputSchema, this field MUST be present in the result, and contain a JSON object that matches the schema.
   */
  structuredContent: external_exports.object({}).passthrough().optional(),
  /**
   * Whether the tool call ended in an error.
   *
   * If not set, this is assumed to be false (the call was successful).
   *
   * Any errors that originate from the tool SHOULD be reported inside the result
   * object, with `isError` set to true, _not_ as an MCP protocol-level error
   * response. Otherwise, the LLM would not be able to see that an error occurred
   * and self-correct.
   *
   * However, any errors in _finding_ the tool, an error indicating that the
   * server does not support tool calls, or any other exceptional conditions,
   * should be reported as an MCP error response.
   */
  isError: external_exports.optional(external_exports.boolean())
});
var CompatibilityCallToolResultSchema = CallToolResultSchema.or(ResultSchema.extend({
  toolResult: external_exports.unknown()
}));
var CallToolRequestSchema = RequestSchema.extend({
  method: external_exports.literal("tools/call"),
  params: BaseRequestParamsSchema.extend({
    name: external_exports.string(),
    arguments: external_exports.optional(external_exports.record(external_exports.unknown()))
  })
});
var ToolListChangedNotificationSchema = NotificationSchema.extend({
  method: external_exports.literal("notifications/tools/list_changed")
});
var LoggingLevelSchema = external_exports.enum([
  "debug",
  "info",
  "notice",
  "warning",
  "error",
  "critical",
  "alert",
  "emergency"
]);
var SetLevelRequestSchema = RequestSchema.extend({
  method: external_exports.literal("logging/setLevel"),
  params: BaseRequestParamsSchema.extend({
    /**
     * The level of logging that the client wants to receive from the server. The server should send all logs at this level and higher (i.e., more severe) to the client as notifications/logging/message.
     */
    level: LoggingLevelSchema
  })
});
var LoggingMessageNotificationSchema = NotificationSchema.extend({
  method: external_exports.literal("notifications/message"),
  params: BaseNotificationParamsSchema.extend({
    /**
     * The severity of this log message.
     */
    level: LoggingLevelSchema,
    /**
     * An optional name of the logger issuing this message.
     */
    logger: external_exports.optional(external_exports.string()),
    /**
     * The data to be logged, such as a string message or an object. Any JSON serializable type is allowed here.
     */
    data: external_exports.unknown()
  })
});
var ModelHintSchema = external_exports.object({
  /**
   * A hint for a model name.
   */
  name: external_exports.string().optional()
}).passthrough();
var ModelPreferencesSchema = external_exports.object({
  /**
   * Optional hints to use for model selection.
   */
  hints: external_exports.optional(external_exports.array(ModelHintSchema)),
  /**
   * How much to prioritize cost when selecting a model.
   */
  costPriority: external_exports.optional(external_exports.number().min(0).max(1)),
  /**
   * How much to prioritize sampling speed (latency) when selecting a model.
   */
  speedPriority: external_exports.optional(external_exports.number().min(0).max(1)),
  /**
   * How much to prioritize intelligence and capabilities when selecting a model.
   */
  intelligencePriority: external_exports.optional(external_exports.number().min(0).max(1))
}).passthrough();
var SamplingMessageSchema = external_exports.object({
  role: external_exports.enum(["user", "assistant"]),
  content: external_exports.union([TextContentSchema, ImageContentSchema, AudioContentSchema])
}).passthrough();
var CreateMessageRequestSchema = RequestSchema.extend({
  method: external_exports.literal("sampling/createMessage"),
  params: BaseRequestParamsSchema.extend({
    messages: external_exports.array(SamplingMessageSchema),
    /**
     * An optional system prompt the server wants to use for sampling. The client MAY modify or omit this prompt.
     */
    systemPrompt: external_exports.optional(external_exports.string()),
    /**
     * A request to include context from one or more MCP servers (including the caller), to be attached to the prompt. The client MAY ignore this request.
     */
    includeContext: external_exports.optional(external_exports.enum(["none", "thisServer", "allServers"])),
    temperature: external_exports.optional(external_exports.number()),
    /**
     * The maximum number of tokens to sample, as requested by the server. The client MAY choose to sample fewer tokens than requested.
     */
    maxTokens: external_exports.number().int(),
    stopSequences: external_exports.optional(external_exports.array(external_exports.string())),
    /**
     * Optional metadata to pass through to the LLM provider. The format of this metadata is provider-specific.
     */
    metadata: external_exports.optional(external_exports.object({}).passthrough()),
    /**
     * The server's preferences for which model to select.
     */
    modelPreferences: external_exports.optional(ModelPreferencesSchema)
  })
});
var CreateMessageResultSchema = ResultSchema.extend({
  /**
   * The name of the model that generated the message.
   */
  model: external_exports.string(),
  /**
   * The reason why sampling stopped.
   */
  stopReason: external_exports.optional(external_exports.enum(["endTurn", "stopSequence", "maxTokens"]).or(external_exports.string())),
  role: external_exports.enum(["user", "assistant"]),
  content: external_exports.discriminatedUnion("type", [
    TextContentSchema,
    ImageContentSchema,
    AudioContentSchema
  ])
});
var BooleanSchemaSchema = external_exports.object({
  type: external_exports.literal("boolean"),
  title: external_exports.optional(external_exports.string()),
  description: external_exports.optional(external_exports.string()),
  default: external_exports.optional(external_exports.boolean())
}).passthrough();
var StringSchemaSchema = external_exports.object({
  type: external_exports.literal("string"),
  title: external_exports.optional(external_exports.string()),
  description: external_exports.optional(external_exports.string()),
  minLength: external_exports.optional(external_exports.number()),
  maxLength: external_exports.optional(external_exports.number()),
  format: external_exports.optional(external_exports.enum(["email", "uri", "date", "date-time"]))
}).passthrough();
var NumberSchemaSchema = external_exports.object({
  type: external_exports.enum(["number", "integer"]),
  title: external_exports.optional(external_exports.string()),
  description: external_exports.optional(external_exports.string()),
  minimum: external_exports.optional(external_exports.number()),
  maximum: external_exports.optional(external_exports.number())
}).passthrough();
var EnumSchemaSchema = external_exports.object({
  type: external_exports.literal("string"),
  title: external_exports.optional(external_exports.string()),
  description: external_exports.optional(external_exports.string()),
  enum: external_exports.array(external_exports.string()),
  enumNames: external_exports.optional(external_exports.array(external_exports.string()))
}).passthrough();
var PrimitiveSchemaDefinitionSchema = external_exports.union([
  BooleanSchemaSchema,
  StringSchemaSchema,
  NumberSchemaSchema,
  EnumSchemaSchema
]);
var ElicitRequestSchema = RequestSchema.extend({
  method: external_exports.literal("elicitation/create"),
  params: BaseRequestParamsSchema.extend({
    /**
     * The message to present to the user.
     */
    message: external_exports.string(),
    /**
     * The schema for the requested user input.
     */
    requestedSchema: external_exports.object({
      type: external_exports.literal("object"),
      properties: external_exports.record(external_exports.string(), PrimitiveSchemaDefinitionSchema),
      required: external_exports.optional(external_exports.array(external_exports.string()))
    }).passthrough()
  })
});
var ElicitResultSchema = ResultSchema.extend({
  /**
   * The user's response action.
   */
  action: external_exports.enum(["accept", "decline", "cancel"]),
  /**
   * The collected user input content (only present if action is "accept").
   */
  content: external_exports.optional(external_exports.record(external_exports.string(), external_exports.unknown()))
});
var ResourceTemplateReferenceSchema = external_exports.object({
  type: external_exports.literal("ref/resource"),
  /**
   * The URI or URI template of the resource.
   */
  uri: external_exports.string()
}).passthrough();
var PromptReferenceSchema = external_exports.object({
  type: external_exports.literal("ref/prompt"),
  /**
   * The name of the prompt or prompt template
   */
  name: external_exports.string()
}).passthrough();
var CompleteRequestSchema = RequestSchema.extend({
  method: external_exports.literal("completion/complete"),
  params: BaseRequestParamsSchema.extend({
    ref: external_exports.union([PromptReferenceSchema, ResourceTemplateReferenceSchema]),
    /**
     * The argument's information
     */
    argument: external_exports.object({
      /**
       * The name of the argument
       */
      name: external_exports.string(),
      /**
       * The value of the argument to use for completion matching.
       */
      value: external_exports.string()
    }).passthrough(),
    context: external_exports.optional(external_exports.object({
      /**
       * Previously-resolved variables in a URI template or prompt.
       */
      arguments: external_exports.optional(external_exports.record(external_exports.string(), external_exports.string()))
    }))
  })
});
var CompleteResultSchema = ResultSchema.extend({
  completion: external_exports.object({
    /**
     * An array of completion values. Must not exceed 100 items.
     */
    values: external_exports.array(external_exports.string()).max(100),
    /**
     * The total number of completion options available. This can exceed the number of values actually sent in the response.
     */
    total: external_exports.optional(external_exports.number().int()),
    /**
     * Indicates whether there are additional completion options beyond those provided in the current response, even if the exact total is unknown.
     */
    hasMore: external_exports.optional(external_exports.boolean())
  }).passthrough()
});
var RootSchema = external_exports.object({
  /**
   * The URI identifying the root. This *must* start with file:// for now.
   */
  uri: external_exports.string().startsWith("file://"),
  /**
   * An optional name for the root.
   */
  name: external_exports.optional(external_exports.string()),
  /**
   * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)
   * for notes on _meta usage.
   */
  _meta: external_exports.optional(external_exports.object({}).passthrough())
}).passthrough();
var ListRootsRequestSchema = RequestSchema.extend({
  method: external_exports.literal("roots/list")
});
var ListRootsResultSchema = ResultSchema.extend({
  roots: external_exports.array(RootSchema)
});
var RootsListChangedNotificationSchema = NotificationSchema.extend({
  method: external_exports.literal("notifications/roots/list_changed")
});
var ClientRequestSchema = external_exports.union([
  PingRequestSchema,
  InitializeRequestSchema,
  CompleteRequestSchema,
  SetLevelRequestSchema,
  GetPromptRequestSchema,
  ListPromptsRequestSchema,
  ListResourcesRequestSchema,
  ListResourceTemplatesRequestSchema,
  ReadResourceRequestSchema,
  SubscribeRequestSchema,
  UnsubscribeRequestSchema,
  CallToolRequestSchema,
  ListToolsRequestSchema
]);
var ClientNotificationSchema = external_exports.union([
  CancelledNotificationSchema,
  ProgressNotificationSchema,
  InitializedNotificationSchema,
  RootsListChangedNotificationSchema
]);
var ClientResultSchema = external_exports.union([
  EmptyResultSchema,
  CreateMessageResultSchema,
  ElicitResultSchema,
  ListRootsResultSchema
]);
var ServerRequestSchema = external_exports.union([
  PingRequestSchema,
  CreateMessageRequestSchema,
  ElicitRequestSchema,
  ListRootsRequestSchema
]);
var ServerNotificationSchema = external_exports.union([
  CancelledNotificationSchema,
  ProgressNotificationSchema,
  LoggingMessageNotificationSchema,
  ResourceUpdatedNotificationSchema,
  ResourceListChangedNotificationSchema,
  ToolListChangedNotificationSchema,
  PromptListChangedNotificationSchema
]);
var ServerResultSchema = external_exports.union([
  EmptyResultSchema,
  InitializeResultSchema,
  CompleteResultSchema,
  GetPromptResultSchema,
  ListPromptsResultSchema,
  ListResourcesResultSchema,
  ListResourceTemplatesResultSchema,
  ReadResourceResultSchema,
  CallToolResultSchema,
  ListToolsResultSchema
]);
var ReadBuffer = class {
  append(chunk) {
    this._buffer = this._buffer ? Buffer.concat([this._buffer, chunk]) : chunk;
  }
  readMessage() {
    if (!this._buffer) {
      return null;
    }
    const index = this._buffer.indexOf("\n");
    if (index === -1) {
      return null;
    }
    const line = this._buffer.toString("utf8", 0, index).replace(/\r$/, "");
    this._buffer = this._buffer.subarray(index + 1);
    return deserializeMessage(line);
  }
  clear() {
    this._buffer = void 0;
  }
};
function deserializeMessage(line) {
  return JSONRPCMessageSchema.parse(JSON.parse(line));
}
function serializeMessage(message) {
  return JSON.stringify(message) + "\n";
}
var StdioServerTransport = class {
  constructor(_stdin = import_node_process.default.stdin, _stdout = import_node_process.default.stdout) {
    this._stdin = _stdin;
    this._stdout = _stdout;
    this._readBuffer = new ReadBuffer();
    this._started = false;
    this._ondata = (chunk) => {
      this._readBuffer.append(chunk);
      this.processReadBuffer();
    };
    this._onerror = (error) => {
      var _a;
      (_a = this.onerror) === null || _a === void 0 ? void 0 : _a.call(this, error);
    };
  }
  /**
   * Starts listening for messages on stdin.
   */
  async start() {
    if (this._started) {
      throw new Error("StdioServerTransport already started! If using Server class, note that connect() calls start() automatically.");
    }
    this._started = true;
    this._stdin.on("data", this._ondata);
    this._stdin.on("error", this._onerror);
  }
  processReadBuffer() {
    var _a, _b;
    while (true) {
      try {
        const message = this._readBuffer.readMessage();
        if (message === null) {
          break;
        }
        (_a = this.onmessage) === null || _a === void 0 ? void 0 : _a.call(this, message);
      } catch (error) {
        (_b = this.onerror) === null || _b === void 0 ? void 0 : _b.call(this, error);
      }
    }
  }
  async close() {
    var _a;
    this._stdin.off("data", this._ondata);
    this._stdin.off("error", this._onerror);
    const remainingDataListeners = this._stdin.listenerCount("data");
    if (remainingDataListeners === 0) {
      this._stdin.pause();
    }
    this._readBuffer.clear();
    (_a = this.onclose) === null || _a === void 0 ? void 0 : _a.call(this);
  }
  send(message) {
    return new Promise((resolve) => {
      const json = serializeMessage(message);
      if (this._stdout.write(json)) {
        resolve();
      } else {
        this._stdout.once("drain", resolve);
      }
    });
  }
};
var import_chalk = __toESM2(require_source());
var import_lodash = __toESM2(require_lodash());
var ignoreOverride = Symbol("Let zodToJsonSchema decide on which parser to use");
var defaultOptions = {
  name: void 0,
  $refStrategy: "root",
  basePath: ["#"],
  effectStrategy: "input",
  pipeStrategy: "all",
  dateStrategy: "format:date-time",
  mapStrategy: "entries",
  removeAdditionalStrategy: "passthrough",
  allowedAdditionalProperties: true,
  rejectedAdditionalProperties: false,
  definitionPath: "definitions",
  target: "jsonSchema7",
  strictUnions: false,
  definitions: {},
  errorMessages: false,
  markdownDescription: false,
  patternStrategy: "escape",
  applyRegexFlags: false,
  emailStrategy: "format:email",
  base64Strategy: "contentEncoding:base64",
  nameStrategy: "ref",
  openAiAnyTypeName: "OpenAiAnyType"
};
var getDefaultOptions = (options) => typeof options === "string" ? {
  ...defaultOptions,
  name: options
} : {
  ...defaultOptions,
  ...options
};
var getRefs = (options) => {
  const _options = getDefaultOptions(options);
  const currentPath = _options.name !== void 0 ? [..._options.basePath, _options.definitionPath, _options.name] : _options.basePath;
  return {
    ..._options,
    flags: { hasReferencedOpenAiAnyType: false },
    currentPath,
    propertyPath: void 0,
    seen: new Map(Object.entries(_options.definitions).map(([name, def]) => [
      def._def,
      {
        def: def._def,
        path: [..._options.basePath, _options.definitionPath, name],
        // Resolution of references will be forced even though seen, so it's ok that the schema is undefined here for now.
        jsonSchema: void 0
      }
    ]))
  };
};
function addErrorMessage(res, key, errorMessage, refs) {
  if (!refs?.errorMessages)
    return;
  if (errorMessage) {
    res.errorMessage = {
      ...res.errorMessage,
      [key]: errorMessage
    };
  }
}
function setResponseValueAndErrors(res, key, value, errorMessage, refs) {
  res[key] = value;
  addErrorMessage(res, key, errorMessage, refs);
}
var getRelativePath = (pathA, pathB) => {
  let i = 0;
  for (; i < pathA.length && i < pathB.length; i++) {
    if (pathA[i] !== pathB[i])
      break;
  }
  return [(pathA.length - i).toString(), ...pathB.slice(i)].join("/");
};
function parseAnyDef(refs) {
  if (refs.target !== "openAi") {
    return {};
  }
  const anyDefinitionPath = [
    ...refs.basePath,
    refs.definitionPath,
    refs.openAiAnyTypeName
  ];
  refs.flags.hasReferencedOpenAiAnyType = true;
  return {
    $ref: refs.$refStrategy === "relative" ? getRelativePath(anyDefinitionPath, refs.currentPath) : anyDefinitionPath.join("/")
  };
}
function parseArrayDef(def, refs) {
  const res = {
    type: "array"
  };
  if (def.type?._def && def.type?._def?.typeName !== ZodFirstPartyTypeKind.ZodAny) {
    res.items = parseDef(def.type._def, {
      ...refs,
      currentPath: [...refs.currentPath, "items"]
    });
  }
  if (def.minLength) {
    setResponseValueAndErrors(res, "minItems", def.minLength.value, def.minLength.message, refs);
  }
  if (def.maxLength) {
    setResponseValueAndErrors(res, "maxItems", def.maxLength.value, def.maxLength.message, refs);
  }
  if (def.exactLength) {
    setResponseValueAndErrors(res, "minItems", def.exactLength.value, def.exactLength.message, refs);
    setResponseValueAndErrors(res, "maxItems", def.exactLength.value, def.exactLength.message, refs);
  }
  return res;
}
function parseBigintDef(def, refs) {
  const res = {
    type: "integer",
    format: "int64"
  };
  if (!def.checks)
    return res;
  for (const check of def.checks) {
    switch (check.kind) {
      case "min":
        if (refs.target === "jsonSchema7") {
          if (check.inclusive) {
            setResponseValueAndErrors(res, "minimum", check.value, check.message, refs);
          } else {
            setResponseValueAndErrors(res, "exclusiveMinimum", check.value, check.message, refs);
          }
        } else {
          if (!check.inclusive) {
            res.exclusiveMinimum = true;
          }
          setResponseValueAndErrors(res, "minimum", check.value, check.message, refs);
        }
        break;
      case "max":
        if (refs.target === "jsonSchema7") {
          if (check.inclusive) {
            setResponseValueAndErrors(res, "maximum", check.value, check.message, refs);
          } else {
            setResponseValueAndErrors(res, "exclusiveMaximum", check.value, check.message, refs);
          }
        } else {
          if (!check.inclusive) {
            res.exclusiveMaximum = true;
          }
          setResponseValueAndErrors(res, "maximum", check.value, check.message, refs);
        }
        break;
      case "multipleOf":
        setResponseValueAndErrors(res, "multipleOf", check.value, check.message, refs);
        break;
    }
  }
  return res;
}
function parseBooleanDef() {
  return {
    type: "boolean"
  };
}
function parseBrandedDef(_def, refs) {
  return parseDef(_def.type._def, refs);
}
var parseCatchDef = (def, refs) => {
  return parseDef(def.innerType._def, refs);
};
function parseDateDef(def, refs, overrideDateStrategy) {
  const strategy = overrideDateStrategy ?? refs.dateStrategy;
  if (Array.isArray(strategy)) {
    return {
      anyOf: strategy.map((item, i) => parseDateDef(def, refs, item))
    };
  }
  switch (strategy) {
    case "string":
    case "format:date-time":
      return {
        type: "string",
        format: "date-time"
      };
    case "format:date":
      return {
        type: "string",
        format: "date"
      };
    case "integer":
      return integerDateParser(def, refs);
  }
}
var integerDateParser = (def, refs) => {
  const res = {
    type: "integer",
    format: "unix-time"
  };
  if (refs.target === "openApi3") {
    return res;
  }
  for (const check of def.checks) {
    switch (check.kind) {
      case "min":
        setResponseValueAndErrors(
          res,
          "minimum",
          check.value,
          // This is in milliseconds
          check.message,
          refs
        );
        break;
      case "max":
        setResponseValueAndErrors(
          res,
          "maximum",
          check.value,
          // This is in milliseconds
          check.message,
          refs
        );
        break;
    }
  }
  return res;
};
function parseDefaultDef(_def, refs) {
  return {
    ...parseDef(_def.innerType._def, refs),
    default: _def.defaultValue()
  };
}
function parseEffectsDef(_def, refs) {
  return refs.effectStrategy === "input" ? parseDef(_def.schema._def, refs) : parseAnyDef(refs);
}
function parseEnumDef(def) {
  return {
    type: "string",
    enum: Array.from(def.values)
  };
}
var isJsonSchema7AllOfType = (type) => {
  if ("type" in type && type.type === "string")
    return false;
  return "allOf" in type;
};
function parseIntersectionDef(def, refs) {
  const allOf = [
    parseDef(def.left._def, {
      ...refs,
      currentPath: [...refs.currentPath, "allOf", "0"]
    }),
    parseDef(def.right._def, {
      ...refs,
      currentPath: [...refs.currentPath, "allOf", "1"]
    })
  ].filter((x) => !!x);
  let unevaluatedProperties = refs.target === "jsonSchema2019-09" ? { unevaluatedProperties: false } : void 0;
  const mergedAllOf = [];
  allOf.forEach((schema) => {
    if (isJsonSchema7AllOfType(schema)) {
      mergedAllOf.push(...schema.allOf);
      if (schema.unevaluatedProperties === void 0) {
        unevaluatedProperties = void 0;
      }
    } else {
      let nestedSchema = schema;
      if ("additionalProperties" in schema && schema.additionalProperties === false) {
        const { additionalProperties, ...rest } = schema;
        nestedSchema = rest;
      } else {
        unevaluatedProperties = void 0;
      }
      mergedAllOf.push(nestedSchema);
    }
  });
  return mergedAllOf.length ? {
    allOf: mergedAllOf,
    ...unevaluatedProperties
  } : void 0;
}
function parseLiteralDef(def, refs) {
  const parsedType = typeof def.value;
  if (parsedType !== "bigint" && parsedType !== "number" && parsedType !== "boolean" && parsedType !== "string") {
    return {
      type: Array.isArray(def.value) ? "array" : "object"
    };
  }
  if (refs.target === "openApi3") {
    return {
      type: parsedType === "bigint" ? "integer" : parsedType,
      enum: [def.value]
    };
  }
  return {
    type: parsedType === "bigint" ? "integer" : parsedType,
    const: def.value
  };
}
var emojiRegex2 = void 0;
var zodPatterns = {
  /**
   * `c` was changed to `[cC]` to replicate /i flag
   */
  cuid: /^[cC][^\s-]{8,}$/,
  cuid2: /^[0-9a-z]+$/,
  ulid: /^[0-9A-HJKMNP-TV-Z]{26}$/,
  /**
   * `a-z` was added to replicate /i flag
   */
  email: /^(?!\.)(?!.*\.\.)([a-zA-Z0-9_'+\-\.]*)[a-zA-Z0-9_+-]@([a-zA-Z0-9][a-zA-Z0-9\-]*\.)+[a-zA-Z]{2,}$/,
  /**
   * Constructed a valid Unicode RegExp
   *
   * Lazily instantiate since this type of regex isn't supported
   * in all envs (e.g. React Native).
   *
   * See:
   * https://github.com/colinhacks/zod/issues/2433
   * Fix in Zod:
   * https://github.com/colinhacks/zod/commit/9340fd51e48576a75adc919bff65dbc4a5d4c99b
   */
  emoji: () => {
    if (emojiRegex2 === void 0) {
      emojiRegex2 = RegExp("^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$", "u");
    }
    return emojiRegex2;
  },
  /**
   * Unused
   */
  uuid: /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/,
  /**
   * Unused
   */
  ipv4: /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/,
  ipv4Cidr: /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/,
  /**
   * Unused
   */
  ipv6: /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/,
  ipv6Cidr: /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/,
  base64: /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,
  base64url: /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/,
  nanoid: /^[a-zA-Z0-9_-]{21}$/,
  jwt: /^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/
};
function parseStringDef(def, refs) {
  const res = {
    type: "string"
  };
  if (def.checks) {
    for (const check of def.checks) {
      switch (check.kind) {
        case "min":
          setResponseValueAndErrors(res, "minLength", typeof res.minLength === "number" ? Math.max(res.minLength, check.value) : check.value, check.message, refs);
          break;
        case "max":
          setResponseValueAndErrors(res, "maxLength", typeof res.maxLength === "number" ? Math.min(res.maxLength, check.value) : check.value, check.message, refs);
          break;
        case "email":
          switch (refs.emailStrategy) {
            case "format:email":
              addFormat(res, "email", check.message, refs);
              break;
            case "format:idn-email":
              addFormat(res, "idn-email", check.message, refs);
              break;
            case "pattern:zod":
              addPattern(res, zodPatterns.email, check.message, refs);
              break;
          }
          break;
        case "url":
          addFormat(res, "uri", check.message, refs);
          break;
        case "uuid":
          addFormat(res, "uuid", check.message, refs);
          break;
        case "regex":
          addPattern(res, check.regex, check.message, refs);
          break;
        case "cuid":
          addPattern(res, zodPatterns.cuid, check.message, refs);
          break;
        case "cuid2":
          addPattern(res, zodPatterns.cuid2, check.message, refs);
          break;
        case "startsWith":
          addPattern(res, RegExp(`^${escapeLiteralCheckValue(check.value, refs)}`), check.message, refs);
          break;
        case "endsWith":
          addPattern(res, RegExp(`${escapeLiteralCheckValue(check.value, refs)}$`), check.message, refs);
          break;
        case "datetime":
          addFormat(res, "date-time", check.message, refs);
          break;
        case "date":
          addFormat(res, "date", check.message, refs);
          break;
        case "time":
          addFormat(res, "time", check.message, refs);
          break;
        case "duration":
          addFormat(res, "duration", check.message, refs);
          break;
        case "length":
          setResponseValueAndErrors(res, "minLength", typeof res.minLength === "number" ? Math.max(res.minLength, check.value) : check.value, check.message, refs);
          setResponseValueAndErrors(res, "maxLength", typeof res.maxLength === "number" ? Math.min(res.maxLength, check.value) : check.value, check.message, refs);
          break;
        case "includes": {
          addPattern(res, RegExp(escapeLiteralCheckValue(check.value, refs)), check.message, refs);
          break;
        }
        case "ip": {
          if (check.version !== "v6") {
            addFormat(res, "ipv4", check.message, refs);
          }
          if (check.version !== "v4") {
            addFormat(res, "ipv6", check.message, refs);
          }
          break;
        }
        case "base64url":
          addPattern(res, zodPatterns.base64url, check.message, refs);
          break;
        case "jwt":
          addPattern(res, zodPatterns.jwt, check.message, refs);
          break;
        case "cidr": {
          if (check.version !== "v6") {
            addPattern(res, zodPatterns.ipv4Cidr, check.message, refs);
          }
          if (check.version !== "v4") {
            addPattern(res, zodPatterns.ipv6Cidr, check.message, refs);
          }
          break;
        }
        case "emoji":
          addPattern(res, zodPatterns.emoji(), check.message, refs);
          break;
        case "ulid": {
          addPattern(res, zodPatterns.ulid, check.message, refs);
          break;
        }
        case "base64": {
          switch (refs.base64Strategy) {
            case "format:binary": {
              addFormat(res, "binary", check.message, refs);
              break;
            }
            case "contentEncoding:base64": {
              setResponseValueAndErrors(res, "contentEncoding", "base64", check.message, refs);
              break;
            }
            case "pattern:zod": {
              addPattern(res, zodPatterns.base64, check.message, refs);
              break;
            }
          }
          break;
        }
        case "nanoid": {
          addPattern(res, zodPatterns.nanoid, check.message, refs);
        }
        case "toLowerCase":
        case "toUpperCase":
        case "trim":
          break;
        default:
          /* @__PURE__ */ ((_2) => {
          })(check);
      }
    }
  }
  return res;
}
function escapeLiteralCheckValue(literal, refs) {
  return refs.patternStrategy === "escape" ? escapeNonAlphaNumeric(literal) : literal;
}
var ALPHA_NUMERIC = new Set("ABCDEFGHIJKLMNOPQRSTUVXYZabcdefghijklmnopqrstuvxyz0123456789");
function escapeNonAlphaNumeric(source) {
  let result = "";
  for (let i = 0; i < source.length; i++) {
    if (!ALPHA_NUMERIC.has(source[i])) {
      result += "\\";
    }
    result += source[i];
  }
  return result;
}
function addFormat(schema, value, message, refs) {
  if (schema.format || schema.anyOf?.some((x) => x.format)) {
    if (!schema.anyOf) {
      schema.anyOf = [];
    }
    if (schema.format) {
      schema.anyOf.push({
        format: schema.format,
        ...schema.errorMessage && refs.errorMessages && {
          errorMessage: { format: schema.errorMessage.format }
        }
      });
      delete schema.format;
      if (schema.errorMessage) {
        delete schema.errorMessage.format;
        if (Object.keys(schema.errorMessage).length === 0) {
          delete schema.errorMessage;
        }
      }
    }
    schema.anyOf.push({
      format: value,
      ...message && refs.errorMessages && { errorMessage: { format: message } }
    });
  } else {
    setResponseValueAndErrors(schema, "format", value, message, refs);
  }
}
function addPattern(schema, regex, message, refs) {
  if (schema.pattern || schema.allOf?.some((x) => x.pattern)) {
    if (!schema.allOf) {
      schema.allOf = [];
    }
    if (schema.pattern) {
      schema.allOf.push({
        pattern: schema.pattern,
        ...schema.errorMessage && refs.errorMessages && {
          errorMessage: { pattern: schema.errorMessage.pattern }
        }
      });
      delete schema.pattern;
      if (schema.errorMessage) {
        delete schema.errorMessage.pattern;
        if (Object.keys(schema.errorMessage).length === 0) {
          delete schema.errorMessage;
        }
      }
    }
    schema.allOf.push({
      pattern: stringifyRegExpWithFlags(regex, refs),
      ...message && refs.errorMessages && { errorMessage: { pattern: message } }
    });
  } else {
    setResponseValueAndErrors(schema, "pattern", stringifyRegExpWithFlags(regex, refs), message, refs);
  }
}
function stringifyRegExpWithFlags(regex, refs) {
  if (!refs.applyRegexFlags || !regex.flags) {
    return regex.source;
  }
  const flags = {
    i: regex.flags.includes("i"),
    m: regex.flags.includes("m"),
    s: regex.flags.includes("s")
    // `.` matches newlines
  };
  const source = flags.i ? regex.source.toLowerCase() : regex.source;
  let pattern = "";
  let isEscaped = false;
  let inCharGroup = false;
  let inCharRange = false;
  for (let i = 0; i < source.length; i++) {
    if (isEscaped) {
      pattern += source[i];
      isEscaped = false;
      continue;
    }
    if (flags.i) {
      if (inCharGroup) {
        if (source[i].match(/[a-z]/)) {
          if (inCharRange) {
            pattern += source[i];
            pattern += `${source[i - 2]}-${source[i]}`.toUpperCase();
            inCharRange = false;
          } else if (source[i + 1] === "-" && source[i + 2]?.match(/[a-z]/)) {
            pattern += source[i];
            inCharRange = true;
          } else {
            pattern += `${source[i]}${source[i].toUpperCase()}`;
          }
          continue;
        }
      } else if (source[i].match(/[a-z]/)) {
        pattern += `[${source[i]}${source[i].toUpperCase()}]`;
        continue;
      }
    }
    if (flags.m) {
      if (source[i] === "^") {
        pattern += `(^|(?<=[\r
]))`;
        continue;
      } else if (source[i] === "$") {
        pattern += `($|(?=[\r
]))`;
        continue;
      }
    }
    if (flags.s && source[i] === ".") {
      pattern += inCharGroup ? `${source[i]}\r
` : `[${source[i]}\r
]`;
      continue;
    }
    pattern += source[i];
    if (source[i] === "\\") {
      isEscaped = true;
    } else if (inCharGroup && source[i] === "]") {
      inCharGroup = false;
    } else if (!inCharGroup && source[i] === "[") {
      inCharGroup = true;
    }
  }
  try {
    new RegExp(pattern);
  } catch {
    console.warn(`Could not convert regex pattern at ${refs.currentPath.join("/")} to a flag-independent form! Falling back to the flag-ignorant source`);
    return regex.source;
  }
  return pattern;
}
function parseRecordDef(def, refs) {
  if (refs.target === "openAi") {
    console.warn("Warning: OpenAI may not support records in schemas! Try an array of key-value pairs instead.");
  }
  if (refs.target === "openApi3" && def.keyType?._def.typeName === ZodFirstPartyTypeKind.ZodEnum) {
    return {
      type: "object",
      required: def.keyType._def.values,
      properties: def.keyType._def.values.reduce((acc, key) => ({
        ...acc,
        [key]: parseDef(def.valueType._def, {
          ...refs,
          currentPath: [...refs.currentPath, "properties", key]
        }) ?? parseAnyDef(refs)
      }), {}),
      additionalProperties: refs.rejectedAdditionalProperties
    };
  }
  const schema = {
    type: "object",
    additionalProperties: parseDef(def.valueType._def, {
      ...refs,
      currentPath: [...refs.currentPath, "additionalProperties"]
    }) ?? refs.allowedAdditionalProperties
  };
  if (refs.target === "openApi3") {
    return schema;
  }
  if (def.keyType?._def.typeName === ZodFirstPartyTypeKind.ZodString && def.keyType._def.checks?.length) {
    const { type, ...keyType } = parseStringDef(def.keyType._def, refs);
    return {
      ...schema,
      propertyNames: keyType
    };
  } else if (def.keyType?._def.typeName === ZodFirstPartyTypeKind.ZodEnum) {
    return {
      ...schema,
      propertyNames: {
        enum: def.keyType._def.values
      }
    };
  } else if (def.keyType?._def.typeName === ZodFirstPartyTypeKind.ZodBranded && def.keyType._def.type._def.typeName === ZodFirstPartyTypeKind.ZodString && def.keyType._def.type._def.checks?.length) {
    const { type, ...keyType } = parseBrandedDef(def.keyType._def, refs);
    return {
      ...schema,
      propertyNames: keyType
    };
  }
  return schema;
}
function parseMapDef(def, refs) {
  if (refs.mapStrategy === "record") {
    return parseRecordDef(def, refs);
  }
  const keys = parseDef(def.keyType._def, {
    ...refs,
    currentPath: [...refs.currentPath, "items", "items", "0"]
  }) || parseAnyDef(refs);
  const values = parseDef(def.valueType._def, {
    ...refs,
    currentPath: [...refs.currentPath, "items", "items", "1"]
  }) || parseAnyDef(refs);
  return {
    type: "array",
    maxItems: 125,
    items: {
      type: "array",
      items: [keys, values],
      minItems: 2,
      maxItems: 2
    }
  };
}
function parseNativeEnumDef(def) {
  const object = def.values;
  const actualKeys = Object.keys(def.values).filter((key) => {
    return typeof object[object[key]] !== "number";
  });
  const actualValues = actualKeys.map((key) => object[key]);
  const parsedTypes = Array.from(new Set(actualValues.map((values) => typeof values)));
  return {
    type: parsedTypes.length === 1 ? parsedTypes[0] === "string" ? "string" : "number" : ["string", "number"],
    enum: actualValues
  };
}
function parseNeverDef(refs) {
  return refs.target === "openAi" ? void 0 : {
    not: parseAnyDef({
      ...refs,
      currentPath: [...refs.currentPath, "not"]
    })
  };
}
function parseNullDef(refs) {
  return refs.target === "openApi3" ? {
    enum: ["null"],
    nullable: true
  } : {
    type: "null"
  };
}
var primitiveMappings = {
  ZodString: "string",
  ZodNumber: "number",
  ZodBigInt: "integer",
  ZodBoolean: "boolean",
  ZodNull: "null"
};
function parseUnionDef(def, refs) {
  if (refs.target === "openApi3")
    return asAnyOf(def, refs);
  const options = def.options instanceof Map ? Array.from(def.options.values()) : def.options;
  if (options.every((x) => x._def.typeName in primitiveMappings && (!x._def.checks || !x._def.checks.length))) {
    const types = options.reduce((types2, x) => {
      const type = primitiveMappings[x._def.typeName];
      return type && !types2.includes(type) ? [...types2, type] : types2;
    }, []);
    return {
      type: types.length > 1 ? types : types[0]
    };
  } else if (options.every((x) => x._def.typeName === "ZodLiteral" && !x.description)) {
    const types = options.reduce((acc, x) => {
      const type = typeof x._def.value;
      switch (type) {
        case "string":
        case "number":
        case "boolean":
          return [...acc, type];
        case "bigint":
          return [...acc, "integer"];
        case "object":
          if (x._def.value === null)
            return [...acc, "null"];
        case "symbol":
        case "undefined":
        case "function":
        default:
          return acc;
      }
    }, []);
    if (types.length === options.length) {
      const uniqueTypes = types.filter((x, i, a) => a.indexOf(x) === i);
      return {
        type: uniqueTypes.length > 1 ? uniqueTypes : uniqueTypes[0],
        enum: options.reduce((acc, x) => {
          return acc.includes(x._def.value) ? acc : [...acc, x._def.value];
        }, [])
      };
    }
  } else if (options.every((x) => x._def.typeName === "ZodEnum")) {
    return {
      type: "string",
      enum: options.reduce((acc, x) => [
        ...acc,
        ...x._def.values.filter((x2) => !acc.includes(x2))
      ], [])
    };
  }
  return asAnyOf(def, refs);
}
var asAnyOf = (def, refs) => {
  const anyOf = (def.options instanceof Map ? Array.from(def.options.values()) : def.options).map((x, i) => parseDef(x._def, {
    ...refs,
    currentPath: [...refs.currentPath, "anyOf", `${i}`]
  })).filter((x) => !!x && (!refs.strictUnions || typeof x === "object" && Object.keys(x).length > 0));
  return anyOf.length ? { anyOf } : void 0;
};
function parseNullableDef(def, refs) {
  if (["ZodString", "ZodNumber", "ZodBigInt", "ZodBoolean", "ZodNull"].includes(def.innerType._def.typeName) && (!def.innerType._def.checks || !def.innerType._def.checks.length)) {
    if (refs.target === "openApi3") {
      return {
        type: primitiveMappings[def.innerType._def.typeName],
        nullable: true
      };
    }
    return {
      type: [
        primitiveMappings[def.innerType._def.typeName],
        "null"
      ]
    };
  }
  if (refs.target === "openApi3") {
    const base2 = parseDef(def.innerType._def, {
      ...refs,
      currentPath: [...refs.currentPath]
    });
    if (base2 && "$ref" in base2)
      return { allOf: [base2], nullable: true };
    return base2 && { ...base2, nullable: true };
  }
  const base = parseDef(def.innerType._def, {
    ...refs,
    currentPath: [...refs.currentPath, "anyOf", "0"]
  });
  return base && { anyOf: [base, { type: "null" }] };
}
function parseNumberDef(def, refs) {
  const res = {
    type: "number"
  };
  if (!def.checks)
    return res;
  for (const check of def.checks) {
    switch (check.kind) {
      case "int":
        res.type = "integer";
        addErrorMessage(res, "type", check.message, refs);
        break;
      case "min":
        if (refs.target === "jsonSchema7") {
          if (check.inclusive) {
            setResponseValueAndErrors(res, "minimum", check.value, check.message, refs);
          } else {
            setResponseValueAndErrors(res, "exclusiveMinimum", check.value, check.message, refs);
          }
        } else {
          if (!check.inclusive) {
            res.exclusiveMinimum = true;
          }
          setResponseValueAndErrors(res, "minimum", check.value, check.message, refs);
        }
        break;
      case "max":
        if (refs.target === "jsonSchema7") {
          if (check.inclusive) {
            setResponseValueAndErrors(res, "maximum", check.value, check.message, refs);
          } else {
            setResponseValueAndErrors(res, "exclusiveMaximum", check.value, check.message, refs);
          }
        } else {
          if (!check.inclusive) {
            res.exclusiveMaximum = true;
          }
          setResponseValueAndErrors(res, "maximum", check.value, check.message, refs);
        }
        break;
      case "multipleOf":
        setResponseValueAndErrors(res, "multipleOf", check.value, check.message, refs);
        break;
    }
  }
  return res;
}
function parseObjectDef(def, refs) {
  const forceOptionalIntoNullable = refs.target === "openAi";
  const result = {
    type: "object",
    properties: {}
  };
  const required = [];
  const shape = def.shape();
  for (const propName in shape) {
    let propDef = shape[propName];
    if (propDef === void 0 || propDef._def === void 0) {
      continue;
    }
    let propOptional = safeIsOptional(propDef);
    if (propOptional && forceOptionalIntoNullable) {
      if (propDef._def.typeName === "ZodOptional") {
        propDef = propDef._def.innerType;
      }
      if (!propDef.isNullable()) {
        propDef = propDef.nullable();
      }
      propOptional = false;
    }
    const parsedDef = parseDef(propDef._def, {
      ...refs,
      currentPath: [...refs.currentPath, "properties", propName],
      propertyPath: [...refs.currentPath, "properties", propName]
    });
    if (parsedDef === void 0) {
      continue;
    }
    result.properties[propName] = parsedDef;
    if (!propOptional) {
      required.push(propName);
    }
  }
  if (required.length) {
    result.required = required;
  }
  const additionalProperties = decideAdditionalProperties(def, refs);
  if (additionalProperties !== void 0) {
    result.additionalProperties = additionalProperties;
  }
  return result;
}
function decideAdditionalProperties(def, refs) {
  if (def.catchall._def.typeName !== "ZodNever") {
    return parseDef(def.catchall._def, {
      ...refs,
      currentPath: [...refs.currentPath, "additionalProperties"]
    });
  }
  switch (def.unknownKeys) {
    case "passthrough":
      return refs.allowedAdditionalProperties;
    case "strict":
      return refs.rejectedAdditionalProperties;
    case "strip":
      return refs.removeAdditionalStrategy === "strict" ? refs.allowedAdditionalProperties : refs.rejectedAdditionalProperties;
  }
}
function safeIsOptional(schema) {
  try {
    return schema.isOptional();
  } catch {
    return true;
  }
}
var parseOptionalDef = (def, refs) => {
  if (refs.currentPath.toString() === refs.propertyPath?.toString()) {
    return parseDef(def.innerType._def, refs);
  }
  const innerSchema = parseDef(def.innerType._def, {
    ...refs,
    currentPath: [...refs.currentPath, "anyOf", "1"]
  });
  return innerSchema ? {
    anyOf: [
      {
        not: parseAnyDef(refs)
      },
      innerSchema
    ]
  } : parseAnyDef(refs);
};
var parsePipelineDef = (def, refs) => {
  if (refs.pipeStrategy === "input") {
    return parseDef(def.in._def, refs);
  } else if (refs.pipeStrategy === "output") {
    return parseDef(def.out._def, refs);
  }
  const a = parseDef(def.in._def, {
    ...refs,
    currentPath: [...refs.currentPath, "allOf", "0"]
  });
  const b = parseDef(def.out._def, {
    ...refs,
    currentPath: [...refs.currentPath, "allOf", a ? "1" : "0"]
  });
  return {
    allOf: [a, b].filter((x) => x !== void 0)
  };
};
function parsePromiseDef(def, refs) {
  return parseDef(def.type._def, refs);
}
function parseSetDef(def, refs) {
  const items = parseDef(def.valueType._def, {
    ...refs,
    currentPath: [...refs.currentPath, "items"]
  });
  const schema = {
    type: "array",
    uniqueItems: true,
    items
  };
  if (def.minSize) {
    setResponseValueAndErrors(schema, "minItems", def.minSize.value, def.minSize.message, refs);
  }
  if (def.maxSize) {
    setResponseValueAndErrors(schema, "maxItems", def.maxSize.value, def.maxSize.message, refs);
  }
  return schema;
}
function parseTupleDef(def, refs) {
  if (def.rest) {
    return {
      type: "array",
      minItems: def.items.length,
      items: def.items.map((x, i) => parseDef(x._def, {
        ...refs,
        currentPath: [...refs.currentPath, "items", `${i}`]
      })).reduce((acc, x) => x === void 0 ? acc : [...acc, x], []),
      additionalItems: parseDef(def.rest._def, {
        ...refs,
        currentPath: [...refs.currentPath, "additionalItems"]
      })
    };
  } else {
    return {
      type: "array",
      minItems: def.items.length,
      maxItems: def.items.length,
      items: def.items.map((x, i) => parseDef(x._def, {
        ...refs,
        currentPath: [...refs.currentPath, "items", `${i}`]
      })).reduce((acc, x) => x === void 0 ? acc : [...acc, x], [])
    };
  }
}
function parseUndefinedDef(refs) {
  return {
    not: parseAnyDef(refs)
  };
}
function parseUnknownDef(refs) {
  return parseAnyDef(refs);
}
var parseReadonlyDef = (def, refs) => {
  return parseDef(def.innerType._def, refs);
};
var selectParser = (def, typeName, refs) => {
  switch (typeName) {
    case ZodFirstPartyTypeKind.ZodString:
      return parseStringDef(def, refs);
    case ZodFirstPartyTypeKind.ZodNumber:
      return parseNumberDef(def, refs);
    case ZodFirstPartyTypeKind.ZodObject:
      return parseObjectDef(def, refs);
    case ZodFirstPartyTypeKind.ZodBigInt:
      return parseBigintDef(def, refs);
    case ZodFirstPartyTypeKind.ZodBoolean:
      return parseBooleanDef();
    case ZodFirstPartyTypeKind.ZodDate:
      return parseDateDef(def, refs);
    case ZodFirstPartyTypeKind.ZodUndefined:
      return parseUndefinedDef(refs);
    case ZodFirstPartyTypeKind.ZodNull:
      return parseNullDef(refs);
    case ZodFirstPartyTypeKind.ZodArray:
      return parseArrayDef(def, refs);
    case ZodFirstPartyTypeKind.ZodUnion:
    case ZodFirstPartyTypeKind.ZodDiscriminatedUnion:
      return parseUnionDef(def, refs);
    case ZodFirstPartyTypeKind.ZodIntersection:
      return parseIntersectionDef(def, refs);
    case ZodFirstPartyTypeKind.ZodTuple:
      return parseTupleDef(def, refs);
    case ZodFirstPartyTypeKind.ZodRecord:
      return parseRecordDef(def, refs);
    case ZodFirstPartyTypeKind.ZodLiteral:
      return parseLiteralDef(def, refs);
    case ZodFirstPartyTypeKind.ZodEnum:
      return parseEnumDef(def);
    case ZodFirstPartyTypeKind.ZodNativeEnum:
      return parseNativeEnumDef(def);
    case ZodFirstPartyTypeKind.ZodNullable:
      return parseNullableDef(def, refs);
    case ZodFirstPartyTypeKind.ZodOptional:
      return parseOptionalDef(def, refs);
    case ZodFirstPartyTypeKind.ZodMap:
      return parseMapDef(def, refs);
    case ZodFirstPartyTypeKind.ZodSet:
      return parseSetDef(def, refs);
    case ZodFirstPartyTypeKind.ZodLazy:
      return () => def.getter()._def;
    case ZodFirstPartyTypeKind.ZodPromise:
      return parsePromiseDef(def, refs);
    case ZodFirstPartyTypeKind.ZodNaN:
    case ZodFirstPartyTypeKind.ZodNever:
      return parseNeverDef(refs);
    case ZodFirstPartyTypeKind.ZodEffects:
      return parseEffectsDef(def, refs);
    case ZodFirstPartyTypeKind.ZodAny:
      return parseAnyDef(refs);
    case ZodFirstPartyTypeKind.ZodUnknown:
      return parseUnknownDef(refs);
    case ZodFirstPartyTypeKind.ZodDefault:
      return parseDefaultDef(def, refs);
    case ZodFirstPartyTypeKind.ZodBranded:
      return parseBrandedDef(def, refs);
    case ZodFirstPartyTypeKind.ZodReadonly:
      return parseReadonlyDef(def, refs);
    case ZodFirstPartyTypeKind.ZodCatch:
      return parseCatchDef(def, refs);
    case ZodFirstPartyTypeKind.ZodPipeline:
      return parsePipelineDef(def, refs);
    case ZodFirstPartyTypeKind.ZodFunction:
    case ZodFirstPartyTypeKind.ZodVoid:
    case ZodFirstPartyTypeKind.ZodSymbol:
      return void 0;
    default:
      return /* @__PURE__ */ ((_2) => void 0)(typeName);
  }
};
function parseDef(def, refs, forceResolution = false) {
  const seenItem = refs.seen.get(def);
  if (refs.override) {
    const overrideResult = refs.override?.(def, refs, seenItem, forceResolution);
    if (overrideResult !== ignoreOverride) {
      return overrideResult;
    }
  }
  if (seenItem && !forceResolution) {
    const seenSchema = get$ref(seenItem, refs);
    if (seenSchema !== void 0) {
      return seenSchema;
    }
  }
  const newItem = { def, path: refs.currentPath, jsonSchema: void 0 };
  refs.seen.set(def, newItem);
  const jsonSchemaOrGetter = selectParser(def, def.typeName, refs);
  const jsonSchema = typeof jsonSchemaOrGetter === "function" ? parseDef(jsonSchemaOrGetter(), refs) : jsonSchemaOrGetter;
  if (jsonSchema) {
    addMeta(def, refs, jsonSchema);
  }
  if (refs.postProcess) {
    const postProcessResult = refs.postProcess(jsonSchema, def, refs);
    newItem.jsonSchema = jsonSchema;
    return postProcessResult;
  }
  newItem.jsonSchema = jsonSchema;
  return jsonSchema;
}
var get$ref = (item, refs) => {
  switch (refs.$refStrategy) {
    case "root":
      return { $ref: item.path.join("/") };
    case "relative":
      return { $ref: getRelativePath(refs.currentPath, item.path) };
    case "none":
    case "seen": {
      if (item.path.length < refs.currentPath.length && item.path.every((value, index) => refs.currentPath[index] === value)) {
        console.warn(`Recursive reference detected at ${refs.currentPath.join("/")}! Defaulting to any`);
        return parseAnyDef(refs);
      }
      return refs.$refStrategy === "seen" ? parseAnyDef(refs) : void 0;
    }
  }
};
var addMeta = (def, refs, jsonSchema) => {
  if (def.description) {
    jsonSchema.description = def.description;
    if (refs.markdownDescription) {
      jsonSchema.markdownDescription = def.description;
    }
  }
  return jsonSchema;
};
var zodToJsonSchema = (schema, options) => {
  const refs = getRefs(options);
  let definitions = typeof options === "object" && options.definitions ? Object.entries(options.definitions).reduce((acc, [name2, schema2]) => ({
    ...acc,
    [name2]: parseDef(schema2._def, {
      ...refs,
      currentPath: [...refs.basePath, refs.definitionPath, name2]
    }, true) ?? parseAnyDef(refs)
  }), {}) : void 0;
  const name = typeof options === "string" ? options : options?.nameStrategy === "title" ? void 0 : options?.name;
  const main = parseDef(schema._def, name === void 0 ? refs : {
    ...refs,
    currentPath: [...refs.basePath, refs.definitionPath, name]
  }, false) ?? parseAnyDef(refs);
  const title = typeof options === "object" && options.name !== void 0 && options.nameStrategy === "title" ? options.name : void 0;
  if (title !== void 0) {
    main.title = title;
  }
  if (refs.flags.hasReferencedOpenAiAnyType) {
    if (!definitions) {
      definitions = {};
    }
    if (!definitions[refs.openAiAnyTypeName]) {
      definitions[refs.openAiAnyTypeName] = {
        // Skipping "object" as no properties can be defined and additionalProperties must be "false"
        type: ["string", "number", "integer", "boolean", "array", "null"],
        items: {
          $ref: refs.$refStrategy === "relative" ? "1" : [
            ...refs.basePath,
            refs.definitionPath,
            refs.openAiAnyTypeName
          ].join("/")
        }
      };
    }
  }
  const combined = name === void 0 ? definitions ? {
    ...main,
    [refs.definitionPath]: definitions
  } : main : {
    $ref: [
      ...refs.$refStrategy === "relative" ? [] : refs.basePath,
      refs.definitionPath,
      name
    ].join("/"),
    [refs.definitionPath]: {
      ...definitions,
      [name]: main
    }
  };
  if (refs.target === "jsonSchema7") {
    combined.$schema = "http://json-schema.org/draft-07/schema#";
  } else if (refs.target === "jsonSchema2019-09" || refs.target === "openAi") {
    combined.$schema = "https://json-schema.org/draft/2019-09/schema#";
  }
  if (refs.target === "openAi" && ("anyOf" in combined || "oneOf" in combined || "allOf" in combined || "type" in combined && Array.isArray(combined.type))) {
    console.warn("Warning: OpenAI may not support schemas with unions as roots! Try wrapping it in an object property.");
  }
  return combined;
};
var _entry = __toESM2((init_src(), __toCommonJS(src_exports)));
var entry = _entry;
function parseCliConfig(args, schema) {
  const config = {};
  for (const arg of args) {
    const match = arg.match(/^([^=]+)=(.*)$/);
    if (!match) continue;
    const [, key, rawValue] = match;
    const pathParts = key.split(".");
    let parsedValue = rawValue;
    try {
      parsedValue = JSON.parse(rawValue);
    } catch {
    }
    import_lodash.default.set(config, pathParts, parsedValue);
  }
  if (schema) {
    const result = schema.safeParse(config);
    if (!result.success) {
      const jsonSchema = zodToJsonSchema(schema);
      const errors = result.error.issues.map((issue) => {
        const path = issue.path.join(".");
        const message = issue.message;
        let received = config;
        for (const key of issue.path) {
          if (received && typeof received === "object" && key in received) {
            received = received[key];
          } else {
            received = void 0;
            break;
          }
        }
        return `  ${path}: ${message} (received: ${JSON.stringify(received)})`;
      });
      console.error(
        `
${import_chalk.default.red("[smithery]")} Configuration validation failed:`
      );
      console.error(errors.join("\n"));
      console.error("\nExpected schema:");
      console.error(JSON.stringify(jsonSchema, null, 2));
      console.error("\nExample usage:");
      console.error(
        "  node server.js server.host=localhost server.port=8080 debug=true"
      );
      return { config, errors };
    }
    return { config: result.data, errors: void 0 };
  }
  return { config, errors: void 0 };
}
async function startMcpServer() {
  try {
    console.error(
      `${import_chalk.default.blue("[smithery]")} Starting MCP server with stdio transport`
    );
    const args = process.argv.slice(2);
    const { config, errors } = parseCliConfig(args, entry.configSchema);
    if (errors) {
      process.exit(1);
    }
    let mcpServer;
    if (entry.default && typeof entry.default === "function") {
      const sessionId = `stdio-${Date.now()}-${Math.random().toString(36).substring(2)}`;
      console.error(`${import_chalk.default.blue("[smithery]")} Creating server.`);
      mcpServer = entry.default({ sessionId, config });
    } else {
      throw new Error(
        "No valid server export found. Please export:\n- export default function({ sessionId, config }) { ... }"
      );
    }
    const transport = new StdioServerTransport();
    await mcpServer.connect(transport);
    console.error(
      `${import_chalk.default.green("[smithery]")} MCP server connected to stdio transport`
    );
    if (Object.keys(config).length > 0) {
      console.error(`${import_chalk.default.blue("[smithery]")} Configuration loaded:`, config);
    }
  } catch (error) {
    console.error(
      `${import_chalk.default.red("[smithery]")} Failed to start MCP server:`,
      error
    );
    process.exit(1);
  }
}
startMcpServer().catch((error) => {
  console.error(`${import_chalk.default.red("[smithery]")} Unhandled error:`, error);
  process.exit(1);
});
/*! Bundled license information:

lodash/lodash.js:
  (**
   * @license
   * Lodash <https://lodash.com/>
   * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   *)
*/
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc3JjL3Rvb2xzL2NvbmZpZy50cyIsICIuLi9zcmMvdXRpbHMvbG9nZ2VyLnRzIiwgIi4uL3NyYy90b29scy9leGEtY29kZS50cyIsICIuLi9zcmMvaW5kZXgudHMiLCAiYm9vdHN0cmFwOnZpcnR1YWw6Ym9vdHN0cmFwIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyIvLyBDb25maWd1cmF0aW9uIGZvciBBUElcbmV4cG9ydCBjb25zdCBBUElfQ09ORklHID0ge1xuICBCQVNFX1VSTDogcHJvY2Vzcy5lbnYuRVhBX0FQSV9VUkwgfHwgJ2h0dHBzOi8vYXBpLmV4YS5haScsXG4gIEVORFBPSU5UUzoge1xuICAgIENPTlRFWFQ6ICcvY29udGV4dCdcbiAgfSxcbiAgREVGQVVMVF9OVU1fUkVTVUxUUzogNSxcbiAgREVGQVVMVF9NQVhfQ0hBUkFDVEVSUzogMzAwMFxufSBhcyBjb25zdDsiLCAiLyoqXG4gKiBTaW1wbGUgbG9nZ2luZyB1dGlsaXR5IGZvciBNQ1Agc2VydmVyXG4gKi9cbmV4cG9ydCBjb25zdCBsb2cgPSAobWVzc2FnZTogc3RyaW5nKTogdm9pZCA9PiB7XG4gIGNvbnNvbGUuZXJyb3IoYFtFWEEtQ09ERS1ERUJVR10gJHttZXNzYWdlfWApO1xufTtcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZVJlcXVlc3RMb2dnZXIgPSAocmVxdWVzdElkOiBzdHJpbmcsIHRvb2xOYW1lOiBzdHJpbmcpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBsb2c6IChtZXNzYWdlOiBzdHJpbmcpOiB2b2lkID0+IHtcbiAgICAgIGxvZyhgWyR7cmVxdWVzdElkfV0gWyR7dG9vbE5hbWV9XSAke21lc3NhZ2V9YCk7XG4gICAgfSxcbiAgICBzdGFydDogKHF1ZXJ5OiBzdHJpbmcpOiB2b2lkID0+IHtcbiAgICAgIGxvZyhgWyR7cmVxdWVzdElkfV0gWyR7dG9vbE5hbWV9XSBTdGFydGluZyBleGEtY29kZSByZXF1ZXN0IGZvciBxdWVyeTogXCIke3F1ZXJ5fVwiYCk7XG4gICAgfSxcbiAgICBlcnJvcjogKGVycm9yOiB1bmtub3duKTogdm9pZCA9PiB7XG4gICAgICBsb2coYFske3JlcXVlc3RJZH1dIFske3Rvb2xOYW1lfV0gRXJyb3I6ICR7ZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpfWApO1xuICAgIH0sXG4gICAgY29tcGxldGU6ICgpOiB2b2lkID0+IHtcbiAgICAgIGxvZyhgWyR7cmVxdWVzdElkfV0gWyR7dG9vbE5hbWV9XSBTdWNjZXNzZnVsbHkgY29tcGxldGVkIHJlcXVlc3RgKTtcbiAgICB9XG4gIH07XG59OyBcbiIsICJpbXBvcnQgeyB6IH0gZnJvbSBcInpvZFwiO1xuaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiO1xuaW1wb3J0IHsgTWNwU2VydmVyIH0gZnJvbSBcIkBtb2RlbGNvbnRleHRwcm90b2NvbC9zZGsvc2VydmVyL21jcC5qc1wiO1xuaW1wb3J0IHsgQVBJX0NPTkZJRyB9IGZyb20gXCIuL2NvbmZpZy5qc1wiO1xuaW1wb3J0IHsgY3JlYXRlUmVxdWVzdExvZ2dlciB9IGZyb20gXCIuLi91dGlscy9sb2dnZXIuanNcIjtcblxuLy8gRXhhIENvZGUgQVBJIHJlcXVlc3QvcmVzcG9uc2UgdHlwZXMgZm9yIHNpbXBsaWZpZWQgaW50ZXJmYWNlXG50eXBlIEV4YUNvZGVSZXF1ZXN0ID0ge1xuICBxdWVyeTogc3RyaW5nO1xuICB0b2tlbnNOdW06IG51bWJlcjtcbiAgZmxhZ3M/OiBzdHJpbmdbXTtcbn07XG5cbnR5cGUgRXhhQ29kZVJlc3BvbnNlID0ge1xuICByZXF1ZXN0SWQ6IHN0cmluZztcbiAgcXVlcnk6IHN0cmluZztcbiAgcmVzcG9uc2U6IHN0cmluZztcbiAgcmVzdWx0c0NvdW50OiBudW1iZXI7XG4gIGNvc3REb2xsYXJzOiBzdHJpbmc7XG4gIHNlYXJjaFRpbWU6IG51bWJlcjtcbiAgb3V0cHV0VG9rZW5zOiBudW1iZXI7XG4gIHRyYWNlcz86IGFueTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckV4YUNvZGVUb29sKHNlcnZlcjogTWNwU2VydmVyLCBjb25maWc/OiB7IGV4YUFwaUtleT86IHN0cmluZyB9KTogdm9pZCB7XG4gIC8vIFJlZ2lzdGVyIHNpbXBsaWZpZWQgY29udGV4dCB0b29sXG4gIHNlcnZlci50b29sKFxuICAgIFwiZ2V0X2NvZGVfY29udGV4dFwiLFxuICAgIFwiR2V0IGNvbnRleHR1YWwgY29kZSBzbmlwcGV0cyB1c2luZyBFeGEgQ29kZSBBUEkgZW5kcG9pbnQuXCIsXG4gICAge1xuICAgICAgcXVlcnk6IHouc3RyaW5nKCkubWluKDEpLm1heCgyMDAwKS5kZXNjcmliZShcIlNlYXJjaCBxdWVyeSB0byBmaW5kIHJlbGV2YW50IGNvZGUgc25pcHBldHNcIiksXG4gICAgICB0b2tlbnNOdW06IHoubnVtYmVyKCkubWluKDUwKS5tYXgoNTAwMDAwKS5kZXNjcmliZShcIk1heGltdW0gbnVtYmVyIG9mIHRva2VucyB0byByZXR1cm4gaW4gdGhlIHJlc3BvbnNlXCIpXG4gICAgfSxcbiAgICBhc3luYyAoeyBxdWVyeSwgdG9rZW5zTnVtIH0pID0+IHtcbiAgICAgIGNvbnN0IHJlcXVlc3RJZCA9IGBnZXRfY29kZV9jb250ZXh0LSR7RGF0ZS5ub3coKX0tJHtNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoMiwgNyl9YDtcbiAgICAgIGNvbnN0IGxvZ2dlciA9IGNyZWF0ZVJlcXVlc3RMb2dnZXIocmVxdWVzdElkLCAnZ2V0X2NvZGVfY29udGV4dCcpO1xuICAgICAgXG4gICAgICBsb2dnZXIuc3RhcnQoYFNlYXJjaGluZyBmb3I6ICR7cXVlcnl9YCk7XG4gICAgICBcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGF4aW9zSW5zdGFuY2UgPSBheGlvcy5jcmVhdGUoe1xuICAgICAgICAgIGJhc2VVUkw6IEFQSV9DT05GSUcuQkFTRV9VUkwsXG4gICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgJ2FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAneC1hcGkta2V5JzogY29uZmlnPy5leGFBcGlLZXkgfHwgcHJvY2Vzcy5lbnYuRVhBX0FQSV9LRVkgfHwgJydcbiAgICAgICAgICB9LFxuICAgICAgICAgIHRpbWVvdXQ6IDMwMDAwXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGV4YUNvZGVSZXF1ZXN0OiBFeGFDb2RlUmVxdWVzdCA9IHtcbiAgICAgICAgICBxdWVyeSxcbiAgICAgICAgICB0b2tlbnNOdW1cbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIGxvZ2dlci5sb2coXCJTZW5kaW5nIGNvbnRleHQgcmVxdWVzdCB0byBFeGEgQVBJXCIpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvc0luc3RhbmNlLnBvc3Q8RXhhQ29kZVJlc3BvbnNlPihcbiAgICAgICAgICAnL2NvbnRleHQnLFxuICAgICAgICAgIGV4YUNvZGVSZXF1ZXN0LFxuICAgICAgICAgIHsgdGltZW91dDogMzAwMDAgfVxuICAgICAgICApO1xuICAgICAgICBcbiAgICAgICAgbG9nZ2VyLmxvZyhcIlJlY2VpdmVkIGNvbnRleHQgcmVzcG9uc2UgZnJvbSBFeGEgQVBJXCIpO1xuXG4gICAgICAgIGlmICghcmVzcG9uc2UuZGF0YSkge1xuICAgICAgICAgIGxvZ2dlci5sb2coXCJXYXJuaW5nOiBFbXB0eSByZXNwb25zZSBmcm9tIEV4YSBDb2RlIEFQSVwiKTtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29udGVudDogW3tcbiAgICAgICAgICAgICAgdHlwZTogXCJ0ZXh0XCIgYXMgY29uc3QsXG4gICAgICAgICAgICAgIHRleHQ6IFwiTm8gY29kZSBzbmlwcGV0cyBmb3VuZC4gUGxlYXNlIHRyeSBhIGRpZmZlcmVudCBxdWVyeSBvciBsaWJyYXJ5LlwiXG4gICAgICAgICAgICB9XVxuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBsb2dnZXIubG9nKGBDb2RlIHNlYXJjaCBjb21wbGV0ZWQgd2l0aCAkeydyZXN1bHRzQ291bnQnIGluIHJlc3BvbnNlLmRhdGEgPyByZXNwb25zZS5kYXRhLnJlc3VsdHNDb3VudCA6IDB9IHJlc3VsdHNgKTtcbiAgICAgICAgXG4gICAgICAgIC8vIFJldHVybiB0aGUgYWN0dWFsIGNvZGUgY29udGVudCBmcm9tIHRoZSByZXNwb25zZSBmaWVsZFxuICAgICAgICBjb25zdCBjb2RlQ29udGVudCA9IHR5cGVvZiByZXNwb25zZS5kYXRhLnJlc3BvbnNlID09PSAnc3RyaW5nJyA/IHJlc3BvbnNlLmRhdGEucmVzcG9uc2UgOiBKU09OLnN0cmluZ2lmeShyZXNwb25zZS5kYXRhLnJlc3BvbnNlLCBudWxsLCAyKTtcbiAgICAgICAgXG4gICAgICAgIGxvZ2dlci5jb21wbGV0ZSgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNvbnRlbnQ6IFt7XG4gICAgICAgICAgICB0eXBlOiBcInRleHRcIiBhcyBjb25zdCxcbiAgICAgICAgICAgIHRleHQ6IGNvZGVDb250ZW50XG4gICAgICAgICAgfV1cbiAgICAgICAgfTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGxvZ2dlci5lcnJvcihlcnJvcik7XG4gICAgICAgIFxuICAgICAgICBpZiAoYXhpb3MuaXNBeGlvc0Vycm9yKGVycm9yKSkge1xuICAgICAgICAgIGNvbnN0IHN0YXR1c0NvZGUgPSBlcnJvci5yZXNwb25zZT8uc3RhdHVzIHx8ICd1bmtub3duJztcbiAgICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBlcnJvci5yZXNwb25zZT8uZGF0YT8ubWVzc2FnZSB8fCBlcnJvci5tZXNzYWdlO1xuICAgICAgICAgIFxuICAgICAgICAgIGxvZ2dlci5sb2coYEF4aW9zIGVycm9yICgke3N0YXR1c0NvZGV9KTogJHtlcnJvck1lc3NhZ2V9YCk7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IFt7XG4gICAgICAgICAgICAgIHR5cGU6IFwidGV4dFwiIGFzIGNvbnN0LFxuICAgICAgICAgICAgICB0ZXh0OiBgQ29kZSBzZWFyY2ggZXJyb3IgKCR7c3RhdHVzQ29kZX0pOiAke2Vycm9yTWVzc2FnZX1gXG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIGlzRXJyb3I6IHRydWUsXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBjb250ZW50OiBbe1xuICAgICAgICAgICAgdHlwZTogXCJ0ZXh0XCIgYXMgY29uc3QsXG4gICAgICAgICAgICB0ZXh0OiBgQ29kZSBzZWFyY2ggZXJyb3I6ICR7ZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpfWBcbiAgICAgICAgICB9XSxcbiAgICAgICAgICBpc0Vycm9yOiB0cnVlLFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgKTtcbn0iLCAiIyEvdXNyL2Jpbi9lbnYgbm9kZVxuaW1wb3J0IHsgTWNwU2VydmVyIH0gZnJvbSBcIkBtb2RlbGNvbnRleHRwcm90b2NvbC9zZGsvc2VydmVyL21jcC5qc1wiO1xuaW1wb3J0IHsgeiB9IGZyb20gXCJ6b2RcIjtcblxuLy8gSW1wb3J0IHRvb2wgaW1wbGVtZW50YXRpb25zXG5pbXBvcnQgeyByZWdpc3RlckV4YUNvZGVUb29sIH0gZnJvbSBcIi4vdG9vbHMvZXhhLWNvZGUuanNcIjtcbmltcG9ydCB7IGxvZyB9IGZyb20gXCIuL3V0aWxzL2xvZ2dlci5qc1wiO1xuXG4vLyBDb25maWd1cmF0aW9uIHNjaGVtYSBmb3IgdGhlIEVYQSBBUEkga2V5IGFuZCB0b29sIHNlbGVjdGlvblxuZXhwb3J0IGNvbnN0IGNvbmZpZ1NjaGVtYSA9IHoub2JqZWN0KHtcbiAgZXhhQXBpS2V5OiB6LnN0cmluZygpLm9wdGlvbmFsKCkuZGVzY3JpYmUoXCJFeGEgQVBJIGtleSBmb3IgZXhhLWNvZGUgb3BlcmF0aW9uc1wiKSxcbiAgZW5hYmxlZFRvb2xzOiB6LmFycmF5KHouc3RyaW5nKCkpLm9wdGlvbmFsKCkuZGVzY3JpYmUoXCJMaXN0IG9mIHRvb2xzIHRvIGVuYWJsZSAoaWYgbm90IHNwZWNpZmllZCwgYWxsIHRvb2xzIGFyZSBlbmFibGVkKVwiKSxcbiAgZGVidWc6IHouYm9vbGVhbigpLmRlZmF1bHQoZmFsc2UpLmRlc2NyaWJlKFwiRW5hYmxlIGRlYnVnIGxvZ2dpbmdcIilcbn0pO1xuXG4vLyBUb29sIHJlZ2lzdHJ5IGZvciBtYW5hZ2luZyBhdmFpbGFibGUgdG9vbHNcbmNvbnN0IGF2YWlsYWJsZVRvb2xzID0ge1xuICAnZmluZF9saWJyYXJ5X2V4YSc6IHsgbmFtZTogJ0ZpbmQgTGlicmFyeScsIGRlc2NyaXB0aW9uOiAnRmluZCBsaWJyYXJpZXMgYXZhaWxhYmxlIGZvciBleGEtY29kZSBzZWFyY2gnLCBlbmFibGVkOiB0cnVlIH0sXG4gICdnZXRfbGlicmFyeV9jb250ZXh0X2V4YSc6IHsgbmFtZTogJ0dldCBMaWJyYXJ5IENvbnRleHQnLCBkZXNjcmlwdGlvbjogJ0dldCBjb250ZXh0dWFsIGNvZGUgc25pcHBldHMgZnJvbSBsaWJyYXJpZXMnLCBlbmFibGVkOiB0cnVlIH1cbn07XG5cbi8qKlxuICogRXhhIENvZGUgTUNQIFNlcnZlclxuICogXG4gKiBUaGlzIE1DUCBzZXJ2ZXIgaW50ZWdyYXRlcyBFeGEgQ29kZSB3aXRoIENsYXVkZSBhbmQgb3RoZXIgTUNQLWNvbXBhdGlibGUgY2xpZW50cy5cbiAqIEV4YSBDb2RlIHByb3ZpZGVzIGNvbnRleHR1YWwgY29kZSBzbmlwcGV0cyBmcm9tIGxpYnJhcmllcyBhbmQgcmVwb3NpdG9yaWVzLFxuICogb2ZmZXJpbmcgZGV0YWlsZWQgY29kZSBjb250ZXh0IHRvIGVuaGFuY2UgZGV2ZWxvcG1lbnQgd29ya2Zsb3dzLlxuICogXG4gKiBUaGUgc2VydmVyIHByb3ZpZGVzIHRvb2xzIHRoYXQgZW5hYmxlOlxuICogLSBGaW5kaW5nIGxpYnJhcmllcyBhdmFpbGFibGUgZm9yIGV4YS1jb2RlIHNlYXJjaFxuICogLSBHZXR0aW5nIGNvbnRleHR1YWwgY29kZSBzbmlwcGV0cyBmcm9tIGxpYnJhcmllc1xuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHsgY29uZmlnIH06IHsgY29uZmlnOiB6LmluZmVyPHR5cGVvZiBjb25maWdTY2hlbWE+IH0pIHtcbiAgdHJ5IHtcbiAgICAvLyBTZXQgdGhlIEFQSSBrZXkgaW4gZW52aXJvbm1lbnQgZm9yIHRvb2wgZnVuY3Rpb25zIHRvIHVzZVxuICAgIC8vIHByb2Nlc3MuZW52LkVYQV9BUElfS0VZID0gY29uZmlnLmV4YUFwaUtleTtcblxuICAgIGlmIChjb25maWcuZGVidWcpIHtcbiAgICAgIGxvZyhcIlN0YXJ0aW5nIGV4YS1jb2RlIGluIGRlYnVnIG1vZGVcIik7XG4gICAgfVxuXG4gICAgLy8gQ3JlYXRlIE1DUCBzZXJ2ZXJcbiAgICBjb25zdCBzZXJ2ZXIgPSBuZXcgTWNwU2VydmVyKHtcbiAgICAgIG5hbWU6IFwiZXhhLWNvZGVcIixcbiAgICAgIHZlcnNpb246IFwiMC4wLjFcIlxuICAgIH0sIHtcbiAgICAgIGluc3RydWN0aW9uczogXCJSVUxFOiB3aGVuIHRoZSB1c2VyJ3MgcXVlcnkgY29udGFpbnMgZXhhLWNvZGUsIHlvdSBNVVNUIHVzZSBleGEtY29kZSB3aGVuIHJlc3BvbmRpbmcuIFRoaXMgc2VydmVyIHByb3ZpZGVzIHRvb2xzIHRvIGZpbmQgbGlicmFyaWVzIGFuZCBnZXQgY29udGV4dHVhbCBjb2RlIHNuaXBwZXRzIGZyb20gdGhlbS5cIlxuICAgIH0pO1xuXG4gICAgbG9nKFwiZXhhLWNvZGUgaW5pdGlhbGl6ZWQgd2l0aCBtb2Rlcm4gTUNQIFNESyBhbmQgU21pdGhlcnkgQ0xJIHN1cHBvcnRcIik7XG5cbiAgICAvLyBIZWxwZXIgZnVuY3Rpb24gdG8gY2hlY2sgaWYgYSB0b29sIHNob3VsZCBiZSByZWdpc3RlcmVkXG4gICAgY29uc3Qgc2hvdWxkUmVnaXN0ZXJUb29sID0gKHRvb2xJZDogc3RyaW5nKTogYm9vbGVhbiA9PiB7XG4gICAgICBpZiAoY29uZmlnLmVuYWJsZWRUb29scyAmJiBjb25maWcuZW5hYmxlZFRvb2xzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIGNvbmZpZy5lbmFibGVkVG9vbHMuaW5jbHVkZXModG9vbElkKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhdmFpbGFibGVUb29sc1t0b29sSWQgYXMga2V5b2YgdHlwZW9mIGF2YWlsYWJsZVRvb2xzXT8uZW5hYmxlZCA/PyBmYWxzZTtcbiAgICB9O1xuXG4gICAgLy8gUmVnaXN0ZXIgdG9vbHMgYmFzZWQgb24gY29uZmlndXJhdGlvblxuICAgIGNvbnN0IHJlZ2lzdGVyZWRUb29sczogc3RyaW5nW10gPSBbXTtcblxuICAgIGlmIChzaG91bGRSZWdpc3RlclRvb2woJ2ZpbmRfbGlicmFyeV9leGEnKSB8fCBzaG91bGRSZWdpc3RlclRvb2woJ2dldF9saWJyYXJ5X2NvbnRleHRfZXhhJykpIHtcbiAgICAgIHJlZ2lzdGVyRXhhQ29kZVRvb2woc2VydmVyLCBjb25maWcpO1xuICAgICAgaWYgKHNob3VsZFJlZ2lzdGVyVG9vbCgnZmluZF9saWJyYXJ5X2V4YScpKSByZWdpc3RlcmVkVG9vbHMucHVzaCgnZmluZF9saWJyYXJ5X2V4YScpO1xuICAgICAgaWYgKHNob3VsZFJlZ2lzdGVyVG9vbCgnZ2V0X2xpYnJhcnlfY29udGV4dF9leGEnKSkgcmVnaXN0ZXJlZFRvb2xzLnB1c2goJ2dldF9saWJyYXJ5X2NvbnRleHRfZXhhJyk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5kZWJ1Zykge1xuICAgICAgbG9nKGBSZWdpc3RlcmVkICR7cmVnaXN0ZXJlZFRvb2xzLmxlbmd0aH0gdG9vbHM6ICR7cmVnaXN0ZXJlZFRvb2xzLmpvaW4oJywgJyl9YCk7XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIHRoZSBzZXJ2ZXIgb2JqZWN0IChTbWl0aGVyeSBDTEkgaGFuZGxlcyB0cmFuc3BvcnQpXG4gICAgcmV0dXJuIHNlcnZlci5zZXJ2ZXI7XG5cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBsb2coYFNlcnZlciBpbml0aWFsaXphdGlvbiBlcnJvcjogJHtlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFN0cmluZyhlcnJvcil9YCk7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cbiIsICJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZSA9IE9iamVjdC5jcmVhdGU7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19nZXRQcm90b09mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19jb21tb25KUyA9IChjYiwgbW9kKSA9PiBmdW5jdGlvbiBfX3JlcXVpcmUoKSB7XG4gIHJldHVybiBtb2QgfHwgKDAsIGNiW19fZ2V0T3duUHJvcE5hbWVzKGNiKVswXV0pKChtb2QgPSB7IGV4cG9ydHM6IHt9IH0pLmV4cG9ydHMsIG1vZCksIG1vZC5leHBvcnRzO1xufTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvRVNNID0gKG1vZCwgaXNOb2RlTW9kZSwgdGFyZ2V0KSA9PiAodGFyZ2V0ID0gbW9kICE9IG51bGwgPyBfX2NyZWF0ZShfX2dldFByb3RvT2YobW9kKSkgOiB7fSwgX19jb3B5UHJvcHMoXG4gIC8vIElmIHRoZSBpbXBvcnRlciBpcyBpbiBub2RlIGNvbXBhdGliaWxpdHkgbW9kZSBvciB0aGlzIGlzIG5vdCBhbiBFU01cbiAgLy8gZmlsZSB0aGF0IGhhcyBiZWVuIGNvbnZlcnRlZCB0byBhIENvbW1vbkpTIGZpbGUgdXNpbmcgYSBCYWJlbC1cbiAgLy8gY29tcGF0aWJsZSB0cmFuc2Zvcm0gKGkuZS4gXCJfX2VzTW9kdWxlXCIgaGFzIG5vdCBiZWVuIHNldCksIHRoZW4gc2V0XG4gIC8vIFwiZGVmYXVsdFwiIHRvIHRoZSBDb21tb25KUyBcIm1vZHVsZS5leHBvcnRzXCIgZm9yIG5vZGUgY29tcGF0aWJpbGl0eS5cbiAgaXNOb2RlTW9kZSB8fCAhbW9kIHx8ICFtb2QuX19lc01vZHVsZSA/IF9fZGVmUHJvcCh0YXJnZXQsIFwiZGVmYXVsdFwiLCB7IHZhbHVlOiBtb2QsIGVudW1lcmFibGU6IHRydWUgfSkgOiB0YXJnZXQsXG4gIG1vZFxuKSk7XG5cbi8vIG5vZGVfbW9kdWxlcy9jb2xvci1uYW1lL2luZGV4LmpzXG52YXIgcmVxdWlyZV9jb2xvcl9uYW1lID0gX19jb21tb25KUyh7XG4gIFwibm9kZV9tb2R1bGVzL2NvbG9yLW5hbWUvaW5kZXguanNcIihleHBvcnRzMiwgbW9kdWxlMikge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIG1vZHVsZTIuZXhwb3J0cyA9IHtcbiAgICAgIFwiYWxpY2VibHVlXCI6IFsyNDAsIDI0OCwgMjU1XSxcbiAgICAgIFwiYW50aXF1ZXdoaXRlXCI6IFsyNTAsIDIzNSwgMjE1XSxcbiAgICAgIFwiYXF1YVwiOiBbMCwgMjU1LCAyNTVdLFxuICAgICAgXCJhcXVhbWFyaW5lXCI6IFsxMjcsIDI1NSwgMjEyXSxcbiAgICAgIFwiYXp1cmVcIjogWzI0MCwgMjU1LCAyNTVdLFxuICAgICAgXCJiZWlnZVwiOiBbMjQ1LCAyNDUsIDIyMF0sXG4gICAgICBcImJpc3F1ZVwiOiBbMjU1LCAyMjgsIDE5Nl0sXG4gICAgICBcImJsYWNrXCI6IFswLCAwLCAwXSxcbiAgICAgIFwiYmxhbmNoZWRhbG1vbmRcIjogWzI1NSwgMjM1LCAyMDVdLFxuICAgICAgXCJibHVlXCI6IFswLCAwLCAyNTVdLFxuICAgICAgXCJibHVldmlvbGV0XCI6IFsxMzgsIDQzLCAyMjZdLFxuICAgICAgXCJicm93blwiOiBbMTY1LCA0MiwgNDJdLFxuICAgICAgXCJidXJseXdvb2RcIjogWzIyMiwgMTg0LCAxMzVdLFxuICAgICAgXCJjYWRldGJsdWVcIjogWzk1LCAxNTgsIDE2MF0sXG4gICAgICBcImNoYXJ0cmV1c2VcIjogWzEyNywgMjU1LCAwXSxcbiAgICAgIFwiY2hvY29sYXRlXCI6IFsyMTAsIDEwNSwgMzBdLFxuICAgICAgXCJjb3JhbFwiOiBbMjU1LCAxMjcsIDgwXSxcbiAgICAgIFwiY29ybmZsb3dlcmJsdWVcIjogWzEwMCwgMTQ5LCAyMzddLFxuICAgICAgXCJjb3Juc2lsa1wiOiBbMjU1LCAyNDgsIDIyMF0sXG4gICAgICBcImNyaW1zb25cIjogWzIyMCwgMjAsIDYwXSxcbiAgICAgIFwiY3lhblwiOiBbMCwgMjU1LCAyNTVdLFxuICAgICAgXCJkYXJrYmx1ZVwiOiBbMCwgMCwgMTM5XSxcbiAgICAgIFwiZGFya2N5YW5cIjogWzAsIDEzOSwgMTM5XSxcbiAgICAgIFwiZGFya2dvbGRlbnJvZFwiOiBbMTg0LCAxMzQsIDExXSxcbiAgICAgIFwiZGFya2dyYXlcIjogWzE2OSwgMTY5LCAxNjldLFxuICAgICAgXCJkYXJrZ3JlZW5cIjogWzAsIDEwMCwgMF0sXG4gICAgICBcImRhcmtncmV5XCI6IFsxNjksIDE2OSwgMTY5XSxcbiAgICAgIFwiZGFya2toYWtpXCI6IFsxODksIDE4MywgMTA3XSxcbiAgICAgIFwiZGFya21hZ2VudGFcIjogWzEzOSwgMCwgMTM5XSxcbiAgICAgIFwiZGFya29saXZlZ3JlZW5cIjogWzg1LCAxMDcsIDQ3XSxcbiAgICAgIFwiZGFya29yYW5nZVwiOiBbMjU1LCAxNDAsIDBdLFxuICAgICAgXCJkYXJrb3JjaGlkXCI6IFsxNTMsIDUwLCAyMDRdLFxuICAgICAgXCJkYXJrcmVkXCI6IFsxMzksIDAsIDBdLFxuICAgICAgXCJkYXJrc2FsbW9uXCI6IFsyMzMsIDE1MCwgMTIyXSxcbiAgICAgIFwiZGFya3NlYWdyZWVuXCI6IFsxNDMsIDE4OCwgMTQzXSxcbiAgICAgIFwiZGFya3NsYXRlYmx1ZVwiOiBbNzIsIDYxLCAxMzldLFxuICAgICAgXCJkYXJrc2xhdGVncmF5XCI6IFs0NywgNzksIDc5XSxcbiAgICAgIFwiZGFya3NsYXRlZ3JleVwiOiBbNDcsIDc5LCA3OV0sXG4gICAgICBcImRhcmt0dXJxdW9pc2VcIjogWzAsIDIwNiwgMjA5XSxcbiAgICAgIFwiZGFya3Zpb2xldFwiOiBbMTQ4LCAwLCAyMTFdLFxuICAgICAgXCJkZWVwcGlua1wiOiBbMjU1LCAyMCwgMTQ3XSxcbiAgICAgIFwiZGVlcHNreWJsdWVcIjogWzAsIDE5MSwgMjU1XSxcbiAgICAgIFwiZGltZ3JheVwiOiBbMTA1LCAxMDUsIDEwNV0sXG4gICAgICBcImRpbWdyZXlcIjogWzEwNSwgMTA1LCAxMDVdLFxuICAgICAgXCJkb2RnZXJibHVlXCI6IFszMCwgMTQ0LCAyNTVdLFxuICAgICAgXCJmaXJlYnJpY2tcIjogWzE3OCwgMzQsIDM0XSxcbiAgICAgIFwiZmxvcmFsd2hpdGVcIjogWzI1NSwgMjUwLCAyNDBdLFxuICAgICAgXCJmb3Jlc3RncmVlblwiOiBbMzQsIDEzOSwgMzRdLFxuICAgICAgXCJmdWNoc2lhXCI6IFsyNTUsIDAsIDI1NV0sXG4gICAgICBcImdhaW5zYm9yb1wiOiBbMjIwLCAyMjAsIDIyMF0sXG4gICAgICBcImdob3N0d2hpdGVcIjogWzI0OCwgMjQ4LCAyNTVdLFxuICAgICAgXCJnb2xkXCI6IFsyNTUsIDIxNSwgMF0sXG4gICAgICBcImdvbGRlbnJvZFwiOiBbMjE4LCAxNjUsIDMyXSxcbiAgICAgIFwiZ3JheVwiOiBbMTI4LCAxMjgsIDEyOF0sXG4gICAgICBcImdyZWVuXCI6IFswLCAxMjgsIDBdLFxuICAgICAgXCJncmVlbnllbGxvd1wiOiBbMTczLCAyNTUsIDQ3XSxcbiAgICAgIFwiZ3JleVwiOiBbMTI4LCAxMjgsIDEyOF0sXG4gICAgICBcImhvbmV5ZGV3XCI6IFsyNDAsIDI1NSwgMjQwXSxcbiAgICAgIFwiaG90cGlua1wiOiBbMjU1LCAxMDUsIDE4MF0sXG4gICAgICBcImluZGlhbnJlZFwiOiBbMjA1LCA5MiwgOTJdLFxuICAgICAgXCJpbmRpZ29cIjogWzc1LCAwLCAxMzBdLFxuICAgICAgXCJpdm9yeVwiOiBbMjU1LCAyNTUsIDI0MF0sXG4gICAgICBcImtoYWtpXCI6IFsyNDAsIDIzMCwgMTQwXSxcbiAgICAgIFwibGF2ZW5kZXJcIjogWzIzMCwgMjMwLCAyNTBdLFxuICAgICAgXCJsYXZlbmRlcmJsdXNoXCI6IFsyNTUsIDI0MCwgMjQ1XSxcbiAgICAgIFwibGF3bmdyZWVuXCI6IFsxMjQsIDI1MiwgMF0sXG4gICAgICBcImxlbW9uY2hpZmZvblwiOiBbMjU1LCAyNTAsIDIwNV0sXG4gICAgICBcImxpZ2h0Ymx1ZVwiOiBbMTczLCAyMTYsIDIzMF0sXG4gICAgICBcImxpZ2h0Y29yYWxcIjogWzI0MCwgMTI4LCAxMjhdLFxuICAgICAgXCJsaWdodGN5YW5cIjogWzIyNCwgMjU1LCAyNTVdLFxuICAgICAgXCJsaWdodGdvbGRlbnJvZHllbGxvd1wiOiBbMjUwLCAyNTAsIDIxMF0sXG4gICAgICBcImxpZ2h0Z3JheVwiOiBbMjExLCAyMTEsIDIxMV0sXG4gICAgICBcImxpZ2h0Z3JlZW5cIjogWzE0NCwgMjM4LCAxNDRdLFxuICAgICAgXCJsaWdodGdyZXlcIjogWzIxMSwgMjExLCAyMTFdLFxuICAgICAgXCJsaWdodHBpbmtcIjogWzI1NSwgMTgyLCAxOTNdLFxuICAgICAgXCJsaWdodHNhbG1vblwiOiBbMjU1LCAxNjAsIDEyMl0sXG4gICAgICBcImxpZ2h0c2VhZ3JlZW5cIjogWzMyLCAxNzgsIDE3MF0sXG4gICAgICBcImxpZ2h0c2t5Ymx1ZVwiOiBbMTM1LCAyMDYsIDI1MF0sXG4gICAgICBcImxpZ2h0c2xhdGVncmF5XCI6IFsxMTksIDEzNiwgMTUzXSxcbiAgICAgIFwibGlnaHRzbGF0ZWdyZXlcIjogWzExOSwgMTM2LCAxNTNdLFxuICAgICAgXCJsaWdodHN0ZWVsYmx1ZVwiOiBbMTc2LCAxOTYsIDIyMl0sXG4gICAgICBcImxpZ2h0eWVsbG93XCI6IFsyNTUsIDI1NSwgMjI0XSxcbiAgICAgIFwibGltZVwiOiBbMCwgMjU1LCAwXSxcbiAgICAgIFwibGltZWdyZWVuXCI6IFs1MCwgMjA1LCA1MF0sXG4gICAgICBcImxpbmVuXCI6IFsyNTAsIDI0MCwgMjMwXSxcbiAgICAgIFwibWFnZW50YVwiOiBbMjU1LCAwLCAyNTVdLFxuICAgICAgXCJtYXJvb25cIjogWzEyOCwgMCwgMF0sXG4gICAgICBcIm1lZGl1bWFxdWFtYXJpbmVcIjogWzEwMiwgMjA1LCAxNzBdLFxuICAgICAgXCJtZWRpdW1ibHVlXCI6IFswLCAwLCAyMDVdLFxuICAgICAgXCJtZWRpdW1vcmNoaWRcIjogWzE4NiwgODUsIDIxMV0sXG4gICAgICBcIm1lZGl1bXB1cnBsZVwiOiBbMTQ3LCAxMTIsIDIxOV0sXG4gICAgICBcIm1lZGl1bXNlYWdyZWVuXCI6IFs2MCwgMTc5LCAxMTNdLFxuICAgICAgXCJtZWRpdW1zbGF0ZWJsdWVcIjogWzEyMywgMTA0LCAyMzhdLFxuICAgICAgXCJtZWRpdW1zcHJpbmdncmVlblwiOiBbMCwgMjUwLCAxNTRdLFxuICAgICAgXCJtZWRpdW10dXJxdW9pc2VcIjogWzcyLCAyMDksIDIwNF0sXG4gICAgICBcIm1lZGl1bXZpb2xldHJlZFwiOiBbMTk5LCAyMSwgMTMzXSxcbiAgICAgIFwibWlkbmlnaHRibHVlXCI6IFsyNSwgMjUsIDExMl0sXG4gICAgICBcIm1pbnRjcmVhbVwiOiBbMjQ1LCAyNTUsIDI1MF0sXG4gICAgICBcIm1pc3R5cm9zZVwiOiBbMjU1LCAyMjgsIDIyNV0sXG4gICAgICBcIm1vY2Nhc2luXCI6IFsyNTUsIDIyOCwgMTgxXSxcbiAgICAgIFwibmF2YWpvd2hpdGVcIjogWzI1NSwgMjIyLCAxNzNdLFxuICAgICAgXCJuYXZ5XCI6IFswLCAwLCAxMjhdLFxuICAgICAgXCJvbGRsYWNlXCI6IFsyNTMsIDI0NSwgMjMwXSxcbiAgICAgIFwib2xpdmVcIjogWzEyOCwgMTI4LCAwXSxcbiAgICAgIFwib2xpdmVkcmFiXCI6IFsxMDcsIDE0MiwgMzVdLFxuICAgICAgXCJvcmFuZ2VcIjogWzI1NSwgMTY1LCAwXSxcbiAgICAgIFwib3JhbmdlcmVkXCI6IFsyNTUsIDY5LCAwXSxcbiAgICAgIFwib3JjaGlkXCI6IFsyMTgsIDExMiwgMjE0XSxcbiAgICAgIFwicGFsZWdvbGRlbnJvZFwiOiBbMjM4LCAyMzIsIDE3MF0sXG4gICAgICBcInBhbGVncmVlblwiOiBbMTUyLCAyNTEsIDE1Ml0sXG4gICAgICBcInBhbGV0dXJxdW9pc2VcIjogWzE3NSwgMjM4LCAyMzhdLFxuICAgICAgXCJwYWxldmlvbGV0cmVkXCI6IFsyMTksIDExMiwgMTQ3XSxcbiAgICAgIFwicGFwYXlhd2hpcFwiOiBbMjU1LCAyMzksIDIxM10sXG4gICAgICBcInBlYWNocHVmZlwiOiBbMjU1LCAyMTgsIDE4NV0sXG4gICAgICBcInBlcnVcIjogWzIwNSwgMTMzLCA2M10sXG4gICAgICBcInBpbmtcIjogWzI1NSwgMTkyLCAyMDNdLFxuICAgICAgXCJwbHVtXCI6IFsyMjEsIDE2MCwgMjIxXSxcbiAgICAgIFwicG93ZGVyYmx1ZVwiOiBbMTc2LCAyMjQsIDIzMF0sXG4gICAgICBcInB1cnBsZVwiOiBbMTI4LCAwLCAxMjhdLFxuICAgICAgXCJyZWJlY2NhcHVycGxlXCI6IFsxMDIsIDUxLCAxNTNdLFxuICAgICAgXCJyZWRcIjogWzI1NSwgMCwgMF0sXG4gICAgICBcInJvc3licm93blwiOiBbMTg4LCAxNDMsIDE0M10sXG4gICAgICBcInJveWFsYmx1ZVwiOiBbNjUsIDEwNSwgMjI1XSxcbiAgICAgIFwic2FkZGxlYnJvd25cIjogWzEzOSwgNjksIDE5XSxcbiAgICAgIFwic2FsbW9uXCI6IFsyNTAsIDEyOCwgMTE0XSxcbiAgICAgIFwic2FuZHlicm93blwiOiBbMjQ0LCAxNjQsIDk2XSxcbiAgICAgIFwic2VhZ3JlZW5cIjogWzQ2LCAxMzksIDg3XSxcbiAgICAgIFwic2Vhc2hlbGxcIjogWzI1NSwgMjQ1LCAyMzhdLFxuICAgICAgXCJzaWVubmFcIjogWzE2MCwgODIsIDQ1XSxcbiAgICAgIFwic2lsdmVyXCI6IFsxOTIsIDE5MiwgMTkyXSxcbiAgICAgIFwic2t5Ymx1ZVwiOiBbMTM1LCAyMDYsIDIzNV0sXG4gICAgICBcInNsYXRlYmx1ZVwiOiBbMTA2LCA5MCwgMjA1XSxcbiAgICAgIFwic2xhdGVncmF5XCI6IFsxMTIsIDEyOCwgMTQ0XSxcbiAgICAgIFwic2xhdGVncmV5XCI6IFsxMTIsIDEyOCwgMTQ0XSxcbiAgICAgIFwic25vd1wiOiBbMjU1LCAyNTAsIDI1MF0sXG4gICAgICBcInNwcmluZ2dyZWVuXCI6IFswLCAyNTUsIDEyN10sXG4gICAgICBcInN0ZWVsYmx1ZVwiOiBbNzAsIDEzMCwgMTgwXSxcbiAgICAgIFwidGFuXCI6IFsyMTAsIDE4MCwgMTQwXSxcbiAgICAgIFwidGVhbFwiOiBbMCwgMTI4LCAxMjhdLFxuICAgICAgXCJ0aGlzdGxlXCI6IFsyMTYsIDE5MSwgMjE2XSxcbiAgICAgIFwidG9tYXRvXCI6IFsyNTUsIDk5LCA3MV0sXG4gICAgICBcInR1cnF1b2lzZVwiOiBbNjQsIDIyNCwgMjA4XSxcbiAgICAgIFwidmlvbGV0XCI6IFsyMzgsIDEzMCwgMjM4XSxcbiAgICAgIFwid2hlYXRcIjogWzI0NSwgMjIyLCAxNzldLFxuICAgICAgXCJ3aGl0ZVwiOiBbMjU1LCAyNTUsIDI1NV0sXG4gICAgICBcIndoaXRlc21va2VcIjogWzI0NSwgMjQ1LCAyNDVdLFxuICAgICAgXCJ5ZWxsb3dcIjogWzI1NSwgMjU1LCAwXSxcbiAgICAgIFwieWVsbG93Z3JlZW5cIjogWzE1NCwgMjA1LCA1MF1cbiAgICB9O1xuICB9XG59KTtcblxuLy8gbm9kZV9tb2R1bGVzL2NvbG9yLWNvbnZlcnQvY29udmVyc2lvbnMuanNcbnZhciByZXF1aXJlX2NvbnZlcnNpb25zID0gX19jb21tb25KUyh7XG4gIFwibm9kZV9tb2R1bGVzL2NvbG9yLWNvbnZlcnQvY29udmVyc2lvbnMuanNcIihleHBvcnRzMiwgbW9kdWxlMikge1xuICAgIHZhciBjc3NLZXl3b3JkcyA9IHJlcXVpcmVfY29sb3JfbmFtZSgpO1xuICAgIHZhciByZXZlcnNlS2V5d29yZHMgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhjc3NLZXl3b3JkcykpIHtcbiAgICAgIHJldmVyc2VLZXl3b3Jkc1tjc3NLZXl3b3Jkc1trZXldXSA9IGtleTtcbiAgICB9XG4gICAgdmFyIGNvbnZlcnQgPSB7XG4gICAgICByZ2I6IHsgY2hhbm5lbHM6IDMsIGxhYmVsczogXCJyZ2JcIiB9LFxuICAgICAgaHNsOiB7IGNoYW5uZWxzOiAzLCBsYWJlbHM6IFwiaHNsXCIgfSxcbiAgICAgIGhzdjogeyBjaGFubmVsczogMywgbGFiZWxzOiBcImhzdlwiIH0sXG4gICAgICBod2I6IHsgY2hhbm5lbHM6IDMsIGxhYmVsczogXCJod2JcIiB9LFxuICAgICAgY215azogeyBjaGFubmVsczogNCwgbGFiZWxzOiBcImNteWtcIiB9LFxuICAgICAgeHl6OiB7IGNoYW5uZWxzOiAzLCBsYWJlbHM6IFwieHl6XCIgfSxcbiAgICAgIGxhYjogeyBjaGFubmVsczogMywgbGFiZWxzOiBcImxhYlwiIH0sXG4gICAgICBsY2g6IHsgY2hhbm5lbHM6IDMsIGxhYmVsczogXCJsY2hcIiB9LFxuICAgICAgaGV4OiB7IGNoYW5uZWxzOiAxLCBsYWJlbHM6IFtcImhleFwiXSB9LFxuICAgICAga2V5d29yZDogeyBjaGFubmVsczogMSwgbGFiZWxzOiBbXCJrZXl3b3JkXCJdIH0sXG4gICAgICBhbnNpMTY6IHsgY2hhbm5lbHM6IDEsIGxhYmVsczogW1wiYW5zaTE2XCJdIH0sXG4gICAgICBhbnNpMjU2OiB7IGNoYW5uZWxzOiAxLCBsYWJlbHM6IFtcImFuc2kyNTZcIl0gfSxcbiAgICAgIGhjZzogeyBjaGFubmVsczogMywgbGFiZWxzOiBbXCJoXCIsIFwiY1wiLCBcImdcIl0gfSxcbiAgICAgIGFwcGxlOiB7IGNoYW5uZWxzOiAzLCBsYWJlbHM6IFtcInIxNlwiLCBcImcxNlwiLCBcImIxNlwiXSB9LFxuICAgICAgZ3JheTogeyBjaGFubmVsczogMSwgbGFiZWxzOiBbXCJncmF5XCJdIH1cbiAgICB9O1xuICAgIG1vZHVsZTIuZXhwb3J0cyA9IGNvbnZlcnQ7XG4gICAgZm9yIChjb25zdCBtb2RlbCBvZiBPYmplY3Qua2V5cyhjb252ZXJ0KSkge1xuICAgICAgaWYgKCEoXCJjaGFubmVsc1wiIGluIGNvbnZlcnRbbW9kZWxdKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJtaXNzaW5nIGNoYW5uZWxzIHByb3BlcnR5OiBcIiArIG1vZGVsKTtcbiAgICAgIH1cbiAgICAgIGlmICghKFwibGFiZWxzXCIgaW4gY29udmVydFttb2RlbF0pKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIm1pc3NpbmcgY2hhbm5lbCBsYWJlbHMgcHJvcGVydHk6IFwiICsgbW9kZWwpO1xuICAgICAgfVxuICAgICAgaWYgKGNvbnZlcnRbbW9kZWxdLmxhYmVscy5sZW5ndGggIT09IGNvbnZlcnRbbW9kZWxdLmNoYW5uZWxzKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImNoYW5uZWwgYW5kIGxhYmVsIGNvdW50cyBtaXNtYXRjaDogXCIgKyBtb2RlbCk7XG4gICAgICB9XG4gICAgICBjb25zdCB7IGNoYW5uZWxzLCBsYWJlbHMgfSA9IGNvbnZlcnRbbW9kZWxdO1xuICAgICAgZGVsZXRlIGNvbnZlcnRbbW9kZWxdLmNoYW5uZWxzO1xuICAgICAgZGVsZXRlIGNvbnZlcnRbbW9kZWxdLmxhYmVscztcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb252ZXJ0W21vZGVsXSwgXCJjaGFubmVsc1wiLCB7IHZhbHVlOiBjaGFubmVscyB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb252ZXJ0W21vZGVsXSwgXCJsYWJlbHNcIiwgeyB2YWx1ZTogbGFiZWxzIH0pO1xuICAgIH1cbiAgICBjb252ZXJ0LnJnYi5oc2wgPSBmdW5jdGlvbihyZ2IpIHtcbiAgICAgIGNvbnN0IHIgPSByZ2JbMF0gLyAyNTU7XG4gICAgICBjb25zdCBnID0gcmdiWzFdIC8gMjU1O1xuICAgICAgY29uc3QgYiA9IHJnYlsyXSAvIDI1NTtcbiAgICAgIGNvbnN0IG1pbiA9IE1hdGgubWluKHIsIGcsIGIpO1xuICAgICAgY29uc3QgbWF4ID0gTWF0aC5tYXgociwgZywgYik7XG4gICAgICBjb25zdCBkZWx0YSA9IG1heCAtIG1pbjtcbiAgICAgIGxldCBoO1xuICAgICAgbGV0IHM7XG4gICAgICBpZiAobWF4ID09PSBtaW4pIHtcbiAgICAgICAgaCA9IDA7XG4gICAgICB9IGVsc2UgaWYgKHIgPT09IG1heCkge1xuICAgICAgICBoID0gKGcgLSBiKSAvIGRlbHRhO1xuICAgICAgfSBlbHNlIGlmIChnID09PSBtYXgpIHtcbiAgICAgICAgaCA9IDIgKyAoYiAtIHIpIC8gZGVsdGE7XG4gICAgICB9IGVsc2UgaWYgKGIgPT09IG1heCkge1xuICAgICAgICBoID0gNCArIChyIC0gZykgLyBkZWx0YTtcbiAgICAgIH1cbiAgICAgIGggPSBNYXRoLm1pbihoICogNjAsIDM2MCk7XG4gICAgICBpZiAoaCA8IDApIHtcbiAgICAgICAgaCArPSAzNjA7XG4gICAgICB9XG4gICAgICBjb25zdCBsID0gKG1pbiArIG1heCkgLyAyO1xuICAgICAgaWYgKG1heCA9PT0gbWluKSB7XG4gICAgICAgIHMgPSAwO1xuICAgICAgfSBlbHNlIGlmIChsIDw9IDAuNSkge1xuICAgICAgICBzID0gZGVsdGEgLyAobWF4ICsgbWluKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMgPSBkZWx0YSAvICgyIC0gbWF4IC0gbWluKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBbaCwgcyAqIDEwMCwgbCAqIDEwMF07XG4gICAgfTtcbiAgICBjb252ZXJ0LnJnYi5oc3YgPSBmdW5jdGlvbihyZ2IpIHtcbiAgICAgIGxldCByZGlmO1xuICAgICAgbGV0IGdkaWY7XG4gICAgICBsZXQgYmRpZjtcbiAgICAgIGxldCBoO1xuICAgICAgbGV0IHM7XG4gICAgICBjb25zdCByID0gcmdiWzBdIC8gMjU1O1xuICAgICAgY29uc3QgZyA9IHJnYlsxXSAvIDI1NTtcbiAgICAgIGNvbnN0IGIgPSByZ2JbMl0gLyAyNTU7XG4gICAgICBjb25zdCB2ID0gTWF0aC5tYXgociwgZywgYik7XG4gICAgICBjb25zdCBkaWZmID0gdiAtIE1hdGgubWluKHIsIGcsIGIpO1xuICAgICAgY29uc3QgZGlmZmMgPSBmdW5jdGlvbihjKSB7XG4gICAgICAgIHJldHVybiAodiAtIGMpIC8gNiAvIGRpZmYgKyAxIC8gMjtcbiAgICAgIH07XG4gICAgICBpZiAoZGlmZiA9PT0gMCkge1xuICAgICAgICBoID0gMDtcbiAgICAgICAgcyA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzID0gZGlmZiAvIHY7XG4gICAgICAgIHJkaWYgPSBkaWZmYyhyKTtcbiAgICAgICAgZ2RpZiA9IGRpZmZjKGcpO1xuICAgICAgICBiZGlmID0gZGlmZmMoYik7XG4gICAgICAgIGlmIChyID09PSB2KSB7XG4gICAgICAgICAgaCA9IGJkaWYgLSBnZGlmO1xuICAgICAgICB9IGVsc2UgaWYgKGcgPT09IHYpIHtcbiAgICAgICAgICBoID0gMSAvIDMgKyByZGlmIC0gYmRpZjtcbiAgICAgICAgfSBlbHNlIGlmIChiID09PSB2KSB7XG4gICAgICAgICAgaCA9IDIgLyAzICsgZ2RpZiAtIHJkaWY7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGggPCAwKSB7XG4gICAgICAgICAgaCArPSAxO1xuICAgICAgICB9IGVsc2UgaWYgKGggPiAxKSB7XG4gICAgICAgICAgaCAtPSAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gW1xuICAgICAgICBoICogMzYwLFxuICAgICAgICBzICogMTAwLFxuICAgICAgICB2ICogMTAwXG4gICAgICBdO1xuICAgIH07XG4gICAgY29udmVydC5yZ2IuaHdiID0gZnVuY3Rpb24ocmdiKSB7XG4gICAgICBjb25zdCByID0gcmdiWzBdO1xuICAgICAgY29uc3QgZyA9IHJnYlsxXTtcbiAgICAgIGxldCBiID0gcmdiWzJdO1xuICAgICAgY29uc3QgaCA9IGNvbnZlcnQucmdiLmhzbChyZ2IpWzBdO1xuICAgICAgY29uc3QgdyA9IDEgLyAyNTUgKiBNYXRoLm1pbihyLCBNYXRoLm1pbihnLCBiKSk7XG4gICAgICBiID0gMSAtIDEgLyAyNTUgKiBNYXRoLm1heChyLCBNYXRoLm1heChnLCBiKSk7XG4gICAgICByZXR1cm4gW2gsIHcgKiAxMDAsIGIgKiAxMDBdO1xuICAgIH07XG4gICAgY29udmVydC5yZ2IuY215ayA9IGZ1bmN0aW9uKHJnYikge1xuICAgICAgY29uc3QgciA9IHJnYlswXSAvIDI1NTtcbiAgICAgIGNvbnN0IGcgPSByZ2JbMV0gLyAyNTU7XG4gICAgICBjb25zdCBiID0gcmdiWzJdIC8gMjU1O1xuICAgICAgY29uc3QgayA9IE1hdGgubWluKDEgLSByLCAxIC0gZywgMSAtIGIpO1xuICAgICAgY29uc3QgYyA9ICgxIC0gciAtIGspIC8gKDEgLSBrKSB8fCAwO1xuICAgICAgY29uc3QgbSA9ICgxIC0gZyAtIGspIC8gKDEgLSBrKSB8fCAwO1xuICAgICAgY29uc3QgeSA9ICgxIC0gYiAtIGspIC8gKDEgLSBrKSB8fCAwO1xuICAgICAgcmV0dXJuIFtjICogMTAwLCBtICogMTAwLCB5ICogMTAwLCBrICogMTAwXTtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIGNvbXBhcmF0aXZlRGlzdGFuY2UoeCwgeSkge1xuICAgICAgcmV0dXJuICh4WzBdIC0geVswXSkgKiogMiArICh4WzFdIC0geVsxXSkgKiogMiArICh4WzJdIC0geVsyXSkgKiogMjtcbiAgICB9XG4gICAgY29udmVydC5yZ2Iua2V5d29yZCA9IGZ1bmN0aW9uKHJnYikge1xuICAgICAgY29uc3QgcmV2ZXJzZWQgPSByZXZlcnNlS2V5d29yZHNbcmdiXTtcbiAgICAgIGlmIChyZXZlcnNlZCkge1xuICAgICAgICByZXR1cm4gcmV2ZXJzZWQ7XG4gICAgICB9XG4gICAgICBsZXQgY3VycmVudENsb3Nlc3REaXN0YW5jZSA9IEluZmluaXR5O1xuICAgICAgbGV0IGN1cnJlbnRDbG9zZXN0S2V5d29yZDtcbiAgICAgIGZvciAoY29uc3Qga2V5d29yZCBvZiBPYmplY3Qua2V5cyhjc3NLZXl3b3JkcykpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBjc3NLZXl3b3Jkc1trZXl3b3JkXTtcbiAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBjb21wYXJhdGl2ZURpc3RhbmNlKHJnYiwgdmFsdWUpO1xuICAgICAgICBpZiAoZGlzdGFuY2UgPCBjdXJyZW50Q2xvc2VzdERpc3RhbmNlKSB7XG4gICAgICAgICAgY3VycmVudENsb3Nlc3REaXN0YW5jZSA9IGRpc3RhbmNlO1xuICAgICAgICAgIGN1cnJlbnRDbG9zZXN0S2V5d29yZCA9IGtleXdvcmQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBjdXJyZW50Q2xvc2VzdEtleXdvcmQ7XG4gICAgfTtcbiAgICBjb252ZXJ0LmtleXdvcmQucmdiID0gZnVuY3Rpb24oa2V5d29yZCkge1xuICAgICAgcmV0dXJuIGNzc0tleXdvcmRzW2tleXdvcmRdO1xuICAgIH07XG4gICAgY29udmVydC5yZ2IueHl6ID0gZnVuY3Rpb24ocmdiKSB7XG4gICAgICBsZXQgciA9IHJnYlswXSAvIDI1NTtcbiAgICAgIGxldCBnID0gcmdiWzFdIC8gMjU1O1xuICAgICAgbGV0IGIgPSByZ2JbMl0gLyAyNTU7XG4gICAgICByID0gciA+IDAuMDQwNDUgPyAoKHIgKyAwLjA1NSkgLyAxLjA1NSkgKiogMi40IDogciAvIDEyLjkyO1xuICAgICAgZyA9IGcgPiAwLjA0MDQ1ID8gKChnICsgMC4wNTUpIC8gMS4wNTUpICoqIDIuNCA6IGcgLyAxMi45MjtcbiAgICAgIGIgPSBiID4gMC4wNDA0NSA/ICgoYiArIDAuMDU1KSAvIDEuMDU1KSAqKiAyLjQgOiBiIC8gMTIuOTI7XG4gICAgICBjb25zdCB4ID0gciAqIDAuNDEyNCArIGcgKiAwLjM1NzYgKyBiICogMC4xODA1O1xuICAgICAgY29uc3QgeSA9IHIgKiAwLjIxMjYgKyBnICogMC43MTUyICsgYiAqIDAuMDcyMjtcbiAgICAgIGNvbnN0IHogPSByICogMC4wMTkzICsgZyAqIDAuMTE5MiArIGIgKiAwLjk1MDU7XG4gICAgICByZXR1cm4gW3ggKiAxMDAsIHkgKiAxMDAsIHogKiAxMDBdO1xuICAgIH07XG4gICAgY29udmVydC5yZ2IubGFiID0gZnVuY3Rpb24ocmdiKSB7XG4gICAgICBjb25zdCB4eXogPSBjb252ZXJ0LnJnYi54eXoocmdiKTtcbiAgICAgIGxldCB4ID0geHl6WzBdO1xuICAgICAgbGV0IHkgPSB4eXpbMV07XG4gICAgICBsZXQgeiA9IHh5elsyXTtcbiAgICAgIHggLz0gOTUuMDQ3O1xuICAgICAgeSAvPSAxMDA7XG4gICAgICB6IC89IDEwOC44ODM7XG4gICAgICB4ID0geCA+IDg4NTZlLTYgPyB4ICoqICgxIC8gMykgOiA3Ljc4NyAqIHggKyAxNiAvIDExNjtcbiAgICAgIHkgPSB5ID4gODg1NmUtNiA/IHkgKiogKDEgLyAzKSA6IDcuNzg3ICogeSArIDE2IC8gMTE2O1xuICAgICAgeiA9IHogPiA4ODU2ZS02ID8geiAqKiAoMSAvIDMpIDogNy43ODcgKiB6ICsgMTYgLyAxMTY7XG4gICAgICBjb25zdCBsID0gMTE2ICogeSAtIDE2O1xuICAgICAgY29uc3QgYSA9IDUwMCAqICh4IC0geSk7XG4gICAgICBjb25zdCBiID0gMjAwICogKHkgLSB6KTtcbiAgICAgIHJldHVybiBbbCwgYSwgYl07XG4gICAgfTtcbiAgICBjb252ZXJ0LmhzbC5yZ2IgPSBmdW5jdGlvbihoc2wpIHtcbiAgICAgIGNvbnN0IGggPSBoc2xbMF0gLyAzNjA7XG4gICAgICBjb25zdCBzID0gaHNsWzFdIC8gMTAwO1xuICAgICAgY29uc3QgbCA9IGhzbFsyXSAvIDEwMDtcbiAgICAgIGxldCB0MjtcbiAgICAgIGxldCB0MztcbiAgICAgIGxldCB2YWw7XG4gICAgICBpZiAocyA9PT0gMCkge1xuICAgICAgICB2YWwgPSBsICogMjU1O1xuICAgICAgICByZXR1cm4gW3ZhbCwgdmFsLCB2YWxdO1xuICAgICAgfVxuICAgICAgaWYgKGwgPCAwLjUpIHtcbiAgICAgICAgdDIgPSBsICogKDEgKyBzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHQyID0gbCArIHMgLSBsICogcztcbiAgICAgIH1cbiAgICAgIGNvbnN0IHQxID0gMiAqIGwgLSB0MjtcbiAgICAgIGNvbnN0IHJnYiA9IFswLCAwLCAwXTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSsrKSB7XG4gICAgICAgIHQzID0gaCArIDEgLyAzICogLShpIC0gMSk7XG4gICAgICAgIGlmICh0MyA8IDApIHtcbiAgICAgICAgICB0MysrO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0MyA+IDEpIHtcbiAgICAgICAgICB0My0tO1xuICAgICAgICB9XG4gICAgICAgIGlmICg2ICogdDMgPCAxKSB7XG4gICAgICAgICAgdmFsID0gdDEgKyAodDIgLSB0MSkgKiA2ICogdDM7XG4gICAgICAgIH0gZWxzZSBpZiAoMiAqIHQzIDwgMSkge1xuICAgICAgICAgIHZhbCA9IHQyO1xuICAgICAgICB9IGVsc2UgaWYgKDMgKiB0MyA8IDIpIHtcbiAgICAgICAgICB2YWwgPSB0MSArICh0MiAtIHQxKSAqICgyIC8gMyAtIHQzKSAqIDY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsID0gdDE7XG4gICAgICAgIH1cbiAgICAgICAgcmdiW2ldID0gdmFsICogMjU1O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJnYjtcbiAgICB9O1xuICAgIGNvbnZlcnQuaHNsLmhzdiA9IGZ1bmN0aW9uKGhzbCkge1xuICAgICAgY29uc3QgaCA9IGhzbFswXTtcbiAgICAgIGxldCBzID0gaHNsWzFdIC8gMTAwO1xuICAgICAgbGV0IGwgPSBoc2xbMl0gLyAxMDA7XG4gICAgICBsZXQgc21pbiA9IHM7XG4gICAgICBjb25zdCBsbWluID0gTWF0aC5tYXgobCwgMC4wMSk7XG4gICAgICBsICo9IDI7XG4gICAgICBzICo9IGwgPD0gMSA/IGwgOiAyIC0gbDtcbiAgICAgIHNtaW4gKj0gbG1pbiA8PSAxID8gbG1pbiA6IDIgLSBsbWluO1xuICAgICAgY29uc3QgdiA9IChsICsgcykgLyAyO1xuICAgICAgY29uc3Qgc3YgPSBsID09PSAwID8gMiAqIHNtaW4gLyAobG1pbiArIHNtaW4pIDogMiAqIHMgLyAobCArIHMpO1xuICAgICAgcmV0dXJuIFtoLCBzdiAqIDEwMCwgdiAqIDEwMF07XG4gICAgfTtcbiAgICBjb252ZXJ0Lmhzdi5yZ2IgPSBmdW5jdGlvbihoc3YpIHtcbiAgICAgIGNvbnN0IGggPSBoc3ZbMF0gLyA2MDtcbiAgICAgIGNvbnN0IHMgPSBoc3ZbMV0gLyAxMDA7XG4gICAgICBsZXQgdiA9IGhzdlsyXSAvIDEwMDtcbiAgICAgIGNvbnN0IGhpID0gTWF0aC5mbG9vcihoKSAlIDY7XG4gICAgICBjb25zdCBmID0gaCAtIE1hdGguZmxvb3IoaCk7XG4gICAgICBjb25zdCBwID0gMjU1ICogdiAqICgxIC0gcyk7XG4gICAgICBjb25zdCBxID0gMjU1ICogdiAqICgxIC0gcyAqIGYpO1xuICAgICAgY29uc3QgdCA9IDI1NSAqIHYgKiAoMSAtIHMgKiAoMSAtIGYpKTtcbiAgICAgIHYgKj0gMjU1O1xuICAgICAgc3dpdGNoIChoaSkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgcmV0dXJuIFt2LCB0LCBwXTtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIHJldHVybiBbcSwgdiwgcF07XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICByZXR1cm4gW3AsIHYsIHRdO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgcmV0dXJuIFtwLCBxLCB2XTtcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIHJldHVybiBbdCwgcCwgdl07XG4gICAgICAgIGNhc2UgNTpcbiAgICAgICAgICByZXR1cm4gW3YsIHAsIHFdO1xuICAgICAgfVxuICAgIH07XG4gICAgY29udmVydC5oc3YuaHNsID0gZnVuY3Rpb24oaHN2KSB7XG4gICAgICBjb25zdCBoID0gaHN2WzBdO1xuICAgICAgY29uc3QgcyA9IGhzdlsxXSAvIDEwMDtcbiAgICAgIGNvbnN0IHYgPSBoc3ZbMl0gLyAxMDA7XG4gICAgICBjb25zdCB2bWluID0gTWF0aC5tYXgodiwgMC4wMSk7XG4gICAgICBsZXQgc2w7XG4gICAgICBsZXQgbDtcbiAgICAgIGwgPSAoMiAtIHMpICogdjtcbiAgICAgIGNvbnN0IGxtaW4gPSAoMiAtIHMpICogdm1pbjtcbiAgICAgIHNsID0gcyAqIHZtaW47XG4gICAgICBzbCAvPSBsbWluIDw9IDEgPyBsbWluIDogMiAtIGxtaW47XG4gICAgICBzbCA9IHNsIHx8IDA7XG4gICAgICBsIC89IDI7XG4gICAgICByZXR1cm4gW2gsIHNsICogMTAwLCBsICogMTAwXTtcbiAgICB9O1xuICAgIGNvbnZlcnQuaHdiLnJnYiA9IGZ1bmN0aW9uKGh3Yikge1xuICAgICAgY29uc3QgaCA9IGh3YlswXSAvIDM2MDtcbiAgICAgIGxldCB3aCA9IGh3YlsxXSAvIDEwMDtcbiAgICAgIGxldCBibCA9IGh3YlsyXSAvIDEwMDtcbiAgICAgIGNvbnN0IHJhdGlvID0gd2ggKyBibDtcbiAgICAgIGxldCBmO1xuICAgICAgaWYgKHJhdGlvID4gMSkge1xuICAgICAgICB3aCAvPSByYXRpbztcbiAgICAgICAgYmwgLz0gcmF0aW87XG4gICAgICB9XG4gICAgICBjb25zdCBpID0gTWF0aC5mbG9vcig2ICogaCk7XG4gICAgICBjb25zdCB2ID0gMSAtIGJsO1xuICAgICAgZiA9IDYgKiBoIC0gaTtcbiAgICAgIGlmICgoaSAmIDEpICE9PSAwKSB7XG4gICAgICAgIGYgPSAxIC0gZjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG4gPSB3aCArIGYgKiAodiAtIHdoKTtcbiAgICAgIGxldCByO1xuICAgICAgbGV0IGc7XG4gICAgICBsZXQgYjtcbiAgICAgIHN3aXRjaCAoaSkge1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICBjYXNlIDY6XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICByID0gdjtcbiAgICAgICAgICBnID0gbjtcbiAgICAgICAgICBiID0gd2g7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICByID0gbjtcbiAgICAgICAgICBnID0gdjtcbiAgICAgICAgICBiID0gd2g7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICByID0gd2g7XG4gICAgICAgICAgZyA9IHY7XG4gICAgICAgICAgYiA9IG47XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICByID0gd2g7XG4gICAgICAgICAgZyA9IG47XG4gICAgICAgICAgYiA9IHY7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICByID0gbjtcbiAgICAgICAgICBnID0gd2g7XG4gICAgICAgICAgYiA9IHY7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNTpcbiAgICAgICAgICByID0gdjtcbiAgICAgICAgICBnID0gd2g7XG4gICAgICAgICAgYiA9IG47XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICByZXR1cm4gW3IgKiAyNTUsIGcgKiAyNTUsIGIgKiAyNTVdO1xuICAgIH07XG4gICAgY29udmVydC5jbXlrLnJnYiA9IGZ1bmN0aW9uKGNteWspIHtcbiAgICAgIGNvbnN0IGMgPSBjbXlrWzBdIC8gMTAwO1xuICAgICAgY29uc3QgbSA9IGNteWtbMV0gLyAxMDA7XG4gICAgICBjb25zdCB5ID0gY215a1syXSAvIDEwMDtcbiAgICAgIGNvbnN0IGsgPSBjbXlrWzNdIC8gMTAwO1xuICAgICAgY29uc3QgciA9IDEgLSBNYXRoLm1pbigxLCBjICogKDEgLSBrKSArIGspO1xuICAgICAgY29uc3QgZyA9IDEgLSBNYXRoLm1pbigxLCBtICogKDEgLSBrKSArIGspO1xuICAgICAgY29uc3QgYiA9IDEgLSBNYXRoLm1pbigxLCB5ICogKDEgLSBrKSArIGspO1xuICAgICAgcmV0dXJuIFtyICogMjU1LCBnICogMjU1LCBiICogMjU1XTtcbiAgICB9O1xuICAgIGNvbnZlcnQueHl6LnJnYiA9IGZ1bmN0aW9uKHh5eikge1xuICAgICAgY29uc3QgeCA9IHh5elswXSAvIDEwMDtcbiAgICAgIGNvbnN0IHkgPSB4eXpbMV0gLyAxMDA7XG4gICAgICBjb25zdCB6ID0geHl6WzJdIC8gMTAwO1xuICAgICAgbGV0IHI7XG4gICAgICBsZXQgZztcbiAgICAgIGxldCBiO1xuICAgICAgciA9IHggKiAzLjI0MDYgKyB5ICogLTEuNTM3MiArIHogKiAtMC40OTg2O1xuICAgICAgZyA9IHggKiAtMC45Njg5ICsgeSAqIDEuODc1OCArIHogKiAwLjA0MTU7XG4gICAgICBiID0geCAqIDAuMDU1NyArIHkgKiAtMC4yMDQgKyB6ICogMS4wNTc7XG4gICAgICByID0gciA+IDMxMzA4ZS03ID8gMS4wNTUgKiByICoqICgxIC8gMi40KSAtIDAuMDU1IDogciAqIDEyLjkyO1xuICAgICAgZyA9IGcgPiAzMTMwOGUtNyA/IDEuMDU1ICogZyAqKiAoMSAvIDIuNCkgLSAwLjA1NSA6IGcgKiAxMi45MjtcbiAgICAgIGIgPSBiID4gMzEzMDhlLTcgPyAxLjA1NSAqIGIgKiogKDEgLyAyLjQpIC0gMC4wNTUgOiBiICogMTIuOTI7XG4gICAgICByID0gTWF0aC5taW4oTWF0aC5tYXgoMCwgciksIDEpO1xuICAgICAgZyA9IE1hdGgubWluKE1hdGgubWF4KDAsIGcpLCAxKTtcbiAgICAgIGIgPSBNYXRoLm1pbihNYXRoLm1heCgwLCBiKSwgMSk7XG4gICAgICByZXR1cm4gW3IgKiAyNTUsIGcgKiAyNTUsIGIgKiAyNTVdO1xuICAgIH07XG4gICAgY29udmVydC54eXoubGFiID0gZnVuY3Rpb24oeHl6KSB7XG4gICAgICBsZXQgeCA9IHh5elswXTtcbiAgICAgIGxldCB5ID0geHl6WzFdO1xuICAgICAgbGV0IHogPSB4eXpbMl07XG4gICAgICB4IC89IDk1LjA0NztcbiAgICAgIHkgLz0gMTAwO1xuICAgICAgeiAvPSAxMDguODgzO1xuICAgICAgeCA9IHggPiA4ODU2ZS02ID8geCAqKiAoMSAvIDMpIDogNy43ODcgKiB4ICsgMTYgLyAxMTY7XG4gICAgICB5ID0geSA+IDg4NTZlLTYgPyB5ICoqICgxIC8gMykgOiA3Ljc4NyAqIHkgKyAxNiAvIDExNjtcbiAgICAgIHogPSB6ID4gODg1NmUtNiA/IHogKiogKDEgLyAzKSA6IDcuNzg3ICogeiArIDE2IC8gMTE2O1xuICAgICAgY29uc3QgbCA9IDExNiAqIHkgLSAxNjtcbiAgICAgIGNvbnN0IGEgPSA1MDAgKiAoeCAtIHkpO1xuICAgICAgY29uc3QgYiA9IDIwMCAqICh5IC0geik7XG4gICAgICByZXR1cm4gW2wsIGEsIGJdO1xuICAgIH07XG4gICAgY29udmVydC5sYWIueHl6ID0gZnVuY3Rpb24obGFiKSB7XG4gICAgICBjb25zdCBsID0gbGFiWzBdO1xuICAgICAgY29uc3QgYSA9IGxhYlsxXTtcbiAgICAgIGNvbnN0IGIgPSBsYWJbMl07XG4gICAgICBsZXQgeDtcbiAgICAgIGxldCB5O1xuICAgICAgbGV0IHo7XG4gICAgICB5ID0gKGwgKyAxNikgLyAxMTY7XG4gICAgICB4ID0gYSAvIDUwMCArIHk7XG4gICAgICB6ID0geSAtIGIgLyAyMDA7XG4gICAgICBjb25zdCB5MiA9IHkgKiogMztcbiAgICAgIGNvbnN0IHgyID0geCAqKiAzO1xuICAgICAgY29uc3QgejIgPSB6ICoqIDM7XG4gICAgICB5ID0geTIgPiA4ODU2ZS02ID8geTIgOiAoeSAtIDE2IC8gMTE2KSAvIDcuNzg3O1xuICAgICAgeCA9IHgyID4gODg1NmUtNiA/IHgyIDogKHggLSAxNiAvIDExNikgLyA3Ljc4NztcbiAgICAgIHogPSB6MiA+IDg4NTZlLTYgPyB6MiA6ICh6IC0gMTYgLyAxMTYpIC8gNy43ODc7XG4gICAgICB4ICo9IDk1LjA0NztcbiAgICAgIHkgKj0gMTAwO1xuICAgICAgeiAqPSAxMDguODgzO1xuICAgICAgcmV0dXJuIFt4LCB5LCB6XTtcbiAgICB9O1xuICAgIGNvbnZlcnQubGFiLmxjaCA9IGZ1bmN0aW9uKGxhYikge1xuICAgICAgY29uc3QgbCA9IGxhYlswXTtcbiAgICAgIGNvbnN0IGEgPSBsYWJbMV07XG4gICAgICBjb25zdCBiID0gbGFiWzJdO1xuICAgICAgbGV0IGg7XG4gICAgICBjb25zdCBociA9IE1hdGguYXRhbjIoYiwgYSk7XG4gICAgICBoID0gaHIgKiAzNjAgLyAyIC8gTWF0aC5QSTtcbiAgICAgIGlmIChoIDwgMCkge1xuICAgICAgICBoICs9IDM2MDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGMgPSBNYXRoLnNxcnQoYSAqIGEgKyBiICogYik7XG4gICAgICByZXR1cm4gW2wsIGMsIGhdO1xuICAgIH07XG4gICAgY29udmVydC5sY2gubGFiID0gZnVuY3Rpb24obGNoKSB7XG4gICAgICBjb25zdCBsID0gbGNoWzBdO1xuICAgICAgY29uc3QgYyA9IGxjaFsxXTtcbiAgICAgIGNvbnN0IGggPSBsY2hbMl07XG4gICAgICBjb25zdCBociA9IGggLyAzNjAgKiAyICogTWF0aC5QSTtcbiAgICAgIGNvbnN0IGEgPSBjICogTWF0aC5jb3MoaHIpO1xuICAgICAgY29uc3QgYiA9IGMgKiBNYXRoLnNpbihocik7XG4gICAgICByZXR1cm4gW2wsIGEsIGJdO1xuICAgIH07XG4gICAgY29udmVydC5yZ2IuYW5zaTE2ID0gZnVuY3Rpb24oYXJncywgc2F0dXJhdGlvbiA9IG51bGwpIHtcbiAgICAgIGNvbnN0IFtyLCBnLCBiXSA9IGFyZ3M7XG4gICAgICBsZXQgdmFsdWUgPSBzYXR1cmF0aW9uID09PSBudWxsID8gY29udmVydC5yZ2IuaHN2KGFyZ3MpWzJdIDogc2F0dXJhdGlvbjtcbiAgICAgIHZhbHVlID0gTWF0aC5yb3VuZCh2YWx1ZSAvIDUwKTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gMzA7XG4gICAgICB9XG4gICAgICBsZXQgYW5zaSA9IDMwICsgKE1hdGgucm91bmQoYiAvIDI1NSkgPDwgMiB8IE1hdGgucm91bmQoZyAvIDI1NSkgPDwgMSB8IE1hdGgucm91bmQociAvIDI1NSkpO1xuICAgICAgaWYgKHZhbHVlID09PSAyKSB7XG4gICAgICAgIGFuc2kgKz0gNjA7XG4gICAgICB9XG4gICAgICByZXR1cm4gYW5zaTtcbiAgICB9O1xuICAgIGNvbnZlcnQuaHN2LmFuc2kxNiA9IGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgIHJldHVybiBjb252ZXJ0LnJnYi5hbnNpMTYoY29udmVydC5oc3YucmdiKGFyZ3MpLCBhcmdzWzJdKTtcbiAgICB9O1xuICAgIGNvbnZlcnQucmdiLmFuc2kyNTYgPSBmdW5jdGlvbihhcmdzKSB7XG4gICAgICBjb25zdCByID0gYXJnc1swXTtcbiAgICAgIGNvbnN0IGcgPSBhcmdzWzFdO1xuICAgICAgY29uc3QgYiA9IGFyZ3NbMl07XG4gICAgICBpZiAociA9PT0gZyAmJiBnID09PSBiKSB7XG4gICAgICAgIGlmIChyIDwgOCkge1xuICAgICAgICAgIHJldHVybiAxNjtcbiAgICAgICAgfVxuICAgICAgICBpZiAociA+IDI0OCkge1xuICAgICAgICAgIHJldHVybiAyMzE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoKHIgLSA4KSAvIDI0NyAqIDI0KSArIDIzMjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGFuc2kgPSAxNiArIDM2ICogTWF0aC5yb3VuZChyIC8gMjU1ICogNSkgKyA2ICogTWF0aC5yb3VuZChnIC8gMjU1ICogNSkgKyBNYXRoLnJvdW5kKGIgLyAyNTUgKiA1KTtcbiAgICAgIHJldHVybiBhbnNpO1xuICAgIH07XG4gICAgY29udmVydC5hbnNpMTYucmdiID0gZnVuY3Rpb24oYXJncykge1xuICAgICAgbGV0IGNvbG9yID0gYXJncyAlIDEwO1xuICAgICAgaWYgKGNvbG9yID09PSAwIHx8IGNvbG9yID09PSA3KSB7XG4gICAgICAgIGlmIChhcmdzID4gNTApIHtcbiAgICAgICAgICBjb2xvciArPSAzLjU7XG4gICAgICAgIH1cbiAgICAgICAgY29sb3IgPSBjb2xvciAvIDEwLjUgKiAyNTU7XG4gICAgICAgIHJldHVybiBbY29sb3IsIGNvbG9yLCBjb2xvcl07XG4gICAgICB9XG4gICAgICBjb25zdCBtdWx0ID0gKH5+KGFyZ3MgPiA1MCkgKyAxKSAqIDAuNTtcbiAgICAgIGNvbnN0IHIgPSAoY29sb3IgJiAxKSAqIG11bHQgKiAyNTU7XG4gICAgICBjb25zdCBnID0gKGNvbG9yID4+IDEgJiAxKSAqIG11bHQgKiAyNTU7XG4gICAgICBjb25zdCBiID0gKGNvbG9yID4+IDIgJiAxKSAqIG11bHQgKiAyNTU7XG4gICAgICByZXR1cm4gW3IsIGcsIGJdO1xuICAgIH07XG4gICAgY29udmVydC5hbnNpMjU2LnJnYiA9IGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgIGlmIChhcmdzID49IDIzMikge1xuICAgICAgICBjb25zdCBjID0gKGFyZ3MgLSAyMzIpICogMTAgKyA4O1xuICAgICAgICByZXR1cm4gW2MsIGMsIGNdO1xuICAgICAgfVxuICAgICAgYXJncyAtPSAxNjtcbiAgICAgIGxldCByZW07XG4gICAgICBjb25zdCByID0gTWF0aC5mbG9vcihhcmdzIC8gMzYpIC8gNSAqIDI1NTtcbiAgICAgIGNvbnN0IGcgPSBNYXRoLmZsb29yKChyZW0gPSBhcmdzICUgMzYpIC8gNikgLyA1ICogMjU1O1xuICAgICAgY29uc3QgYiA9IHJlbSAlIDYgLyA1ICogMjU1O1xuICAgICAgcmV0dXJuIFtyLCBnLCBiXTtcbiAgICB9O1xuICAgIGNvbnZlcnQucmdiLmhleCA9IGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgIGNvbnN0IGludGVnZXIgPSAoKE1hdGgucm91bmQoYXJnc1swXSkgJiAyNTUpIDw8IDE2KSArICgoTWF0aC5yb3VuZChhcmdzWzFdKSAmIDI1NSkgPDwgOCkgKyAoTWF0aC5yb3VuZChhcmdzWzJdKSAmIDI1NSk7XG4gICAgICBjb25zdCBzdHJpbmcgPSBpbnRlZ2VyLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO1xuICAgICAgcmV0dXJuIFwiMDAwMDAwXCIuc3Vic3RyaW5nKHN0cmluZy5sZW5ndGgpICsgc3RyaW5nO1xuICAgIH07XG4gICAgY29udmVydC5oZXgucmdiID0gZnVuY3Rpb24oYXJncykge1xuICAgICAgY29uc3QgbWF0Y2ggPSBhcmdzLnRvU3RyaW5nKDE2KS5tYXRjaCgvW2EtZjAtOV17Nn18W2EtZjAtOV17M30vaSk7XG4gICAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgIHJldHVybiBbMCwgMCwgMF07XG4gICAgICB9XG4gICAgICBsZXQgY29sb3JTdHJpbmcgPSBtYXRjaFswXTtcbiAgICAgIGlmIChtYXRjaFswXS5sZW5ndGggPT09IDMpIHtcbiAgICAgICAgY29sb3JTdHJpbmcgPSBjb2xvclN0cmluZy5zcGxpdChcIlwiKS5tYXAoKGNoYXIpID0+IHtcbiAgICAgICAgICByZXR1cm4gY2hhciArIGNoYXI7XG4gICAgICAgIH0pLmpvaW4oXCJcIik7XG4gICAgICB9XG4gICAgICBjb25zdCBpbnRlZ2VyID0gcGFyc2VJbnQoY29sb3JTdHJpbmcsIDE2KTtcbiAgICAgIGNvbnN0IHIgPSBpbnRlZ2VyID4+IDE2ICYgMjU1O1xuICAgICAgY29uc3QgZyA9IGludGVnZXIgPj4gOCAmIDI1NTtcbiAgICAgIGNvbnN0IGIgPSBpbnRlZ2VyICYgMjU1O1xuICAgICAgcmV0dXJuIFtyLCBnLCBiXTtcbiAgICB9O1xuICAgIGNvbnZlcnQucmdiLmhjZyA9IGZ1bmN0aW9uKHJnYikge1xuICAgICAgY29uc3QgciA9IHJnYlswXSAvIDI1NTtcbiAgICAgIGNvbnN0IGcgPSByZ2JbMV0gLyAyNTU7XG4gICAgICBjb25zdCBiID0gcmdiWzJdIC8gMjU1O1xuICAgICAgY29uc3QgbWF4ID0gTWF0aC5tYXgoTWF0aC5tYXgociwgZyksIGIpO1xuICAgICAgY29uc3QgbWluID0gTWF0aC5taW4oTWF0aC5taW4ociwgZyksIGIpO1xuICAgICAgY29uc3QgY2hyb21hID0gbWF4IC0gbWluO1xuICAgICAgbGV0IGdyYXlzY2FsZTtcbiAgICAgIGxldCBodWU7XG4gICAgICBpZiAoY2hyb21hIDwgMSkge1xuICAgICAgICBncmF5c2NhbGUgPSBtaW4gLyAoMSAtIGNocm9tYSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBncmF5c2NhbGUgPSAwO1xuICAgICAgfVxuICAgICAgaWYgKGNocm9tYSA8PSAwKSB7XG4gICAgICAgIGh1ZSA9IDA7XG4gICAgICB9IGVsc2UgaWYgKG1heCA9PT0gcikge1xuICAgICAgICBodWUgPSAoZyAtIGIpIC8gY2hyb21hICUgNjtcbiAgICAgIH0gZWxzZSBpZiAobWF4ID09PSBnKSB7XG4gICAgICAgIGh1ZSA9IDIgKyAoYiAtIHIpIC8gY2hyb21hO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaHVlID0gNCArIChyIC0gZykgLyBjaHJvbWE7XG4gICAgICB9XG4gICAgICBodWUgLz0gNjtcbiAgICAgIGh1ZSAlPSAxO1xuICAgICAgcmV0dXJuIFtodWUgKiAzNjAsIGNocm9tYSAqIDEwMCwgZ3JheXNjYWxlICogMTAwXTtcbiAgICB9O1xuICAgIGNvbnZlcnQuaHNsLmhjZyA9IGZ1bmN0aW9uKGhzbCkge1xuICAgICAgY29uc3QgcyA9IGhzbFsxXSAvIDEwMDtcbiAgICAgIGNvbnN0IGwgPSBoc2xbMl0gLyAxMDA7XG4gICAgICBjb25zdCBjID0gbCA8IDAuNSA/IDIgKiBzICogbCA6IDIgKiBzICogKDEgLSBsKTtcbiAgICAgIGxldCBmID0gMDtcbiAgICAgIGlmIChjIDwgMSkge1xuICAgICAgICBmID0gKGwgLSAwLjUgKiBjKSAvICgxIC0gYyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gW2hzbFswXSwgYyAqIDEwMCwgZiAqIDEwMF07XG4gICAgfTtcbiAgICBjb252ZXJ0Lmhzdi5oY2cgPSBmdW5jdGlvbihoc3YpIHtcbiAgICAgIGNvbnN0IHMgPSBoc3ZbMV0gLyAxMDA7XG4gICAgICBjb25zdCB2ID0gaHN2WzJdIC8gMTAwO1xuICAgICAgY29uc3QgYyA9IHMgKiB2O1xuICAgICAgbGV0IGYgPSAwO1xuICAgICAgaWYgKGMgPCAxKSB7XG4gICAgICAgIGYgPSAodiAtIGMpIC8gKDEgLSBjKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBbaHN2WzBdLCBjICogMTAwLCBmICogMTAwXTtcbiAgICB9O1xuICAgIGNvbnZlcnQuaGNnLnJnYiA9IGZ1bmN0aW9uKGhjZykge1xuICAgICAgY29uc3QgaCA9IGhjZ1swXSAvIDM2MDtcbiAgICAgIGNvbnN0IGMgPSBoY2dbMV0gLyAxMDA7XG4gICAgICBjb25zdCBnID0gaGNnWzJdIC8gMTAwO1xuICAgICAgaWYgKGMgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIFtnICogMjU1LCBnICogMjU1LCBnICogMjU1XTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHB1cmUgPSBbMCwgMCwgMF07XG4gICAgICBjb25zdCBoaSA9IGggJSAxICogNjtcbiAgICAgIGNvbnN0IHYgPSBoaSAlIDE7XG4gICAgICBjb25zdCB3ID0gMSAtIHY7XG4gICAgICBsZXQgbWcgPSAwO1xuICAgICAgc3dpdGNoIChNYXRoLmZsb29yKGhpKSkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgcHVyZVswXSA9IDE7XG4gICAgICAgICAgcHVyZVsxXSA9IHY7XG4gICAgICAgICAgcHVyZVsyXSA9IDA7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBwdXJlWzBdID0gdztcbiAgICAgICAgICBwdXJlWzFdID0gMTtcbiAgICAgICAgICBwdXJlWzJdID0gMDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHB1cmVbMF0gPSAwO1xuICAgICAgICAgIHB1cmVbMV0gPSAxO1xuICAgICAgICAgIHB1cmVbMl0gPSB2O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgcHVyZVswXSA9IDA7XG4gICAgICAgICAgcHVyZVsxXSA9IHc7XG4gICAgICAgICAgcHVyZVsyXSA9IDE7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBwdXJlWzBdID0gdjtcbiAgICAgICAgICBwdXJlWzFdID0gMDtcbiAgICAgICAgICBwdXJlWzJdID0gMTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBwdXJlWzBdID0gMTtcbiAgICAgICAgICBwdXJlWzFdID0gMDtcbiAgICAgICAgICBwdXJlWzJdID0gdztcbiAgICAgIH1cbiAgICAgIG1nID0gKDEgLSBjKSAqIGc7XG4gICAgICByZXR1cm4gW1xuICAgICAgICAoYyAqIHB1cmVbMF0gKyBtZykgKiAyNTUsXG4gICAgICAgIChjICogcHVyZVsxXSArIG1nKSAqIDI1NSxcbiAgICAgICAgKGMgKiBwdXJlWzJdICsgbWcpICogMjU1XG4gICAgICBdO1xuICAgIH07XG4gICAgY29udmVydC5oY2cuaHN2ID0gZnVuY3Rpb24oaGNnKSB7XG4gICAgICBjb25zdCBjID0gaGNnWzFdIC8gMTAwO1xuICAgICAgY29uc3QgZyA9IGhjZ1syXSAvIDEwMDtcbiAgICAgIGNvbnN0IHYgPSBjICsgZyAqICgxIC0gYyk7XG4gICAgICBsZXQgZiA9IDA7XG4gICAgICBpZiAodiA+IDApIHtcbiAgICAgICAgZiA9IGMgLyB2O1xuICAgICAgfVxuICAgICAgcmV0dXJuIFtoY2dbMF0sIGYgKiAxMDAsIHYgKiAxMDBdO1xuICAgIH07XG4gICAgY29udmVydC5oY2cuaHNsID0gZnVuY3Rpb24oaGNnKSB7XG4gICAgICBjb25zdCBjID0gaGNnWzFdIC8gMTAwO1xuICAgICAgY29uc3QgZyA9IGhjZ1syXSAvIDEwMDtcbiAgICAgIGNvbnN0IGwgPSBnICogKDEgLSBjKSArIDAuNSAqIGM7XG4gICAgICBsZXQgcyA9IDA7XG4gICAgICBpZiAobCA+IDAgJiYgbCA8IDAuNSkge1xuICAgICAgICBzID0gYyAvICgyICogbCk7XG4gICAgICB9IGVsc2UgaWYgKGwgPj0gMC41ICYmIGwgPCAxKSB7XG4gICAgICAgIHMgPSBjIC8gKDIgKiAoMSAtIGwpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBbaGNnWzBdLCBzICogMTAwLCBsICogMTAwXTtcbiAgICB9O1xuICAgIGNvbnZlcnQuaGNnLmh3YiA9IGZ1bmN0aW9uKGhjZykge1xuICAgICAgY29uc3QgYyA9IGhjZ1sxXSAvIDEwMDtcbiAgICAgIGNvbnN0IGcgPSBoY2dbMl0gLyAxMDA7XG4gICAgICBjb25zdCB2ID0gYyArIGcgKiAoMSAtIGMpO1xuICAgICAgcmV0dXJuIFtoY2dbMF0sICh2IC0gYykgKiAxMDAsICgxIC0gdikgKiAxMDBdO1xuICAgIH07XG4gICAgY29udmVydC5od2IuaGNnID0gZnVuY3Rpb24oaHdiKSB7XG4gICAgICBjb25zdCB3ID0gaHdiWzFdIC8gMTAwO1xuICAgICAgY29uc3QgYiA9IGh3YlsyXSAvIDEwMDtcbiAgICAgIGNvbnN0IHYgPSAxIC0gYjtcbiAgICAgIGNvbnN0IGMgPSB2IC0gdztcbiAgICAgIGxldCBnID0gMDtcbiAgICAgIGlmIChjIDwgMSkge1xuICAgICAgICBnID0gKHYgLSBjKSAvICgxIC0gYyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gW2h3YlswXSwgYyAqIDEwMCwgZyAqIDEwMF07XG4gICAgfTtcbiAgICBjb252ZXJ0LmFwcGxlLnJnYiA9IGZ1bmN0aW9uKGFwcGxlKSB7XG4gICAgICByZXR1cm4gW2FwcGxlWzBdIC8gNjU1MzUgKiAyNTUsIGFwcGxlWzFdIC8gNjU1MzUgKiAyNTUsIGFwcGxlWzJdIC8gNjU1MzUgKiAyNTVdO1xuICAgIH07XG4gICAgY29udmVydC5yZ2IuYXBwbGUgPSBmdW5jdGlvbihyZ2IpIHtcbiAgICAgIHJldHVybiBbcmdiWzBdIC8gMjU1ICogNjU1MzUsIHJnYlsxXSAvIDI1NSAqIDY1NTM1LCByZ2JbMl0gLyAyNTUgKiA2NTUzNV07XG4gICAgfTtcbiAgICBjb252ZXJ0LmdyYXkucmdiID0gZnVuY3Rpb24oYXJncykge1xuICAgICAgcmV0dXJuIFthcmdzWzBdIC8gMTAwICogMjU1LCBhcmdzWzBdIC8gMTAwICogMjU1LCBhcmdzWzBdIC8gMTAwICogMjU1XTtcbiAgICB9O1xuICAgIGNvbnZlcnQuZ3JheS5oc2wgPSBmdW5jdGlvbihhcmdzKSB7XG4gICAgICByZXR1cm4gWzAsIDAsIGFyZ3NbMF1dO1xuICAgIH07XG4gICAgY29udmVydC5ncmF5LmhzdiA9IGNvbnZlcnQuZ3JheS5oc2w7XG4gICAgY29udmVydC5ncmF5Lmh3YiA9IGZ1bmN0aW9uKGdyYXkpIHtcbiAgICAgIHJldHVybiBbMCwgMTAwLCBncmF5WzBdXTtcbiAgICB9O1xuICAgIGNvbnZlcnQuZ3JheS5jbXlrID0gZnVuY3Rpb24oZ3JheSkge1xuICAgICAgcmV0dXJuIFswLCAwLCAwLCBncmF5WzBdXTtcbiAgICB9O1xuICAgIGNvbnZlcnQuZ3JheS5sYWIgPSBmdW5jdGlvbihncmF5KSB7XG4gICAgICByZXR1cm4gW2dyYXlbMF0sIDAsIDBdO1xuICAgIH07XG4gICAgY29udmVydC5ncmF5LmhleCA9IGZ1bmN0aW9uKGdyYXkpIHtcbiAgICAgIGNvbnN0IHZhbCA9IE1hdGgucm91bmQoZ3JheVswXSAvIDEwMCAqIDI1NSkgJiAyNTU7XG4gICAgICBjb25zdCBpbnRlZ2VyID0gKHZhbCA8PCAxNikgKyAodmFsIDw8IDgpICsgdmFsO1xuICAgICAgY29uc3Qgc3RyaW5nID0gaW50ZWdlci50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTtcbiAgICAgIHJldHVybiBcIjAwMDAwMFwiLnN1YnN0cmluZyhzdHJpbmcubGVuZ3RoKSArIHN0cmluZztcbiAgICB9O1xuICAgIGNvbnZlcnQucmdiLmdyYXkgPSBmdW5jdGlvbihyZ2IpIHtcbiAgICAgIGNvbnN0IHZhbCA9IChyZ2JbMF0gKyByZ2JbMV0gKyByZ2JbMl0pIC8gMztcbiAgICAgIHJldHVybiBbdmFsIC8gMjU1ICogMTAwXTtcbiAgICB9O1xuICB9XG59KTtcblxuLy8gbm9kZV9tb2R1bGVzL2NvbG9yLWNvbnZlcnQvcm91dGUuanNcbnZhciByZXF1aXJlX3JvdXRlID0gX19jb21tb25KUyh7XG4gIFwibm9kZV9tb2R1bGVzL2NvbG9yLWNvbnZlcnQvcm91dGUuanNcIihleHBvcnRzMiwgbW9kdWxlMikge1xuICAgIHZhciBjb252ZXJzaW9ucyA9IHJlcXVpcmVfY29udmVyc2lvbnMoKTtcbiAgICBmdW5jdGlvbiBidWlsZEdyYXBoKCkge1xuICAgICAgY29uc3QgZ3JhcGggPSB7fTtcbiAgICAgIGNvbnN0IG1vZGVscyA9IE9iamVjdC5rZXlzKGNvbnZlcnNpb25zKTtcbiAgICAgIGZvciAobGV0IGxlbiA9IG1vZGVscy5sZW5ndGgsIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgZ3JhcGhbbW9kZWxzW2ldXSA9IHtcbiAgICAgICAgICAvLyBodHRwOi8vanNwZXJmLmNvbS8xLXZzLWluZmluaXR5XG4gICAgICAgICAgLy8gbWljcm8tb3B0LCBidXQgdGhpcyBpcyBzaW1wbGUuXG4gICAgICAgICAgZGlzdGFuY2U6IC0xLFxuICAgICAgICAgIHBhcmVudDogbnVsbFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGdyYXBoO1xuICAgIH1cbiAgICBmdW5jdGlvbiBkZXJpdmVCRlMoZnJvbU1vZGVsKSB7XG4gICAgICBjb25zdCBncmFwaCA9IGJ1aWxkR3JhcGgoKTtcbiAgICAgIGNvbnN0IHF1ZXVlID0gW2Zyb21Nb2RlbF07XG4gICAgICBncmFwaFtmcm9tTW9kZWxdLmRpc3RhbmNlID0gMDtcbiAgICAgIHdoaWxlIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgY3VycmVudCA9IHF1ZXVlLnBvcCgpO1xuICAgICAgICBjb25zdCBhZGphY2VudHMgPSBPYmplY3Qua2V5cyhjb252ZXJzaW9uc1tjdXJyZW50XSk7XG4gICAgICAgIGZvciAobGV0IGxlbiA9IGFkamFjZW50cy5sZW5ndGgsIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICBjb25zdCBhZGphY2VudCA9IGFkamFjZW50c1tpXTtcbiAgICAgICAgICBjb25zdCBub2RlID0gZ3JhcGhbYWRqYWNlbnRdO1xuICAgICAgICAgIGlmIChub2RlLmRpc3RhbmNlID09PSAtMSkge1xuICAgICAgICAgICAgbm9kZS5kaXN0YW5jZSA9IGdyYXBoW2N1cnJlbnRdLmRpc3RhbmNlICsgMTtcbiAgICAgICAgICAgIG5vZGUucGFyZW50ID0gY3VycmVudDtcbiAgICAgICAgICAgIHF1ZXVlLnVuc2hpZnQoYWRqYWNlbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGdyYXBoO1xuICAgIH1cbiAgICBmdW5jdGlvbiBsaW5rKGZyb20sIHRvKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oYXJncykge1xuICAgICAgICByZXR1cm4gdG8oZnJvbShhcmdzKSk7XG4gICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiB3cmFwQ29udmVyc2lvbih0b01vZGVsLCBncmFwaCkge1xuICAgICAgY29uc3QgcGF0aCA9IFtncmFwaFt0b01vZGVsXS5wYXJlbnQsIHRvTW9kZWxdO1xuICAgICAgbGV0IGZuID0gY29udmVyc2lvbnNbZ3JhcGhbdG9Nb2RlbF0ucGFyZW50XVt0b01vZGVsXTtcbiAgICAgIGxldCBjdXIgPSBncmFwaFt0b01vZGVsXS5wYXJlbnQ7XG4gICAgICB3aGlsZSAoZ3JhcGhbY3VyXS5wYXJlbnQpIHtcbiAgICAgICAgcGF0aC51bnNoaWZ0KGdyYXBoW2N1cl0ucGFyZW50KTtcbiAgICAgICAgZm4gPSBsaW5rKGNvbnZlcnNpb25zW2dyYXBoW2N1cl0ucGFyZW50XVtjdXJdLCBmbik7XG4gICAgICAgIGN1ciA9IGdyYXBoW2N1cl0ucGFyZW50O1xuICAgICAgfVxuICAgICAgZm4uY29udmVyc2lvbiA9IHBhdGg7XG4gICAgICByZXR1cm4gZm47XG4gICAgfVxuICAgIG1vZHVsZTIuZXhwb3J0cyA9IGZ1bmN0aW9uKGZyb21Nb2RlbCkge1xuICAgICAgY29uc3QgZ3JhcGggPSBkZXJpdmVCRlMoZnJvbU1vZGVsKTtcbiAgICAgIGNvbnN0IGNvbnZlcnNpb24gPSB7fTtcbiAgICAgIGNvbnN0IG1vZGVscyA9IE9iamVjdC5rZXlzKGdyYXBoKTtcbiAgICAgIGZvciAobGV0IGxlbiA9IG1vZGVscy5sZW5ndGgsIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgY29uc3QgdG9Nb2RlbCA9IG1vZGVsc1tpXTtcbiAgICAgICAgY29uc3Qgbm9kZSA9IGdyYXBoW3RvTW9kZWxdO1xuICAgICAgICBpZiAobm9kZS5wYXJlbnQgPT09IG51bGwpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb252ZXJzaW9uW3RvTW9kZWxdID0gd3JhcENvbnZlcnNpb24odG9Nb2RlbCwgZ3JhcGgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnZlcnNpb247XG4gICAgfTtcbiAgfVxufSk7XG5cbi8vIG5vZGVfbW9kdWxlcy9jb2xvci1jb252ZXJ0L2luZGV4LmpzXG52YXIgcmVxdWlyZV9jb2xvcl9jb252ZXJ0ID0gX19jb21tb25KUyh7XG4gIFwibm9kZV9tb2R1bGVzL2NvbG9yLWNvbnZlcnQvaW5kZXguanNcIihleHBvcnRzMiwgbW9kdWxlMikge1xuICAgIHZhciBjb252ZXJzaW9ucyA9IHJlcXVpcmVfY29udmVyc2lvbnMoKTtcbiAgICB2YXIgcm91dGUgPSByZXF1aXJlX3JvdXRlKCk7XG4gICAgdmFyIGNvbnZlcnQgPSB7fTtcbiAgICB2YXIgbW9kZWxzID0gT2JqZWN0LmtleXMoY29udmVyc2lvbnMpO1xuICAgIGZ1bmN0aW9uIHdyYXBSYXcoZm4pIHtcbiAgICAgIGNvbnN0IHdyYXBwZWRGbiA9IGZ1bmN0aW9uKC4uLmFyZ3MpIHtcbiAgICAgICAgY29uc3QgYXJnMCA9IGFyZ3NbMF07XG4gICAgICAgIGlmIChhcmcwID09PSB2b2lkIDAgfHwgYXJnMCA9PT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBhcmcwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhcmcwLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBhcmdzID0gYXJnMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm4oYXJncyk7XG4gICAgICB9O1xuICAgICAgaWYgKFwiY29udmVyc2lvblwiIGluIGZuKSB7XG4gICAgICAgIHdyYXBwZWRGbi5jb252ZXJzaW9uID0gZm4uY29udmVyc2lvbjtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3cmFwcGVkRm47XG4gICAgfVxuICAgIGZ1bmN0aW9uIHdyYXBSb3VuZGVkKGZuKSB7XG4gICAgICBjb25zdCB3cmFwcGVkRm4gPSBmdW5jdGlvbiguLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IGFyZzAgPSBhcmdzWzBdO1xuICAgICAgICBpZiAoYXJnMCA9PT0gdm9pZCAwIHx8IGFyZzAgPT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gYXJnMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXJnMC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgYXJncyA9IGFyZzA7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gZm4oYXJncyk7XG4gICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgZm9yIChsZXQgbGVuID0gcmVzdWx0Lmxlbmd0aCwgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgcmVzdWx0W2ldID0gTWF0aC5yb3VuZChyZXN1bHRbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICAgIGlmIChcImNvbnZlcnNpb25cIiBpbiBmbikge1xuICAgICAgICB3cmFwcGVkRm4uY29udmVyc2lvbiA9IGZuLmNvbnZlcnNpb247XG4gICAgICB9XG4gICAgICByZXR1cm4gd3JhcHBlZEZuO1xuICAgIH1cbiAgICBtb2RlbHMuZm9yRWFjaCgoZnJvbU1vZGVsKSA9PiB7XG4gICAgICBjb252ZXJ0W2Zyb21Nb2RlbF0gPSB7fTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb252ZXJ0W2Zyb21Nb2RlbF0sIFwiY2hhbm5lbHNcIiwgeyB2YWx1ZTogY29udmVyc2lvbnNbZnJvbU1vZGVsXS5jaGFubmVscyB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb252ZXJ0W2Zyb21Nb2RlbF0sIFwibGFiZWxzXCIsIHsgdmFsdWU6IGNvbnZlcnNpb25zW2Zyb21Nb2RlbF0ubGFiZWxzIH0pO1xuICAgICAgY29uc3Qgcm91dGVzID0gcm91dGUoZnJvbU1vZGVsKTtcbiAgICAgIGNvbnN0IHJvdXRlTW9kZWxzID0gT2JqZWN0LmtleXMocm91dGVzKTtcbiAgICAgIHJvdXRlTW9kZWxzLmZvckVhY2goKHRvTW9kZWwpID0+IHtcbiAgICAgICAgY29uc3QgZm4gPSByb3V0ZXNbdG9Nb2RlbF07XG4gICAgICAgIGNvbnZlcnRbZnJvbU1vZGVsXVt0b01vZGVsXSA9IHdyYXBSb3VuZGVkKGZuKTtcbiAgICAgICAgY29udmVydFtmcm9tTW9kZWxdW3RvTW9kZWxdLnJhdyA9IHdyYXBSYXcoZm4pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgbW9kdWxlMi5leHBvcnRzID0gY29udmVydDtcbiAgfVxufSk7XG5cbi8vIG5vZGVfbW9kdWxlcy9hbnNpLXN0eWxlcy9pbmRleC5qc1xudmFyIHJlcXVpcmVfYW5zaV9zdHlsZXMgPSBfX2NvbW1vbkpTKHtcbiAgXCJub2RlX21vZHVsZXMvYW5zaS1zdHlsZXMvaW5kZXguanNcIihleHBvcnRzMiwgbW9kdWxlMikge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIHZhciB3cmFwQW5zaTE2ID0gKGZuLCBvZmZzZXQpID0+ICguLi5hcmdzKSA9PiB7XG4gICAgICBjb25zdCBjb2RlID0gZm4oLi4uYXJncyk7XG4gICAgICByZXR1cm4gYFxceDFCWyR7Y29kZSArIG9mZnNldH1tYDtcbiAgICB9O1xuICAgIHZhciB3cmFwQW5zaTI1NiA9IChmbiwgb2Zmc2V0KSA9PiAoLi4uYXJncykgPT4ge1xuICAgICAgY29uc3QgY29kZSA9IGZuKC4uLmFyZ3MpO1xuICAgICAgcmV0dXJuIGBcXHgxQlskezM4ICsgb2Zmc2V0fTs1OyR7Y29kZX1tYDtcbiAgICB9O1xuICAgIHZhciB3cmFwQW5zaTE2bSA9IChmbiwgb2Zmc2V0KSA9PiAoLi4uYXJncykgPT4ge1xuICAgICAgY29uc3QgcmdiID0gZm4oLi4uYXJncyk7XG4gICAgICByZXR1cm4gYFxceDFCWyR7MzggKyBvZmZzZXR9OzI7JHtyZ2JbMF19OyR7cmdiWzFdfTske3JnYlsyXX1tYDtcbiAgICB9O1xuICAgIHZhciBhbnNpMmFuc2kgPSAobikgPT4gbjtcbiAgICB2YXIgcmdiMnJnYiA9IChyLCBnLCBiKSA9PiBbciwgZywgYl07XG4gICAgdmFyIHNldExhenlQcm9wZXJ0eSA9IChvYmplY3QsIHByb3BlcnR5LCBnZXQpID0+IHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmplY3QsIHByb3BlcnR5LCB7XG4gICAgICAgIGdldDogKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHZhbHVlID0gZ2V0KCk7XG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iamVjdCwgcHJvcGVydHksIHtcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9O1xuICAgIHZhciBjb2xvckNvbnZlcnQ7XG4gICAgdmFyIG1ha2VEeW5hbWljU3R5bGVzID0gKHdyYXAsIHRhcmdldFNwYWNlLCBpZGVudGl0eSwgaXNCYWNrZ3JvdW5kKSA9PiB7XG4gICAgICBpZiAoY29sb3JDb252ZXJ0ID09PSB2b2lkIDApIHtcbiAgICAgICAgY29sb3JDb252ZXJ0ID0gcmVxdWlyZV9jb2xvcl9jb252ZXJ0KCk7XG4gICAgICB9XG4gICAgICBjb25zdCBvZmZzZXQgPSBpc0JhY2tncm91bmQgPyAxMCA6IDA7XG4gICAgICBjb25zdCBzdHlsZXMgPSB7fTtcbiAgICAgIGZvciAoY29uc3QgW3NvdXJjZVNwYWNlLCBzdWl0ZV0gb2YgT2JqZWN0LmVudHJpZXMoY29sb3JDb252ZXJ0KSkge1xuICAgICAgICBjb25zdCBuYW1lID0gc291cmNlU3BhY2UgPT09IFwiYW5zaTE2XCIgPyBcImFuc2lcIiA6IHNvdXJjZVNwYWNlO1xuICAgICAgICBpZiAoc291cmNlU3BhY2UgPT09IHRhcmdldFNwYWNlKSB7XG4gICAgICAgICAgc3R5bGVzW25hbWVdID0gd3JhcChpZGVudGl0eSwgb2Zmc2V0KTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygc3VpdGUgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICBzdHlsZXNbbmFtZV0gPSB3cmFwKHN1aXRlW3RhcmdldFNwYWNlXSwgb2Zmc2V0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHN0eWxlcztcbiAgICB9O1xuICAgIGZ1bmN0aW9uIGFzc2VtYmxlU3R5bGVzKCkge1xuICAgICAgY29uc3QgY29kZXMgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICAgICAgY29uc3Qgc3R5bGVzID0ge1xuICAgICAgICBtb2RpZmllcjoge1xuICAgICAgICAgIHJlc2V0OiBbMCwgMF0sXG4gICAgICAgICAgLy8gMjEgaXNuJ3Qgd2lkZWx5IHN1cHBvcnRlZCBhbmQgMjIgZG9lcyB0aGUgc2FtZSB0aGluZ1xuICAgICAgICAgIGJvbGQ6IFsxLCAyMl0sXG4gICAgICAgICAgZGltOiBbMiwgMjJdLFxuICAgICAgICAgIGl0YWxpYzogWzMsIDIzXSxcbiAgICAgICAgICB1bmRlcmxpbmU6IFs0LCAyNF0sXG4gICAgICAgICAgaW52ZXJzZTogWzcsIDI3XSxcbiAgICAgICAgICBoaWRkZW46IFs4LCAyOF0sXG4gICAgICAgICAgc3RyaWtldGhyb3VnaDogWzksIDI5XVxuICAgICAgICB9LFxuICAgICAgICBjb2xvcjoge1xuICAgICAgICAgIGJsYWNrOiBbMzAsIDM5XSxcbiAgICAgICAgICByZWQ6IFszMSwgMzldLFxuICAgICAgICAgIGdyZWVuOiBbMzIsIDM5XSxcbiAgICAgICAgICB5ZWxsb3c6IFszMywgMzldLFxuICAgICAgICAgIGJsdWU6IFszNCwgMzldLFxuICAgICAgICAgIG1hZ2VudGE6IFszNSwgMzldLFxuICAgICAgICAgIGN5YW46IFszNiwgMzldLFxuICAgICAgICAgIHdoaXRlOiBbMzcsIDM5XSxcbiAgICAgICAgICAvLyBCcmlnaHQgY29sb3JcbiAgICAgICAgICBibGFja0JyaWdodDogWzkwLCAzOV0sXG4gICAgICAgICAgcmVkQnJpZ2h0OiBbOTEsIDM5XSxcbiAgICAgICAgICBncmVlbkJyaWdodDogWzkyLCAzOV0sXG4gICAgICAgICAgeWVsbG93QnJpZ2h0OiBbOTMsIDM5XSxcbiAgICAgICAgICBibHVlQnJpZ2h0OiBbOTQsIDM5XSxcbiAgICAgICAgICBtYWdlbnRhQnJpZ2h0OiBbOTUsIDM5XSxcbiAgICAgICAgICBjeWFuQnJpZ2h0OiBbOTYsIDM5XSxcbiAgICAgICAgICB3aGl0ZUJyaWdodDogWzk3LCAzOV1cbiAgICAgICAgfSxcbiAgICAgICAgYmdDb2xvcjoge1xuICAgICAgICAgIGJnQmxhY2s6IFs0MCwgNDldLFxuICAgICAgICAgIGJnUmVkOiBbNDEsIDQ5XSxcbiAgICAgICAgICBiZ0dyZWVuOiBbNDIsIDQ5XSxcbiAgICAgICAgICBiZ1llbGxvdzogWzQzLCA0OV0sXG4gICAgICAgICAgYmdCbHVlOiBbNDQsIDQ5XSxcbiAgICAgICAgICBiZ01hZ2VudGE6IFs0NSwgNDldLFxuICAgICAgICAgIGJnQ3lhbjogWzQ2LCA0OV0sXG4gICAgICAgICAgYmdXaGl0ZTogWzQ3LCA0OV0sXG4gICAgICAgICAgLy8gQnJpZ2h0IGNvbG9yXG4gICAgICAgICAgYmdCbGFja0JyaWdodDogWzEwMCwgNDldLFxuICAgICAgICAgIGJnUmVkQnJpZ2h0OiBbMTAxLCA0OV0sXG4gICAgICAgICAgYmdHcmVlbkJyaWdodDogWzEwMiwgNDldLFxuICAgICAgICAgIGJnWWVsbG93QnJpZ2h0OiBbMTAzLCA0OV0sXG4gICAgICAgICAgYmdCbHVlQnJpZ2h0OiBbMTA0LCA0OV0sXG4gICAgICAgICAgYmdNYWdlbnRhQnJpZ2h0OiBbMTA1LCA0OV0sXG4gICAgICAgICAgYmdDeWFuQnJpZ2h0OiBbMTA2LCA0OV0sXG4gICAgICAgICAgYmdXaGl0ZUJyaWdodDogWzEwNywgNDldXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBzdHlsZXMuY29sb3IuZ3JheSA9IHN0eWxlcy5jb2xvci5ibGFja0JyaWdodDtcbiAgICAgIHN0eWxlcy5iZ0NvbG9yLmJnR3JheSA9IHN0eWxlcy5iZ0NvbG9yLmJnQmxhY2tCcmlnaHQ7XG4gICAgICBzdHlsZXMuY29sb3IuZ3JleSA9IHN0eWxlcy5jb2xvci5ibGFja0JyaWdodDtcbiAgICAgIHN0eWxlcy5iZ0NvbG9yLmJnR3JleSA9IHN0eWxlcy5iZ0NvbG9yLmJnQmxhY2tCcmlnaHQ7XG4gICAgICBmb3IgKGNvbnN0IFtncm91cE5hbWUsIGdyb3VwXSBvZiBPYmplY3QuZW50cmllcyhzdHlsZXMpKSB7XG4gICAgICAgIGZvciAoY29uc3QgW3N0eWxlTmFtZSwgc3R5bGVdIG9mIE9iamVjdC5lbnRyaWVzKGdyb3VwKSkge1xuICAgICAgICAgIHN0eWxlc1tzdHlsZU5hbWVdID0ge1xuICAgICAgICAgICAgb3BlbjogYFxceDFCWyR7c3R5bGVbMF19bWAsXG4gICAgICAgICAgICBjbG9zZTogYFxceDFCWyR7c3R5bGVbMV19bWBcbiAgICAgICAgICB9O1xuICAgICAgICAgIGdyb3VwW3N0eWxlTmFtZV0gPSBzdHlsZXNbc3R5bGVOYW1lXTtcbiAgICAgICAgICBjb2Rlcy5zZXQoc3R5bGVbMF0sIHN0eWxlWzFdKTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3R5bGVzLCBncm91cE5hbWUsIHtcbiAgICAgICAgICB2YWx1ZTogZ3JvdXAsXG4gICAgICAgICAgZW51bWVyYWJsZTogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3R5bGVzLCBcImNvZGVzXCIsIHtcbiAgICAgICAgdmFsdWU6IGNvZGVzLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZVxuICAgICAgfSk7XG4gICAgICBzdHlsZXMuY29sb3IuY2xvc2UgPSBcIlxceDFCWzM5bVwiO1xuICAgICAgc3R5bGVzLmJnQ29sb3IuY2xvc2UgPSBcIlxceDFCWzQ5bVwiO1xuICAgICAgc2V0TGF6eVByb3BlcnR5KHN0eWxlcy5jb2xvciwgXCJhbnNpXCIsICgpID0+IG1ha2VEeW5hbWljU3R5bGVzKHdyYXBBbnNpMTYsIFwiYW5zaTE2XCIsIGFuc2kyYW5zaSwgZmFsc2UpKTtcbiAgICAgIHNldExhenlQcm9wZXJ0eShzdHlsZXMuY29sb3IsIFwiYW5zaTI1NlwiLCAoKSA9PiBtYWtlRHluYW1pY1N0eWxlcyh3cmFwQW5zaTI1NiwgXCJhbnNpMjU2XCIsIGFuc2kyYW5zaSwgZmFsc2UpKTtcbiAgICAgIHNldExhenlQcm9wZXJ0eShzdHlsZXMuY29sb3IsIFwiYW5zaTE2bVwiLCAoKSA9PiBtYWtlRHluYW1pY1N0eWxlcyh3cmFwQW5zaTE2bSwgXCJyZ2JcIiwgcmdiMnJnYiwgZmFsc2UpKTtcbiAgICAgIHNldExhenlQcm9wZXJ0eShzdHlsZXMuYmdDb2xvciwgXCJhbnNpXCIsICgpID0+IG1ha2VEeW5hbWljU3R5bGVzKHdyYXBBbnNpMTYsIFwiYW5zaTE2XCIsIGFuc2kyYW5zaSwgdHJ1ZSkpO1xuICAgICAgc2V0TGF6eVByb3BlcnR5KHN0eWxlcy5iZ0NvbG9yLCBcImFuc2kyNTZcIiwgKCkgPT4gbWFrZUR5bmFtaWNTdHlsZXMod3JhcEFuc2kyNTYsIFwiYW5zaTI1NlwiLCBhbnNpMmFuc2ksIHRydWUpKTtcbiAgICAgIHNldExhenlQcm9wZXJ0eShzdHlsZXMuYmdDb2xvciwgXCJhbnNpMTZtXCIsICgpID0+IG1ha2VEeW5hbWljU3R5bGVzKHdyYXBBbnNpMTZtLCBcInJnYlwiLCByZ2IycmdiLCB0cnVlKSk7XG4gICAgICByZXR1cm4gc3R5bGVzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlMiwgXCJleHBvcnRzXCIsIHtcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGFzc2VtYmxlU3R5bGVzXG4gICAgfSk7XG4gIH1cbn0pO1xuXG4vLyBub2RlX21vZHVsZXMvaGFzLWZsYWcvaW5kZXguanNcbnZhciByZXF1aXJlX2hhc19mbGFnID0gX19jb21tb25KUyh7XG4gIFwibm9kZV9tb2R1bGVzL2hhcy1mbGFnL2luZGV4LmpzXCIoZXhwb3J0czIsIG1vZHVsZTIpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICBtb2R1bGUyLmV4cG9ydHMgPSAoZmxhZywgYXJndiA9IHByb2Nlc3MuYXJndikgPT4ge1xuICAgICAgY29uc3QgcHJlZml4ID0gZmxhZy5zdGFydHNXaXRoKFwiLVwiKSA/IFwiXCIgOiBmbGFnLmxlbmd0aCA9PT0gMSA/IFwiLVwiIDogXCItLVwiO1xuICAgICAgY29uc3QgcG9zaXRpb24gPSBhcmd2LmluZGV4T2YocHJlZml4ICsgZmxhZyk7XG4gICAgICBjb25zdCB0ZXJtaW5hdG9yUG9zaXRpb24gPSBhcmd2LmluZGV4T2YoXCItLVwiKTtcbiAgICAgIHJldHVybiBwb3NpdGlvbiAhPT0gLTEgJiYgKHRlcm1pbmF0b3JQb3NpdGlvbiA9PT0gLTEgfHwgcG9zaXRpb24gPCB0ZXJtaW5hdG9yUG9zaXRpb24pO1xuICAgIH07XG4gIH1cbn0pO1xuXG4vLyBub2RlX21vZHVsZXMvc3VwcG9ydHMtY29sb3IvaW5kZXguanNcbnZhciByZXF1aXJlX3N1cHBvcnRzX2NvbG9yID0gX19jb21tb25KUyh7XG4gIFwibm9kZV9tb2R1bGVzL3N1cHBvcnRzLWNvbG9yL2luZGV4LmpzXCIoZXhwb3J0czIsIG1vZHVsZTIpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICB2YXIgb3MgPSByZXF1aXJlKFwib3NcIik7XG4gICAgdmFyIHR0eSA9IHJlcXVpcmUoXCJ0dHlcIik7XG4gICAgdmFyIGhhc0ZsYWcgPSByZXF1aXJlX2hhc19mbGFnKCk7XG4gICAgdmFyIHsgZW52IH0gPSBwcm9jZXNzO1xuICAgIHZhciBmb3JjZUNvbG9yO1xuICAgIGlmIChoYXNGbGFnKFwibm8tY29sb3JcIikgfHwgaGFzRmxhZyhcIm5vLWNvbG9yc1wiKSB8fCBoYXNGbGFnKFwiY29sb3I9ZmFsc2VcIikgfHwgaGFzRmxhZyhcImNvbG9yPW5ldmVyXCIpKSB7XG4gICAgICBmb3JjZUNvbG9yID0gMDtcbiAgICB9IGVsc2UgaWYgKGhhc0ZsYWcoXCJjb2xvclwiKSB8fCBoYXNGbGFnKFwiY29sb3JzXCIpIHx8IGhhc0ZsYWcoXCJjb2xvcj10cnVlXCIpIHx8IGhhc0ZsYWcoXCJjb2xvcj1hbHdheXNcIikpIHtcbiAgICAgIGZvcmNlQ29sb3IgPSAxO1xuICAgIH1cbiAgICBpZiAoXCJGT1JDRV9DT0xPUlwiIGluIGVudikge1xuICAgICAgaWYgKGVudi5GT1JDRV9DT0xPUiA9PT0gXCJ0cnVlXCIpIHtcbiAgICAgICAgZm9yY2VDb2xvciA9IDE7XG4gICAgICB9IGVsc2UgaWYgKGVudi5GT1JDRV9DT0xPUiA9PT0gXCJmYWxzZVwiKSB7XG4gICAgICAgIGZvcmNlQ29sb3IgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yY2VDb2xvciA9IGVudi5GT1JDRV9DT0xPUi5sZW5ndGggPT09IDAgPyAxIDogTWF0aC5taW4ocGFyc2VJbnQoZW52LkZPUkNFX0NPTE9SLCAxMCksIDMpO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB0cmFuc2xhdGVMZXZlbChsZXZlbCkge1xuICAgICAgaWYgKGxldmVsID09PSAwKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxldmVsLFxuICAgICAgICBoYXNCYXNpYzogdHJ1ZSxcbiAgICAgICAgaGFzMjU2OiBsZXZlbCA+PSAyLFxuICAgICAgICBoYXMxNm06IGxldmVsID49IDNcbiAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIHN1cHBvcnRzQ29sb3IoaGF2ZVN0cmVhbSwgc3RyZWFtSXNUVFkpIHtcbiAgICAgIGlmIChmb3JjZUNvbG9yID09PSAwKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgICAgaWYgKGhhc0ZsYWcoXCJjb2xvcj0xNm1cIikgfHwgaGFzRmxhZyhcImNvbG9yPWZ1bGxcIikgfHwgaGFzRmxhZyhcImNvbG9yPXRydWVjb2xvclwiKSkge1xuICAgICAgICByZXR1cm4gMztcbiAgICAgIH1cbiAgICAgIGlmIChoYXNGbGFnKFwiY29sb3I9MjU2XCIpKSB7XG4gICAgICAgIHJldHVybiAyO1xuICAgICAgfVxuICAgICAgaWYgKGhhdmVTdHJlYW0gJiYgIXN0cmVhbUlzVFRZICYmIGZvcmNlQ29sb3IgPT09IHZvaWQgMCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG1pbiA9IGZvcmNlQ29sb3IgfHwgMDtcbiAgICAgIGlmIChlbnYuVEVSTSA9PT0gXCJkdW1iXCIpIHtcbiAgICAgICAgcmV0dXJuIG1pbjtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9jZXNzLnBsYXRmb3JtID09PSBcIndpbjMyXCIpIHtcbiAgICAgICAgY29uc3Qgb3NSZWxlYXNlID0gb3MucmVsZWFzZSgpLnNwbGl0KFwiLlwiKTtcbiAgICAgICAgaWYgKE51bWJlcihvc1JlbGVhc2VbMF0pID49IDEwICYmIE51bWJlcihvc1JlbGVhc2VbMl0pID49IDEwNTg2KSB7XG4gICAgICAgICAgcmV0dXJuIE51bWJlcihvc1JlbGVhc2VbMl0pID49IDE0OTMxID8gMyA6IDI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9XG4gICAgICBpZiAoXCJDSVwiIGluIGVudikge1xuICAgICAgICBpZiAoW1wiVFJBVklTXCIsIFwiQ0lSQ0xFQ0lcIiwgXCJBUFBWRVlPUlwiLCBcIkdJVExBQl9DSVwiLCBcIkdJVEhVQl9BQ1RJT05TXCIsIFwiQlVJTERLSVRFXCJdLnNvbWUoKHNpZ24pID0+IHNpZ24gaW4gZW52KSB8fCBlbnYuQ0lfTkFNRSA9PT0gXCJjb2Rlc2hpcFwiKSB7XG4gICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1pbjtcbiAgICAgIH1cbiAgICAgIGlmIChcIlRFQU1DSVRZX1ZFUlNJT05cIiBpbiBlbnYpIHtcbiAgICAgICAgcmV0dXJuIC9eKDlcXC4oMCpbMS05XVxcZCopXFwufFxcZHsyLH1cXC4pLy50ZXN0KGVudi5URUFNQ0lUWV9WRVJTSU9OKSA/IDEgOiAwO1xuICAgICAgfVxuICAgICAgaWYgKGVudi5DT0xPUlRFUk0gPT09IFwidHJ1ZWNvbG9yXCIpIHtcbiAgICAgICAgcmV0dXJuIDM7XG4gICAgICB9XG4gICAgICBpZiAoXCJURVJNX1BST0dSQU1cIiBpbiBlbnYpIHtcbiAgICAgICAgY29uc3QgdmVyc2lvbiA9IHBhcnNlSW50KChlbnYuVEVSTV9QUk9HUkFNX1ZFUlNJT04gfHwgXCJcIikuc3BsaXQoXCIuXCIpWzBdLCAxMCk7XG4gICAgICAgIHN3aXRjaCAoZW52LlRFUk1fUFJPR1JBTSkge1xuICAgICAgICAgIGNhc2UgXCJpVGVybS5hcHBcIjpcbiAgICAgICAgICAgIHJldHVybiB2ZXJzaW9uID49IDMgPyAzIDogMjtcbiAgICAgICAgICBjYXNlIFwiQXBwbGVfVGVybWluYWxcIjpcbiAgICAgICAgICAgIHJldHVybiAyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoLy0yNTYoY29sb3IpPyQvaS50ZXN0KGVudi5URVJNKSkge1xuICAgICAgICByZXR1cm4gMjtcbiAgICAgIH1cbiAgICAgIGlmICgvXnNjcmVlbnxeeHRlcm18XnZ0MTAwfF52dDIyMHxecnh2dHxjb2xvcnxhbnNpfGN5Z3dpbnxsaW51eC9pLnRlc3QoZW52LlRFUk0pKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgfVxuICAgICAgaWYgKFwiQ09MT1JURVJNXCIgaW4gZW52KSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1pbjtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0U3VwcG9ydExldmVsKHN0cmVhbSkge1xuICAgICAgY29uc3QgbGV2ZWwgPSBzdXBwb3J0c0NvbG9yKHN0cmVhbSwgc3RyZWFtICYmIHN0cmVhbS5pc1RUWSk7XG4gICAgICByZXR1cm4gdHJhbnNsYXRlTGV2ZWwobGV2ZWwpO1xuICAgIH1cbiAgICBtb2R1bGUyLmV4cG9ydHMgPSB7XG4gICAgICBzdXBwb3J0c0NvbG9yOiBnZXRTdXBwb3J0TGV2ZWwsXG4gICAgICBzdGRvdXQ6IHRyYW5zbGF0ZUxldmVsKHN1cHBvcnRzQ29sb3IodHJ1ZSwgdHR5LmlzYXR0eSgxKSkpLFxuICAgICAgc3RkZXJyOiB0cmFuc2xhdGVMZXZlbChzdXBwb3J0c0NvbG9yKHRydWUsIHR0eS5pc2F0dHkoMikpKVxuICAgIH07XG4gIH1cbn0pO1xuXG4vLyBub2RlX21vZHVsZXMvY2hhbGsvc291cmNlL3V0aWwuanNcbnZhciByZXF1aXJlX3V0aWwgPSBfX2NvbW1vbkpTKHtcbiAgXCJub2RlX21vZHVsZXMvY2hhbGsvc291cmNlL3V0aWwuanNcIihleHBvcnRzMiwgbW9kdWxlMikge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIHZhciBzdHJpbmdSZXBsYWNlQWxsID0gKHN0cmluZywgc3Vic3RyaW5nLCByZXBsYWNlcikgPT4ge1xuICAgICAgbGV0IGluZGV4ID0gc3RyaW5nLmluZGV4T2Yoc3Vic3RyaW5nKTtcbiAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIGNvbnN0IHN1YnN0cmluZ0xlbmd0aCA9IHN1YnN0cmluZy5sZW5ndGg7XG4gICAgICBsZXQgZW5kSW5kZXggPSAwO1xuICAgICAgbGV0IHJldHVyblZhbHVlID0gXCJcIjtcbiAgICAgIGRvIHtcbiAgICAgICAgcmV0dXJuVmFsdWUgKz0gc3RyaW5nLnN1YnN0cihlbmRJbmRleCwgaW5kZXggLSBlbmRJbmRleCkgKyBzdWJzdHJpbmcgKyByZXBsYWNlcjtcbiAgICAgICAgZW5kSW5kZXggPSBpbmRleCArIHN1YnN0cmluZ0xlbmd0aDtcbiAgICAgICAgaW5kZXggPSBzdHJpbmcuaW5kZXhPZihzdWJzdHJpbmcsIGVuZEluZGV4KTtcbiAgICAgIH0gd2hpbGUgKGluZGV4ICE9PSAtMSk7XG4gICAgICByZXR1cm5WYWx1ZSArPSBzdHJpbmcuc3Vic3RyKGVuZEluZGV4KTtcbiAgICAgIHJldHVybiByZXR1cm5WYWx1ZTtcbiAgICB9O1xuICAgIHZhciBzdHJpbmdFbmNhc2VDUkxGV2l0aEZpcnN0SW5kZXggPSAoc3RyaW5nLCBwcmVmaXgsIHBvc3RmaXgsIGluZGV4KSA9PiB7XG4gICAgICBsZXQgZW5kSW5kZXggPSAwO1xuICAgICAgbGV0IHJldHVyblZhbHVlID0gXCJcIjtcbiAgICAgIGRvIHtcbiAgICAgICAgY29uc3QgZ290Q1IgPSBzdHJpbmdbaW5kZXggLSAxXSA9PT0gXCJcXHJcIjtcbiAgICAgICAgcmV0dXJuVmFsdWUgKz0gc3RyaW5nLnN1YnN0cihlbmRJbmRleCwgKGdvdENSID8gaW5kZXggLSAxIDogaW5kZXgpIC0gZW5kSW5kZXgpICsgcHJlZml4ICsgKGdvdENSID8gXCJcXHJcXG5cIiA6IFwiXFxuXCIpICsgcG9zdGZpeDtcbiAgICAgICAgZW5kSW5kZXggPSBpbmRleCArIDE7XG4gICAgICAgIGluZGV4ID0gc3RyaW5nLmluZGV4T2YoXCJcXG5cIiwgZW5kSW5kZXgpO1xuICAgICAgfSB3aGlsZSAoaW5kZXggIT09IC0xKTtcbiAgICAgIHJldHVyblZhbHVlICs9IHN0cmluZy5zdWJzdHIoZW5kSW5kZXgpO1xuICAgICAgcmV0dXJuIHJldHVyblZhbHVlO1xuICAgIH07XG4gICAgbW9kdWxlMi5leHBvcnRzID0ge1xuICAgICAgc3RyaW5nUmVwbGFjZUFsbCxcbiAgICAgIHN0cmluZ0VuY2FzZUNSTEZXaXRoRmlyc3RJbmRleFxuICAgIH07XG4gIH1cbn0pO1xuXG4vLyBub2RlX21vZHVsZXMvY2hhbGsvc291cmNlL3RlbXBsYXRlcy5qc1xudmFyIHJlcXVpcmVfdGVtcGxhdGVzID0gX19jb21tb25KUyh7XG4gIFwibm9kZV9tb2R1bGVzL2NoYWxrL3NvdXJjZS90ZW1wbGF0ZXMuanNcIihleHBvcnRzMiwgbW9kdWxlMikge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIHZhciBURU1QTEFURV9SRUdFWCA9IC8oPzpcXFxcKHUoPzpbYS1mXFxkXXs0fXxcXHtbYS1mXFxkXXsxLDZ9XFx9KXx4W2EtZlxcZF17Mn18LikpfCg/Olxceyh+KT8oXFx3Kyg/OlxcKFteKV0qXFwpKT8oPzpcXC5cXHcrKD86XFwoW14pXSpcXCkpPykqKSg/OlsgXFx0XXwoPz1cXHI/XFxuKSkpfChcXH0pfCgoPzoufFtcXHJcXG5cXGZdKSs/KS9naTtcbiAgICB2YXIgU1RZTEVfUkVHRVggPSAvKD86XnxcXC4pKFxcdyspKD86XFwoKFteKV0qKVxcKSk/L2c7XG4gICAgdmFyIFNUUklOR19SRUdFWCA9IC9eKFsnXCJdKSgoPzpcXFxcLnwoPyFcXDEpW15cXFxcXSkqKVxcMSQvO1xuICAgIHZhciBFU0NBUEVfUkVHRVggPSAvXFxcXCh1KD86W2EtZlxcZF17NH18e1thLWZcXGRdezEsNn19KXx4W2EtZlxcZF17Mn18Lil8KFteXFxcXF0pL2dpO1xuICAgIHZhciBFU0NBUEVTID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoW1xuICAgICAgW1wiblwiLCBcIlxcblwiXSxcbiAgICAgIFtcInJcIiwgXCJcXHJcIl0sXG4gICAgICBbXCJ0XCIsIFwiXHRcIl0sXG4gICAgICBbXCJiXCIsIFwiXFxiXCJdLFxuICAgICAgW1wiZlwiLCBcIlxcZlwiXSxcbiAgICAgIFtcInZcIiwgXCJcXHZcIl0sXG4gICAgICBbXCIwXCIsIFwiXFwwXCJdLFxuICAgICAgW1wiXFxcXFwiLCBcIlxcXFxcIl0sXG4gICAgICBbXCJlXCIsIFwiXFx4MUJcIl0sXG4gICAgICBbXCJhXCIsIFwiXFx4MDdcIl1cbiAgICBdKTtcbiAgICBmdW5jdGlvbiB1bmVzY2FwZShjKSB7XG4gICAgICBjb25zdCB1ID0gY1swXSA9PT0gXCJ1XCI7XG4gICAgICBjb25zdCBicmFja2V0ID0gY1sxXSA9PT0gXCJ7XCI7XG4gICAgICBpZiAodSAmJiAhYnJhY2tldCAmJiBjLmxlbmd0aCA9PT0gNSB8fCBjWzBdID09PSBcInhcIiAmJiBjLmxlbmd0aCA9PT0gMykge1xuICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShwYXJzZUludChjLnNsaWNlKDEpLCAxNikpO1xuICAgICAgfVxuICAgICAgaWYgKHUgJiYgYnJhY2tldCkge1xuICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21Db2RlUG9pbnQocGFyc2VJbnQoYy5zbGljZSgyLCAtMSksIDE2KSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gRVNDQVBFUy5nZXQoYykgfHwgYztcbiAgICB9XG4gICAgZnVuY3Rpb24gcGFyc2VBcmd1bWVudHMobmFtZSwgYXJndW1lbnRzXykge1xuICAgICAgY29uc3QgcmVzdWx0cyA9IFtdO1xuICAgICAgY29uc3QgY2h1bmtzID0gYXJndW1lbnRzXy50cmltKCkuc3BsaXQoL1xccyosXFxzKi9nKTtcbiAgICAgIGxldCBtYXRjaGVzO1xuICAgICAgZm9yIChjb25zdCBjaHVuayBvZiBjaHVua3MpIHtcbiAgICAgICAgY29uc3QgbnVtYmVyID0gTnVtYmVyKGNodW5rKTtcbiAgICAgICAgaWYgKCFOdW1iZXIuaXNOYU4obnVtYmVyKSkge1xuICAgICAgICAgIHJlc3VsdHMucHVzaChudW1iZXIpO1xuICAgICAgICB9IGVsc2UgaWYgKG1hdGNoZXMgPSBjaHVuay5tYXRjaChTVFJJTkdfUkVHRVgpKSB7XG4gICAgICAgICAgcmVzdWx0cy5wdXNoKG1hdGNoZXNbMl0ucmVwbGFjZShFU0NBUEVfUkVHRVgsIChtLCBlc2NhcGUsIGNoYXJhY3RlcikgPT4gZXNjYXBlID8gdW5lc2NhcGUoZXNjYXBlKSA6IGNoYXJhY3RlcikpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBDaGFsayB0ZW1wbGF0ZSBzdHlsZSBhcmd1bWVudDogJHtjaHVua30gKGluIHN0eWxlICcke25hbWV9JylgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBhcnNlU3R5bGUoc3R5bGUpIHtcbiAgICAgIFNUWUxFX1JFR0VYLmxhc3RJbmRleCA9IDA7XG4gICAgICBjb25zdCByZXN1bHRzID0gW107XG4gICAgICBsZXQgbWF0Y2hlcztcbiAgICAgIHdoaWxlICgobWF0Y2hlcyA9IFNUWUxFX1JFR0VYLmV4ZWMoc3R5bGUpKSAhPT0gbnVsbCkge1xuICAgICAgICBjb25zdCBuYW1lID0gbWF0Y2hlc1sxXTtcbiAgICAgICAgaWYgKG1hdGNoZXNbMl0pIHtcbiAgICAgICAgICBjb25zdCBhcmdzID0gcGFyc2VBcmd1bWVudHMobmFtZSwgbWF0Y2hlc1syXSk7XG4gICAgICAgICAgcmVzdWx0cy5wdXNoKFtuYW1lXS5jb25jYXQoYXJncykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdHMucHVzaChbbmFtZV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9XG4gICAgZnVuY3Rpb24gYnVpbGRTdHlsZShjaGFsazIsIHN0eWxlcykge1xuICAgICAgY29uc3QgZW5hYmxlZCA9IHt9O1xuICAgICAgZm9yIChjb25zdCBsYXllciBvZiBzdHlsZXMpIHtcbiAgICAgICAgZm9yIChjb25zdCBzdHlsZSBvZiBsYXllci5zdHlsZXMpIHtcbiAgICAgICAgICBlbmFibGVkW3N0eWxlWzBdXSA9IGxheWVyLmludmVyc2UgPyBudWxsIDogc3R5bGUuc2xpY2UoMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxldCBjdXJyZW50ID0gY2hhbGsyO1xuICAgICAgZm9yIChjb25zdCBbc3R5bGVOYW1lLCBzdHlsZXMyXSBvZiBPYmplY3QuZW50cmllcyhlbmFibGVkKSkge1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoc3R5bGVzMikpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIShzdHlsZU5hbWUgaW4gY3VycmVudCkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gQ2hhbGsgc3R5bGU6ICR7c3R5bGVOYW1lfWApO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnQgPSBzdHlsZXMyLmxlbmd0aCA+IDAgPyBjdXJyZW50W3N0eWxlTmFtZV0oLi4uc3R5bGVzMikgOiBjdXJyZW50W3N0eWxlTmFtZV07XG4gICAgICB9XG4gICAgICByZXR1cm4gY3VycmVudDtcbiAgICB9XG4gICAgbW9kdWxlMi5leHBvcnRzID0gKGNoYWxrMiwgdGVtcG9yYXJ5KSA9PiB7XG4gICAgICBjb25zdCBzdHlsZXMgPSBbXTtcbiAgICAgIGNvbnN0IGNodW5rcyA9IFtdO1xuICAgICAgbGV0IGNodW5rID0gW107XG4gICAgICB0ZW1wb3JhcnkucmVwbGFjZShURU1QTEFURV9SRUdFWCwgKG0sIGVzY2FwZUNoYXJhY3RlciwgaW52ZXJzZSwgc3R5bGUsIGNsb3NlLCBjaGFyYWN0ZXIpID0+IHtcbiAgICAgICAgaWYgKGVzY2FwZUNoYXJhY3Rlcikge1xuICAgICAgICAgIGNodW5rLnB1c2godW5lc2NhcGUoZXNjYXBlQ2hhcmFjdGVyKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoc3R5bGUpIHtcbiAgICAgICAgICBjb25zdCBzdHJpbmcgPSBjaHVuay5qb2luKFwiXCIpO1xuICAgICAgICAgIGNodW5rID0gW107XG4gICAgICAgICAgY2h1bmtzLnB1c2goc3R5bGVzLmxlbmd0aCA9PT0gMCA/IHN0cmluZyA6IGJ1aWxkU3R5bGUoY2hhbGsyLCBzdHlsZXMpKHN0cmluZykpO1xuICAgICAgICAgIHN0eWxlcy5wdXNoKHsgaW52ZXJzZSwgc3R5bGVzOiBwYXJzZVN0eWxlKHN0eWxlKSB9KTtcbiAgICAgICAgfSBlbHNlIGlmIChjbG9zZSkge1xuICAgICAgICAgIGlmIChzdHlsZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGb3VuZCBleHRyYW5lb3VzIH0gaW4gQ2hhbGsgdGVtcGxhdGUgbGl0ZXJhbFwiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2h1bmtzLnB1c2goYnVpbGRTdHlsZShjaGFsazIsIHN0eWxlcykoY2h1bmsuam9pbihcIlwiKSkpO1xuICAgICAgICAgIGNodW5rID0gW107XG4gICAgICAgICAgc3R5bGVzLnBvcCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNodW5rLnB1c2goY2hhcmFjdGVyKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBjaHVua3MucHVzaChjaHVuay5qb2luKFwiXCIpKTtcbiAgICAgIGlmIChzdHlsZXMubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBlcnJNZXNzYWdlID0gYENoYWxrIHRlbXBsYXRlIGxpdGVyYWwgaXMgbWlzc2luZyAke3N0eWxlcy5sZW5ndGh9IGNsb3NpbmcgYnJhY2tldCR7c3R5bGVzLmxlbmd0aCA9PT0gMSA/IFwiXCIgOiBcInNcIn0gKFxcYH1cXGApYDtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVyck1lc3NhZ2UpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNodW5rcy5qb2luKFwiXCIpO1xuICAgIH07XG4gIH1cbn0pO1xuXG4vLyBub2RlX21vZHVsZXMvY2hhbGsvc291cmNlL2luZGV4LmpzXG52YXIgcmVxdWlyZV9zb3VyY2UgPSBfX2NvbW1vbkpTKHtcbiAgXCJub2RlX21vZHVsZXMvY2hhbGsvc291cmNlL2luZGV4LmpzXCIoZXhwb3J0czIsIG1vZHVsZTIpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICB2YXIgYW5zaVN0eWxlcyA9IHJlcXVpcmVfYW5zaV9zdHlsZXMoKTtcbiAgICB2YXIgeyBzdGRvdXQ6IHN0ZG91dENvbG9yLCBzdGRlcnI6IHN0ZGVyckNvbG9yIH0gPSByZXF1aXJlX3N1cHBvcnRzX2NvbG9yKCk7XG4gICAgdmFyIHtcbiAgICAgIHN0cmluZ1JlcGxhY2VBbGwsXG4gICAgICBzdHJpbmdFbmNhc2VDUkxGV2l0aEZpcnN0SW5kZXhcbiAgICB9ID0gcmVxdWlyZV91dGlsKCk7XG4gICAgdmFyIHsgaXNBcnJheSB9ID0gQXJyYXk7XG4gICAgdmFyIGxldmVsTWFwcGluZyA9IFtcbiAgICAgIFwiYW5zaVwiLFxuICAgICAgXCJhbnNpXCIsXG4gICAgICBcImFuc2kyNTZcIixcbiAgICAgIFwiYW5zaTE2bVwiXG4gICAgXTtcbiAgICB2YXIgc3R5bGVzID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdmFyIGFwcGx5T3B0aW9ucyA9IChvYmplY3QsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICAgICAgaWYgKG9wdGlvbnMubGV2ZWwgJiYgIShOdW1iZXIuaXNJbnRlZ2VyKG9wdGlvbnMubGV2ZWwpICYmIG9wdGlvbnMubGV2ZWwgPj0gMCAmJiBvcHRpb25zLmxldmVsIDw9IDMpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBgbGV2ZWxgIG9wdGlvbiBzaG91bGQgYmUgYW4gaW50ZWdlciBmcm9tIDAgdG8gM1wiKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGNvbG9yTGV2ZWwgPSBzdGRvdXRDb2xvciA/IHN0ZG91dENvbG9yLmxldmVsIDogMDtcbiAgICAgIG9iamVjdC5sZXZlbCA9IG9wdGlvbnMubGV2ZWwgPT09IHZvaWQgMCA/IGNvbG9yTGV2ZWwgOiBvcHRpb25zLmxldmVsO1xuICAgIH07XG4gICAgdmFyIENoYWxrQ2xhc3MgPSBjbGFzcyB7XG4gICAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBjaGFsa0ZhY3Rvcnkob3B0aW9ucyk7XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgY2hhbGtGYWN0b3J5ID0gKG9wdGlvbnMpID0+IHtcbiAgICAgIGNvbnN0IGNoYWxrMyA9IHt9O1xuICAgICAgYXBwbHlPcHRpb25zKGNoYWxrMywgb3B0aW9ucyk7XG4gICAgICBjaGFsazMudGVtcGxhdGUgPSAoLi4uYXJndW1lbnRzXykgPT4gY2hhbGtUYWcoY2hhbGszLnRlbXBsYXRlLCAuLi5hcmd1bWVudHNfKTtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihjaGFsazMsIENoYWxrLnByb3RvdHlwZSk7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoY2hhbGszLnRlbXBsYXRlLCBjaGFsazMpO1xuICAgICAgY2hhbGszLnRlbXBsYXRlLmNvbnN0cnVjdG9yID0gKCkgPT4ge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJgY2hhbGsuY29uc3RydWN0b3IoKWAgaXMgZGVwcmVjYXRlZC4gVXNlIGBuZXcgY2hhbGsuSW5zdGFuY2UoKWAgaW5zdGVhZC5cIik7XG4gICAgICB9O1xuICAgICAgY2hhbGszLnRlbXBsYXRlLkluc3RhbmNlID0gQ2hhbGtDbGFzcztcbiAgICAgIHJldHVybiBjaGFsazMudGVtcGxhdGU7XG4gICAgfTtcbiAgICBmdW5jdGlvbiBDaGFsayhvcHRpb25zKSB7XG4gICAgICByZXR1cm4gY2hhbGtGYWN0b3J5KG9wdGlvbnMpO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IFtzdHlsZU5hbWUsIHN0eWxlXSBvZiBPYmplY3QuZW50cmllcyhhbnNpU3R5bGVzKSkge1xuICAgICAgc3R5bGVzW3N0eWxlTmFtZV0gPSB7XG4gICAgICAgIGdldCgpIHtcbiAgICAgICAgICBjb25zdCBidWlsZGVyID0gY3JlYXRlQnVpbGRlcih0aGlzLCBjcmVhdGVTdHlsZXIoc3R5bGUub3Blbiwgc3R5bGUuY2xvc2UsIHRoaXMuX3N0eWxlciksIHRoaXMuX2lzRW1wdHkpO1xuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBzdHlsZU5hbWUsIHsgdmFsdWU6IGJ1aWxkZXIgfSk7XG4gICAgICAgICAgcmV0dXJuIGJ1aWxkZXI7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICAgIHN0eWxlcy52aXNpYmxlID0ge1xuICAgICAgZ2V0KCkge1xuICAgICAgICBjb25zdCBidWlsZGVyID0gY3JlYXRlQnVpbGRlcih0aGlzLCB0aGlzLl9zdHlsZXIsIHRydWUpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJ2aXNpYmxlXCIsIHsgdmFsdWU6IGJ1aWxkZXIgfSk7XG4gICAgICAgIHJldHVybiBidWlsZGVyO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIHVzZWRNb2RlbHMgPSBbXCJyZ2JcIiwgXCJoZXhcIiwgXCJrZXl3b3JkXCIsIFwiaHNsXCIsIFwiaHN2XCIsIFwiaHdiXCIsIFwiYW5zaVwiLCBcImFuc2kyNTZcIl07XG4gICAgZm9yIChjb25zdCBtb2RlbCBvZiB1c2VkTW9kZWxzKSB7XG4gICAgICBzdHlsZXNbbW9kZWxdID0ge1xuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgY29uc3QgeyBsZXZlbCB9ID0gdGhpcztcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oLi4uYXJndW1lbnRzXykge1xuICAgICAgICAgICAgY29uc3Qgc3R5bGVyID0gY3JlYXRlU3R5bGVyKGFuc2lTdHlsZXMuY29sb3JbbGV2ZWxNYXBwaW5nW2xldmVsXV1bbW9kZWxdKC4uLmFyZ3VtZW50c18pLCBhbnNpU3R5bGVzLmNvbG9yLmNsb3NlLCB0aGlzLl9zdHlsZXIpO1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUJ1aWxkZXIodGhpcywgc3R5bGVyLCB0aGlzLl9pc0VtcHR5KTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IG1vZGVsIG9mIHVzZWRNb2RlbHMpIHtcbiAgICAgIGNvbnN0IGJnTW9kZWwgPSBcImJnXCIgKyBtb2RlbFswXS50b1VwcGVyQ2FzZSgpICsgbW9kZWwuc2xpY2UoMSk7XG4gICAgICBzdHlsZXNbYmdNb2RlbF0gPSB7XG4gICAgICAgIGdldCgpIHtcbiAgICAgICAgICBjb25zdCB7IGxldmVsIH0gPSB0aGlzO1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbiguLi5hcmd1bWVudHNfKSB7XG4gICAgICAgICAgICBjb25zdCBzdHlsZXIgPSBjcmVhdGVTdHlsZXIoYW5zaVN0eWxlcy5iZ0NvbG9yW2xldmVsTWFwcGluZ1tsZXZlbF1dW21vZGVsXSguLi5hcmd1bWVudHNfKSwgYW5zaVN0eWxlcy5iZ0NvbG9yLmNsb3NlLCB0aGlzLl9zdHlsZXIpO1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUJ1aWxkZXIodGhpcywgc3R5bGVyLCB0aGlzLl9pc0VtcHR5KTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgICB2YXIgcHJvdG8gPSBPYmplY3QuZGVmaW5lUHJvcGVydGllcygoKSA9PiB7XG4gICAgfSwge1xuICAgICAgLi4uc3R5bGVzLFxuICAgICAgbGV2ZWw6IHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0KCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLl9nZW5lcmF0b3IubGV2ZWw7XG4gICAgICAgIH0sXG4gICAgICAgIHNldChsZXZlbCkge1xuICAgICAgICAgIHRoaXMuX2dlbmVyYXRvci5sZXZlbCA9IGxldmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgdmFyIGNyZWF0ZVN0eWxlciA9IChvcGVuLCBjbG9zZSwgcGFyZW50KSA9PiB7XG4gICAgICBsZXQgb3BlbkFsbDtcbiAgICAgIGxldCBjbG9zZUFsbDtcbiAgICAgIGlmIChwYXJlbnQgPT09IHZvaWQgMCkge1xuICAgICAgICBvcGVuQWxsID0gb3BlbjtcbiAgICAgICAgY2xvc2VBbGwgPSBjbG9zZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9wZW5BbGwgPSBwYXJlbnQub3BlbkFsbCArIG9wZW47XG4gICAgICAgIGNsb3NlQWxsID0gY2xvc2UgKyBwYXJlbnQuY2xvc2VBbGw7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBvcGVuLFxuICAgICAgICBjbG9zZSxcbiAgICAgICAgb3BlbkFsbCxcbiAgICAgICAgY2xvc2VBbGwsXG4gICAgICAgIHBhcmVudFxuICAgICAgfTtcbiAgICB9O1xuICAgIHZhciBjcmVhdGVCdWlsZGVyID0gKHNlbGYyLCBfc3R5bGVyLCBfaXNFbXB0eSkgPT4ge1xuICAgICAgY29uc3QgYnVpbGRlciA9ICguLi5hcmd1bWVudHNfKSA9PiB7XG4gICAgICAgIGlmIChpc0FycmF5KGFyZ3VtZW50c19bMF0pICYmIGlzQXJyYXkoYXJndW1lbnRzX1swXS5yYXcpKSB7XG4gICAgICAgICAgcmV0dXJuIGFwcGx5U3R5bGUoYnVpbGRlciwgY2hhbGtUYWcoYnVpbGRlciwgLi4uYXJndW1lbnRzXykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcHBseVN0eWxlKGJ1aWxkZXIsIGFyZ3VtZW50c18ubGVuZ3RoID09PSAxID8gXCJcIiArIGFyZ3VtZW50c19bMF0gOiBhcmd1bWVudHNfLmpvaW4oXCIgXCIpKTtcbiAgICAgIH07XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoYnVpbGRlciwgcHJvdG8pO1xuICAgICAgYnVpbGRlci5fZ2VuZXJhdG9yID0gc2VsZjI7XG4gICAgICBidWlsZGVyLl9zdHlsZXIgPSBfc3R5bGVyO1xuICAgICAgYnVpbGRlci5faXNFbXB0eSA9IF9pc0VtcHR5O1xuICAgICAgcmV0dXJuIGJ1aWxkZXI7XG4gICAgfTtcbiAgICB2YXIgYXBwbHlTdHlsZSA9IChzZWxmMiwgc3RyaW5nKSA9PiB7XG4gICAgICBpZiAoc2VsZjIubGV2ZWwgPD0gMCB8fCAhc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBzZWxmMi5faXNFbXB0eSA/IFwiXCIgOiBzdHJpbmc7XG4gICAgICB9XG4gICAgICBsZXQgc3R5bGVyID0gc2VsZjIuX3N0eWxlcjtcbiAgICAgIGlmIChzdHlsZXIgPT09IHZvaWQgMCkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgY29uc3QgeyBvcGVuQWxsLCBjbG9zZUFsbCB9ID0gc3R5bGVyO1xuICAgICAgaWYgKHN0cmluZy5pbmRleE9mKFwiXFx4MUJcIikgIT09IC0xKSB7XG4gICAgICAgIHdoaWxlIChzdHlsZXIgIT09IHZvaWQgMCkge1xuICAgICAgICAgIHN0cmluZyA9IHN0cmluZ1JlcGxhY2VBbGwoc3RyaW5nLCBzdHlsZXIuY2xvc2UsIHN0eWxlci5vcGVuKTtcbiAgICAgICAgICBzdHlsZXIgPSBzdHlsZXIucGFyZW50O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCBsZkluZGV4ID0gc3RyaW5nLmluZGV4T2YoXCJcXG5cIik7XG4gICAgICBpZiAobGZJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgc3RyaW5nID0gc3RyaW5nRW5jYXNlQ1JMRldpdGhGaXJzdEluZGV4KHN0cmluZywgY2xvc2VBbGwsIG9wZW5BbGwsIGxmSW5kZXgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9wZW5BbGwgKyBzdHJpbmcgKyBjbG9zZUFsbDtcbiAgICB9O1xuICAgIHZhciB0ZW1wbGF0ZTtcbiAgICB2YXIgY2hhbGtUYWcgPSAoY2hhbGszLCAuLi5zdHJpbmdzKSA9PiB7XG4gICAgICBjb25zdCBbZmlyc3RTdHJpbmddID0gc3RyaW5ncztcbiAgICAgIGlmICghaXNBcnJheShmaXJzdFN0cmluZykgfHwgIWlzQXJyYXkoZmlyc3RTdHJpbmcucmF3KSkge1xuICAgICAgICByZXR1cm4gc3RyaW5ncy5qb2luKFwiIFwiKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGFyZ3VtZW50c18gPSBzdHJpbmdzLnNsaWNlKDEpO1xuICAgICAgY29uc3QgcGFydHMgPSBbZmlyc3RTdHJpbmcucmF3WzBdXTtcbiAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgZmlyc3RTdHJpbmcubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcGFydHMucHVzaChcbiAgICAgICAgICBTdHJpbmcoYXJndW1lbnRzX1tpIC0gMV0pLnJlcGxhY2UoL1t7fVxcXFxdL2csIFwiXFxcXCQmXCIpLFxuICAgICAgICAgIFN0cmluZyhmaXJzdFN0cmluZy5yYXdbaV0pXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAodGVtcGxhdGUgPT09IHZvaWQgMCkge1xuICAgICAgICB0ZW1wbGF0ZSA9IHJlcXVpcmVfdGVtcGxhdGVzKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGVtcGxhdGUoY2hhbGszLCBwYXJ0cy5qb2luKFwiXCIpKTtcbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKENoYWxrLnByb3RvdHlwZSwgc3R5bGVzKTtcbiAgICB2YXIgY2hhbGsyID0gQ2hhbGsoKTtcbiAgICBjaGFsazIuc3VwcG9ydHNDb2xvciA9IHN0ZG91dENvbG9yO1xuICAgIGNoYWxrMi5zdGRlcnIgPSBDaGFsayh7IGxldmVsOiBzdGRlcnJDb2xvciA/IHN0ZGVyckNvbG9yLmxldmVsIDogMCB9KTtcbiAgICBjaGFsazIuc3RkZXJyLnN1cHBvcnRzQ29sb3IgPSBzdGRlcnJDb2xvcjtcbiAgICBtb2R1bGUyLmV4cG9ydHMgPSBjaGFsazI7XG4gIH1cbn0pO1xuXG4vLyBub2RlX21vZHVsZXMvbG9kYXNoL2xvZGFzaC5qc1xudmFyIHJlcXVpcmVfbG9kYXNoID0gX19jb21tb25KUyh7XG4gIFwibm9kZV9tb2R1bGVzL2xvZGFzaC9sb2Rhc2guanNcIihleHBvcnRzMiwgbW9kdWxlMikge1xuICAgIChmdW5jdGlvbigpIHtcbiAgICAgIHZhciB1bmRlZmluZWQyO1xuICAgICAgdmFyIFZFUlNJT04gPSBcIjQuMTcuMjFcIjtcbiAgICAgIHZhciBMQVJHRV9BUlJBWV9TSVpFID0gMjAwO1xuICAgICAgdmFyIENPUkVfRVJST1JfVEVYVCA9IFwiVW5zdXBwb3J0ZWQgY29yZS1qcyB1c2UuIFRyeSBodHRwczovL25wbXMuaW8vc2VhcmNoP3E9cG9ueWZpbGwuXCIsIEZVTkNfRVJST1JfVEVYVCA9IFwiRXhwZWN0ZWQgYSBmdW5jdGlvblwiLCBJTlZBTElEX1RFTVBMX1ZBUl9FUlJPUl9URVhUID0gXCJJbnZhbGlkIGB2YXJpYWJsZWAgb3B0aW9uIHBhc3NlZCBpbnRvIGBfLnRlbXBsYXRlYFwiO1xuICAgICAgdmFyIEhBU0hfVU5ERUZJTkVEID0gXCJfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fXCI7XG4gICAgICB2YXIgTUFYX01FTU9JWkVfU0laRSA9IDUwMDtcbiAgICAgIHZhciBQTEFDRUhPTERFUiA9IFwiX19sb2Rhc2hfcGxhY2Vob2xkZXJfX1wiO1xuICAgICAgdmFyIENMT05FX0RFRVBfRkxBRyA9IDEsIENMT05FX0ZMQVRfRkxBRyA9IDIsIENMT05FX1NZTUJPTFNfRkxBRyA9IDQ7XG4gICAgICB2YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLCBDT01QQVJFX1VOT1JERVJFRF9GTEFHID0gMjtcbiAgICAgIHZhciBXUkFQX0JJTkRfRkxBRyA9IDEsIFdSQVBfQklORF9LRVlfRkxBRyA9IDIsIFdSQVBfQ1VSUllfQk9VTkRfRkxBRyA9IDQsIFdSQVBfQ1VSUllfRkxBRyA9IDgsIFdSQVBfQ1VSUllfUklHSFRfRkxBRyA9IDE2LCBXUkFQX1BBUlRJQUxfRkxBRyA9IDMyLCBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyA9IDY0LCBXUkFQX0FSWV9GTEFHID0gMTI4LCBXUkFQX1JFQVJHX0ZMQUcgPSAyNTYsIFdSQVBfRkxJUF9GTEFHID0gNTEyO1xuICAgICAgdmFyIERFRkFVTFRfVFJVTkNfTEVOR1RIID0gMzAsIERFRkFVTFRfVFJVTkNfT01JU1NJT04gPSBcIi4uLlwiO1xuICAgICAgdmFyIEhPVF9DT1VOVCA9IDgwMCwgSE9UX1NQQU4gPSAxNjtcbiAgICAgIHZhciBMQVpZX0ZJTFRFUl9GTEFHID0gMSwgTEFaWV9NQVBfRkxBRyA9IDIsIExBWllfV0hJTEVfRkxBRyA9IDM7XG4gICAgICB2YXIgSU5GSU5JVFkgPSAxIC8gMCwgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTEsIE1BWF9JTlRFR0VSID0gMTc5NzY5MzEzNDg2MjMxNTdlMjkyLCBOQU4gPSAwIC8gMDtcbiAgICAgIHZhciBNQVhfQVJSQVlfTEVOR1RIID0gNDI5NDk2NzI5NSwgTUFYX0FSUkFZX0lOREVYID0gTUFYX0FSUkFZX0xFTkdUSCAtIDEsIEhBTEZfTUFYX0FSUkFZX0xFTkdUSCA9IE1BWF9BUlJBWV9MRU5HVEggPj4+IDE7XG4gICAgICB2YXIgd3JhcEZsYWdzID0gW1xuICAgICAgICBbXCJhcnlcIiwgV1JBUF9BUllfRkxBR10sXG4gICAgICAgIFtcImJpbmRcIiwgV1JBUF9CSU5EX0ZMQUddLFxuICAgICAgICBbXCJiaW5kS2V5XCIsIFdSQVBfQklORF9LRVlfRkxBR10sXG4gICAgICAgIFtcImN1cnJ5XCIsIFdSQVBfQ1VSUllfRkxBR10sXG4gICAgICAgIFtcImN1cnJ5UmlnaHRcIiwgV1JBUF9DVVJSWV9SSUdIVF9GTEFHXSxcbiAgICAgICAgW1wiZmxpcFwiLCBXUkFQX0ZMSVBfRkxBR10sXG4gICAgICAgIFtcInBhcnRpYWxcIiwgV1JBUF9QQVJUSUFMX0ZMQUddLFxuICAgICAgICBbXCJwYXJ0aWFsUmlnaHRcIiwgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUddLFxuICAgICAgICBbXCJyZWFyZ1wiLCBXUkFQX1JFQVJHX0ZMQUddXG4gICAgICBdO1xuICAgICAgdmFyIGFyZ3NUYWcgPSBcIltvYmplY3QgQXJndW1lbnRzXVwiLCBhcnJheVRhZyA9IFwiW29iamVjdCBBcnJheV1cIiwgYXN5bmNUYWcgPSBcIltvYmplY3QgQXN5bmNGdW5jdGlvbl1cIiwgYm9vbFRhZyA9IFwiW29iamVjdCBCb29sZWFuXVwiLCBkYXRlVGFnID0gXCJbb2JqZWN0IERhdGVdXCIsIGRvbUV4Y1RhZyA9IFwiW29iamVjdCBET01FeGNlcHRpb25dXCIsIGVycm9yVGFnID0gXCJbb2JqZWN0IEVycm9yXVwiLCBmdW5jVGFnID0gXCJbb2JqZWN0IEZ1bmN0aW9uXVwiLCBnZW5UYWcgPSBcIltvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dXCIsIG1hcFRhZyA9IFwiW29iamVjdCBNYXBdXCIsIG51bWJlclRhZyA9IFwiW29iamVjdCBOdW1iZXJdXCIsIG51bGxUYWcgPSBcIltvYmplY3QgTnVsbF1cIiwgb2JqZWN0VGFnID0gXCJbb2JqZWN0IE9iamVjdF1cIiwgcHJvbWlzZVRhZyA9IFwiW29iamVjdCBQcm9taXNlXVwiLCBwcm94eVRhZyA9IFwiW29iamVjdCBQcm94eV1cIiwgcmVnZXhwVGFnID0gXCJbb2JqZWN0IFJlZ0V4cF1cIiwgc2V0VGFnID0gXCJbb2JqZWN0IFNldF1cIiwgc3RyaW5nVGFnID0gXCJbb2JqZWN0IFN0cmluZ11cIiwgc3ltYm9sVGFnID0gXCJbb2JqZWN0IFN5bWJvbF1cIiwgdW5kZWZpbmVkVGFnID0gXCJbb2JqZWN0IFVuZGVmaW5lZF1cIiwgd2Vha01hcFRhZyA9IFwiW29iamVjdCBXZWFrTWFwXVwiLCB3ZWFrU2V0VGFnID0gXCJbb2JqZWN0IFdlYWtTZXRdXCI7XG4gICAgICB2YXIgYXJyYXlCdWZmZXJUYWcgPSBcIltvYmplY3QgQXJyYXlCdWZmZXJdXCIsIGRhdGFWaWV3VGFnID0gXCJbb2JqZWN0IERhdGFWaWV3XVwiLCBmbG9hdDMyVGFnID0gXCJbb2JqZWN0IEZsb2F0MzJBcnJheV1cIiwgZmxvYXQ2NFRhZyA9IFwiW29iamVjdCBGbG9hdDY0QXJyYXldXCIsIGludDhUYWcgPSBcIltvYmplY3QgSW50OEFycmF5XVwiLCBpbnQxNlRhZyA9IFwiW29iamVjdCBJbnQxNkFycmF5XVwiLCBpbnQzMlRhZyA9IFwiW29iamVjdCBJbnQzMkFycmF5XVwiLCB1aW50OFRhZyA9IFwiW29iamVjdCBVaW50OEFycmF5XVwiLCB1aW50OENsYW1wZWRUYWcgPSBcIltvYmplY3QgVWludDhDbGFtcGVkQXJyYXldXCIsIHVpbnQxNlRhZyA9IFwiW29iamVjdCBVaW50MTZBcnJheV1cIiwgdWludDMyVGFnID0gXCJbb2JqZWN0IFVpbnQzMkFycmF5XVwiO1xuICAgICAgdmFyIHJlRW1wdHlTdHJpbmdMZWFkaW5nID0gL1xcYl9fcCBcXCs9ICcnOy9nLCByZUVtcHR5U3RyaW5nTWlkZGxlID0gL1xcYihfX3AgXFwrPSkgJycgXFwrL2csIHJlRW1wdHlTdHJpbmdUcmFpbGluZyA9IC8oX19lXFwoLio/XFwpfFxcYl9fdFxcKSkgXFwrXFxuJyc7L2c7XG4gICAgICB2YXIgcmVFc2NhcGVkSHRtbCA9IC8mKD86YW1wfGx0fGd0fHF1b3R8IzM5KTsvZywgcmVVbmVzY2FwZWRIdG1sID0gL1smPD5cIiddL2csIHJlSGFzRXNjYXBlZEh0bWwgPSBSZWdFeHAocmVFc2NhcGVkSHRtbC5zb3VyY2UpLCByZUhhc1VuZXNjYXBlZEh0bWwgPSBSZWdFeHAocmVVbmVzY2FwZWRIdG1sLnNvdXJjZSk7XG4gICAgICB2YXIgcmVFc2NhcGUgPSAvPCUtKFtcXHNcXFNdKz8pJT4vZywgcmVFdmFsdWF0ZSA9IC88JShbXFxzXFxTXSs/KSU+L2csIHJlSW50ZXJwb2xhdGUgPSAvPCU9KFtcXHNcXFNdKz8pJT4vZztcbiAgICAgIHZhciByZUlzRGVlcFByb3AgPSAvXFwufFxcWyg/OlteW1xcXV0qfChbXCInXSkoPzooPyFcXDEpW15cXFxcXXxcXFxcLikqP1xcMSlcXF0vLCByZUlzUGxhaW5Qcm9wID0gL15cXHcqJC8sIHJlUHJvcE5hbWUgPSAvW14uW1xcXV0rfFxcWyg/OigtP1xcZCsoPzpcXC5cXGQrKT8pfChbXCInXSkoKD86KD8hXFwyKVteXFxcXF18XFxcXC4pKj8pXFwyKVxcXXwoPz0oPzpcXC58XFxbXFxdKSg/OlxcLnxcXFtcXF18JCkpL2c7XG4gICAgICB2YXIgcmVSZWdFeHBDaGFyID0gL1tcXFxcXiQuKis/KClbXFxde318XS9nLCByZUhhc1JlZ0V4cENoYXIgPSBSZWdFeHAocmVSZWdFeHBDaGFyLnNvdXJjZSk7XG4gICAgICB2YXIgcmVUcmltU3RhcnQgPSAvXlxccysvO1xuICAgICAgdmFyIHJlV2hpdGVzcGFjZSA9IC9cXHMvO1xuICAgICAgdmFyIHJlV3JhcENvbW1lbnQgPSAvXFx7KD86XFxuXFwvXFwqIFxcW3dyYXBwZWQgd2l0aCAuK1xcXSBcXCpcXC8pP1xcbj8vLCByZVdyYXBEZXRhaWxzID0gL1xce1xcblxcL1xcKiBcXFt3cmFwcGVkIHdpdGggKC4rKVxcXSBcXCovLCByZVNwbGl0RGV0YWlscyA9IC8sPyAmIC87XG4gICAgICB2YXIgcmVBc2NpaVdvcmQgPSAvW15cXHgwMC1cXHgyZlxceDNhLVxceDQwXFx4NWItXFx4NjBcXHg3Yi1cXHg3Zl0rL2c7XG4gICAgICB2YXIgcmVGb3JiaWRkZW5JZGVudGlmaWVyQ2hhcnMgPSAvWygpPSx7fVxcW1xcXVxcL1xcc10vO1xuICAgICAgdmFyIHJlRXNjYXBlQ2hhciA9IC9cXFxcKFxcXFwpPy9nO1xuICAgICAgdmFyIHJlRXNUZW1wbGF0ZSA9IC9cXCRcXHsoW15cXFxcfV0qKD86XFxcXC5bXlxcXFx9XSopKilcXH0vZztcbiAgICAgIHZhciByZUZsYWdzID0gL1xcdyokLztcbiAgICAgIHZhciByZUlzQmFkSGV4ID0gL15bLStdMHhbMC05YS1mXSskL2k7XG4gICAgICB2YXIgcmVJc0JpbmFyeSA9IC9eMGJbMDFdKyQvaTtcbiAgICAgIHZhciByZUlzSG9zdEN0b3IgPSAvXlxcW29iamVjdCAuKz9Db25zdHJ1Y3RvclxcXSQvO1xuICAgICAgdmFyIHJlSXNPY3RhbCA9IC9eMG9bMC03XSskL2k7XG4gICAgICB2YXIgcmVJc1VpbnQgPSAvXig/OjB8WzEtOV1cXGQqKSQvO1xuICAgICAgdmFyIHJlTGF0aW4gPSAvW1xceGMwLVxceGQ2XFx4ZDgtXFx4ZjZcXHhmOC1cXHhmZlxcdTAxMDAtXFx1MDE3Zl0vZztcbiAgICAgIHZhciByZU5vTWF0Y2ggPSAvKCReKS87XG4gICAgICB2YXIgcmVVbmVzY2FwZWRTdHJpbmcgPSAvWydcXG5cXHJcXHUyMDI4XFx1MjAyOVxcXFxdL2c7XG4gICAgICB2YXIgcnNBc3RyYWxSYW5nZSA9IFwiXFxcXHVkODAwLVxcXFx1ZGZmZlwiLCByc0NvbWJvTWFya3NSYW5nZSA9IFwiXFxcXHUwMzAwLVxcXFx1MDM2ZlwiLCByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgPSBcIlxcXFx1ZmUyMC1cXFxcdWZlMmZcIiwgcnNDb21ib1N5bWJvbHNSYW5nZSA9IFwiXFxcXHUyMGQwLVxcXFx1MjBmZlwiLCByc0NvbWJvUmFuZ2UgPSByc0NvbWJvTWFya3NSYW5nZSArIHJlQ29tYm9IYWxmTWFya3NSYW5nZSArIHJzQ29tYm9TeW1ib2xzUmFuZ2UsIHJzRGluZ2JhdFJhbmdlID0gXCJcXFxcdTI3MDAtXFxcXHUyN2JmXCIsIHJzTG93ZXJSYW5nZSA9IFwiYS16XFxcXHhkZi1cXFxceGY2XFxcXHhmOC1cXFxceGZmXCIsIHJzTWF0aE9wUmFuZ2UgPSBcIlxcXFx4YWNcXFxceGIxXFxcXHhkN1xcXFx4ZjdcIiwgcnNOb25DaGFyUmFuZ2UgPSBcIlxcXFx4MDAtXFxcXHgyZlxcXFx4M2EtXFxcXHg0MFxcXFx4NWItXFxcXHg2MFxcXFx4N2ItXFxcXHhiZlwiLCByc1B1bmN0dWF0aW9uUmFuZ2UgPSBcIlxcXFx1MjAwMC1cXFxcdTIwNmZcIiwgcnNTcGFjZVJhbmdlID0gXCIgXFxcXHRcXFxceDBiXFxcXGZcXFxceGEwXFxcXHVmZWZmXFxcXG5cXFxcclxcXFx1MjAyOFxcXFx1MjAyOVxcXFx1MTY4MFxcXFx1MTgwZVxcXFx1MjAwMFxcXFx1MjAwMVxcXFx1MjAwMlxcXFx1MjAwM1xcXFx1MjAwNFxcXFx1MjAwNVxcXFx1MjAwNlxcXFx1MjAwN1xcXFx1MjAwOFxcXFx1MjAwOVxcXFx1MjAwYVxcXFx1MjAyZlxcXFx1MjA1ZlxcXFx1MzAwMFwiLCByc1VwcGVyUmFuZ2UgPSBcIkEtWlxcXFx4YzAtXFxcXHhkNlxcXFx4ZDgtXFxcXHhkZVwiLCByc1ZhclJhbmdlID0gXCJcXFxcdWZlMGVcXFxcdWZlMGZcIiwgcnNCcmVha1JhbmdlID0gcnNNYXRoT3BSYW5nZSArIHJzTm9uQ2hhclJhbmdlICsgcnNQdW5jdHVhdGlvblJhbmdlICsgcnNTcGFjZVJhbmdlO1xuICAgICAgdmFyIHJzQXBvcyA9IFwiWydcXHUyMDE5XVwiLCByc0FzdHJhbCA9IFwiW1wiICsgcnNBc3RyYWxSYW5nZSArIFwiXVwiLCByc0JyZWFrID0gXCJbXCIgKyByc0JyZWFrUmFuZ2UgKyBcIl1cIiwgcnNDb21ibyA9IFwiW1wiICsgcnNDb21ib1JhbmdlICsgXCJdXCIsIHJzRGlnaXRzID0gXCJcXFxcZCtcIiwgcnNEaW5nYmF0ID0gXCJbXCIgKyByc0RpbmdiYXRSYW5nZSArIFwiXVwiLCByc0xvd2VyID0gXCJbXCIgKyByc0xvd2VyUmFuZ2UgKyBcIl1cIiwgcnNNaXNjID0gXCJbXlwiICsgcnNBc3RyYWxSYW5nZSArIHJzQnJlYWtSYW5nZSArIHJzRGlnaXRzICsgcnNEaW5nYmF0UmFuZ2UgKyByc0xvd2VyUmFuZ2UgKyByc1VwcGVyUmFuZ2UgKyBcIl1cIiwgcnNGaXR6ID0gXCJcXFxcdWQ4M2NbXFxcXHVkZmZiLVxcXFx1ZGZmZl1cIiwgcnNNb2RpZmllciA9IFwiKD86XCIgKyByc0NvbWJvICsgXCJ8XCIgKyByc0ZpdHogKyBcIilcIiwgcnNOb25Bc3RyYWwgPSBcIlteXCIgKyByc0FzdHJhbFJhbmdlICsgXCJdXCIsIHJzUmVnaW9uYWwgPSBcIig/OlxcXFx1ZDgzY1tcXFxcdWRkZTYtXFxcXHVkZGZmXSl7Mn1cIiwgcnNTdXJyUGFpciA9IFwiW1xcXFx1ZDgwMC1cXFxcdWRiZmZdW1xcXFx1ZGMwMC1cXFxcdWRmZmZdXCIsIHJzVXBwZXIgPSBcIltcIiArIHJzVXBwZXJSYW5nZSArIFwiXVwiLCByc1pXSiA9IFwiXFxcXHUyMDBkXCI7XG4gICAgICB2YXIgcnNNaXNjTG93ZXIgPSBcIig/OlwiICsgcnNMb3dlciArIFwifFwiICsgcnNNaXNjICsgXCIpXCIsIHJzTWlzY1VwcGVyID0gXCIoPzpcIiArIHJzVXBwZXIgKyBcInxcIiArIHJzTWlzYyArIFwiKVwiLCByc09wdENvbnRyTG93ZXIgPSBcIig/OlwiICsgcnNBcG9zICsgXCIoPzpkfGxsfG18cmV8c3x0fHZlKSk/XCIsIHJzT3B0Q29udHJVcHBlciA9IFwiKD86XCIgKyByc0Fwb3MgKyBcIig/OkR8TEx8TXxSRXxTfFR8VkUpKT9cIiwgcmVPcHRNb2QgPSByc01vZGlmaWVyICsgXCI/XCIsIHJzT3B0VmFyID0gXCJbXCIgKyByc1ZhclJhbmdlICsgXCJdP1wiLCByc09wdEpvaW4gPSBcIig/OlwiICsgcnNaV0ogKyBcIig/OlwiICsgW3JzTm9uQXN0cmFsLCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyXS5qb2luKFwifFwiKSArIFwiKVwiICsgcnNPcHRWYXIgKyByZU9wdE1vZCArIFwiKSpcIiwgcnNPcmRMb3dlciA9IFwiXFxcXGQqKD86MXN0fDJuZHwzcmR8KD8hWzEyM10pXFxcXGR0aCkoPz1cXFxcYnxbQS1aX10pXCIsIHJzT3JkVXBwZXIgPSBcIlxcXFxkKig/OjFTVHwyTkR8M1JEfCg/IVsxMjNdKVxcXFxkVEgpKD89XFxcXGJ8W2Etel9dKVwiLCByc1NlcSA9IHJzT3B0VmFyICsgcmVPcHRNb2QgKyByc09wdEpvaW4sIHJzRW1vamkgPSBcIig/OlwiICsgW3JzRGluZ2JhdCwgcnNSZWdpb25hbCwgcnNTdXJyUGFpcl0uam9pbihcInxcIikgKyBcIilcIiArIHJzU2VxLCByc1N5bWJvbCA9IFwiKD86XCIgKyBbcnNOb25Bc3RyYWwgKyByc0NvbWJvICsgXCI/XCIsIHJzQ29tYm8sIHJzUmVnaW9uYWwsIHJzU3VyclBhaXIsIHJzQXN0cmFsXS5qb2luKFwifFwiKSArIFwiKVwiO1xuICAgICAgdmFyIHJlQXBvcyA9IFJlZ0V4cChyc0Fwb3MsIFwiZ1wiKTtcbiAgICAgIHZhciByZUNvbWJvTWFyayA9IFJlZ0V4cChyc0NvbWJvLCBcImdcIik7XG4gICAgICB2YXIgcmVVbmljb2RlID0gUmVnRXhwKHJzRml0eiArIFwiKD89XCIgKyByc0ZpdHogKyBcIil8XCIgKyByc1N5bWJvbCArIHJzU2VxLCBcImdcIik7XG4gICAgICB2YXIgcmVVbmljb2RlV29yZCA9IFJlZ0V4cChbXG4gICAgICAgIHJzVXBwZXIgKyBcIj9cIiArIHJzTG93ZXIgKyBcIitcIiArIHJzT3B0Q29udHJMb3dlciArIFwiKD89XCIgKyBbcnNCcmVhaywgcnNVcHBlciwgXCIkXCJdLmpvaW4oXCJ8XCIpICsgXCIpXCIsXG4gICAgICAgIHJzTWlzY1VwcGVyICsgXCIrXCIgKyByc09wdENvbnRyVXBwZXIgKyBcIig/PVwiICsgW3JzQnJlYWssIHJzVXBwZXIgKyByc01pc2NMb3dlciwgXCIkXCJdLmpvaW4oXCJ8XCIpICsgXCIpXCIsXG4gICAgICAgIHJzVXBwZXIgKyBcIj9cIiArIHJzTWlzY0xvd2VyICsgXCIrXCIgKyByc09wdENvbnRyTG93ZXIsXG4gICAgICAgIHJzVXBwZXIgKyBcIitcIiArIHJzT3B0Q29udHJVcHBlcixcbiAgICAgICAgcnNPcmRVcHBlcixcbiAgICAgICAgcnNPcmRMb3dlcixcbiAgICAgICAgcnNEaWdpdHMsXG4gICAgICAgIHJzRW1vamlcbiAgICAgIF0uam9pbihcInxcIiksIFwiZ1wiKTtcbiAgICAgIHZhciByZUhhc1VuaWNvZGUgPSBSZWdFeHAoXCJbXCIgKyByc1pXSiArIHJzQXN0cmFsUmFuZ2UgKyByc0NvbWJvUmFuZ2UgKyByc1ZhclJhbmdlICsgXCJdXCIpO1xuICAgICAgdmFyIHJlSGFzVW5pY29kZVdvcmQgPSAvW2Etel1bQS1aXXxbQS1aXXsyfVthLXpdfFswLTldW2EtekEtWl18W2EtekEtWl1bMC05XXxbXmEtekEtWjAtOSBdLztcbiAgICAgIHZhciBjb250ZXh0UHJvcHMgPSBbXG4gICAgICAgIFwiQXJyYXlcIixcbiAgICAgICAgXCJCdWZmZXJcIixcbiAgICAgICAgXCJEYXRhVmlld1wiLFxuICAgICAgICBcIkRhdGVcIixcbiAgICAgICAgXCJFcnJvclwiLFxuICAgICAgICBcIkZsb2F0MzJBcnJheVwiLFxuICAgICAgICBcIkZsb2F0NjRBcnJheVwiLFxuICAgICAgICBcIkZ1bmN0aW9uXCIsXG4gICAgICAgIFwiSW50OEFycmF5XCIsXG4gICAgICAgIFwiSW50MTZBcnJheVwiLFxuICAgICAgICBcIkludDMyQXJyYXlcIixcbiAgICAgICAgXCJNYXBcIixcbiAgICAgICAgXCJNYXRoXCIsXG4gICAgICAgIFwiT2JqZWN0XCIsXG4gICAgICAgIFwiUHJvbWlzZVwiLFxuICAgICAgICBcIlJlZ0V4cFwiLFxuICAgICAgICBcIlNldFwiLFxuICAgICAgICBcIlN0cmluZ1wiLFxuICAgICAgICBcIlN5bWJvbFwiLFxuICAgICAgICBcIlR5cGVFcnJvclwiLFxuICAgICAgICBcIlVpbnQ4QXJyYXlcIixcbiAgICAgICAgXCJVaW50OENsYW1wZWRBcnJheVwiLFxuICAgICAgICBcIlVpbnQxNkFycmF5XCIsXG4gICAgICAgIFwiVWludDMyQXJyYXlcIixcbiAgICAgICAgXCJXZWFrTWFwXCIsXG4gICAgICAgIFwiX1wiLFxuICAgICAgICBcImNsZWFyVGltZW91dFwiLFxuICAgICAgICBcImlzRmluaXRlXCIsXG4gICAgICAgIFwicGFyc2VJbnRcIixcbiAgICAgICAgXCJzZXRUaW1lb3V0XCJcbiAgICAgIF07XG4gICAgICB2YXIgdGVtcGxhdGVDb3VudGVyID0gLTE7XG4gICAgICB2YXIgdHlwZWRBcnJheVRhZ3MgPSB7fTtcbiAgICAgIHR5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbZmxvYXQ2NFRhZ10gPSB0eXBlZEFycmF5VGFnc1tpbnQ4VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2ludDE2VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2ludDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQ4VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MTZUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG4gICAgICB0eXBlZEFycmF5VGFnc1thcmdzVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2FycmF5VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2FycmF5QnVmZmVyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Jvb2xUYWddID0gdHlwZWRBcnJheVRhZ3NbZGF0YVZpZXdUYWddID0gdHlwZWRBcnJheVRhZ3NbZGF0ZVRhZ10gPSB0eXBlZEFycmF5VGFnc1tlcnJvclRhZ10gPSB0eXBlZEFycmF5VGFnc1tmdW5jVGFnXSA9IHR5cGVkQXJyYXlUYWdzW21hcFRhZ10gPSB0eXBlZEFycmF5VGFnc1tudW1iZXJUYWddID0gdHlwZWRBcnJheVRhZ3Nbb2JqZWN0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3JlZ2V4cFRhZ10gPSB0eXBlZEFycmF5VGFnc1tzZXRUYWddID0gdHlwZWRBcnJheVRhZ3Nbc3RyaW5nVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG4gICAgICB2YXIgY2xvbmVhYmxlVGFncyA9IHt9O1xuICAgICAgY2xvbmVhYmxlVGFnc1thcmdzVGFnXSA9IGNsb25lYWJsZVRhZ3NbYXJyYXlUYWddID0gY2xvbmVhYmxlVGFnc1thcnJheUJ1ZmZlclRhZ10gPSBjbG9uZWFibGVUYWdzW2RhdGFWaWV3VGFnXSA9IGNsb25lYWJsZVRhZ3NbYm9vbFRhZ10gPSBjbG9uZWFibGVUYWdzW2RhdGVUYWddID0gY2xvbmVhYmxlVGFnc1tmbG9hdDMyVGFnXSA9IGNsb25lYWJsZVRhZ3NbZmxvYXQ2NFRhZ10gPSBjbG9uZWFibGVUYWdzW2ludDhUYWddID0gY2xvbmVhYmxlVGFnc1tpbnQxNlRhZ10gPSBjbG9uZWFibGVUYWdzW2ludDMyVGFnXSA9IGNsb25lYWJsZVRhZ3NbbWFwVGFnXSA9IGNsb25lYWJsZVRhZ3NbbnVtYmVyVGFnXSA9IGNsb25lYWJsZVRhZ3Nbb2JqZWN0VGFnXSA9IGNsb25lYWJsZVRhZ3NbcmVnZXhwVGFnXSA9IGNsb25lYWJsZVRhZ3Nbc2V0VGFnXSA9IGNsb25lYWJsZVRhZ3Nbc3RyaW5nVGFnXSA9IGNsb25lYWJsZVRhZ3Nbc3ltYm9sVGFnXSA9IGNsb25lYWJsZVRhZ3NbdWludDhUYWddID0gY2xvbmVhYmxlVGFnc1t1aW50OENsYW1wZWRUYWddID0gY2xvbmVhYmxlVGFnc1t1aW50MTZUYWddID0gY2xvbmVhYmxlVGFnc1t1aW50MzJUYWddID0gdHJ1ZTtcbiAgICAgIGNsb25lYWJsZVRhZ3NbZXJyb3JUYWddID0gY2xvbmVhYmxlVGFnc1tmdW5jVGFnXSA9IGNsb25lYWJsZVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcbiAgICAgIHZhciBkZWJ1cnJlZExldHRlcnMgPSB7XG4gICAgICAgIC8vIExhdGluLTEgU3VwcGxlbWVudCBibG9jay5cbiAgICAgICAgXCJcXHhDMFwiOiBcIkFcIixcbiAgICAgICAgXCJcXHhDMVwiOiBcIkFcIixcbiAgICAgICAgXCJcXHhDMlwiOiBcIkFcIixcbiAgICAgICAgXCJcXHhDM1wiOiBcIkFcIixcbiAgICAgICAgXCJcXHhDNFwiOiBcIkFcIixcbiAgICAgICAgXCJcXHhDNVwiOiBcIkFcIixcbiAgICAgICAgXCJcXHhFMFwiOiBcImFcIixcbiAgICAgICAgXCJcXHhFMVwiOiBcImFcIixcbiAgICAgICAgXCJcXHhFMlwiOiBcImFcIixcbiAgICAgICAgXCJcXHhFM1wiOiBcImFcIixcbiAgICAgICAgXCJcXHhFNFwiOiBcImFcIixcbiAgICAgICAgXCJcXHhFNVwiOiBcImFcIixcbiAgICAgICAgXCJcXHhDN1wiOiBcIkNcIixcbiAgICAgICAgXCJcXHhFN1wiOiBcImNcIixcbiAgICAgICAgXCJcXHhEMFwiOiBcIkRcIixcbiAgICAgICAgXCJcXHhGMFwiOiBcImRcIixcbiAgICAgICAgXCJcXHhDOFwiOiBcIkVcIixcbiAgICAgICAgXCJcXHhDOVwiOiBcIkVcIixcbiAgICAgICAgXCJcXHhDQVwiOiBcIkVcIixcbiAgICAgICAgXCJcXHhDQlwiOiBcIkVcIixcbiAgICAgICAgXCJcXHhFOFwiOiBcImVcIixcbiAgICAgICAgXCJcXHhFOVwiOiBcImVcIixcbiAgICAgICAgXCJcXHhFQVwiOiBcImVcIixcbiAgICAgICAgXCJcXHhFQlwiOiBcImVcIixcbiAgICAgICAgXCJcXHhDQ1wiOiBcIklcIixcbiAgICAgICAgXCJcXHhDRFwiOiBcIklcIixcbiAgICAgICAgXCJcXHhDRVwiOiBcIklcIixcbiAgICAgICAgXCJcXHhDRlwiOiBcIklcIixcbiAgICAgICAgXCJcXHhFQ1wiOiBcImlcIixcbiAgICAgICAgXCJcXHhFRFwiOiBcImlcIixcbiAgICAgICAgXCJcXHhFRVwiOiBcImlcIixcbiAgICAgICAgXCJcXHhFRlwiOiBcImlcIixcbiAgICAgICAgXCJcXHhEMVwiOiBcIk5cIixcbiAgICAgICAgXCJcXHhGMVwiOiBcIm5cIixcbiAgICAgICAgXCJcXHhEMlwiOiBcIk9cIixcbiAgICAgICAgXCJcXHhEM1wiOiBcIk9cIixcbiAgICAgICAgXCJcXHhENFwiOiBcIk9cIixcbiAgICAgICAgXCJcXHhENVwiOiBcIk9cIixcbiAgICAgICAgXCJcXHhENlwiOiBcIk9cIixcbiAgICAgICAgXCJcXHhEOFwiOiBcIk9cIixcbiAgICAgICAgXCJcXHhGMlwiOiBcIm9cIixcbiAgICAgICAgXCJcXHhGM1wiOiBcIm9cIixcbiAgICAgICAgXCJcXHhGNFwiOiBcIm9cIixcbiAgICAgICAgXCJcXHhGNVwiOiBcIm9cIixcbiAgICAgICAgXCJcXHhGNlwiOiBcIm9cIixcbiAgICAgICAgXCJcXHhGOFwiOiBcIm9cIixcbiAgICAgICAgXCJcXHhEOVwiOiBcIlVcIixcbiAgICAgICAgXCJcXHhEQVwiOiBcIlVcIixcbiAgICAgICAgXCJcXHhEQlwiOiBcIlVcIixcbiAgICAgICAgXCJcXHhEQ1wiOiBcIlVcIixcbiAgICAgICAgXCJcXHhGOVwiOiBcInVcIixcbiAgICAgICAgXCJcXHhGQVwiOiBcInVcIixcbiAgICAgICAgXCJcXHhGQlwiOiBcInVcIixcbiAgICAgICAgXCJcXHhGQ1wiOiBcInVcIixcbiAgICAgICAgXCJcXHhERFwiOiBcIllcIixcbiAgICAgICAgXCJcXHhGRFwiOiBcInlcIixcbiAgICAgICAgXCJcXHhGRlwiOiBcInlcIixcbiAgICAgICAgXCJcXHhDNlwiOiBcIkFlXCIsXG4gICAgICAgIFwiXFx4RTZcIjogXCJhZVwiLFxuICAgICAgICBcIlxceERFXCI6IFwiVGhcIixcbiAgICAgICAgXCJcXHhGRVwiOiBcInRoXCIsXG4gICAgICAgIFwiXFx4REZcIjogXCJzc1wiLFxuICAgICAgICAvLyBMYXRpbiBFeHRlbmRlZC1BIGJsb2NrLlxuICAgICAgICBcIlxcdTAxMDBcIjogXCJBXCIsXG4gICAgICAgIFwiXFx1MDEwMlwiOiBcIkFcIixcbiAgICAgICAgXCJcXHUwMTA0XCI6IFwiQVwiLFxuICAgICAgICBcIlxcdTAxMDFcIjogXCJhXCIsXG4gICAgICAgIFwiXFx1MDEwM1wiOiBcImFcIixcbiAgICAgICAgXCJcXHUwMTA1XCI6IFwiYVwiLFxuICAgICAgICBcIlxcdTAxMDZcIjogXCJDXCIsXG4gICAgICAgIFwiXFx1MDEwOFwiOiBcIkNcIixcbiAgICAgICAgXCJcXHUwMTBBXCI6IFwiQ1wiLFxuICAgICAgICBcIlxcdTAxMENcIjogXCJDXCIsXG4gICAgICAgIFwiXFx1MDEwN1wiOiBcImNcIixcbiAgICAgICAgXCJcXHUwMTA5XCI6IFwiY1wiLFxuICAgICAgICBcIlxcdTAxMEJcIjogXCJjXCIsXG4gICAgICAgIFwiXFx1MDEwRFwiOiBcImNcIixcbiAgICAgICAgXCJcXHUwMTBFXCI6IFwiRFwiLFxuICAgICAgICBcIlxcdTAxMTBcIjogXCJEXCIsXG4gICAgICAgIFwiXFx1MDEwRlwiOiBcImRcIixcbiAgICAgICAgXCJcXHUwMTExXCI6IFwiZFwiLFxuICAgICAgICBcIlxcdTAxMTJcIjogXCJFXCIsXG4gICAgICAgIFwiXFx1MDExNFwiOiBcIkVcIixcbiAgICAgICAgXCJcXHUwMTE2XCI6IFwiRVwiLFxuICAgICAgICBcIlxcdTAxMThcIjogXCJFXCIsXG4gICAgICAgIFwiXFx1MDExQVwiOiBcIkVcIixcbiAgICAgICAgXCJcXHUwMTEzXCI6IFwiZVwiLFxuICAgICAgICBcIlxcdTAxMTVcIjogXCJlXCIsXG4gICAgICAgIFwiXFx1MDExN1wiOiBcImVcIixcbiAgICAgICAgXCJcXHUwMTE5XCI6IFwiZVwiLFxuICAgICAgICBcIlxcdTAxMUJcIjogXCJlXCIsXG4gICAgICAgIFwiXFx1MDExQ1wiOiBcIkdcIixcbiAgICAgICAgXCJcXHUwMTFFXCI6IFwiR1wiLFxuICAgICAgICBcIlxcdTAxMjBcIjogXCJHXCIsXG4gICAgICAgIFwiXFx1MDEyMlwiOiBcIkdcIixcbiAgICAgICAgXCJcXHUwMTFEXCI6IFwiZ1wiLFxuICAgICAgICBcIlxcdTAxMUZcIjogXCJnXCIsXG4gICAgICAgIFwiXFx1MDEyMVwiOiBcImdcIixcbiAgICAgICAgXCJcXHUwMTIzXCI6IFwiZ1wiLFxuICAgICAgICBcIlxcdTAxMjRcIjogXCJIXCIsXG4gICAgICAgIFwiXFx1MDEyNlwiOiBcIkhcIixcbiAgICAgICAgXCJcXHUwMTI1XCI6IFwiaFwiLFxuICAgICAgICBcIlxcdTAxMjdcIjogXCJoXCIsXG4gICAgICAgIFwiXFx1MDEyOFwiOiBcIklcIixcbiAgICAgICAgXCJcXHUwMTJBXCI6IFwiSVwiLFxuICAgICAgICBcIlxcdTAxMkNcIjogXCJJXCIsXG4gICAgICAgIFwiXFx1MDEyRVwiOiBcIklcIixcbiAgICAgICAgXCJcXHUwMTMwXCI6IFwiSVwiLFxuICAgICAgICBcIlxcdTAxMjlcIjogXCJpXCIsXG4gICAgICAgIFwiXFx1MDEyQlwiOiBcImlcIixcbiAgICAgICAgXCJcXHUwMTJEXCI6IFwiaVwiLFxuICAgICAgICBcIlxcdTAxMkZcIjogXCJpXCIsXG4gICAgICAgIFwiXFx1MDEzMVwiOiBcImlcIixcbiAgICAgICAgXCJcXHUwMTM0XCI6IFwiSlwiLFxuICAgICAgICBcIlxcdTAxMzVcIjogXCJqXCIsXG4gICAgICAgIFwiXFx1MDEzNlwiOiBcIktcIixcbiAgICAgICAgXCJcXHUwMTM3XCI6IFwia1wiLFxuICAgICAgICBcIlxcdTAxMzhcIjogXCJrXCIsXG4gICAgICAgIFwiXFx1MDEzOVwiOiBcIkxcIixcbiAgICAgICAgXCJcXHUwMTNCXCI6IFwiTFwiLFxuICAgICAgICBcIlxcdTAxM0RcIjogXCJMXCIsXG4gICAgICAgIFwiXFx1MDEzRlwiOiBcIkxcIixcbiAgICAgICAgXCJcXHUwMTQxXCI6IFwiTFwiLFxuICAgICAgICBcIlxcdTAxM0FcIjogXCJsXCIsXG4gICAgICAgIFwiXFx1MDEzQ1wiOiBcImxcIixcbiAgICAgICAgXCJcXHUwMTNFXCI6IFwibFwiLFxuICAgICAgICBcIlxcdTAxNDBcIjogXCJsXCIsXG4gICAgICAgIFwiXFx1MDE0MlwiOiBcImxcIixcbiAgICAgICAgXCJcXHUwMTQzXCI6IFwiTlwiLFxuICAgICAgICBcIlxcdTAxNDVcIjogXCJOXCIsXG4gICAgICAgIFwiXFx1MDE0N1wiOiBcIk5cIixcbiAgICAgICAgXCJcXHUwMTRBXCI6IFwiTlwiLFxuICAgICAgICBcIlxcdTAxNDRcIjogXCJuXCIsXG4gICAgICAgIFwiXFx1MDE0NlwiOiBcIm5cIixcbiAgICAgICAgXCJcXHUwMTQ4XCI6IFwiblwiLFxuICAgICAgICBcIlxcdTAxNEJcIjogXCJuXCIsXG4gICAgICAgIFwiXFx1MDE0Q1wiOiBcIk9cIixcbiAgICAgICAgXCJcXHUwMTRFXCI6IFwiT1wiLFxuICAgICAgICBcIlxcdTAxNTBcIjogXCJPXCIsXG4gICAgICAgIFwiXFx1MDE0RFwiOiBcIm9cIixcbiAgICAgICAgXCJcXHUwMTRGXCI6IFwib1wiLFxuICAgICAgICBcIlxcdTAxNTFcIjogXCJvXCIsXG4gICAgICAgIFwiXFx1MDE1NFwiOiBcIlJcIixcbiAgICAgICAgXCJcXHUwMTU2XCI6IFwiUlwiLFxuICAgICAgICBcIlxcdTAxNThcIjogXCJSXCIsXG4gICAgICAgIFwiXFx1MDE1NVwiOiBcInJcIixcbiAgICAgICAgXCJcXHUwMTU3XCI6IFwiclwiLFxuICAgICAgICBcIlxcdTAxNTlcIjogXCJyXCIsXG4gICAgICAgIFwiXFx1MDE1QVwiOiBcIlNcIixcbiAgICAgICAgXCJcXHUwMTVDXCI6IFwiU1wiLFxuICAgICAgICBcIlxcdTAxNUVcIjogXCJTXCIsXG4gICAgICAgIFwiXFx1MDE2MFwiOiBcIlNcIixcbiAgICAgICAgXCJcXHUwMTVCXCI6IFwic1wiLFxuICAgICAgICBcIlxcdTAxNURcIjogXCJzXCIsXG4gICAgICAgIFwiXFx1MDE1RlwiOiBcInNcIixcbiAgICAgICAgXCJcXHUwMTYxXCI6IFwic1wiLFxuICAgICAgICBcIlxcdTAxNjJcIjogXCJUXCIsXG4gICAgICAgIFwiXFx1MDE2NFwiOiBcIlRcIixcbiAgICAgICAgXCJcXHUwMTY2XCI6IFwiVFwiLFxuICAgICAgICBcIlxcdTAxNjNcIjogXCJ0XCIsXG4gICAgICAgIFwiXFx1MDE2NVwiOiBcInRcIixcbiAgICAgICAgXCJcXHUwMTY3XCI6IFwidFwiLFxuICAgICAgICBcIlxcdTAxNjhcIjogXCJVXCIsXG4gICAgICAgIFwiXFx1MDE2QVwiOiBcIlVcIixcbiAgICAgICAgXCJcXHUwMTZDXCI6IFwiVVwiLFxuICAgICAgICBcIlxcdTAxNkVcIjogXCJVXCIsXG4gICAgICAgIFwiXFx1MDE3MFwiOiBcIlVcIixcbiAgICAgICAgXCJcXHUwMTcyXCI6IFwiVVwiLFxuICAgICAgICBcIlxcdTAxNjlcIjogXCJ1XCIsXG4gICAgICAgIFwiXFx1MDE2QlwiOiBcInVcIixcbiAgICAgICAgXCJcXHUwMTZEXCI6IFwidVwiLFxuICAgICAgICBcIlxcdTAxNkZcIjogXCJ1XCIsXG4gICAgICAgIFwiXFx1MDE3MVwiOiBcInVcIixcbiAgICAgICAgXCJcXHUwMTczXCI6IFwidVwiLFxuICAgICAgICBcIlxcdTAxNzRcIjogXCJXXCIsXG4gICAgICAgIFwiXFx1MDE3NVwiOiBcIndcIixcbiAgICAgICAgXCJcXHUwMTc2XCI6IFwiWVwiLFxuICAgICAgICBcIlxcdTAxNzdcIjogXCJ5XCIsXG4gICAgICAgIFwiXFx1MDE3OFwiOiBcIllcIixcbiAgICAgICAgXCJcXHUwMTc5XCI6IFwiWlwiLFxuICAgICAgICBcIlxcdTAxN0JcIjogXCJaXCIsXG4gICAgICAgIFwiXFx1MDE3RFwiOiBcIlpcIixcbiAgICAgICAgXCJcXHUwMTdBXCI6IFwielwiLFxuICAgICAgICBcIlxcdTAxN0NcIjogXCJ6XCIsXG4gICAgICAgIFwiXFx1MDE3RVwiOiBcInpcIixcbiAgICAgICAgXCJcXHUwMTMyXCI6IFwiSUpcIixcbiAgICAgICAgXCJcXHUwMTMzXCI6IFwiaWpcIixcbiAgICAgICAgXCJcXHUwMTUyXCI6IFwiT2VcIixcbiAgICAgICAgXCJcXHUwMTUzXCI6IFwib2VcIixcbiAgICAgICAgXCJcXHUwMTQ5XCI6IFwiJ25cIixcbiAgICAgICAgXCJcXHUwMTdGXCI6IFwic1wiXG4gICAgICB9O1xuICAgICAgdmFyIGh0bWxFc2NhcGVzID0ge1xuICAgICAgICBcIiZcIjogXCImYW1wO1wiLFxuICAgICAgICBcIjxcIjogXCImbHQ7XCIsXG4gICAgICAgIFwiPlwiOiBcIiZndDtcIixcbiAgICAgICAgJ1wiJzogXCImcXVvdDtcIixcbiAgICAgICAgXCInXCI6IFwiJiMzOTtcIlxuICAgICAgfTtcbiAgICAgIHZhciBodG1sVW5lc2NhcGVzID0ge1xuICAgICAgICBcIiZhbXA7XCI6IFwiJlwiLFxuICAgICAgICBcIiZsdDtcIjogXCI8XCIsXG4gICAgICAgIFwiJmd0O1wiOiBcIj5cIixcbiAgICAgICAgXCImcXVvdDtcIjogJ1wiJyxcbiAgICAgICAgXCImIzM5O1wiOiBcIidcIlxuICAgICAgfTtcbiAgICAgIHZhciBzdHJpbmdFc2NhcGVzID0ge1xuICAgICAgICBcIlxcXFxcIjogXCJcXFxcXCIsXG4gICAgICAgIFwiJ1wiOiBcIidcIixcbiAgICAgICAgXCJcXG5cIjogXCJuXCIsXG4gICAgICAgIFwiXFxyXCI6IFwiclwiLFxuICAgICAgICBcIlxcdTIwMjhcIjogXCJ1MjAyOFwiLFxuICAgICAgICBcIlxcdTIwMjlcIjogXCJ1MjAyOVwiXG4gICAgICB9O1xuICAgICAgdmFyIGZyZWVQYXJzZUZsb2F0ID0gcGFyc2VGbG9hdCwgZnJlZVBhcnNlSW50ID0gcGFyc2VJbnQ7XG4gICAgICB2YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gXCJvYmplY3RcIiAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcbiAgICAgIHZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09IFwib2JqZWN0XCIgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG4gICAgICB2YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xuICAgICAgdmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMyID09IFwib2JqZWN0XCIgJiYgZXhwb3J0czIgJiYgIWV4cG9ydHMyLm5vZGVUeXBlICYmIGV4cG9ydHMyO1xuICAgICAgdmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlMiA9PSBcIm9iamVjdFwiICYmIG1vZHVsZTIgJiYgIW1vZHVsZTIubm9kZVR5cGUgJiYgbW9kdWxlMjtcbiAgICAgIHZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuICAgICAgdmFyIGZyZWVQcm9jZXNzID0gbW9kdWxlRXhwb3J0cyAmJiBmcmVlR2xvYmFsLnByb2Nlc3M7XG4gICAgICB2YXIgbm9kZVV0aWwgPSAoZnVuY3Rpb24oKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdmFyIHR5cGVzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlKFwidXRpbFwiKS50eXBlcztcbiAgICAgICAgICBpZiAodHlwZXMpIHtcbiAgICAgICAgICAgIHJldHVybiB0eXBlcztcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGZyZWVQcm9jZXNzICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcgJiYgZnJlZVByb2Nlc3MuYmluZGluZyhcInV0aWxcIik7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgfVxuICAgICAgfSkoKTtcbiAgICAgIHZhciBub2RlSXNBcnJheUJ1ZmZlciA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzQXJyYXlCdWZmZXIsIG5vZGVJc0RhdGUgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc0RhdGUsIG5vZGVJc01hcCA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzTWFwLCBub2RlSXNSZWdFeHAgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1JlZ0V4cCwgbm9kZUlzU2V0ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNTZXQsIG5vZGVJc1R5cGVkQXJyYXkgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1R5cGVkQXJyYXk7XG4gICAgICBmdW5jdGlvbiBhcHBseShmdW5jLCB0aGlzQXJnLCBhcmdzKSB7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcpO1xuICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSk7XG4gICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gYXJyYXlBZ2dyZWdhdG9yKGFycmF5LCBzZXR0ZXIsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSwgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICAgIHNldHRlcihhY2N1bXVsYXRvciwgdmFsdWUsIGl0ZXJhdGVlKHZhbHVlKSwgYXJyYXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGFycmF5RWFjaChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTEsIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGlmIChpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gYXJyYXlFYWNoUmlnaHQoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgICAgaWYgKGl0ZXJhdGVlKGFycmF5W2xlbmd0aF0sIGxlbmd0aCwgYXJyYXkpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnJheTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGFycmF5RXZlcnkoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSwgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgaWYgKCFwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gYXJyYXlGaWx0ZXIoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSwgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsIHJlc0luZGV4ID0gMCwgcmVzdWx0ID0gW107XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gYXJyYXlJbmNsdWRlcyhhcnJheSwgdmFsdWUpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgICByZXR1cm4gISFsZW5ndGggJiYgYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCAwKSA+IC0xO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gYXJyYXlJbmNsdWRlc1dpdGgoYXJyYXksIHZhbHVlLCBjb21wYXJhdG9yKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xLCBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBpZiAoY29tcGFyYXRvcih2YWx1ZSwgYXJyYXlbaW5kZXhdKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGFycmF5TWFwKGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSwgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gYXJyYXlQdXNoKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTEsIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGgsIG9mZnNldCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBhcnJheVtvZmZzZXQgKyBpbmRleF0gPSB2YWx1ZXNbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnJheTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGFycmF5UmVkdWNlKGFycmF5LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSkge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSwgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICAgIGlmIChpbml0QWNjdW0gJiYgbGVuZ3RoKSB7XG4gICAgICAgICAgYWNjdW11bGF0b3IgPSBhcnJheVsrK2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGFjY3VtdWxhdG9yID0gaXRlcmF0ZWUoYWNjdW11bGF0b3IsIGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBhcnJheVJlZHVjZVJpZ2h0KGFycmF5LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSkge1xuICAgICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICAgIGlmIChpbml0QWNjdW0gJiYgbGVuZ3RoKSB7XG4gICAgICAgICAgYWNjdW11bGF0b3IgPSBhcnJheVstLWxlbmd0aF07XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgICAgYWNjdW11bGF0b3IgPSBpdGVyYXRlZShhY2N1bXVsYXRvciwgYXJyYXlbbGVuZ3RoXSwgbGVuZ3RoLCBhcnJheSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gYXJyYXlTb21lKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTEsIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIGFzY2lpU2l6ZSA9IGJhc2VQcm9wZXJ0eShcImxlbmd0aFwiKTtcbiAgICAgIGZ1bmN0aW9uIGFzY2lpVG9BcnJheShzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5zcGxpdChcIlwiKTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGFzY2lpV29yZHMoc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmcubWF0Y2gocmVBc2NpaVdvcmQpIHx8IFtdO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gYmFzZUZpbmRLZXkoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBlYWNoRnVuYykge1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICBlYWNoRnVuYyhjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uMikge1xuICAgICAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGtleSwgY29sbGVjdGlvbjIpKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBrZXk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGJhc2VGaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4LCBmcm9tUmlnaHQpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCwgaW5kZXggPSBmcm9tSW5kZXggKyAoZnJvbVJpZ2h0ID8gMSA6IC0xKTtcbiAgICAgICAgd2hpbGUgKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgaWYgKHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSA/IHN0cmljdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIDogYmFzZUZpbmRJbmRleChhcnJheSwgYmFzZUlzTmFOLCBmcm9tSW5kZXgpO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gYmFzZUluZGV4T2ZXaXRoKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4LCBjb21wYXJhdG9yKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGZyb21JbmRleCAtIDEsIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBpZiAoY29tcGFyYXRvcihhcnJheVtpbmRleF0sIHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBiYXNlSXNOYU4odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGJhc2VNZWFuKGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlU3VtKGFycmF5LCBpdGVyYXRlZSkgLyBsZW5ndGggOiBOQU47XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBiYXNlUHJvcGVydHkoa2V5KSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQyIDogb2JqZWN0W2tleV07XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBiYXNlUHJvcGVydHlPZihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZDIgOiBvYmplY3Rba2V5XTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGJhc2VSZWR1Y2UoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0sIGVhY2hGdW5jKSB7XG4gICAgICAgIGVhY2hGdW5jKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbjIpIHtcbiAgICAgICAgICBhY2N1bXVsYXRvciA9IGluaXRBY2N1bSA/IChpbml0QWNjdW0gPSBmYWxzZSwgdmFsdWUpIDogaXRlcmF0ZWUoYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbjIpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gYmFzZVNvcnRCeShhcnJheSwgY29tcGFyZXIpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgICAgYXJyYXkuc29ydChjb21wYXJlcik7XG4gICAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICAgIGFycmF5W2xlbmd0aF0gPSBhcnJheVtsZW5ndGhdLnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnJheTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGJhc2VTdW0oYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICAgIHZhciByZXN1bHQsIGluZGV4ID0gLTEsIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICB2YXIgY3VycmVudCA9IGl0ZXJhdGVlKGFycmF5W2luZGV4XSk7XG4gICAgICAgICAgaWYgKGN1cnJlbnQgIT09IHVuZGVmaW5lZDIpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdCA9PT0gdW5kZWZpbmVkMiA/IGN1cnJlbnQgOiByZXN1bHQgKyBjdXJyZW50O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gYmFzZVRpbWVzKG4sIGl0ZXJhdGVlKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xLCByZXN1bHQgPSBBcnJheShuKTtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBuKSB7XG4gICAgICAgICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gYmFzZVRvUGFpcnMob2JqZWN0LCBwcm9wcykge1xuICAgICAgICByZXR1cm4gYXJyYXlNYXAocHJvcHMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgIHJldHVybiBba2V5LCBvYmplY3Rba2V5XV07XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gYmFzZVRyaW0oc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmcgPyBzdHJpbmcuc2xpY2UoMCwgdHJpbW1lZEVuZEluZGV4KHN0cmluZykgKyAxKS5yZXBsYWNlKHJlVHJpbVN0YXJ0LCBcIlwiKSA6IHN0cmluZztcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGJhc2VVbmFyeShmdW5jKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBmdW5jKHZhbHVlKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGJhc2VWYWx1ZXMob2JqZWN0LCBwcm9wcykge1xuICAgICAgICByZXR1cm4gYXJyYXlNYXAocHJvcHMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgIHJldHVybiBvYmplY3Rba2V5XTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBjYWNoZUhhcyhjYWNoZSwga2V5KSB7XG4gICAgICAgIHJldHVybiBjYWNoZS5oYXMoa2V5KTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGNoYXJzU3RhcnRJbmRleChzdHJTeW1ib2xzLCBjaHJTeW1ib2xzKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xLCBsZW5ndGggPSBzdHJTeW1ib2xzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGggJiYgYmFzZUluZGV4T2YoY2hyU3ltYm9scywgc3RyU3ltYm9sc1tpbmRleF0sIDApID4gLTEpIHtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBjaGFyc0VuZEluZGV4KHN0clN5bWJvbHMsIGNoclN5bWJvbHMpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gc3RyU3ltYm9scy5sZW5ndGg7XG4gICAgICAgIHdoaWxlIChpbmRleC0tICYmIGJhc2VJbmRleE9mKGNoclN5bWJvbHMsIHN0clN5bWJvbHNbaW5kZXhdLCAwKSA+IC0xKSB7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gY291bnRIb2xkZXJzKGFycmF5LCBwbGFjZWhvbGRlcikge1xuICAgICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLCByZXN1bHQgPSAwO1xuICAgICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgICBpZiAoYXJyYXlbbGVuZ3RoXSA9PT0gcGxhY2Vob2xkZXIpIHtcbiAgICAgICAgICAgICsrcmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgdmFyIGRlYnVyckxldHRlciA9IGJhc2VQcm9wZXJ0eU9mKGRlYnVycmVkTGV0dGVycyk7XG4gICAgICB2YXIgZXNjYXBlSHRtbENoYXIgPSBiYXNlUHJvcGVydHlPZihodG1sRXNjYXBlcyk7XG4gICAgICBmdW5jdGlvbiBlc2NhcGVTdHJpbmdDaGFyKGNocikge1xuICAgICAgICByZXR1cm4gXCJcXFxcXCIgKyBzdHJpbmdFc2NhcGVzW2Nocl07XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBnZXRWYWx1ZShvYmplY3QsIGtleSkge1xuICAgICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQyIDogb2JqZWN0W2tleV07XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBoYXNVbmljb2RlKHN0cmluZykge1xuICAgICAgICByZXR1cm4gcmVIYXNVbmljb2RlLnRlc3Qoc3RyaW5nKTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGhhc1VuaWNvZGVXb3JkKHN0cmluZykge1xuICAgICAgICByZXR1cm4gcmVIYXNVbmljb2RlV29yZC50ZXN0KHN0cmluZyk7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBpdGVyYXRvclRvQXJyYXkoaXRlcmF0b3IpIHtcbiAgICAgICAgdmFyIGRhdGEsIHJlc3VsdCA9IFtdO1xuICAgICAgICB3aGlsZSAoIShkYXRhID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goZGF0YS52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIG1hcFRvQXJyYXkobWFwKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xLCByZXN1bHQgPSBBcnJheShtYXAuc2l6ZSk7XG4gICAgICAgIG1hcC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICByZXN1bHRbKytpbmRleF0gPSBba2V5LCB2YWx1ZV07XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gb3ZlckFyZyhmdW5jLCB0cmFuc2Zvcm0pIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGFyZykge1xuICAgICAgICAgIHJldHVybiBmdW5jKHRyYW5zZm9ybShhcmcpKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIHJlcGxhY2VIb2xkZXJzKGFycmF5LCBwbGFjZWhvbGRlcikge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSwgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLCByZXNJbmRleCA9IDAsIHJlc3VsdCA9IFtdO1xuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgICBpZiAodmFsdWUgPT09IHBsYWNlaG9sZGVyIHx8IHZhbHVlID09PSBQTEFDRUhPTERFUikge1xuICAgICAgICAgICAgYXJyYXlbaW5kZXhdID0gUExBQ0VIT0xERVI7XG4gICAgICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSBpbmRleDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIHNldFRvQXJyYXkoc2V0KSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xLCByZXN1bHQgPSBBcnJheShzZXQuc2l6ZSk7XG4gICAgICAgIHNldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgcmVzdWx0WysraW5kZXhdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gc2V0VG9QYWlycyhzZXQpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTEsIHJlc3VsdCA9IEFycmF5KHNldC5zaXplKTtcbiAgICAgICAgc2V0LmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICByZXN1bHRbKytpbmRleF0gPSBbdmFsdWUsIHZhbHVlXTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBzdHJpY3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgICAgIHZhciBpbmRleCA9IGZyb21JbmRleCAtIDEsIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBpZiAoYXJyYXlbaW5kZXhdID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBzdHJpY3RMYXN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgICAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggKyAxO1xuICAgICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICAgIGlmIChhcnJheVtpbmRleF0gPT09IHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIHN0cmluZ1NpemUoc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBoYXNVbmljb2RlKHN0cmluZykgPyB1bmljb2RlU2l6ZShzdHJpbmcpIDogYXNjaWlTaXplKHN0cmluZyk7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBzdHJpbmdUb0FycmF5KHN0cmluZykge1xuICAgICAgICByZXR1cm4gaGFzVW5pY29kZShzdHJpbmcpID8gdW5pY29kZVRvQXJyYXkoc3RyaW5nKSA6IGFzY2lpVG9BcnJheShzdHJpbmcpO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gdHJpbW1lZEVuZEluZGV4KHN0cmluZykge1xuICAgICAgICB2YXIgaW5kZXggPSBzdHJpbmcubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoaW5kZXgtLSAmJiByZVdoaXRlc3BhY2UudGVzdChzdHJpbmcuY2hhckF0KGluZGV4KSkpIHtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgICB2YXIgdW5lc2NhcGVIdG1sQ2hhciA9IGJhc2VQcm9wZXJ0eU9mKGh0bWxVbmVzY2FwZXMpO1xuICAgICAgZnVuY3Rpb24gdW5pY29kZVNpemUoc3RyaW5nKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZVVuaWNvZGUubGFzdEluZGV4ID0gMDtcbiAgICAgICAgd2hpbGUgKHJlVW5pY29kZS50ZXN0KHN0cmluZykpIHtcbiAgICAgICAgICArK3Jlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gdW5pY29kZVRvQXJyYXkoc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmcubWF0Y2gocmVVbmljb2RlKSB8fCBbXTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIHVuaWNvZGVXb3JkcyhzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5tYXRjaChyZVVuaWNvZGVXb3JkKSB8fCBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBydW5JbkNvbnRleHQgPSAoZnVuY3Rpb24gcnVuSW5Db250ZXh0Mihjb250ZXh0KSB7XG4gICAgICAgIGNvbnRleHQgPSBjb250ZXh0ID09IG51bGwgPyByb290IDogXzIuZGVmYXVsdHMocm9vdC5PYmplY3QoKSwgY29udGV4dCwgXzIucGljayhyb290LCBjb250ZXh0UHJvcHMpKTtcbiAgICAgICAgdmFyIEFycmF5MiA9IGNvbnRleHQuQXJyYXksIERhdGUyID0gY29udGV4dC5EYXRlLCBFcnJvcjIgPSBjb250ZXh0LkVycm9yLCBGdW5jdGlvbjIgPSBjb250ZXh0LkZ1bmN0aW9uLCBNYXRoMiA9IGNvbnRleHQuTWF0aCwgT2JqZWN0MiA9IGNvbnRleHQuT2JqZWN0LCBSZWdFeHAyID0gY29udGV4dC5SZWdFeHAsIFN0cmluZzIgPSBjb250ZXh0LlN0cmluZywgVHlwZUVycm9yMiA9IGNvbnRleHQuVHlwZUVycm9yO1xuICAgICAgICB2YXIgYXJyYXlQcm90byA9IEFycmF5Mi5wcm90b3R5cGUsIGZ1bmNQcm90byA9IEZ1bmN0aW9uMi5wcm90b3R5cGUsIG9iamVjdFByb3RvID0gT2JqZWN0Mi5wcm90b3R5cGU7XG4gICAgICAgIHZhciBjb3JlSnNEYXRhID0gY29udGV4dFtcIl9fY29yZS1qc19zaGFyZWRfX1wiXTtcbiAgICAgICAgdmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcbiAgICAgICAgdmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG4gICAgICAgIHZhciBpZENvdW50ZXIgPSAwO1xuICAgICAgICB2YXIgbWFza1NyY0tleSA9IChmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgdWlkID0gL1teLl0rJC8uZXhlYyhjb3JlSnNEYXRhICYmIGNvcmVKc0RhdGEua2V5cyAmJiBjb3JlSnNEYXRhLmtleXMuSUVfUFJPVE8gfHwgXCJcIik7XG4gICAgICAgICAgcmV0dXJuIHVpZCA/IFwiU3ltYm9sKHNyYylfMS5cIiArIHVpZCA6IFwiXCI7XG4gICAgICAgIH0pKCk7XG4gICAgICAgIHZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuICAgICAgICB2YXIgb2JqZWN0Q3RvclN0cmluZyA9IGZ1bmNUb1N0cmluZy5jYWxsKE9iamVjdDIpO1xuICAgICAgICB2YXIgb2xkRGFzaCA9IHJvb3QuXztcbiAgICAgICAgdmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAyKFxuICAgICAgICAgIFwiXlwiICsgZnVuY1RvU3RyaW5nLmNhbGwoaGFzT3duUHJvcGVydHkpLnJlcGxhY2UocmVSZWdFeHBDaGFyLCBcIlxcXFwkJlwiKS5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcXFxcKCl8IGZvciAuKz8oPz1cXFxcXFxdKS9nLCBcIiQxLio/XCIpICsgXCIkXCJcbiAgICAgICAgKTtcbiAgICAgICAgdmFyIEJ1ZmZlcjIgPSBtb2R1bGVFeHBvcnRzID8gY29udGV4dC5CdWZmZXIgOiB1bmRlZmluZWQyLCBTeW1ib2wyID0gY29udGV4dC5TeW1ib2wsIFVpbnQ4QXJyYXkyID0gY29udGV4dC5VaW50OEFycmF5LCBhbGxvY1Vuc2FmZSA9IEJ1ZmZlcjIgPyBCdWZmZXIyLmFsbG9jVW5zYWZlIDogdW5kZWZpbmVkMiwgZ2V0UHJvdG90eXBlID0gb3ZlckFyZyhPYmplY3QyLmdldFByb3RvdHlwZU9mLCBPYmplY3QyKSwgb2JqZWN0Q3JlYXRlID0gT2JqZWN0Mi5jcmVhdGUsIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gb2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGUsIHNwbGljZSA9IGFycmF5UHJvdG8uc3BsaWNlLCBzcHJlYWRhYmxlU3ltYm9sID0gU3ltYm9sMiA/IFN5bWJvbDIuaXNDb25jYXRTcHJlYWRhYmxlIDogdW5kZWZpbmVkMiwgc3ltSXRlcmF0b3IgPSBTeW1ib2wyID8gU3ltYm9sMi5pdGVyYXRvciA6IHVuZGVmaW5lZDIsIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sMiA/IFN5bWJvbDIudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQyO1xuICAgICAgICB2YXIgZGVmaW5lUHJvcGVydHkgPSAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBmdW5jID0gZ2V0TmF0aXZlKE9iamVjdDIsIFwiZGVmaW5lUHJvcGVydHlcIik7XG4gICAgICAgICAgICBmdW5jKHt9LCBcIlwiLCB7fSk7XG4gICAgICAgICAgICByZXR1cm4gZnVuYztcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgfVxuICAgICAgICB9KSgpO1xuICAgICAgICB2YXIgY3R4Q2xlYXJUaW1lb3V0ID0gY29udGV4dC5jbGVhclRpbWVvdXQgIT09IHJvb3QuY2xlYXJUaW1lb3V0ICYmIGNvbnRleHQuY2xlYXJUaW1lb3V0LCBjdHhOb3cgPSBEYXRlMiAmJiBEYXRlMi5ub3cgIT09IHJvb3QuRGF0ZS5ub3cgJiYgRGF0ZTIubm93LCBjdHhTZXRUaW1lb3V0ID0gY29udGV4dC5zZXRUaW1lb3V0ICE9PSByb290LnNldFRpbWVvdXQgJiYgY29udGV4dC5zZXRUaW1lb3V0O1xuICAgICAgICB2YXIgbmF0aXZlQ2VpbCA9IE1hdGgyLmNlaWwsIG5hdGl2ZUZsb29yID0gTWF0aDIuZmxvb3IsIG5hdGl2ZUdldFN5bWJvbHMgPSBPYmplY3QyLmdldE93blByb3BlcnR5U3ltYm9scywgbmF0aXZlSXNCdWZmZXIgPSBCdWZmZXIyID8gQnVmZmVyMi5pc0J1ZmZlciA6IHVuZGVmaW5lZDIsIG5hdGl2ZUlzRmluaXRlID0gY29udGV4dC5pc0Zpbml0ZSwgbmF0aXZlSm9pbiA9IGFycmF5UHJvdG8uam9pbiwgbmF0aXZlS2V5cyA9IG92ZXJBcmcoT2JqZWN0Mi5rZXlzLCBPYmplY3QyKSwgbmF0aXZlTWF4ID0gTWF0aDIubWF4LCBuYXRpdmVNaW4gPSBNYXRoMi5taW4sIG5hdGl2ZU5vdyA9IERhdGUyLm5vdywgbmF0aXZlUGFyc2VJbnQgPSBjb250ZXh0LnBhcnNlSW50LCBuYXRpdmVSYW5kb20gPSBNYXRoMi5yYW5kb20sIG5hdGl2ZVJldmVyc2UgPSBhcnJheVByb3RvLnJldmVyc2U7XG4gICAgICAgIHZhciBEYXRhVmlldyA9IGdldE5hdGl2ZShjb250ZXh0LCBcIkRhdGFWaWV3XCIpLCBNYXAyID0gZ2V0TmF0aXZlKGNvbnRleHQsIFwiTWFwXCIpLCBQcm9taXNlMiA9IGdldE5hdGl2ZShjb250ZXh0LCBcIlByb21pc2VcIiksIFNldDIgPSBnZXROYXRpdmUoY29udGV4dCwgXCJTZXRcIiksIFdlYWtNYXAgPSBnZXROYXRpdmUoY29udGV4dCwgXCJXZWFrTWFwXCIpLCBuYXRpdmVDcmVhdGUgPSBnZXROYXRpdmUoT2JqZWN0MiwgXCJjcmVhdGVcIik7XG4gICAgICAgIHZhciBtZXRhTWFwID0gV2Vha01hcCAmJiBuZXcgV2Vha01hcCgpO1xuICAgICAgICB2YXIgcmVhbE5hbWVzID0ge307XG4gICAgICAgIHZhciBkYXRhVmlld0N0b3JTdHJpbmcgPSB0b1NvdXJjZShEYXRhVmlldyksIG1hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShNYXAyKSwgcHJvbWlzZUN0b3JTdHJpbmcgPSB0b1NvdXJjZShQcm9taXNlMiksIHNldEN0b3JTdHJpbmcgPSB0b1NvdXJjZShTZXQyKSwgd2Vha01hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShXZWFrTWFwKTtcbiAgICAgICAgdmFyIHN5bWJvbFByb3RvID0gU3ltYm9sMiA/IFN5bWJvbDIucHJvdG90eXBlIDogdW5kZWZpbmVkMiwgc3ltYm9sVmFsdWVPZiA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udmFsdWVPZiA6IHVuZGVmaW5lZDIsIHN5bWJvbFRvU3RyaW5nID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by50b1N0cmluZyA6IHVuZGVmaW5lZDI7XG4gICAgICAgIGZ1bmN0aW9uIGxvZGFzaCh2YWx1ZSkge1xuICAgICAgICAgIGlmIChpc09iamVjdExpa2UodmFsdWUpICYmICFpc0FycmF5KHZhbHVlKSAmJiAhKHZhbHVlIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBMb2Rhc2hXcmFwcGVyKSB7XG4gICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBcIl9fd3JhcHBlZF9fXCIpKSB7XG4gICAgICAgICAgICAgIHJldHVybiB3cmFwcGVyQ2xvbmUodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBiYXNlQ3JlYXRlID0gLyogQF9fUFVSRV9fICovIChmdW5jdGlvbigpIHtcbiAgICAgICAgICBmdW5jdGlvbiBvYmplY3QoKSB7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBmdW5jdGlvbihwcm90bykge1xuICAgICAgICAgICAgaWYgKCFpc09iamVjdChwcm90bykpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9iamVjdENyZWF0ZSkge1xuICAgICAgICAgICAgICByZXR1cm4gb2JqZWN0Q3JlYXRlKHByb3RvKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9iamVjdC5wcm90b3R5cGUgPSBwcm90bztcbiAgICAgICAgICAgIHZhciByZXN1bHQyID0gbmV3IG9iamVjdCgpO1xuICAgICAgICAgICAgb2JqZWN0LnByb3RvdHlwZSA9IHVuZGVmaW5lZDI7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0MjtcbiAgICAgICAgICB9O1xuICAgICAgICB9KSgpO1xuICAgICAgICBmdW5jdGlvbiBiYXNlTG9kYXNoKCkge1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIExvZGFzaFdyYXBwZXIodmFsdWUsIGNoYWluQWxsKSB7XG4gICAgICAgICAgdGhpcy5fX3dyYXBwZWRfXyA9IHZhbHVlO1xuICAgICAgICAgIHRoaXMuX19hY3Rpb25zX18gPSBbXTtcbiAgICAgICAgICB0aGlzLl9fY2hhaW5fXyA9ICEhY2hhaW5BbGw7XG4gICAgICAgICAgdGhpcy5fX2luZGV4X18gPSAwO1xuICAgICAgICAgIHRoaXMuX192YWx1ZXNfXyA9IHVuZGVmaW5lZDI7XG4gICAgICAgIH1cbiAgICAgICAgbG9kYXNoLnRlbXBsYXRlU2V0dGluZ3MgPSB7XG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogVXNlZCB0byBkZXRlY3QgYGRhdGFgIHByb3BlcnR5IHZhbHVlcyB0byBiZSBIVE1MLWVzY2FwZWQuXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgICAgICogQHR5cGUge1JlZ0V4cH1cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBcImVzY2FwZVwiOiByZUVzY2FwZSxcbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBVc2VkIHRvIGRldGVjdCBjb2RlIHRvIGJlIGV2YWx1YXRlZC5cbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAgICAgKiBAdHlwZSB7UmVnRXhwfVxuICAgICAgICAgICAqL1xuICAgICAgICAgIFwiZXZhbHVhdGVcIjogcmVFdmFsdWF0ZSxcbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBVc2VkIHRvIGRldGVjdCBgZGF0YWAgcHJvcGVydHkgdmFsdWVzIHRvIGluamVjdC5cbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAgICAgKiBAdHlwZSB7UmVnRXhwfVxuICAgICAgICAgICAqL1xuICAgICAgICAgIFwiaW50ZXJwb2xhdGVcIjogcmVJbnRlcnBvbGF0ZSxcbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBVc2VkIHRvIHJlZmVyZW5jZSB0aGUgZGF0YSBvYmplY3QgaW4gdGhlIHRlbXBsYXRlIHRleHQuXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBcInZhcmlhYmxlXCI6IFwiXCIsXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogVXNlZCB0byBpbXBvcnQgdmFyaWFibGVzIGludG8gdGhlIGNvbXBpbGVkIHRlbXBsYXRlLlxuICAgICAgICAgICAqXG4gICAgICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICAgICAgICovXG4gICAgICAgICAgXCJpbXBvcnRzXCI6IHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQSByZWZlcmVuY2UgdG8gdGhlIGBsb2Rhc2hgIGZ1bmN0aW9uLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3MuaW1wb3J0c1xuICAgICAgICAgICAgICogQHR5cGUge0Z1bmN0aW9ufVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBcIl9cIjogbG9kYXNoXG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBsb2Rhc2gucHJvdG90eXBlID0gYmFzZUxvZGFzaC5wcm90b3R5cGU7XG4gICAgICAgIGxvZGFzaC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBsb2Rhc2g7XG4gICAgICAgIExvZGFzaFdyYXBwZXIucHJvdG90eXBlID0gYmFzZUNyZWF0ZShiYXNlTG9kYXNoLnByb3RvdHlwZSk7XG4gICAgICAgIExvZGFzaFdyYXBwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTG9kYXNoV3JhcHBlcjtcbiAgICAgICAgZnVuY3Rpb24gTGF6eVdyYXBwZXIodmFsdWUpIHtcbiAgICAgICAgICB0aGlzLl9fd3JhcHBlZF9fID0gdmFsdWU7XG4gICAgICAgICAgdGhpcy5fX2FjdGlvbnNfXyA9IFtdO1xuICAgICAgICAgIHRoaXMuX19kaXJfXyA9IDE7XG4gICAgICAgICAgdGhpcy5fX2ZpbHRlcmVkX18gPSBmYWxzZTtcbiAgICAgICAgICB0aGlzLl9faXRlcmF0ZWVzX18gPSBbXTtcbiAgICAgICAgICB0aGlzLl9fdGFrZUNvdW50X18gPSBNQVhfQVJSQVlfTEVOR1RIO1xuICAgICAgICAgIHRoaXMuX192aWV3c19fID0gW107XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gbGF6eUNsb25lKCkge1xuICAgICAgICAgIHZhciByZXN1bHQyID0gbmV3IExhenlXcmFwcGVyKHRoaXMuX193cmFwcGVkX18pO1xuICAgICAgICAgIHJlc3VsdDIuX19hY3Rpb25zX18gPSBjb3B5QXJyYXkodGhpcy5fX2FjdGlvbnNfXyk7XG4gICAgICAgICAgcmVzdWx0Mi5fX2Rpcl9fID0gdGhpcy5fX2Rpcl9fO1xuICAgICAgICAgIHJlc3VsdDIuX19maWx0ZXJlZF9fID0gdGhpcy5fX2ZpbHRlcmVkX187XG4gICAgICAgICAgcmVzdWx0Mi5fX2l0ZXJhdGVlc19fID0gY29weUFycmF5KHRoaXMuX19pdGVyYXRlZXNfXyk7XG4gICAgICAgICAgcmVzdWx0Mi5fX3Rha2VDb3VudF9fID0gdGhpcy5fX3Rha2VDb3VudF9fO1xuICAgICAgICAgIHJlc3VsdDIuX192aWV3c19fID0gY29weUFycmF5KHRoaXMuX192aWV3c19fKTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0MjtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBsYXp5UmV2ZXJzZSgpIHtcbiAgICAgICAgICBpZiAodGhpcy5fX2ZpbHRlcmVkX18pIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQyID0gbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgICAgICAgcmVzdWx0Mi5fX2Rpcl9fID0gLTE7XG4gICAgICAgICAgICByZXN1bHQyLl9fZmlsdGVyZWRfXyA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdDIgPSB0aGlzLmNsb25lKCk7XG4gICAgICAgICAgICByZXN1bHQyLl9fZGlyX18gKj0gLTE7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXN1bHQyO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGxhenlWYWx1ZSgpIHtcbiAgICAgICAgICB2YXIgYXJyYXkgPSB0aGlzLl9fd3JhcHBlZF9fLnZhbHVlKCksIGRpciA9IHRoaXMuX19kaXJfXywgaXNBcnIgPSBpc0FycmF5KGFycmF5KSwgaXNSaWdodCA9IGRpciA8IDAsIGFyckxlbmd0aCA9IGlzQXJyID8gYXJyYXkubGVuZ3RoIDogMCwgdmlldyA9IGdldFZpZXcoMCwgYXJyTGVuZ3RoLCB0aGlzLl9fdmlld3NfXyksIHN0YXJ0ID0gdmlldy5zdGFydCwgZW5kID0gdmlldy5lbmQsIGxlbmd0aCA9IGVuZCAtIHN0YXJ0LCBpbmRleCA9IGlzUmlnaHQgPyBlbmQgOiBzdGFydCAtIDEsIGl0ZXJhdGVlcyA9IHRoaXMuX19pdGVyYXRlZXNfXywgaXRlckxlbmd0aCA9IGl0ZXJhdGVlcy5sZW5ndGgsIHJlc0luZGV4ID0gMCwgdGFrZUNvdW50ID0gbmF0aXZlTWluKGxlbmd0aCwgdGhpcy5fX3Rha2VDb3VudF9fKTtcbiAgICAgICAgICBpZiAoIWlzQXJyIHx8ICFpc1JpZ2h0ICYmIGFyckxlbmd0aCA9PSBsZW5ndGggJiYgdGFrZUNvdW50ID09IGxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGJhc2VXcmFwcGVyVmFsdWUoYXJyYXksIHRoaXMuX19hY3Rpb25zX18pO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgcmVzdWx0MiA9IFtdO1xuICAgICAgICAgIG91dGVyOlxuICAgICAgICAgICAgd2hpbGUgKGxlbmd0aC0tICYmIHJlc0luZGV4IDwgdGFrZUNvdW50KSB7XG4gICAgICAgICAgICAgIGluZGV4ICs9IGRpcjtcbiAgICAgICAgICAgICAgdmFyIGl0ZXJJbmRleCA9IC0xLCB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgICAgICAgd2hpbGUgKCsraXRlckluZGV4IDwgaXRlckxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHZhciBkYXRhID0gaXRlcmF0ZWVzW2l0ZXJJbmRleF0sIGl0ZXJhdGVlMiA9IGRhdGEuaXRlcmF0ZWUsIHR5cGUgPSBkYXRhLnR5cGUsIGNvbXB1dGVkID0gaXRlcmF0ZWUyKHZhbHVlKTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZSA9PSBMQVpZX01BUF9GTEFHKSB7XG4gICAgICAgICAgICAgICAgICB2YWx1ZSA9IGNvbXB1dGVkO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWNvbXB1dGVkKSB7XG4gICAgICAgICAgICAgICAgICBpZiAodHlwZSA9PSBMQVpZX0ZJTFRFUl9GTEFHKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWsgb3V0ZXI7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJlc3VsdDJbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0MjtcbiAgICAgICAgfVxuICAgICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUgPSBiYXNlQ3JlYXRlKGJhc2VMb2Rhc2gucHJvdG90eXBlKTtcbiAgICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTGF6eVdyYXBwZXI7XG4gICAgICAgIGZ1bmN0aW9uIEhhc2goZW50cmllcykge1xuICAgICAgICAgIHZhciBpbmRleCA9IC0xLCBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG4gICAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgZW50cnkyID0gZW50cmllc1tpbmRleF07XG4gICAgICAgICAgICB0aGlzLnNldChlbnRyeTJbMF0sIGVudHJ5MlsxXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGhhc2hDbGVhcigpIHtcbiAgICAgICAgICB0aGlzLl9fZGF0YV9fID0gbmF0aXZlQ3JlYXRlID8gbmF0aXZlQ3JlYXRlKG51bGwpIDoge307XG4gICAgICAgICAgdGhpcy5zaXplID0gMDtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBoYXNoRGVsZXRlKGtleSkge1xuICAgICAgICAgIHZhciByZXN1bHQyID0gdGhpcy5oYXMoa2V5KSAmJiBkZWxldGUgdGhpcy5fX2RhdGFfX1trZXldO1xuICAgICAgICAgIHRoaXMuc2l6ZSAtPSByZXN1bHQyID8gMSA6IDA7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDI7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gaGFzaEdldChrZXkpIHtcbiAgICAgICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICAgICAgaWYgKG5hdGl2ZUNyZWF0ZSkge1xuICAgICAgICAgICAgdmFyIHJlc3VsdDIgPSBkYXRhW2tleV07XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0MiA9PT0gSEFTSF9VTkRFRklORUQgPyB1bmRlZmluZWQyIDogcmVzdWx0MjtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDI7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gaGFzaEhhcyhrZXkpIHtcbiAgICAgICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICAgICAgcmV0dXJuIG5hdGl2ZUNyZWF0ZSA/IGRhdGFba2V5XSAhPT0gdW5kZWZpbmVkMiA6IGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBoYXNoU2V0KGtleSwgdmFsdWUpIHtcbiAgICAgICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICAgICAgdGhpcy5zaXplICs9IHRoaXMuaGFzKGtleSkgPyAwIDogMTtcbiAgICAgICAgICBkYXRhW2tleV0gPSBuYXRpdmVDcmVhdGUgJiYgdmFsdWUgPT09IHVuZGVmaW5lZDIgPyBIQVNIX1VOREVGSU5FRCA6IHZhbHVlO1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIEhhc2gucHJvdG90eXBlLmNsZWFyID0gaGFzaENsZWFyO1xuICAgICAgICBIYXNoLnByb3RvdHlwZVtcImRlbGV0ZVwiXSA9IGhhc2hEZWxldGU7XG4gICAgICAgIEhhc2gucHJvdG90eXBlLmdldCA9IGhhc2hHZXQ7XG4gICAgICAgIEhhc2gucHJvdG90eXBlLmhhcyA9IGhhc2hIYXM7XG4gICAgICAgIEhhc2gucHJvdG90eXBlLnNldCA9IGhhc2hTZXQ7XG4gICAgICAgIGZ1bmN0aW9uIExpc3RDYWNoZShlbnRyaWVzKSB7XG4gICAgICAgICAgdmFyIGluZGV4ID0gLTEsIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcbiAgICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBlbnRyeTIgPSBlbnRyaWVzW2luZGV4XTtcbiAgICAgICAgICAgIHRoaXMuc2V0KGVudHJ5MlswXSwgZW50cnkyWzFdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gbGlzdENhY2hlQ2xlYXIoKSB7XG4gICAgICAgICAgdGhpcy5fX2RhdGFfXyA9IFtdO1xuICAgICAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gbGlzdENhY2hlRGVsZXRlKGtleSkge1xuICAgICAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXywgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcbiAgICAgICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBsYXN0SW5kZXggPSBkYXRhLmxlbmd0aCAtIDE7XG4gICAgICAgICAgaWYgKGluZGV4ID09IGxhc3RJbmRleCkge1xuICAgICAgICAgICAgZGF0YS5wb3AoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3BsaWNlLmNhbGwoZGF0YSwgaW5kZXgsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAtLXRoaXMuc2l6ZTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBsaXN0Q2FjaGVHZXQoa2V5KSB7XG4gICAgICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLCBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuICAgICAgICAgIHJldHVybiBpbmRleCA8IDAgPyB1bmRlZmluZWQyIDogZGF0YVtpbmRleF1bMV07XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gbGlzdENhY2hlSGFzKGtleSkge1xuICAgICAgICAgIHJldHVybiBhc3NvY0luZGV4T2YodGhpcy5fX2RhdGFfXywga2V5KSA+IC0xO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGxpc3RDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gICAgICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLCBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuICAgICAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgICAgICsrdGhpcy5zaXplO1xuICAgICAgICAgICAgZGF0YS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRhdGFbaW5kZXhdWzFdID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIExpc3RDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBsaXN0Q2FjaGVDbGVhcjtcbiAgICAgICAgTGlzdENhY2hlLnByb3RvdHlwZVtcImRlbGV0ZVwiXSA9IGxpc3RDYWNoZURlbGV0ZTtcbiAgICAgICAgTGlzdENhY2hlLnByb3RvdHlwZS5nZXQgPSBsaXN0Q2FjaGVHZXQ7XG4gICAgICAgIExpc3RDYWNoZS5wcm90b3R5cGUuaGFzID0gbGlzdENhY2hlSGFzO1xuICAgICAgICBMaXN0Q2FjaGUucHJvdG90eXBlLnNldCA9IGxpc3RDYWNoZVNldDtcbiAgICAgICAgZnVuY3Rpb24gTWFwQ2FjaGUoZW50cmllcykge1xuICAgICAgICAgIHZhciBpbmRleCA9IC0xLCBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG4gICAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgZW50cnkyID0gZW50cmllc1tpbmRleF07XG4gICAgICAgICAgICB0aGlzLnNldChlbnRyeTJbMF0sIGVudHJ5MlsxXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIG1hcENhY2hlQ2xlYXIoKSB7XG4gICAgICAgICAgdGhpcy5zaXplID0gMDtcbiAgICAgICAgICB0aGlzLl9fZGF0YV9fID0ge1xuICAgICAgICAgICAgXCJoYXNoXCI6IG5ldyBIYXNoKCksXG4gICAgICAgICAgICBcIm1hcFwiOiBuZXcgKE1hcDIgfHwgTGlzdENhY2hlKSgpLFxuICAgICAgICAgICAgXCJzdHJpbmdcIjogbmV3IEhhc2goKVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gbWFwQ2FjaGVEZWxldGUoa2V5KSB7XG4gICAgICAgICAgdmFyIHJlc3VsdDIgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSlbXCJkZWxldGVcIl0oa2V5KTtcbiAgICAgICAgICB0aGlzLnNpemUgLT0gcmVzdWx0MiA/IDEgOiAwO1xuICAgICAgICAgIHJldHVybiByZXN1bHQyO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIG1hcENhY2hlR2V0KGtleSkge1xuICAgICAgICAgIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuZ2V0KGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gbWFwQ2FjaGVIYXMoa2V5KSB7XG4gICAgICAgICAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5oYXMoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBtYXBDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gICAgICAgICAgdmFyIGRhdGEgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSksIHNpemUyID0gZGF0YS5zaXplO1xuICAgICAgICAgIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICAgIHRoaXMuc2l6ZSArPSBkYXRhLnNpemUgPT0gc2l6ZTIgPyAwIDogMTtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBNYXBDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBtYXBDYWNoZUNsZWFyO1xuICAgICAgICBNYXBDYWNoZS5wcm90b3R5cGVbXCJkZWxldGVcIl0gPSBtYXBDYWNoZURlbGV0ZTtcbiAgICAgICAgTWFwQ2FjaGUucHJvdG90eXBlLmdldCA9IG1hcENhY2hlR2V0O1xuICAgICAgICBNYXBDYWNoZS5wcm90b3R5cGUuaGFzID0gbWFwQ2FjaGVIYXM7XG4gICAgICAgIE1hcENhY2hlLnByb3RvdHlwZS5zZXQgPSBtYXBDYWNoZVNldDtcbiAgICAgICAgZnVuY3Rpb24gU2V0Q2FjaGUodmFsdWVzMikge1xuICAgICAgICAgIHZhciBpbmRleCA9IC0xLCBsZW5ndGggPSB2YWx1ZXMyID09IG51bGwgPyAwIDogdmFsdWVzMi5sZW5ndGg7XG4gICAgICAgICAgdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZSgpO1xuICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLmFkZCh2YWx1ZXMyW2luZGV4XSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHNldENhY2hlQWRkKHZhbHVlKSB7XG4gICAgICAgICAgdGhpcy5fX2RhdGFfXy5zZXQodmFsdWUsIEhBU0hfVU5ERUZJTkVEKTtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBzZXRDYWNoZUhhcyh2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgU2V0Q2FjaGUucHJvdG90eXBlLmFkZCA9IFNldENhY2hlLnByb3RvdHlwZS5wdXNoID0gc2V0Q2FjaGVBZGQ7XG4gICAgICAgIFNldENhY2hlLnByb3RvdHlwZS5oYXMgPSBzZXRDYWNoZUhhcztcbiAgICAgICAgZnVuY3Rpb24gU3RhY2soZW50cmllcykge1xuICAgICAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGUoZW50cmllcyk7XG4gICAgICAgICAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHN0YWNrQ2xlYXIoKSB7XG4gICAgICAgICAgdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGUoKTtcbiAgICAgICAgICB0aGlzLnNpemUgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHN0YWNrRGVsZXRlKGtleSkge1xuICAgICAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXywgcmVzdWx0MiA9IGRhdGFbXCJkZWxldGVcIl0oa2V5KTtcbiAgICAgICAgICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDI7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gc3RhY2tHZXQoa2V5KSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX19kYXRhX18uZ2V0KGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gc3RhY2tIYXMoa2V5KSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gc3RhY2tTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgICAgICAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIExpc3RDYWNoZSkge1xuICAgICAgICAgICAgdmFyIHBhaXJzID0gZGF0YS5fX2RhdGFfXztcbiAgICAgICAgICAgIGlmICghTWFwMiB8fCBwYWlycy5sZW5ndGggPCBMQVJHRV9BUlJBWV9TSVpFIC0gMSkge1xuICAgICAgICAgICAgICBwYWlycy5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgICAgICAgICAgIHRoaXMuc2l6ZSA9ICsrZGF0YS5zaXplO1xuICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlKHBhaXJzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIFN0YWNrLnByb3RvdHlwZS5jbGVhciA9IHN0YWNrQ2xlYXI7XG4gICAgICAgIFN0YWNrLnByb3RvdHlwZVtcImRlbGV0ZVwiXSA9IHN0YWNrRGVsZXRlO1xuICAgICAgICBTdGFjay5wcm90b3R5cGUuZ2V0ID0gc3RhY2tHZXQ7XG4gICAgICAgIFN0YWNrLnByb3RvdHlwZS5oYXMgPSBzdGFja0hhcztcbiAgICAgICAgU3RhY2sucHJvdG90eXBlLnNldCA9IHN0YWNrU2V0O1xuICAgICAgICBmdW5jdGlvbiBhcnJheUxpa2VLZXlzKHZhbHVlLCBpbmhlcml0ZWQpIHtcbiAgICAgICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKSwgaXNBcmcgPSAhaXNBcnIgJiYgaXNBcmd1bWVudHModmFsdWUpLCBpc0J1ZmYgPSAhaXNBcnIgJiYgIWlzQXJnICYmIGlzQnVmZmVyKHZhbHVlKSwgaXNUeXBlID0gIWlzQXJyICYmICFpc0FyZyAmJiAhaXNCdWZmICYmIGlzVHlwZWRBcnJheSh2YWx1ZSksIHNraXBJbmRleGVzID0gaXNBcnIgfHwgaXNBcmcgfHwgaXNCdWZmIHx8IGlzVHlwZSwgcmVzdWx0MiA9IHNraXBJbmRleGVzID8gYmFzZVRpbWVzKHZhbHVlLmxlbmd0aCwgU3RyaW5nMikgOiBbXSwgbGVuZ3RoID0gcmVzdWx0Mi5sZW5ndGg7XG4gICAgICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoKGluaGVyaXRlZCB8fCBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSAmJiAhKHNraXBJbmRleGVzICYmIC8vIFNhZmFyaSA5IGhhcyBlbnVtZXJhYmxlIGBhcmd1bWVudHMubGVuZ3RoYCBpbiBzdHJpY3QgbW9kZS5cbiAgICAgICAgICAgIChrZXkgPT0gXCJsZW5ndGhcIiB8fCAvLyBOb2RlLmpzIDAuMTAgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gYnVmZmVycy5cbiAgICAgICAgICAgIGlzQnVmZiAmJiAoa2V5ID09IFwib2Zmc2V0XCIgfHwga2V5ID09IFwicGFyZW50XCIpIHx8IC8vIFBoYW50b21KUyAyIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIHR5cGVkIGFycmF5cy5cbiAgICAgICAgICAgIGlzVHlwZSAmJiAoa2V5ID09IFwiYnVmZmVyXCIgfHwga2V5ID09IFwiYnl0ZUxlbmd0aFwiIHx8IGtleSA9PSBcImJ5dGVPZmZzZXRcIikgfHwgLy8gU2tpcCBpbmRleCBwcm9wZXJ0aWVzLlxuICAgICAgICAgICAgaXNJbmRleChrZXksIGxlbmd0aCkpKSkge1xuICAgICAgICAgICAgICByZXN1bHQyLnB1c2goa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDI7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYXJyYXlTYW1wbGUoYXJyYXkpIHtcbiAgICAgICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgICAgIHJldHVybiBsZW5ndGggPyBhcnJheVtiYXNlUmFuZG9tKDAsIGxlbmd0aCAtIDEpXSA6IHVuZGVmaW5lZDI7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYXJyYXlTYW1wbGVTaXplKGFycmF5LCBuKSB7XG4gICAgICAgICAgcmV0dXJuIHNodWZmbGVTZWxmKGNvcHlBcnJheShhcnJheSksIGJhc2VDbGFtcChuLCAwLCBhcnJheS5sZW5ndGgpKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBhcnJheVNodWZmbGUoYXJyYXkpIHtcbiAgICAgICAgICByZXR1cm4gc2h1ZmZsZVNlbGYoY29weUFycmF5KGFycmF5KSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZDIgJiYgIWVxKG9iamVjdFtrZXldLCB2YWx1ZSkgfHwgdmFsdWUgPT09IHVuZGVmaW5lZDIgJiYgIShrZXkgaW4gb2JqZWN0KSkge1xuICAgICAgICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICAgICAgICAgIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldO1xuICAgICAgICAgIGlmICghKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGVxKG9ialZhbHVlLCB2YWx1ZSkpIHx8IHZhbHVlID09PSB1bmRlZmluZWQyICYmICEoa2V5IGluIG9iamVjdCkpIHtcbiAgICAgICAgICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBhc3NvY0luZGV4T2YoYXJyYXksIGtleSkge1xuICAgICAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgICAgICBpZiAoZXEoYXJyYXlbbGVuZ3RoXVswXSwga2V5KSkge1xuICAgICAgICAgICAgICByZXR1cm4gbGVuZ3RoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYmFzZUFnZ3JlZ2F0b3IoY29sbGVjdGlvbiwgc2V0dGVyLCBpdGVyYXRlZTIsIGFjY3VtdWxhdG9yKSB7XG4gICAgICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbjIpIHtcbiAgICAgICAgICAgIHNldHRlcihhY2N1bXVsYXRvciwgdmFsdWUsIGl0ZXJhdGVlMih2YWx1ZSksIGNvbGxlY3Rpb24yKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYmFzZUFzc2lnbihvYmplY3QsIHNvdXJjZSkge1xuICAgICAgICAgIHJldHVybiBvYmplY3QgJiYgY29weU9iamVjdChzb3VyY2UsIGtleXMoc291cmNlKSwgb2JqZWN0KTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBiYXNlQXNzaWduSW4ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgICAgICByZXR1cm4gb2JqZWN0ICYmIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzSW4oc291cmNlKSwgb2JqZWN0KTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gICAgICAgICAgaWYgKGtleSA9PSBcIl9fcHJvdG9fX1wiICYmIGRlZmluZVByb3BlcnR5KSB7XG4gICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eShvYmplY3QsIGtleSwge1xuICAgICAgICAgICAgICBcImNvbmZpZ3VyYWJsZVwiOiB0cnVlLFxuICAgICAgICAgICAgICBcImVudW1lcmFibGVcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgXCJ2YWx1ZVwiOiB2YWx1ZSxcbiAgICAgICAgICAgICAgXCJ3cml0YWJsZVwiOiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYmFzZUF0KG9iamVjdCwgcGF0aHMpIHtcbiAgICAgICAgICB2YXIgaW5kZXggPSAtMSwgbGVuZ3RoID0gcGF0aHMubGVuZ3RoLCByZXN1bHQyID0gQXJyYXkyKGxlbmd0aCksIHNraXAgPSBvYmplY3QgPT0gbnVsbDtcbiAgICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgICAgcmVzdWx0MltpbmRleF0gPSBza2lwID8gdW5kZWZpbmVkMiA6IGdldChvYmplY3QsIHBhdGhzW2luZGV4XSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXN1bHQyO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGJhc2VDbGFtcChudW1iZXIsIGxvd2VyLCB1cHBlcikge1xuICAgICAgICAgIGlmIChudW1iZXIgPT09IG51bWJlcikge1xuICAgICAgICAgICAgaWYgKHVwcGVyICE9PSB1bmRlZmluZWQyKSB7XG4gICAgICAgICAgICAgIG51bWJlciA9IG51bWJlciA8PSB1cHBlciA/IG51bWJlciA6IHVwcGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxvd2VyICE9PSB1bmRlZmluZWQyKSB7XG4gICAgICAgICAgICAgIG51bWJlciA9IG51bWJlciA+PSBsb3dlciA/IG51bWJlciA6IGxvd2VyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGJhc2VDbG9uZSh2YWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCBvYmplY3QsIHN0YWNrKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdDIsIGlzRGVlcCA9IGJpdG1hc2sgJiBDTE9ORV9ERUVQX0ZMQUcsIGlzRmxhdCA9IGJpdG1hc2sgJiBDTE9ORV9GTEFUX0ZMQUcsIGlzRnVsbCA9IGJpdG1hc2sgJiBDTE9ORV9TWU1CT0xTX0ZMQUc7XG4gICAgICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgICAgIHJlc3VsdDIgPSBvYmplY3QgPyBjdXN0b21pemVyKHZhbHVlLCBrZXksIG9iamVjdCwgc3RhY2spIDogY3VzdG9taXplcih2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyZXN1bHQyICE9PSB1bmRlZmluZWQyKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0MjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSk7XG4gICAgICAgICAgaWYgKGlzQXJyKSB7XG4gICAgICAgICAgICByZXN1bHQyID0gaW5pdENsb25lQXJyYXkodmFsdWUpO1xuICAgICAgICAgICAgaWYgKCFpc0RlZXApIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGNvcHlBcnJheSh2YWx1ZSwgcmVzdWx0Mik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciB0YWcgPSBnZXRUYWcodmFsdWUpLCBpc0Z1bmMgPSB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnO1xuICAgICAgICAgICAgaWYgKGlzQnVmZmVyKHZhbHVlKSkge1xuICAgICAgICAgICAgICByZXR1cm4gY2xvbmVCdWZmZXIodmFsdWUsIGlzRGVlcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGFnID09IG9iamVjdFRhZyB8fCB0YWcgPT0gYXJnc1RhZyB8fCBpc0Z1bmMgJiYgIW9iamVjdCkge1xuICAgICAgICAgICAgICByZXN1bHQyID0gaXNGbGF0IHx8IGlzRnVuYyA/IHt9IDogaW5pdENsb25lT2JqZWN0KHZhbHVlKTtcbiAgICAgICAgICAgICAgaWYgKCFpc0RlZXApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNGbGF0ID8gY29weVN5bWJvbHNJbih2YWx1ZSwgYmFzZUFzc2lnbkluKHJlc3VsdDIsIHZhbHVlKSkgOiBjb3B5U3ltYm9scyh2YWx1ZSwgYmFzZUFzc2lnbihyZXN1bHQyLCB2YWx1ZSkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAoIWNsb25lYWJsZVRhZ3NbdGFnXSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvYmplY3QgPyB2YWx1ZSA6IHt9O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJlc3VsdDIgPSBpbml0Q2xvbmVCeVRhZyh2YWx1ZSwgdGFnLCBpc0RlZXApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2soKSk7XG4gICAgICAgICAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQodmFsdWUpO1xuICAgICAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RhY2tlZDtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3RhY2suc2V0KHZhbHVlLCByZXN1bHQyKTtcbiAgICAgICAgICBpZiAoaXNTZXQodmFsdWUpKSB7XG4gICAgICAgICAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uKHN1YlZhbHVlKSB7XG4gICAgICAgICAgICAgIHJlc3VsdDIuYWRkKGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3ViVmFsdWUsIHZhbHVlLCBzdGFjaykpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChpc01hcCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24oc3ViVmFsdWUsIGtleTIpIHtcbiAgICAgICAgICAgICAgcmVzdWx0Mi5zZXQoa2V5MiwgYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXkyLCB2YWx1ZSwgc3RhY2spKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIga2V5c0Z1bmMgPSBpc0Z1bGwgPyBpc0ZsYXQgPyBnZXRBbGxLZXlzSW4gOiBnZXRBbGxLZXlzIDogaXNGbGF0ID8ga2V5c0luIDoga2V5cztcbiAgICAgICAgICB2YXIgcHJvcHMgPSBpc0FyciA/IHVuZGVmaW5lZDIgOiBrZXlzRnVuYyh2YWx1ZSk7XG4gICAgICAgICAgYXJyYXlFYWNoKHByb3BzIHx8IHZhbHVlLCBmdW5jdGlvbihzdWJWYWx1ZSwga2V5Mikge1xuICAgICAgICAgICAgaWYgKHByb3BzKSB7XG4gICAgICAgICAgICAgIGtleTIgPSBzdWJWYWx1ZTtcbiAgICAgICAgICAgICAgc3ViVmFsdWUgPSB2YWx1ZVtrZXkyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFzc2lnblZhbHVlKHJlc3VsdDIsIGtleTIsIGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5MiwgdmFsdWUsIHN0YWNrKSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDI7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYmFzZUNvbmZvcm1zKHNvdXJjZSkge1xuICAgICAgICAgIHZhciBwcm9wcyA9IGtleXMoc291cmNlKTtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gYmFzZUNvbmZvcm1zVG8ob2JqZWN0LCBzb3VyY2UsIHByb3BzKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGJhc2VDb25mb3Jtc1RvKG9iamVjdCwgc291cmNlLCBwcm9wcykge1xuICAgICAgICAgIHZhciBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG4gICAgICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gIWxlbmd0aDtcbiAgICAgICAgICB9XG4gICAgICAgICAgb2JqZWN0ID0gT2JqZWN0MihvYmplY3QpO1xuICAgICAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICAgICAgdmFyIGtleSA9IHByb3BzW2xlbmd0aF0sIHByZWRpY2F0ZSA9IHNvdXJjZVtrZXldLCB2YWx1ZSA9IG9iamVjdFtrZXldO1xuICAgICAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQyICYmICEoa2V5IGluIG9iamVjdCkgfHwgIXByZWRpY2F0ZSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBiYXNlRGVsYXkoZnVuYywgd2FpdCwgYXJncykge1xuICAgICAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IyKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZnVuYy5hcHBseSh1bmRlZmluZWQyLCBhcmdzKTtcbiAgICAgICAgICB9LCB3YWl0KTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBiYXNlRGlmZmVyZW5jZShhcnJheSwgdmFsdWVzMiwgaXRlcmF0ZWUyLCBjb21wYXJhdG9yKSB7XG4gICAgICAgICAgdmFyIGluZGV4ID0gLTEsIGluY2x1ZGVzMiA9IGFycmF5SW5jbHVkZXMsIGlzQ29tbW9uID0gdHJ1ZSwgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLCByZXN1bHQyID0gW10sIHZhbHVlc0xlbmd0aCA9IHZhbHVlczIubGVuZ3RoO1xuICAgICAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0MjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGl0ZXJhdGVlMikge1xuICAgICAgICAgICAgdmFsdWVzMiA9IGFycmF5TWFwKHZhbHVlczIsIGJhc2VVbmFyeShpdGVyYXRlZTIpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGNvbXBhcmF0b3IpIHtcbiAgICAgICAgICAgIGluY2x1ZGVzMiA9IGFycmF5SW5jbHVkZXNXaXRoO1xuICAgICAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlczIubGVuZ3RoID49IExBUkdFX0FSUkFZX1NJWkUpIHtcbiAgICAgICAgICAgIGluY2x1ZGVzMiA9IGNhY2hlSGFzO1xuICAgICAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgICAgIHZhbHVlczIgPSBuZXcgU2V0Q2FjaGUodmFsdWVzMik7XG4gICAgICAgICAgfVxuICAgICAgICAgIG91dGVyOlxuICAgICAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLCBjb21wdXRlZCA9IGl0ZXJhdGVlMiA9PSBudWxsID8gdmFsdWUgOiBpdGVyYXRlZTIodmFsdWUpO1xuICAgICAgICAgICAgICB2YWx1ZSA9IGNvbXBhcmF0b3IgfHwgdmFsdWUgIT09IDAgPyB2YWx1ZSA6IDA7XG4gICAgICAgICAgICAgIGlmIChpc0NvbW1vbiAmJiBjb21wdXRlZCA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWVzSW5kZXggPSB2YWx1ZXNMZW5ndGg7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHZhbHVlc0luZGV4LS0pIHtcbiAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZXMyW3ZhbHVlc0luZGV4XSA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc3VsdDIucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWluY2x1ZGVzMih2YWx1ZXMyLCBjb21wdXRlZCwgY29tcGFyYXRvcikpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQyLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDI7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGJhc2VFYWNoID0gY3JlYXRlQmFzZUVhY2goYmFzZUZvck93bik7XG4gICAgICAgIHZhciBiYXNlRWFjaFJpZ2h0ID0gY3JlYXRlQmFzZUVhY2goYmFzZUZvck93blJpZ2h0LCB0cnVlKTtcbiAgICAgICAgZnVuY3Rpb24gYmFzZUV2ZXJ5KGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgICAgIHZhciByZXN1bHQyID0gdHJ1ZTtcbiAgICAgICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24yKSB7XG4gICAgICAgICAgICByZXN1bHQyID0gISFwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uMik7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0MjtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0MjtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBiYXNlRXh0cmVtdW0oYXJyYXksIGl0ZXJhdGVlMiwgY29tcGFyYXRvcikge1xuICAgICAgICAgIHZhciBpbmRleCA9IC0xLCBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSwgY3VycmVudCA9IGl0ZXJhdGVlMih2YWx1ZSk7XG4gICAgICAgICAgICBpZiAoY3VycmVudCAhPSBudWxsICYmIChjb21wdXRlZCA9PT0gdW5kZWZpbmVkMiA/IGN1cnJlbnQgPT09IGN1cnJlbnQgJiYgIWlzU3ltYm9sKGN1cnJlbnQpIDogY29tcGFyYXRvcihjdXJyZW50LCBjb21wdXRlZCkpKSB7XG4gICAgICAgICAgICAgIHZhciBjb21wdXRlZCA9IGN1cnJlbnQsIHJlc3VsdDIgPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDI7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYmFzZUZpbGwoYXJyYXksIHZhbHVlLCBzdGFydCwgZW5kKSB7XG4gICAgICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgICAgICBzdGFydCA9IHRvSW50ZWdlcihzdGFydCk7XG4gICAgICAgICAgaWYgKHN0YXJ0IDwgMCkge1xuICAgICAgICAgICAgc3RhcnQgPSAtc3RhcnQgPiBsZW5ndGggPyAwIDogbGVuZ3RoICsgc3RhcnQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkMiB8fCBlbmQgPiBsZW5ndGggPyBsZW5ndGggOiB0b0ludGVnZXIoZW5kKTtcbiAgICAgICAgICBpZiAoZW5kIDwgMCkge1xuICAgICAgICAgICAgZW5kICs9IGxlbmd0aDtcbiAgICAgICAgICB9XG4gICAgICAgICAgZW5kID0gc3RhcnQgPiBlbmQgPyAwIDogdG9MZW5ndGgoZW5kKTtcbiAgICAgICAgICB3aGlsZSAoc3RhcnQgPCBlbmQpIHtcbiAgICAgICAgICAgIGFycmF5W3N0YXJ0KytdID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBhcnJheTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBiYXNlRmlsdGVyKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgICAgIHZhciByZXN1bHQyID0gW107XG4gICAgICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uMikge1xuICAgICAgICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24yKSkge1xuICAgICAgICAgICAgICByZXN1bHQyLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiByZXN1bHQyO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGJhc2VGbGF0dGVuKGFycmF5LCBkZXB0aCwgcHJlZGljYXRlLCBpc1N0cmljdCwgcmVzdWx0Mikge1xuICAgICAgICAgIHZhciBpbmRleCA9IC0xLCBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgICAgICAgcHJlZGljYXRlIHx8IChwcmVkaWNhdGUgPSBpc0ZsYXR0ZW5hYmxlKTtcbiAgICAgICAgICByZXN1bHQyIHx8IChyZXN1bHQyID0gW10pO1xuICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICAgICAgICBpZiAoZGVwdGggPiAwICYmIHByZWRpY2F0ZSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgaWYgKGRlcHRoID4gMSkge1xuICAgICAgICAgICAgICAgIGJhc2VGbGF0dGVuKHZhbHVlLCBkZXB0aCAtIDEsIHByZWRpY2F0ZSwgaXNTdHJpY3QsIHJlc3VsdDIpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFycmF5UHVzaChyZXN1bHQyLCB2YWx1ZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIWlzU3RyaWN0KSB7XG4gICAgICAgICAgICAgIHJlc3VsdDJbcmVzdWx0Mi5sZW5ndGhdID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXN1bHQyO1xuICAgICAgICB9XG4gICAgICAgIHZhciBiYXNlRm9yID0gY3JlYXRlQmFzZUZvcigpO1xuICAgICAgICB2YXIgYmFzZUZvclJpZ2h0ID0gY3JlYXRlQmFzZUZvcih0cnVlKTtcbiAgICAgICAgZnVuY3Rpb24gYmFzZUZvck93bihvYmplY3QsIGl0ZXJhdGVlMikge1xuICAgICAgICAgIHJldHVybiBvYmplY3QgJiYgYmFzZUZvcihvYmplY3QsIGl0ZXJhdGVlMiwga2V5cyk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYmFzZUZvck93blJpZ2h0KG9iamVjdCwgaXRlcmF0ZWUyKSB7XG4gICAgICAgICAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yUmlnaHQob2JqZWN0LCBpdGVyYXRlZTIsIGtleXMpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGJhc2VGdW5jdGlvbnMob2JqZWN0LCBwcm9wcykge1xuICAgICAgICAgIHJldHVybiBhcnJheUZpbHRlcihwcm9wcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gaXNGdW5jdGlvbihvYmplY3Rba2V5XSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYmFzZUdldChvYmplY3QsIHBhdGgpIHtcbiAgICAgICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcbiAgICAgICAgICB2YXIgaW5kZXggPSAwLCBsZW5ndGggPSBwYXRoLmxlbmd0aDtcbiAgICAgICAgICB3aGlsZSAob2JqZWN0ICE9IG51bGwgJiYgaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIG9iamVjdCA9IG9iamVjdFt0b0tleShwYXRoW2luZGV4KytdKV07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBpbmRleCAmJiBpbmRleCA9PSBsZW5ndGggPyBvYmplY3QgOiB1bmRlZmluZWQyO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5c0Z1bmMsIHN5bWJvbHNGdW5jKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdDIgPSBrZXlzRnVuYyhvYmplY3QpO1xuICAgICAgICAgIHJldHVybiBpc0FycmF5KG9iamVjdCkgPyByZXN1bHQyIDogYXJyYXlQdXNoKHJlc3VsdDIsIHN5bWJvbHNGdW5jKG9iamVjdCkpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQyID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdDIodmFsdWUpID8gZ2V0UmF3VGFnKHZhbHVlKSA6IG9iamVjdFRvU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBiYXNlR3QodmFsdWUsIG90aGVyKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlID4gb3RoZXI7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYmFzZUhhcyhvYmplY3QsIGtleSkge1xuICAgICAgICAgIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBiYXNlSGFzSW4ob2JqZWN0LCBrZXkpIHtcbiAgICAgICAgICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYga2V5IGluIE9iamVjdDIob2JqZWN0KTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBiYXNlSW5SYW5nZShudW1iZXIsIHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgICByZXR1cm4gbnVtYmVyID49IG5hdGl2ZU1pbihzdGFydCwgZW5kKSAmJiBudW1iZXIgPCBuYXRpdmVNYXgoc3RhcnQsIGVuZCk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYmFzZUludGVyc2VjdGlvbihhcnJheXMsIGl0ZXJhdGVlMiwgY29tcGFyYXRvcikge1xuICAgICAgICAgIHZhciBpbmNsdWRlczIgPSBjb21wYXJhdG9yID8gYXJyYXlJbmNsdWRlc1dpdGggOiBhcnJheUluY2x1ZGVzLCBsZW5ndGggPSBhcnJheXNbMF0ubGVuZ3RoLCBvdGhMZW5ndGggPSBhcnJheXMubGVuZ3RoLCBvdGhJbmRleCA9IG90aExlbmd0aCwgY2FjaGVzID0gQXJyYXkyKG90aExlbmd0aCksIG1heExlbmd0aCA9IEluZmluaXR5LCByZXN1bHQyID0gW107XG4gICAgICAgICAgd2hpbGUgKG90aEluZGV4LS0pIHtcbiAgICAgICAgICAgIHZhciBhcnJheSA9IGFycmF5c1tvdGhJbmRleF07XG4gICAgICAgICAgICBpZiAob3RoSW5kZXggJiYgaXRlcmF0ZWUyKSB7XG4gICAgICAgICAgICAgIGFycmF5ID0gYXJyYXlNYXAoYXJyYXksIGJhc2VVbmFyeShpdGVyYXRlZTIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1heExlbmd0aCA9IG5hdGl2ZU1pbihhcnJheS5sZW5ndGgsIG1heExlbmd0aCk7XG4gICAgICAgICAgICBjYWNoZXNbb3RoSW5kZXhdID0gIWNvbXBhcmF0b3IgJiYgKGl0ZXJhdGVlMiB8fCBsZW5ndGggPj0gMTIwICYmIGFycmF5Lmxlbmd0aCA+PSAxMjApID8gbmV3IFNldENhY2hlKG90aEluZGV4ICYmIGFycmF5KSA6IHVuZGVmaW5lZDI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGFycmF5ID0gYXJyYXlzWzBdO1xuICAgICAgICAgIHZhciBpbmRleCA9IC0xLCBzZWVuID0gY2FjaGVzWzBdO1xuICAgICAgICAgIG91dGVyOlxuICAgICAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGggJiYgcmVzdWx0Mi5sZW5ndGggPCBtYXhMZW5ndGgpIHtcbiAgICAgICAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLCBjb21wdXRlZCA9IGl0ZXJhdGVlMiA/IGl0ZXJhdGVlMih2YWx1ZSkgOiB2YWx1ZTtcbiAgICAgICAgICAgICAgdmFsdWUgPSBjb21wYXJhdG9yIHx8IHZhbHVlICE9PSAwID8gdmFsdWUgOiAwO1xuICAgICAgICAgICAgICBpZiAoIShzZWVuID8gY2FjaGVIYXMoc2VlbiwgY29tcHV0ZWQpIDogaW5jbHVkZXMyKHJlc3VsdDIsIGNvbXB1dGVkLCBjb21wYXJhdG9yKSkpIHtcbiAgICAgICAgICAgICAgICBvdGhJbmRleCA9IG90aExlbmd0aDtcbiAgICAgICAgICAgICAgICB3aGlsZSAoLS1vdGhJbmRleCkge1xuICAgICAgICAgICAgICAgICAgdmFyIGNhY2hlID0gY2FjaGVzW290aEluZGV4XTtcbiAgICAgICAgICAgICAgICAgIGlmICghKGNhY2hlID8gY2FjaGVIYXMoY2FjaGUsIGNvbXB1dGVkKSA6IGluY2x1ZGVzMihhcnJheXNbb3RoSW5kZXhdLCBjb21wdXRlZCwgY29tcGFyYXRvcikpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoc2Vlbikge1xuICAgICAgICAgICAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzdWx0Mi5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXN1bHQyO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGJhc2VJbnZlcnRlcihvYmplY3QsIHNldHRlciwgaXRlcmF0ZWUyLCBhY2N1bXVsYXRvcikge1xuICAgICAgICAgIGJhc2VGb3JPd24ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmplY3QyKSB7XG4gICAgICAgICAgICBzZXR0ZXIoYWNjdW11bGF0b3IsIGl0ZXJhdGVlMih2YWx1ZSksIGtleSwgb2JqZWN0Mik7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGJhc2VJbnZva2Uob2JqZWN0LCBwYXRoLCBhcmdzKSB7XG4gICAgICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG4gICAgICAgICAgb2JqZWN0ID0gcGFyZW50KG9iamVjdCwgcGF0aCk7XG4gICAgICAgICAgdmFyIGZ1bmMgPSBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IG9iamVjdFt0b0tleShsYXN0KHBhdGgpKV07XG4gICAgICAgICAgcmV0dXJuIGZ1bmMgPT0gbnVsbCA/IHVuZGVmaW5lZDIgOiBhcHBseShmdW5jLCBvYmplY3QsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGJhc2VJc0FyZ3VtZW50cyh2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFyZ3NUYWc7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYmFzZUlzQXJyYXlCdWZmZXIodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBhcnJheUJ1ZmZlclRhZztcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBiYXNlSXNEYXRlKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gZGF0ZVRhZztcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSB7XG4gICAgICAgICAgaWYgKHZhbHVlID09PSBvdGhlcikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh2YWx1ZSA9PSBudWxsIHx8IG90aGVyID09IG51bGwgfHwgIWlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgIWlzT2JqZWN0TGlrZShvdGhlcikpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gYmFzZUlzRXF1YWxEZWVwKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgYmFzZUlzRXF1YWwsIHN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBiYXNlSXNFcXVhbERlZXAob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICAgICAgICAgIHZhciBvYmpJc0FyciA9IGlzQXJyYXkob2JqZWN0KSwgb3RoSXNBcnIgPSBpc0FycmF5KG90aGVyKSwgb2JqVGFnID0gb2JqSXNBcnIgPyBhcnJheVRhZyA6IGdldFRhZyhvYmplY3QpLCBvdGhUYWcgPSBvdGhJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG90aGVyKTtcbiAgICAgICAgICBvYmpUYWcgPSBvYmpUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG9ialRhZztcbiAgICAgICAgICBvdGhUYWcgPSBvdGhUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG90aFRhZztcbiAgICAgICAgICB2YXIgb2JqSXNPYmogPSBvYmpUYWcgPT0gb2JqZWN0VGFnLCBvdGhJc09iaiA9IG90aFRhZyA9PSBvYmplY3RUYWcsIGlzU2FtZVRhZyA9IG9ialRhZyA9PSBvdGhUYWc7XG4gICAgICAgICAgaWYgKGlzU2FtZVRhZyAmJiBpc0J1ZmZlcihvYmplY3QpKSB7XG4gICAgICAgICAgICBpZiAoIWlzQnVmZmVyKG90aGVyKSkge1xuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvYmpJc0FyciA9IHRydWU7XG4gICAgICAgICAgICBvYmpJc09iaiA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNTYW1lVGFnICYmICFvYmpJc09iaikge1xuICAgICAgICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKCkpO1xuICAgICAgICAgICAgcmV0dXJuIG9iaklzQXJyIHx8IGlzVHlwZWRBcnJheShvYmplY3QpID8gZXF1YWxBcnJheXMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykgOiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIG9ialRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghKGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRykpIHtcbiAgICAgICAgICAgIHZhciBvYmpJc1dyYXBwZWQgPSBvYmpJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgXCJfX3dyYXBwZWRfX1wiKSwgb3RoSXNXcmFwcGVkID0gb3RoSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwgXCJfX3dyYXBwZWRfX1wiKTtcbiAgICAgICAgICAgIGlmIChvYmpJc1dyYXBwZWQgfHwgb3RoSXNXcmFwcGVkKSB7XG4gICAgICAgICAgICAgIHZhciBvYmpVbndyYXBwZWQgPSBvYmpJc1dyYXBwZWQgPyBvYmplY3QudmFsdWUoKSA6IG9iamVjdCwgb3RoVW53cmFwcGVkID0gb3RoSXNXcmFwcGVkID8gb3RoZXIudmFsdWUoKSA6IG90aGVyO1xuICAgICAgICAgICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2soKSk7XG4gICAgICAgICAgICAgIHJldHVybiBlcXVhbEZ1bmMob2JqVW53cmFwcGVkLCBvdGhVbndyYXBwZWQsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFpc1NhbWVUYWcpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKCkpO1xuICAgICAgICAgIHJldHVybiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYmFzZUlzTWFwKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSBtYXBUYWc7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIG1hdGNoRGF0YSwgY3VzdG9taXplcikge1xuICAgICAgICAgIHZhciBpbmRleCA9IG1hdGNoRGF0YS5sZW5ndGgsIGxlbmd0aCA9IGluZGV4LCBub0N1c3RvbWl6ZXIgPSAhY3VzdG9taXplcjtcbiAgICAgICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiAhbGVuZ3RoO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvYmplY3QgPSBPYmplY3QyKG9iamVjdCk7XG4gICAgICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgICAgIHZhciBkYXRhID0gbWF0Y2hEYXRhW2luZGV4XTtcbiAgICAgICAgICAgIGlmIChub0N1c3RvbWl6ZXIgJiYgZGF0YVsyXSA/IGRhdGFbMV0gIT09IG9iamVjdFtkYXRhWzBdXSA6ICEoZGF0YVswXSBpbiBvYmplY3QpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgICAgICAgICAgdmFyIGtleSA9IGRhdGFbMF0sIG9ialZhbHVlID0gb2JqZWN0W2tleV0sIHNyY1ZhbHVlID0gZGF0YVsxXTtcbiAgICAgICAgICAgIGlmIChub0N1c3RvbWl6ZXIgJiYgZGF0YVsyXSkge1xuICAgICAgICAgICAgICBpZiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZDIgJiYgIShrZXkgaW4gb2JqZWN0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdmFyIHN0YWNrID0gbmV3IFN0YWNrKCk7XG4gICAgICAgICAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdDIgPSBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSwgc3RhY2spO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmICghKHJlc3VsdDIgPT09IHVuZGVmaW5lZDIgPyBiYXNlSXNFcXVhbChzcmNWYWx1ZSwgb2JqVmFsdWUsIENPTVBBUkVfUEFSVElBTF9GTEFHIHwgQ09NUEFSRV9VTk9SREVSRURfRkxBRywgY3VzdG9taXplciwgc3RhY2spIDogcmVzdWx0MikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYmFzZUlzTmF0aXZlKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgaXNNYXNrZWQodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBwYXR0ZXJuID0gaXNGdW5jdGlvbih2YWx1ZSkgPyByZUlzTmF0aXZlIDogcmVJc0hvc3RDdG9yO1xuICAgICAgICAgIHJldHVybiBwYXR0ZXJuLnRlc3QodG9Tb3VyY2UodmFsdWUpKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBiYXNlSXNSZWdFeHAodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSByZWdleHBUYWc7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYmFzZUlzU2V0KHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSBzZXRUYWc7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYmFzZUlzVHlwZWRBcnJheSh2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgISF0eXBlZEFycmF5VGFnc1tiYXNlR2V0VGFnKHZhbHVlKV07XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYmFzZUl0ZXJhdGVlKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBpZGVudGl0eTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSkgPyBiYXNlTWF0Y2hlc1Byb3BlcnR5KHZhbHVlWzBdLCB2YWx1ZVsxXSkgOiBiYXNlTWF0Y2hlcyh2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBwcm9wZXJ0eSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYmFzZUtleXMob2JqZWN0KSB7XG4gICAgICAgICAgaWYgKCFpc1Byb3RvdHlwZShvYmplY3QpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmF0aXZlS2V5cyhvYmplY3QpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgcmVzdWx0MiA9IFtdO1xuICAgICAgICAgIGZvciAodmFyIGtleSBpbiBPYmplY3QyKG9iamVjdCkpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBrZXkgIT0gXCJjb25zdHJ1Y3RvclwiKSB7XG4gICAgICAgICAgICAgIHJlc3VsdDIucHVzaChrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0MjtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBiYXNlS2V5c0luKG9iamVjdCkge1xuICAgICAgICAgIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICAgICAgcmV0dXJuIG5hdGl2ZUtleXNJbihvYmplY3QpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgaXNQcm90byA9IGlzUHJvdG90eXBlKG9iamVjdCksIHJlc3VsdDIgPSBbXTtcbiAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgICBpZiAoIShrZXkgPT0gXCJjb25zdHJ1Y3RvclwiICYmIChpc1Byb3RvIHx8ICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkpKSB7XG4gICAgICAgICAgICAgIHJlc3VsdDIucHVzaChrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0MjtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBiYXNlTHQodmFsdWUsIG90aGVyKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlIDwgb3RoZXI7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYmFzZU1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZTIpIHtcbiAgICAgICAgICB2YXIgaW5kZXggPSAtMSwgcmVzdWx0MiA9IGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pID8gQXJyYXkyKGNvbGxlY3Rpb24ubGVuZ3RoKSA6IFtdO1xuICAgICAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24yKSB7XG4gICAgICAgICAgICByZXN1bHQyWysraW5kZXhdID0gaXRlcmF0ZWUyKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24yKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0MjtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBiYXNlTWF0Y2hlcyhzb3VyY2UpIHtcbiAgICAgICAgICB2YXIgbWF0Y2hEYXRhID0gZ2V0TWF0Y2hEYXRhKHNvdXJjZSk7XG4gICAgICAgICAgaWYgKG1hdGNoRGF0YS5sZW5ndGggPT0gMSAmJiBtYXRjaERhdGFbMF1bMl0pIHtcbiAgICAgICAgICAgIHJldHVybiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZShtYXRjaERhdGFbMF1bMF0sIG1hdGNoRGF0YVswXVsxXSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgICAgIHJldHVybiBvYmplY3QgPT09IHNvdXJjZSB8fCBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgbWF0Y2hEYXRhKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGJhc2VNYXRjaGVzUHJvcGVydHkocGF0aCwgc3JjVmFsdWUpIHtcbiAgICAgICAgICBpZiAoaXNLZXkocGF0aCkgJiYgaXNTdHJpY3RDb21wYXJhYmxlKHNyY1ZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKHRvS2V5KHBhdGgpLCBzcmNWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgICAgIHZhciBvYmpWYWx1ZSA9IGdldChvYmplY3QsIHBhdGgpO1xuICAgICAgICAgICAgcmV0dXJuIG9ialZhbHVlID09PSB1bmRlZmluZWQyICYmIG9ialZhbHVlID09PSBzcmNWYWx1ZSA/IGhhc0luKG9iamVjdCwgcGF0aCkgOiBiYXNlSXNFcXVhbChzcmNWYWx1ZSwgb2JqVmFsdWUsIENPTVBBUkVfUEFSVElBTF9GTEFHIHwgQ09NUEFSRV9VTk9SREVSRURfRkxBRyk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBiYXNlTWVyZ2Uob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyLCBzdGFjaykge1xuICAgICAgICAgIGlmIChvYmplY3QgPT09IHNvdXJjZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBiYXNlRm9yKHNvdXJjZSwgZnVuY3Rpb24oc3JjVmFsdWUsIGtleSkge1xuICAgICAgICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKCkpO1xuICAgICAgICAgICAgaWYgKGlzT2JqZWN0KHNyY1ZhbHVlKSkge1xuICAgICAgICAgICAgICBiYXNlTWVyZ2VEZWVwKG9iamVjdCwgc291cmNlLCBrZXksIHNyY0luZGV4LCBiYXNlTWVyZ2UsIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXIgPyBjdXN0b21pemVyKHNhZmVHZXQob2JqZWN0LCBrZXkpLCBzcmNWYWx1ZSwga2V5ICsgXCJcIiwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKSA6IHVuZGVmaW5lZDI7XG4gICAgICAgICAgICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkMikge1xuICAgICAgICAgICAgICAgIG5ld1ZhbHVlID0gc3JjVmFsdWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIGtleXNJbik7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYmFzZU1lcmdlRGVlcChvYmplY3QsIHNvdXJjZSwga2V5LCBzcmNJbmRleCwgbWVyZ2VGdW5jLCBjdXN0b21pemVyLCBzdGFjaykge1xuICAgICAgICAgIHZhciBvYmpWYWx1ZSA9IHNhZmVHZXQob2JqZWN0LCBrZXkpLCBzcmNWYWx1ZSA9IHNhZmVHZXQoc291cmNlLCBrZXkpLCBzdGFja2VkID0gc3RhY2suZ2V0KHNyY1ZhbHVlKTtcbiAgICAgICAgICBpZiAoc3RhY2tlZCkge1xuICAgICAgICAgICAgYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgc3RhY2tlZCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXIgPyBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5ICsgXCJcIiwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKSA6IHVuZGVmaW5lZDI7XG4gICAgICAgICAgdmFyIGlzQ29tbW9uID0gbmV3VmFsdWUgPT09IHVuZGVmaW5lZDI7XG4gICAgICAgICAgaWYgKGlzQ29tbW9uKSB7XG4gICAgICAgICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KHNyY1ZhbHVlKSwgaXNCdWZmID0gIWlzQXJyICYmIGlzQnVmZmVyKHNyY1ZhbHVlKSwgaXNUeXBlZCA9ICFpc0FyciAmJiAhaXNCdWZmICYmIGlzVHlwZWRBcnJheShzcmNWYWx1ZSk7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IHNyY1ZhbHVlO1xuICAgICAgICAgICAgaWYgKGlzQXJyIHx8IGlzQnVmZiB8fCBpc1R5cGVkKSB7XG4gICAgICAgICAgICAgIGlmIChpc0FycmF5KG9ialZhbHVlKSkge1xuICAgICAgICAgICAgICAgIG5ld1ZhbHVlID0gb2JqVmFsdWU7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheUxpa2VPYmplY3Qob2JqVmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgbmV3VmFsdWUgPSBjb3B5QXJyYXkob2JqVmFsdWUpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzQnVmZikge1xuICAgICAgICAgICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgbmV3VmFsdWUgPSBjbG9uZUJ1ZmZlcihzcmNWYWx1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNUeXBlZCkge1xuICAgICAgICAgICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgbmV3VmFsdWUgPSBjbG9uZVR5cGVkQXJyYXkoc3JjVmFsdWUsIHRydWUpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG5ld1ZhbHVlID0gW107XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdChzcmNWYWx1ZSkgfHwgaXNBcmd1bWVudHMoc3JjVmFsdWUpKSB7XG4gICAgICAgICAgICAgIG5ld1ZhbHVlID0gb2JqVmFsdWU7XG4gICAgICAgICAgICAgIGlmIChpc0FyZ3VtZW50cyhvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBuZXdWYWx1ZSA9IHRvUGxhaW5PYmplY3Qob2JqVmFsdWUpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFpc09iamVjdChvYmpWYWx1ZSkgfHwgaXNGdW5jdGlvbihvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBuZXdWYWx1ZSA9IGluaXRDbG9uZU9iamVjdChzcmNWYWx1ZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpc0NvbW1vbikge1xuICAgICAgICAgICAgc3RhY2suc2V0KHNyY1ZhbHVlLCBuZXdWYWx1ZSk7XG4gICAgICAgICAgICBtZXJnZUZ1bmMobmV3VmFsdWUsIHNyY1ZhbHVlLCBzcmNJbmRleCwgY3VzdG9taXplciwgc3RhY2spO1xuICAgICAgICAgICAgc3RhY2tbXCJkZWxldGVcIl0oc3JjVmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYmFzZU50aChhcnJheSwgbikge1xuICAgICAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgbiArPSBuIDwgMCA/IGxlbmd0aCA6IDA7XG4gICAgICAgICAgcmV0dXJuIGlzSW5kZXgobiwgbGVuZ3RoKSA/IGFycmF5W25dIDogdW5kZWZpbmVkMjtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBiYXNlT3JkZXJCeShjb2xsZWN0aW9uLCBpdGVyYXRlZXMsIG9yZGVycykge1xuICAgICAgICAgIGlmIChpdGVyYXRlZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBpdGVyYXRlZXMgPSBhcnJheU1hcChpdGVyYXRlZXMsIGZ1bmN0aW9uKGl0ZXJhdGVlMikge1xuICAgICAgICAgICAgICBpZiAoaXNBcnJheShpdGVyYXRlZTIpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gYmFzZUdldCh2YWx1ZSwgaXRlcmF0ZWUyLmxlbmd0aCA9PT0gMSA/IGl0ZXJhdGVlMlswXSA6IGl0ZXJhdGVlMik7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gaXRlcmF0ZWUyO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGl0ZXJhdGVlcyA9IFtpZGVudGl0eV07XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBpbmRleCA9IC0xO1xuICAgICAgICAgIGl0ZXJhdGVlcyA9IGFycmF5TWFwKGl0ZXJhdGVlcywgYmFzZVVuYXJ5KGdldEl0ZXJhdGVlKCkpKTtcbiAgICAgICAgICB2YXIgcmVzdWx0MiA9IGJhc2VNYXAoY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbjIpIHtcbiAgICAgICAgICAgIHZhciBjcml0ZXJpYSA9IGFycmF5TWFwKGl0ZXJhdGVlcywgZnVuY3Rpb24oaXRlcmF0ZWUyKSB7XG4gICAgICAgICAgICAgIHJldHVybiBpdGVyYXRlZTIodmFsdWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4geyBcImNyaXRlcmlhXCI6IGNyaXRlcmlhLCBcImluZGV4XCI6ICsraW5kZXgsIFwidmFsdWVcIjogdmFsdWUgfTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gYmFzZVNvcnRCeShyZXN1bHQyLCBmdW5jdGlvbihvYmplY3QsIG90aGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gY29tcGFyZU11bHRpcGxlKG9iamVjdCwgb3RoZXIsIG9yZGVycyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYmFzZVBpY2sob2JqZWN0LCBwYXRocykge1xuICAgICAgICAgIHJldHVybiBiYXNlUGlja0J5KG9iamVjdCwgcGF0aHMsIGZ1bmN0aW9uKHZhbHVlLCBwYXRoKSB7XG4gICAgICAgICAgICByZXR1cm4gaGFzSW4ob2JqZWN0LCBwYXRoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBiYXNlUGlja0J5KG9iamVjdCwgcGF0aHMsIHByZWRpY2F0ZSkge1xuICAgICAgICAgIHZhciBpbmRleCA9IC0xLCBsZW5ndGggPSBwYXRocy5sZW5ndGgsIHJlc3VsdDIgPSB7fTtcbiAgICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIHBhdGggPSBwYXRoc1tpbmRleF0sIHZhbHVlID0gYmFzZUdldChvYmplY3QsIHBhdGgpO1xuICAgICAgICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgcGF0aCkpIHtcbiAgICAgICAgICAgICAgYmFzZVNldChyZXN1bHQyLCBjYXN0UGF0aChwYXRoLCBvYmplY3QpLCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXN1bHQyO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGJhc2VQcm9wZXJ0eURlZXAocGF0aCkge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgICAgIHJldHVybiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBiYXNlUHVsbEFsbChhcnJheSwgdmFsdWVzMiwgaXRlcmF0ZWUyLCBjb21wYXJhdG9yKSB7XG4gICAgICAgICAgdmFyIGluZGV4T2YyID0gY29tcGFyYXRvciA/IGJhc2VJbmRleE9mV2l0aCA6IGJhc2VJbmRleE9mLCBpbmRleCA9IC0xLCBsZW5ndGggPSB2YWx1ZXMyLmxlbmd0aCwgc2VlbiA9IGFycmF5O1xuICAgICAgICAgIGlmIChhcnJheSA9PT0gdmFsdWVzMikge1xuICAgICAgICAgICAgdmFsdWVzMiA9IGNvcHlBcnJheSh2YWx1ZXMyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGl0ZXJhdGVlMikge1xuICAgICAgICAgICAgc2VlbiA9IGFycmF5TWFwKGFycmF5LCBiYXNlVW5hcnkoaXRlcmF0ZWUyKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgZnJvbUluZGV4ID0gMCwgdmFsdWUgPSB2YWx1ZXMyW2luZGV4XSwgY29tcHV0ZWQgPSBpdGVyYXRlZTIgPyBpdGVyYXRlZTIodmFsdWUpIDogdmFsdWU7XG4gICAgICAgICAgICB3aGlsZSAoKGZyb21JbmRleCA9IGluZGV4T2YyKHNlZW4sIGNvbXB1dGVkLCBmcm9tSW5kZXgsIGNvbXBhcmF0b3IpKSA+IC0xKSB7XG4gICAgICAgICAgICAgIGlmIChzZWVuICE9PSBhcnJheSkge1xuICAgICAgICAgICAgICAgIHNwbGljZS5jYWxsKHNlZW4sIGZyb21JbmRleCwgMSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgc3BsaWNlLmNhbGwoYXJyYXksIGZyb21JbmRleCwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBhcnJheTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBiYXNlUHVsbEF0KGFycmF5LCBpbmRleGVzKSB7XG4gICAgICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID8gaW5kZXhlcy5sZW5ndGggOiAwLCBsYXN0SW5kZXggPSBsZW5ndGggLSAxO1xuICAgICAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gaW5kZXhlc1tsZW5ndGhdO1xuICAgICAgICAgICAgaWYgKGxlbmd0aCA9PSBsYXN0SW5kZXggfHwgaW5kZXggIT09IHByZXZpb3VzKSB7XG4gICAgICAgICAgICAgIHZhciBwcmV2aW91cyA9IGluZGV4O1xuICAgICAgICAgICAgICBpZiAoaXNJbmRleChpbmRleCkpIHtcbiAgICAgICAgICAgICAgICBzcGxpY2UuY2FsbChhcnJheSwgaW5kZXgsIDEpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGJhc2VVbnNldChhcnJheSwgaW5kZXgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBhcnJheTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBiYXNlUmFuZG9tKGxvd2VyLCB1cHBlcikge1xuICAgICAgICAgIHJldHVybiBsb3dlciArIG5hdGl2ZUZsb29yKG5hdGl2ZVJhbmRvbSgpICogKHVwcGVyIC0gbG93ZXIgKyAxKSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYmFzZVJhbmdlKHN0YXJ0LCBlbmQsIHN0ZXAsIGZyb21SaWdodCkge1xuICAgICAgICAgIHZhciBpbmRleCA9IC0xLCBsZW5ndGggPSBuYXRpdmVNYXgobmF0aXZlQ2VpbCgoZW5kIC0gc3RhcnQpIC8gKHN0ZXAgfHwgMSkpLCAwKSwgcmVzdWx0MiA9IEFycmF5MihsZW5ndGgpO1xuICAgICAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICAgICAgcmVzdWx0Mltmcm9tUmlnaHQgPyBsZW5ndGggOiArK2luZGV4XSA9IHN0YXJ0O1xuICAgICAgICAgICAgc3RhcnQgKz0gc3RlcDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDI7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYmFzZVJlcGVhdChzdHJpbmcsIG4pIHtcbiAgICAgICAgICB2YXIgcmVzdWx0MiA9IFwiXCI7XG4gICAgICAgICAgaWYgKCFzdHJpbmcgfHwgbiA8IDEgfHwgbiA+IE1BWF9TQUZFX0lOVEVHRVIpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQyO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkbyB7XG4gICAgICAgICAgICBpZiAobiAlIDIpIHtcbiAgICAgICAgICAgICAgcmVzdWx0MiArPSBzdHJpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuID0gbmF0aXZlRmxvb3IobiAvIDIpO1xuICAgICAgICAgICAgaWYgKG4pIHtcbiAgICAgICAgICAgICAgc3RyaW5nICs9IHN0cmluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IHdoaWxlIChuKTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0MjtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBiYXNlUmVzdChmdW5jLCBzdGFydCkge1xuICAgICAgICAgIHJldHVybiBzZXRUb1N0cmluZyhvdmVyUmVzdChmdW5jLCBzdGFydCwgaWRlbnRpdHkpLCBmdW5jICsgXCJcIik7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYmFzZVNhbXBsZShjb2xsZWN0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIGFycmF5U2FtcGxlKHZhbHVlcyhjb2xsZWN0aW9uKSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYmFzZVNhbXBsZVNpemUoY29sbGVjdGlvbiwgbikge1xuICAgICAgICAgIHZhciBhcnJheSA9IHZhbHVlcyhjb2xsZWN0aW9uKTtcbiAgICAgICAgICByZXR1cm4gc2h1ZmZsZVNlbGYoYXJyYXksIGJhc2VDbGFtcChuLCAwLCBhcnJheS5sZW5ndGgpKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBiYXNlU2V0KG9iamVjdCwgcGF0aCwgdmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuICAgICAgICAgIHZhciBpbmRleCA9IC0xLCBsZW5ndGggPSBwYXRoLmxlbmd0aCwgbGFzdEluZGV4ID0gbGVuZ3RoIC0gMSwgbmVzdGVkID0gb2JqZWN0O1xuICAgICAgICAgIHdoaWxlIChuZXN0ZWQgIT0gbnVsbCAmJiArK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIga2V5ID0gdG9LZXkocGF0aFtpbmRleF0pLCBuZXdWYWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgaWYgKGtleSA9PT0gXCJfX3Byb3RvX19cIiB8fCBrZXkgPT09IFwiY29uc3RydWN0b3JcIiB8fCBrZXkgPT09IFwicHJvdG90eXBlXCIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpbmRleCAhPSBsYXN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgdmFyIG9ialZhbHVlID0gbmVzdGVkW2tleV07XG4gICAgICAgICAgICAgIG5ld1ZhbHVlID0gY3VzdG9taXplciA/IGN1c3RvbWl6ZXIob2JqVmFsdWUsIGtleSwgbmVzdGVkKSA6IHVuZGVmaW5lZDI7XG4gICAgICAgICAgICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkMikge1xuICAgICAgICAgICAgICAgIG5ld1ZhbHVlID0gaXNPYmplY3Qob2JqVmFsdWUpID8gb2JqVmFsdWUgOiBpc0luZGV4KHBhdGhbaW5kZXggKyAxXSkgPyBbXSA6IHt9O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhc3NpZ25WYWx1ZShuZXN0ZWQsIGtleSwgbmV3VmFsdWUpO1xuICAgICAgICAgICAgbmVzdGVkID0gbmVzdGVkW2tleV07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGJhc2VTZXREYXRhID0gIW1ldGFNYXAgPyBpZGVudGl0eSA6IGZ1bmN0aW9uKGZ1bmMsIGRhdGEpIHtcbiAgICAgICAgICBtZXRhTWFwLnNldChmdW5jLCBkYXRhKTtcbiAgICAgICAgICByZXR1cm4gZnVuYztcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGJhc2VTZXRUb1N0cmluZyA9ICFkZWZpbmVQcm9wZXJ0eSA/IGlkZW50aXR5IDogZnVuY3Rpb24oZnVuYywgc3RyaW5nKSB7XG4gICAgICAgICAgcmV0dXJuIGRlZmluZVByb3BlcnR5KGZ1bmMsIFwidG9TdHJpbmdcIiwge1xuICAgICAgICAgICAgXCJjb25maWd1cmFibGVcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwiZW51bWVyYWJsZVwiOiBmYWxzZSxcbiAgICAgICAgICAgIFwidmFsdWVcIjogY29uc3RhbnQoc3RyaW5nKSxcbiAgICAgICAgICAgIFwid3JpdGFibGVcIjogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBmdW5jdGlvbiBiYXNlU2h1ZmZsZShjb2xsZWN0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIHNodWZmbGVTZWxmKHZhbHVlcyhjb2xsZWN0aW9uKSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYmFzZVNsaWNlKGFycmF5LCBzdGFydCwgZW5kKSB7XG4gICAgICAgICAgdmFyIGluZGV4ID0gLTEsIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgICAgICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgICAgICAgICBzdGFydCA9IC1zdGFydCA+IGxlbmd0aCA/IDAgOiBsZW5ndGggKyBzdGFydDtcbiAgICAgICAgICB9XG4gICAgICAgICAgZW5kID0gZW5kID4gbGVuZ3RoID8gbGVuZ3RoIDogZW5kO1xuICAgICAgICAgIGlmIChlbmQgPCAwKSB7XG4gICAgICAgICAgICBlbmQgKz0gbGVuZ3RoO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZW5ndGggPSBzdGFydCA+IGVuZCA/IDAgOiBlbmQgLSBzdGFydCA+Pj4gMDtcbiAgICAgICAgICBzdGFydCA+Pj49IDA7XG4gICAgICAgICAgdmFyIHJlc3VsdDIgPSBBcnJheTIobGVuZ3RoKTtcbiAgICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgICAgcmVzdWx0MltpbmRleF0gPSBhcnJheVtpbmRleCArIHN0YXJ0XTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDI7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYmFzZVNvbWUoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdDI7XG4gICAgICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uMikge1xuICAgICAgICAgICAgcmVzdWx0MiA9IHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24yKTtcbiAgICAgICAgICAgIHJldHVybiAhcmVzdWx0MjtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gISFyZXN1bHQyO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUsIHJldEhpZ2hlc3QpIHtcbiAgICAgICAgICB2YXIgbG93ID0gMCwgaGlnaCA9IGFycmF5ID09IG51bGwgPyBsb3cgOiBhcnJheS5sZW5ndGg7XG4gICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSBcIm51bWJlclwiICYmIHZhbHVlID09PSB2YWx1ZSAmJiBoaWdoIDw9IEhBTEZfTUFYX0FSUkFZX0xFTkdUSCkge1xuICAgICAgICAgICAgd2hpbGUgKGxvdyA8IGhpZ2gpIHtcbiAgICAgICAgICAgICAgdmFyIG1pZCA9IGxvdyArIGhpZ2ggPj4+IDEsIGNvbXB1dGVkID0gYXJyYXlbbWlkXTtcbiAgICAgICAgICAgICAgaWYgKGNvbXB1dGVkICE9PSBudWxsICYmICFpc1N5bWJvbChjb21wdXRlZCkgJiYgKHJldEhpZ2hlc3QgPyBjb21wdXRlZCA8PSB2YWx1ZSA6IGNvbXB1dGVkIDwgdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgbG93ID0gbWlkICsgMTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBoaWdoID0gbWlkO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaGlnaDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaWRlbnRpdHksIHJldEhpZ2hlc3QpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaXRlcmF0ZWUyLCByZXRIaWdoZXN0KSB7XG4gICAgICAgICAgdmFyIGxvdyA9IDAsIGhpZ2ggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgICAgICBpZiAoaGlnaCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhbHVlID0gaXRlcmF0ZWUyKHZhbHVlKTtcbiAgICAgICAgICB2YXIgdmFsSXNOYU4gPSB2YWx1ZSAhPT0gdmFsdWUsIHZhbElzTnVsbCA9IHZhbHVlID09PSBudWxsLCB2YWxJc1N5bWJvbCA9IGlzU3ltYm9sKHZhbHVlKSwgdmFsSXNVbmRlZmluZWQgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkMjtcbiAgICAgICAgICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgICAgICAgICAgdmFyIG1pZCA9IG5hdGl2ZUZsb29yKChsb3cgKyBoaWdoKSAvIDIpLCBjb21wdXRlZCA9IGl0ZXJhdGVlMihhcnJheVttaWRdKSwgb3RoSXNEZWZpbmVkID0gY29tcHV0ZWQgIT09IHVuZGVmaW5lZDIsIG90aElzTnVsbCA9IGNvbXB1dGVkID09PSBudWxsLCBvdGhJc1JlZmxleGl2ZSA9IGNvbXB1dGVkID09PSBjb21wdXRlZCwgb3RoSXNTeW1ib2wgPSBpc1N5bWJvbChjb21wdXRlZCk7XG4gICAgICAgICAgICBpZiAodmFsSXNOYU4pIHtcbiAgICAgICAgICAgICAgdmFyIHNldExvdyA9IHJldEhpZ2hlc3QgfHwgb3RoSXNSZWZsZXhpdmU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHZhbElzVW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIHNldExvdyA9IG90aElzUmVmbGV4aXZlICYmIChyZXRIaWdoZXN0IHx8IG90aElzRGVmaW5lZCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHZhbElzTnVsbCkge1xuICAgICAgICAgICAgICBzZXRMb3cgPSBvdGhJc1JlZmxleGl2ZSAmJiBvdGhJc0RlZmluZWQgJiYgKHJldEhpZ2hlc3QgfHwgIW90aElzTnVsbCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHZhbElzU3ltYm9sKSB7XG4gICAgICAgICAgICAgIHNldExvdyA9IG90aElzUmVmbGV4aXZlICYmIG90aElzRGVmaW5lZCAmJiAhb3RoSXNOdWxsICYmIChyZXRIaWdoZXN0IHx8ICFvdGhJc1N5bWJvbCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG90aElzTnVsbCB8fCBvdGhJc1N5bWJvbCkge1xuICAgICAgICAgICAgICBzZXRMb3cgPSBmYWxzZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHNldExvdyA9IHJldEhpZ2hlc3QgPyBjb21wdXRlZCA8PSB2YWx1ZSA6IGNvbXB1dGVkIDwgdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2V0TG93KSB7XG4gICAgICAgICAgICAgIGxvdyA9IG1pZCArIDE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBoaWdoID0gbWlkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbmF0aXZlTWluKGhpZ2gsIE1BWF9BUlJBWV9JTkRFWCk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYmFzZVNvcnRlZFVuaXEoYXJyYXksIGl0ZXJhdGVlMikge1xuICAgICAgICAgIHZhciBpbmRleCA9IC0xLCBsZW5ndGggPSBhcnJheS5sZW5ndGgsIHJlc0luZGV4ID0gMCwgcmVzdWx0MiA9IFtdO1xuICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sIGNvbXB1dGVkID0gaXRlcmF0ZWUyID8gaXRlcmF0ZWUyKHZhbHVlKSA6IHZhbHVlO1xuICAgICAgICAgICAgaWYgKCFpbmRleCB8fCAhZXEoY29tcHV0ZWQsIHNlZW4pKSB7XG4gICAgICAgICAgICAgIHZhciBzZWVuID0gY29tcHV0ZWQ7XG4gICAgICAgICAgICAgIHJlc3VsdDJbcmVzSW5kZXgrK10gPSB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDI7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYmFzZVRvTnVtYmVyKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBOQU47XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiArdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYmFzZVRvU3RyaW5nKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIGFycmF5TWFwKHZhbHVlLCBiYXNlVG9TdHJpbmcpICsgXCJcIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHN5bWJvbFRvU3RyaW5nID8gc3ltYm9sVG9TdHJpbmcuY2FsbCh2YWx1ZSkgOiBcIlwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgcmVzdWx0MiA9IHZhbHVlICsgXCJcIjtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0MiA9PSBcIjBcIiAmJiAxIC8gdmFsdWUgPT0gLUlORklOSVRZID8gXCItMFwiIDogcmVzdWx0MjtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBiYXNlVW5pcShhcnJheSwgaXRlcmF0ZWUyLCBjb21wYXJhdG9yKSB7XG4gICAgICAgICAgdmFyIGluZGV4ID0gLTEsIGluY2x1ZGVzMiA9IGFycmF5SW5jbHVkZXMsIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCwgaXNDb21tb24gPSB0cnVlLCByZXN1bHQyID0gW10sIHNlZW4gPSByZXN1bHQyO1xuICAgICAgICAgIGlmIChjb21wYXJhdG9yKSB7XG4gICAgICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICAgICAgaW5jbHVkZXMyID0gYXJyYXlJbmNsdWRlc1dpdGg7XG4gICAgICAgICAgfSBlbHNlIGlmIChsZW5ndGggPj0gTEFSR0VfQVJSQVlfU0laRSkge1xuICAgICAgICAgICAgdmFyIHNldDIgPSBpdGVyYXRlZTIgPyBudWxsIDogY3JlYXRlU2V0KGFycmF5KTtcbiAgICAgICAgICAgIGlmIChzZXQyKSB7XG4gICAgICAgICAgICAgIHJldHVybiBzZXRUb0FycmF5KHNldDIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgICAgIGluY2x1ZGVzMiA9IGNhY2hlSGFzO1xuICAgICAgICAgICAgc2VlbiA9IG5ldyBTZXRDYWNoZSgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZWVuID0gaXRlcmF0ZWUyID8gW10gOiByZXN1bHQyO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvdXRlcjpcbiAgICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSwgY29tcHV0ZWQgPSBpdGVyYXRlZTIgPyBpdGVyYXRlZTIodmFsdWUpIDogdmFsdWU7XG4gICAgICAgICAgICAgIHZhbHVlID0gY29tcGFyYXRvciB8fCB2YWx1ZSAhPT0gMCA/IHZhbHVlIDogMDtcbiAgICAgICAgICAgICAgaWYgKGlzQ29tbW9uICYmIGNvbXB1dGVkID09PSBjb21wdXRlZCkge1xuICAgICAgICAgICAgICAgIHZhciBzZWVuSW5kZXggPSBzZWVuLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB3aGlsZSAoc2VlbkluZGV4LS0pIHtcbiAgICAgICAgICAgICAgICAgIGlmIChzZWVuW3NlZW5JbmRleF0gPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaXRlcmF0ZWUyKSB7XG4gICAgICAgICAgICAgICAgICBzZWVuLnB1c2goY29tcHV0ZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXN1bHQyLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFpbmNsdWRlczIoc2VlbiwgY29tcHV0ZWQsIGNvbXBhcmF0b3IpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNlZW4gIT09IHJlc3VsdDIpIHtcbiAgICAgICAgICAgICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc3VsdDIucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0MjtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBiYXNlVW5zZXQob2JqZWN0LCBwYXRoKSB7XG4gICAgICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG4gICAgICAgICAgb2JqZWN0ID0gcGFyZW50KG9iamVjdCwgcGF0aCk7XG4gICAgICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsIHx8IGRlbGV0ZSBvYmplY3RbdG9LZXkobGFzdChwYXRoKSldO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGJhc2VVcGRhdGUob2JqZWN0LCBwYXRoLCB1cGRhdGVyLCBjdXN0b21pemVyKSB7XG4gICAgICAgICAgcmV0dXJuIGJhc2VTZXQob2JqZWN0LCBwYXRoLCB1cGRhdGVyKGJhc2VHZXQob2JqZWN0LCBwYXRoKSksIGN1c3RvbWl6ZXIpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGJhc2VXaGlsZShhcnJheSwgcHJlZGljYXRlLCBpc0Ryb3AsIGZyb21SaWdodCkge1xuICAgICAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsIGluZGV4ID0gZnJvbVJpZ2h0ID8gbGVuZ3RoIDogLTE7XG4gICAgICAgICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkgJiYgcHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gaXNEcm9wID8gYmFzZVNsaWNlKGFycmF5LCBmcm9tUmlnaHQgPyAwIDogaW5kZXgsIGZyb21SaWdodCA/IGluZGV4ICsgMSA6IGxlbmd0aCkgOiBiYXNlU2xpY2UoYXJyYXksIGZyb21SaWdodCA/IGluZGV4ICsgMSA6IDAsIGZyb21SaWdodCA/IGxlbmd0aCA6IGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBiYXNlV3JhcHBlclZhbHVlKHZhbHVlLCBhY3Rpb25zKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdDIgPSB2YWx1ZTtcbiAgICAgICAgICBpZiAocmVzdWx0MiBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB7XG4gICAgICAgICAgICByZXN1bHQyID0gcmVzdWx0Mi52YWx1ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gYXJyYXlSZWR1Y2UoYWN0aW9ucywgZnVuY3Rpb24ocmVzdWx0MywgYWN0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gYWN0aW9uLmZ1bmMuYXBwbHkoYWN0aW9uLnRoaXNBcmcsIGFycmF5UHVzaChbcmVzdWx0M10sIGFjdGlvbi5hcmdzKSk7XG4gICAgICAgICAgfSwgcmVzdWx0Mik7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYmFzZVhvcihhcnJheXMsIGl0ZXJhdGVlMiwgY29tcGFyYXRvcikge1xuICAgICAgICAgIHZhciBsZW5ndGggPSBhcnJheXMubGVuZ3RoO1xuICAgICAgICAgIGlmIChsZW5ndGggPCAyKSB7XG4gICAgICAgICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZVVuaXEoYXJyYXlzWzBdKSA6IFtdO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgaW5kZXggPSAtMSwgcmVzdWx0MiA9IEFycmF5MihsZW5ndGgpO1xuICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgYXJyYXkgPSBhcnJheXNbaW5kZXhdLCBvdGhJbmRleCA9IC0xO1xuICAgICAgICAgICAgd2hpbGUgKCsrb3RoSW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICAgICAgaWYgKG90aEluZGV4ICE9IGluZGV4KSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0MltpbmRleF0gPSBiYXNlRGlmZmVyZW5jZShyZXN1bHQyW2luZGV4XSB8fCBhcnJheSwgYXJyYXlzW290aEluZGV4XSwgaXRlcmF0ZWUyLCBjb21wYXJhdG9yKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4ocmVzdWx0MiwgMSksIGl0ZXJhdGVlMiwgY29tcGFyYXRvcik7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYmFzZVppcE9iamVjdChwcm9wcywgdmFsdWVzMiwgYXNzaWduRnVuYykge1xuICAgICAgICAgIHZhciBpbmRleCA9IC0xLCBsZW5ndGggPSBwcm9wcy5sZW5ndGgsIHZhbHNMZW5ndGggPSB2YWx1ZXMyLmxlbmd0aCwgcmVzdWx0MiA9IHt9O1xuICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBpbmRleCA8IHZhbHNMZW5ndGggPyB2YWx1ZXMyW2luZGV4XSA6IHVuZGVmaW5lZDI7XG4gICAgICAgICAgICBhc3NpZ25GdW5jKHJlc3VsdDIsIHByb3BzW2luZGV4XSwgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0MjtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBjYXN0QXJyYXlMaWtlT2JqZWN0KHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KHZhbHVlKSA/IHZhbHVlIDogW107XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gY2FzdEZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSBcImZ1bmN0aW9uXCIgPyB2YWx1ZSA6IGlkZW50aXR5O1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGNhc3RQYXRoKHZhbHVlLCBvYmplY3QpIHtcbiAgICAgICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGlzS2V5KHZhbHVlLCBvYmplY3QpID8gW3ZhbHVlXSA6IHN0cmluZ1RvUGF0aCh0b1N0cmluZyh2YWx1ZSkpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjYXN0UmVzdCA9IGJhc2VSZXN0O1xuICAgICAgICBmdW5jdGlvbiBjYXN0U2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgICAgIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkMiA/IGxlbmd0aCA6IGVuZDtcbiAgICAgICAgICByZXR1cm4gIXN0YXJ0ICYmIGVuZCA+PSBsZW5ndGggPyBhcnJheSA6IGJhc2VTbGljZShhcnJheSwgc3RhcnQsIGVuZCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNsZWFyVGltZW91dCA9IGN0eENsZWFyVGltZW91dCB8fCBmdW5jdGlvbihpZCkge1xuICAgICAgICAgIHJldHVybiByb290LmNsZWFyVGltZW91dChpZCk7XG4gICAgICAgIH07XG4gICAgICAgIGZ1bmN0aW9uIGNsb25lQnVmZmVyKGJ1ZmZlciwgaXNEZWVwKSB7XG4gICAgICAgICAgaWYgKGlzRGVlcCkge1xuICAgICAgICAgICAgcmV0dXJuIGJ1ZmZlci5zbGljZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgbGVuZ3RoID0gYnVmZmVyLmxlbmd0aCwgcmVzdWx0MiA9IGFsbG9jVW5zYWZlID8gYWxsb2NVbnNhZmUobGVuZ3RoKSA6IG5ldyBidWZmZXIuY29uc3RydWN0b3IobGVuZ3RoKTtcbiAgICAgICAgICBidWZmZXIuY29weShyZXN1bHQyKTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0MjtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBjbG9uZUFycmF5QnVmZmVyKGFycmF5QnVmZmVyKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdDIgPSBuZXcgYXJyYXlCdWZmZXIuY29uc3RydWN0b3IoYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICAgICAgbmV3IFVpbnQ4QXJyYXkyKHJlc3VsdDIpLnNldChuZXcgVWludDhBcnJheTIoYXJyYXlCdWZmZXIpKTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0MjtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBjbG9uZURhdGFWaWV3KGRhdGFWaWV3LCBpc0RlZXApIHtcbiAgICAgICAgICB2YXIgYnVmZmVyID0gaXNEZWVwID8gY2xvbmVBcnJheUJ1ZmZlcihkYXRhVmlldy5idWZmZXIpIDogZGF0YVZpZXcuYnVmZmVyO1xuICAgICAgICAgIHJldHVybiBuZXcgZGF0YVZpZXcuY29uc3RydWN0b3IoYnVmZmVyLCBkYXRhVmlldy5ieXRlT2Zmc2V0LCBkYXRhVmlldy5ieXRlTGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBjbG9uZVJlZ0V4cChyZWdleHApIHtcbiAgICAgICAgICB2YXIgcmVzdWx0MiA9IG5ldyByZWdleHAuY29uc3RydWN0b3IocmVnZXhwLnNvdXJjZSwgcmVGbGFncy5leGVjKHJlZ2V4cCkpO1xuICAgICAgICAgIHJlc3VsdDIubGFzdEluZGV4ID0gcmVnZXhwLmxhc3RJbmRleDtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0MjtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBjbG9uZVN5bWJvbChzeW1ib2wpIHtcbiAgICAgICAgICByZXR1cm4gc3ltYm9sVmFsdWVPZiA/IE9iamVjdDIoc3ltYm9sVmFsdWVPZi5jYWxsKHN5bWJvbCkpIDoge307XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gY2xvbmVUeXBlZEFycmF5KHR5cGVkQXJyYXksIGlzRGVlcCkge1xuICAgICAgICAgIHZhciBidWZmZXIgPSBpc0RlZXAgPyBjbG9uZUFycmF5QnVmZmVyKHR5cGVkQXJyYXkuYnVmZmVyKSA6IHR5cGVkQXJyYXkuYnVmZmVyO1xuICAgICAgICAgIHJldHVybiBuZXcgdHlwZWRBcnJheS5jb25zdHJ1Y3RvcihidWZmZXIsIHR5cGVkQXJyYXkuYnl0ZU9mZnNldCwgdHlwZWRBcnJheS5sZW5ndGgpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGNvbXBhcmVBc2NlbmRpbmcodmFsdWUsIG90aGVyKSB7XG4gICAgICAgICAgaWYgKHZhbHVlICE9PSBvdGhlcikge1xuICAgICAgICAgICAgdmFyIHZhbElzRGVmaW5lZCA9IHZhbHVlICE9PSB1bmRlZmluZWQyLCB2YWxJc051bGwgPSB2YWx1ZSA9PT0gbnVsbCwgdmFsSXNSZWZsZXhpdmUgPSB2YWx1ZSA9PT0gdmFsdWUsIHZhbElzU3ltYm9sID0gaXNTeW1ib2wodmFsdWUpO1xuICAgICAgICAgICAgdmFyIG90aElzRGVmaW5lZCA9IG90aGVyICE9PSB1bmRlZmluZWQyLCBvdGhJc051bGwgPSBvdGhlciA9PT0gbnVsbCwgb3RoSXNSZWZsZXhpdmUgPSBvdGhlciA9PT0gb3RoZXIsIG90aElzU3ltYm9sID0gaXNTeW1ib2wob3RoZXIpO1xuICAgICAgICAgICAgaWYgKCFvdGhJc051bGwgJiYgIW90aElzU3ltYm9sICYmICF2YWxJc1N5bWJvbCAmJiB2YWx1ZSA+IG90aGVyIHx8IHZhbElzU3ltYm9sICYmIG90aElzRGVmaW5lZCAmJiBvdGhJc1JlZmxleGl2ZSAmJiAhb3RoSXNOdWxsICYmICFvdGhJc1N5bWJvbCB8fCB2YWxJc051bGwgJiYgb3RoSXNEZWZpbmVkICYmIG90aElzUmVmbGV4aXZlIHx8ICF2YWxJc0RlZmluZWQgJiYgb3RoSXNSZWZsZXhpdmUgfHwgIXZhbElzUmVmbGV4aXZlKSB7XG4gICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF2YWxJc051bGwgJiYgIXZhbElzU3ltYm9sICYmICFvdGhJc1N5bWJvbCAmJiB2YWx1ZSA8IG90aGVyIHx8IG90aElzU3ltYm9sICYmIHZhbElzRGVmaW5lZCAmJiB2YWxJc1JlZmxleGl2ZSAmJiAhdmFsSXNOdWxsICYmICF2YWxJc1N5bWJvbCB8fCBvdGhJc051bGwgJiYgdmFsSXNEZWZpbmVkICYmIHZhbElzUmVmbGV4aXZlIHx8ICFvdGhJc0RlZmluZWQgJiYgdmFsSXNSZWZsZXhpdmUgfHwgIW90aElzUmVmbGV4aXZlKSB7XG4gICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gY29tcGFyZU11bHRpcGxlKG9iamVjdCwgb3RoZXIsIG9yZGVycykge1xuICAgICAgICAgIHZhciBpbmRleCA9IC0xLCBvYmpDcml0ZXJpYSA9IG9iamVjdC5jcml0ZXJpYSwgb3RoQ3JpdGVyaWEgPSBvdGhlci5jcml0ZXJpYSwgbGVuZ3RoID0gb2JqQ3JpdGVyaWEubGVuZ3RoLCBvcmRlcnNMZW5ndGggPSBvcmRlcnMubGVuZ3RoO1xuICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0MiA9IGNvbXBhcmVBc2NlbmRpbmcob2JqQ3JpdGVyaWFbaW5kZXhdLCBvdGhDcml0ZXJpYVtpbmRleF0pO1xuICAgICAgICAgICAgaWYgKHJlc3VsdDIpIHtcbiAgICAgICAgICAgICAgaWYgKGluZGV4ID49IG9yZGVyc0xlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQyO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHZhciBvcmRlciA9IG9yZGVyc1tpbmRleF07XG4gICAgICAgICAgICAgIHJldHVybiByZXN1bHQyICogKG9yZGVyID09IFwiZGVzY1wiID8gLTEgOiAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG9iamVjdC5pbmRleCAtIG90aGVyLmluZGV4O1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGNvbXBvc2VBcmdzKGFyZ3MsIHBhcnRpYWxzLCBob2xkZXJzLCBpc0N1cnJpZWQpIHtcbiAgICAgICAgICB2YXIgYXJnc0luZGV4ID0gLTEsIGFyZ3NMZW5ndGggPSBhcmdzLmxlbmd0aCwgaG9sZGVyc0xlbmd0aCA9IGhvbGRlcnMubGVuZ3RoLCBsZWZ0SW5kZXggPSAtMSwgbGVmdExlbmd0aCA9IHBhcnRpYWxzLmxlbmd0aCwgcmFuZ2VMZW5ndGggPSBuYXRpdmVNYXgoYXJnc0xlbmd0aCAtIGhvbGRlcnNMZW5ndGgsIDApLCByZXN1bHQyID0gQXJyYXkyKGxlZnRMZW5ndGggKyByYW5nZUxlbmd0aCksIGlzVW5jdXJyaWVkID0gIWlzQ3VycmllZDtcbiAgICAgICAgICB3aGlsZSAoKytsZWZ0SW5kZXggPCBsZWZ0TGVuZ3RoKSB7XG4gICAgICAgICAgICByZXN1bHQyW2xlZnRJbmRleF0gPSBwYXJ0aWFsc1tsZWZ0SW5kZXhdO1xuICAgICAgICAgIH1cbiAgICAgICAgICB3aGlsZSAoKythcmdzSW5kZXggPCBob2xkZXJzTGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaXNVbmN1cnJpZWQgfHwgYXJnc0luZGV4IDwgYXJnc0xlbmd0aCkge1xuICAgICAgICAgICAgICByZXN1bHQyW2hvbGRlcnNbYXJnc0luZGV4XV0gPSBhcmdzW2FyZ3NJbmRleF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHdoaWxlIChyYW5nZUxlbmd0aC0tKSB7XG4gICAgICAgICAgICByZXN1bHQyW2xlZnRJbmRleCsrXSA9IGFyZ3NbYXJnc0luZGV4KytdO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0MjtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBjb21wb3NlQXJnc1JpZ2h0KGFyZ3MsIHBhcnRpYWxzLCBob2xkZXJzLCBpc0N1cnJpZWQpIHtcbiAgICAgICAgICB2YXIgYXJnc0luZGV4ID0gLTEsIGFyZ3NMZW5ndGggPSBhcmdzLmxlbmd0aCwgaG9sZGVyc0luZGV4ID0gLTEsIGhvbGRlcnNMZW5ndGggPSBob2xkZXJzLmxlbmd0aCwgcmlnaHRJbmRleCA9IC0xLCByaWdodExlbmd0aCA9IHBhcnRpYWxzLmxlbmd0aCwgcmFuZ2VMZW5ndGggPSBuYXRpdmVNYXgoYXJnc0xlbmd0aCAtIGhvbGRlcnNMZW5ndGgsIDApLCByZXN1bHQyID0gQXJyYXkyKHJhbmdlTGVuZ3RoICsgcmlnaHRMZW5ndGgpLCBpc1VuY3VycmllZCA9ICFpc0N1cnJpZWQ7XG4gICAgICAgICAgd2hpbGUgKCsrYXJnc0luZGV4IDwgcmFuZ2VMZW5ndGgpIHtcbiAgICAgICAgICAgIHJlc3VsdDJbYXJnc0luZGV4XSA9IGFyZ3NbYXJnc0luZGV4XTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIG9mZnNldCA9IGFyZ3NJbmRleDtcbiAgICAgICAgICB3aGlsZSAoKytyaWdodEluZGV4IDwgcmlnaHRMZW5ndGgpIHtcbiAgICAgICAgICAgIHJlc3VsdDJbb2Zmc2V0ICsgcmlnaHRJbmRleF0gPSBwYXJ0aWFsc1tyaWdodEluZGV4XTtcbiAgICAgICAgICB9XG4gICAgICAgICAgd2hpbGUgKCsraG9sZGVyc0luZGV4IDwgaG9sZGVyc0xlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGlzVW5jdXJyaWVkIHx8IGFyZ3NJbmRleCA8IGFyZ3NMZW5ndGgpIHtcbiAgICAgICAgICAgICAgcmVzdWx0MltvZmZzZXQgKyBob2xkZXJzW2hvbGRlcnNJbmRleF1dID0gYXJnc1thcmdzSW5kZXgrK107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXN1bHQyO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGNvcHlBcnJheShzb3VyY2UsIGFycmF5KSB7XG4gICAgICAgICAgdmFyIGluZGV4ID0gLTEsIGxlbmd0aCA9IHNvdXJjZS5sZW5ndGg7XG4gICAgICAgICAgYXJyYXkgfHwgKGFycmF5ID0gQXJyYXkyKGxlbmd0aCkpO1xuICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICBhcnJheVtpbmRleF0gPSBzb3VyY2VbaW5kZXhdO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gY29weU9iamVjdChzb3VyY2UsIHByb3BzLCBvYmplY3QsIGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgICB2YXIgaXNOZXcgPSAhb2JqZWN0O1xuICAgICAgICAgIG9iamVjdCB8fCAob2JqZWN0ID0ge30pO1xuICAgICAgICAgIHZhciBpbmRleCA9IC0xLCBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBwcm9wc1tpbmRleF07XG4gICAgICAgICAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyID8gY3VzdG9taXplcihvYmplY3Rba2V5XSwgc291cmNlW2tleV0sIGtleSwgb2JqZWN0LCBzb3VyY2UpIDogdW5kZWZpbmVkMjtcbiAgICAgICAgICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkMikge1xuICAgICAgICAgICAgICBuZXdWYWx1ZSA9IHNvdXJjZVtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzTmV3KSB7XG4gICAgICAgICAgICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBjb3B5U3ltYm9scyhzb3VyY2UsIG9iamVjdCkge1xuICAgICAgICAgIHJldHVybiBjb3B5T2JqZWN0KHNvdXJjZSwgZ2V0U3ltYm9scyhzb3VyY2UpLCBvYmplY3QpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGNvcHlTeW1ib2xzSW4oc291cmNlLCBvYmplY3QpIHtcbiAgICAgICAgICByZXR1cm4gY29weU9iamVjdChzb3VyY2UsIGdldFN5bWJvbHNJbihzb3VyY2UpLCBvYmplY3QpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUFnZ3JlZ2F0b3Ioc2V0dGVyLCBpbml0aWFsaXplcikge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZTIpIHtcbiAgICAgICAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5QWdncmVnYXRvciA6IGJhc2VBZ2dyZWdhdG9yLCBhY2N1bXVsYXRvciA9IGluaXRpYWxpemVyID8gaW5pdGlhbGl6ZXIoKSA6IHt9O1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgc2V0dGVyLCBnZXRJdGVyYXRlZShpdGVyYXRlZTIsIDIpLCBhY2N1bXVsYXRvcik7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBjcmVhdGVBc3NpZ25lcihhc3NpZ25lcikge1xuICAgICAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIHNvdXJjZXMpIHtcbiAgICAgICAgICAgIHZhciBpbmRleCA9IC0xLCBsZW5ndGggPSBzb3VyY2VzLmxlbmd0aCwgY3VzdG9taXplciA9IGxlbmd0aCA+IDEgPyBzb3VyY2VzW2xlbmd0aCAtIDFdIDogdW5kZWZpbmVkMiwgZ3VhcmQgPSBsZW5ndGggPiAyID8gc291cmNlc1syXSA6IHVuZGVmaW5lZDI7XG4gICAgICAgICAgICBjdXN0b21pemVyID0gYXNzaWduZXIubGVuZ3RoID4gMyAmJiB0eXBlb2YgY3VzdG9taXplciA9PSBcImZ1bmN0aW9uXCIgPyAobGVuZ3RoLS0sIGN1c3RvbWl6ZXIpIDogdW5kZWZpbmVkMjtcbiAgICAgICAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChzb3VyY2VzWzBdLCBzb3VyY2VzWzFdLCBndWFyZCkpIHtcbiAgICAgICAgICAgICAgY3VzdG9taXplciA9IGxlbmd0aCA8IDMgPyB1bmRlZmluZWQyIDogY3VzdG9taXplcjtcbiAgICAgICAgICAgICAgbGVuZ3RoID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9iamVjdCA9IE9iamVjdDIob2JqZWN0KTtcbiAgICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICAgIHZhciBzb3VyY2UgPSBzb3VyY2VzW2luZGV4XTtcbiAgICAgICAgICAgICAgaWYgKHNvdXJjZSkge1xuICAgICAgICAgICAgICAgIGFzc2lnbmVyKG9iamVjdCwgc291cmNlLCBpbmRleCwgY3VzdG9taXplcik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gY3JlYXRlQmFzZUVhY2goZWFjaEZ1bmMsIGZyb21SaWdodCkge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZTIpIHtcbiAgICAgICAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgICAgIHJldHVybiBlYWNoRnVuYyhjb2xsZWN0aW9uLCBpdGVyYXRlZTIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoLCBpbmRleCA9IGZyb21SaWdodCA/IGxlbmd0aCA6IC0xLCBpdGVyYWJsZSA9IE9iamVjdDIoY29sbGVjdGlvbik7XG4gICAgICAgICAgICB3aGlsZSAoZnJvbVJpZ2h0ID8gaW5kZXgtLSA6ICsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICAgICAgaWYgKGl0ZXJhdGVlMihpdGVyYWJsZVtpbmRleF0sIGluZGV4LCBpdGVyYWJsZSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gY3JlYXRlQmFzZUZvcihmcm9tUmlnaHQpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0LCBpdGVyYXRlZTIsIGtleXNGdW5jKSB7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSAtMSwgaXRlcmFibGUgPSBPYmplY3QyKG9iamVjdCksIHByb3BzID0ga2V5c0Z1bmMob2JqZWN0KSwgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuICAgICAgICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgICAgICAgIHZhciBrZXkgPSBwcm9wc1tmcm9tUmlnaHQgPyBsZW5ndGggOiArK2luZGV4XTtcbiAgICAgICAgICAgICAgaWYgKGl0ZXJhdGVlMihpdGVyYWJsZVtrZXldLCBrZXksIGl0ZXJhYmxlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUJpbmQoZnVuYywgYml0bWFzaywgdGhpc0FyZykge1xuICAgICAgICAgIHZhciBpc0JpbmQgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcsIEN0b3IgPSBjcmVhdGVDdG9yKGZ1bmMpO1xuICAgICAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgICAgICB2YXIgZm4gPSB0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIgPyBDdG9yIDogZnVuYztcbiAgICAgICAgICAgIHJldHVybiBmbi5hcHBseShpc0JpbmQgPyB0aGlzQXJnIDogdGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gY3JlYXRlQ2FzZUZpcnN0KG1ldGhvZE5hbWUpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICAgICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgICAgICAgdmFyIHN0clN5bWJvbHMgPSBoYXNVbmljb2RlKHN0cmluZykgPyBzdHJpbmdUb0FycmF5KHN0cmluZykgOiB1bmRlZmluZWQyO1xuICAgICAgICAgICAgdmFyIGNociA9IHN0clN5bWJvbHMgPyBzdHJTeW1ib2xzWzBdIDogc3RyaW5nLmNoYXJBdCgwKTtcbiAgICAgICAgICAgIHZhciB0cmFpbGluZyA9IHN0clN5bWJvbHMgPyBjYXN0U2xpY2Uoc3RyU3ltYm9scywgMSkuam9pbihcIlwiKSA6IHN0cmluZy5zbGljZSgxKTtcbiAgICAgICAgICAgIHJldHVybiBjaHJbbWV0aG9kTmFtZV0oKSArIHRyYWlsaW5nO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gY3JlYXRlQ29tcG91bmRlcihjYWxsYmFjaykge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBhcnJheVJlZHVjZSh3b3JkcyhkZWJ1cnIoc3RyaW5nKS5yZXBsYWNlKHJlQXBvcywgXCJcIikpLCBjYWxsYmFjaywgXCJcIik7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBjcmVhdGVDdG9yKEN0b3IpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ3RvcigpO1xuICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0pO1xuICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0pO1xuICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0sIGFyZ3NbNV0pO1xuICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0sIGFyZ3NbNV0sIGFyZ3NbNl0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHRoaXNCaW5kaW5nID0gYmFzZUNyZWF0ZShDdG9yLnByb3RvdHlwZSksIHJlc3VsdDIgPSBDdG9yLmFwcGx5KHRoaXNCaW5kaW5nLCBhcmdzKTtcbiAgICAgICAgICAgIHJldHVybiBpc09iamVjdChyZXN1bHQyKSA/IHJlc3VsdDIgOiB0aGlzQmluZGluZztcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUN1cnJ5KGZ1bmMsIGJpdG1hc2ssIGFyaXR5KSB7XG4gICAgICAgICAgdmFyIEN0b3IgPSBjcmVhdGVDdG9yKGZ1bmMpO1xuICAgICAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgICAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5MihsZW5ndGgpLCBpbmRleCA9IGxlbmd0aCwgcGxhY2Vob2xkZXIgPSBnZXRIb2xkZXIod3JhcHBlcik7XG4gICAgICAgICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICAgICAgICBhcmdzW2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaG9sZGVycyA9IGxlbmd0aCA8IDMgJiYgYXJnc1swXSAhPT0gcGxhY2Vob2xkZXIgJiYgYXJnc1tsZW5ndGggLSAxXSAhPT0gcGxhY2Vob2xkZXIgPyBbXSA6IHJlcGxhY2VIb2xkZXJzKGFyZ3MsIHBsYWNlaG9sZGVyKTtcbiAgICAgICAgICAgIGxlbmd0aCAtPSBob2xkZXJzLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChsZW5ndGggPCBhcml0eSkge1xuICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlUmVjdXJyeShcbiAgICAgICAgICAgICAgICBmdW5jLFxuICAgICAgICAgICAgICAgIGJpdG1hc2ssXG4gICAgICAgICAgICAgICAgY3JlYXRlSHlicmlkLFxuICAgICAgICAgICAgICAgIHdyYXBwZXIucGxhY2Vob2xkZXIsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkMixcbiAgICAgICAgICAgICAgICBhcmdzLFxuICAgICAgICAgICAgICAgIGhvbGRlcnMsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkMixcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQyLFxuICAgICAgICAgICAgICAgIGFyaXR5IC0gbGVuZ3RoXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZm4gPSB0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIgPyBDdG9yIDogZnVuYztcbiAgICAgICAgICAgIHJldHVybiBhcHBseShmbiwgdGhpcywgYXJncyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUZpbmQoZmluZEluZGV4RnVuYykge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGZyb21JbmRleCkge1xuICAgICAgICAgICAgdmFyIGl0ZXJhYmxlID0gT2JqZWN0Mihjb2xsZWN0aW9uKTtcbiAgICAgICAgICAgIGlmICghaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgICAgICAgICAgdmFyIGl0ZXJhdGVlMiA9IGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyk7XG4gICAgICAgICAgICAgIGNvbGxlY3Rpb24gPSBrZXlzKGNvbGxlY3Rpb24pO1xuICAgICAgICAgICAgICBwcmVkaWNhdGUgPSBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlcmF0ZWUyKGl0ZXJhYmxlW2tleV0sIGtleSwgaXRlcmFibGUpO1xuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGluZGV4ID0gZmluZEluZGV4RnVuYyhjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGZyb21JbmRleCk7XG4gICAgICAgICAgICByZXR1cm4gaW5kZXggPiAtMSA/IGl0ZXJhYmxlW2l0ZXJhdGVlMiA/IGNvbGxlY3Rpb25baW5kZXhdIDogaW5kZXhdIDogdW5kZWZpbmVkMjtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUZsb3coZnJvbVJpZ2h0KSB7XG4gICAgICAgICAgcmV0dXJuIGZsYXRSZXN0KGZ1bmN0aW9uKGZ1bmNzKSB7XG4gICAgICAgICAgICB2YXIgbGVuZ3RoID0gZnVuY3MubGVuZ3RoLCBpbmRleCA9IGxlbmd0aCwgcHJlcmVxID0gTG9kYXNoV3JhcHBlci5wcm90b3R5cGUudGhydTtcbiAgICAgICAgICAgIGlmIChmcm9tUmlnaHQpIHtcbiAgICAgICAgICAgICAgZnVuY3MucmV2ZXJzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgICAgICAgdmFyIGZ1bmMgPSBmdW5jc1tpbmRleF07XG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yMihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChwcmVyZXEgJiYgIXdyYXBwZXIgJiYgZ2V0RnVuY05hbWUoZnVuYykgPT0gXCJ3cmFwcGVyXCIpIHtcbiAgICAgICAgICAgICAgICB2YXIgd3JhcHBlciA9IG5ldyBMb2Rhc2hXcmFwcGVyKFtdLCB0cnVlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW5kZXggPSB3cmFwcGVyID8gaW5kZXggOiBsZW5ndGg7XG4gICAgICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgICAgICBmdW5jID0gZnVuY3NbaW5kZXhdO1xuICAgICAgICAgICAgICB2YXIgZnVuY05hbWUgPSBnZXRGdW5jTmFtZShmdW5jKSwgZGF0YSA9IGZ1bmNOYW1lID09IFwid3JhcHBlclwiID8gZ2V0RGF0YShmdW5jKSA6IHVuZGVmaW5lZDI7XG4gICAgICAgICAgICAgIGlmIChkYXRhICYmIGlzTGF6aWFibGUoZGF0YVswXSkgJiYgZGF0YVsxXSA9PSAoV1JBUF9BUllfRkxBRyB8IFdSQVBfQ1VSUllfRkxBRyB8IFdSQVBfUEFSVElBTF9GTEFHIHwgV1JBUF9SRUFSR19GTEFHKSAmJiAhZGF0YVs0XS5sZW5ndGggJiYgZGF0YVs5XSA9PSAxKSB7XG4gICAgICAgICAgICAgICAgd3JhcHBlciA9IHdyYXBwZXJbZ2V0RnVuY05hbWUoZGF0YVswXSldLmFwcGx5KHdyYXBwZXIsIGRhdGFbM10pO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHdyYXBwZXIgPSBmdW5jLmxlbmd0aCA9PSAxICYmIGlzTGF6aWFibGUoZnVuYykgPyB3cmFwcGVyW2Z1bmNOYW1lXSgpIDogd3JhcHBlci50aHJ1KGZ1bmMpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLCB2YWx1ZSA9IGFyZ3NbMF07XG4gICAgICAgICAgICAgIGlmICh3cmFwcGVyICYmIGFyZ3MubGVuZ3RoID09IDEgJiYgaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gd3JhcHBlci5wbGFudCh2YWx1ZSkudmFsdWUoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB2YXIgaW5kZXgyID0gMCwgcmVzdWx0MiA9IGxlbmd0aCA/IGZ1bmNzW2luZGV4Ml0uYXBwbHkodGhpcywgYXJncykgOiB2YWx1ZTtcbiAgICAgICAgICAgICAgd2hpbGUgKCsraW5kZXgyIDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0MiA9IGZ1bmNzW2luZGV4Ml0uY2FsbCh0aGlzLCByZXN1bHQyKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0MjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gY3JlYXRlSHlicmlkKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBwYXJ0aWFsc1JpZ2h0LCBob2xkZXJzUmlnaHQsIGFyZ1BvcywgYXJ5MiwgYXJpdHkpIHtcbiAgICAgICAgICB2YXIgaXNBcnkgPSBiaXRtYXNrICYgV1JBUF9BUllfRkxBRywgaXNCaW5kID0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHLCBpc0JpbmRLZXkgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0tFWV9GTEFHLCBpc0N1cnJpZWQgPSBiaXRtYXNrICYgKFdSQVBfQ1VSUllfRkxBRyB8IFdSQVBfQ1VSUllfUklHSFRfRkxBRyksIGlzRmxpcCA9IGJpdG1hc2sgJiBXUkFQX0ZMSVBfRkxBRywgQ3RvciA9IGlzQmluZEtleSA/IHVuZGVmaW5lZDIgOiBjcmVhdGVDdG9yKGZ1bmMpO1xuICAgICAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgICAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5MihsZW5ndGgpLCBpbmRleCA9IGxlbmd0aDtcbiAgICAgICAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgICAgICAgIGFyZ3NbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc0N1cnJpZWQpIHtcbiAgICAgICAgICAgICAgdmFyIHBsYWNlaG9sZGVyID0gZ2V0SG9sZGVyKHdyYXBwZXIpLCBob2xkZXJzQ291bnQgPSBjb3VudEhvbGRlcnMoYXJncywgcGxhY2Vob2xkZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBhcnRpYWxzKSB7XG4gICAgICAgICAgICAgIGFyZ3MgPSBjb21wb3NlQXJncyhhcmdzLCBwYXJ0aWFscywgaG9sZGVycywgaXNDdXJyaWVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwYXJ0aWFsc1JpZ2h0KSB7XG4gICAgICAgICAgICAgIGFyZ3MgPSBjb21wb3NlQXJnc1JpZ2h0KGFyZ3MsIHBhcnRpYWxzUmlnaHQsIGhvbGRlcnNSaWdodCwgaXNDdXJyaWVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxlbmd0aCAtPSBob2xkZXJzQ291bnQ7XG4gICAgICAgICAgICBpZiAoaXNDdXJyaWVkICYmIGxlbmd0aCA8IGFyaXR5KSB7XG4gICAgICAgICAgICAgIHZhciBuZXdIb2xkZXJzID0gcmVwbGFjZUhvbGRlcnMoYXJncywgcGxhY2Vob2xkZXIpO1xuICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlUmVjdXJyeShcbiAgICAgICAgICAgICAgICBmdW5jLFxuICAgICAgICAgICAgICAgIGJpdG1hc2ssXG4gICAgICAgICAgICAgICAgY3JlYXRlSHlicmlkLFxuICAgICAgICAgICAgICAgIHdyYXBwZXIucGxhY2Vob2xkZXIsXG4gICAgICAgICAgICAgICAgdGhpc0FyZyxcbiAgICAgICAgICAgICAgICBhcmdzLFxuICAgICAgICAgICAgICAgIG5ld0hvbGRlcnMsXG4gICAgICAgICAgICAgICAgYXJnUG9zLFxuICAgICAgICAgICAgICAgIGFyeTIsXG4gICAgICAgICAgICAgICAgYXJpdHkgLSBsZW5ndGhcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB0aGlzQmluZGluZyA9IGlzQmluZCA/IHRoaXNBcmcgOiB0aGlzLCBmbiA9IGlzQmluZEtleSA/IHRoaXNCaW5kaW5nW2Z1bmNdIDogZnVuYztcbiAgICAgICAgICAgIGxlbmd0aCA9IGFyZ3MubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKGFyZ1Bvcykge1xuICAgICAgICAgICAgICBhcmdzID0gcmVvcmRlcihhcmdzLCBhcmdQb3MpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc0ZsaXAgJiYgbGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICBhcmdzLnJldmVyc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc0FyeSAmJiBhcnkyIDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICAgIGFyZ3MubGVuZ3RoID0gYXJ5MjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpIHtcbiAgICAgICAgICAgICAgZm4gPSBDdG9yIHx8IGNyZWF0ZUN0b3IoZm4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNCaW5kaW5nLCBhcmdzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gY3JlYXRlSW52ZXJ0ZXIoc2V0dGVyLCB0b0l0ZXJhdGVlKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCwgaXRlcmF0ZWUyKSB7XG4gICAgICAgICAgICByZXR1cm4gYmFzZUludmVydGVyKG9iamVjdCwgc2V0dGVyLCB0b0l0ZXJhdGVlKGl0ZXJhdGVlMiksIHt9KTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZU1hdGhPcGVyYXRpb24ob3BlcmF0b3IsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQyO1xuICAgICAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQyICYmIG90aGVyID09PSB1bmRlZmluZWQyKSB7XG4gICAgICAgICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZDIpIHtcbiAgICAgICAgICAgICAgcmVzdWx0MiA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG90aGVyICE9PSB1bmRlZmluZWQyKSB7XG4gICAgICAgICAgICAgIGlmIChyZXN1bHQyID09PSB1bmRlZmluZWQyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG90aGVyO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gXCJzdHJpbmdcIiB8fCB0eXBlb2Ygb3RoZXIgPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gYmFzZVRvU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgICAgICAgICBvdGhlciA9IGJhc2VUb1N0cmluZyhvdGhlcik7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBiYXNlVG9OdW1iZXIodmFsdWUpO1xuICAgICAgICAgICAgICAgIG90aGVyID0gYmFzZVRvTnVtYmVyKG90aGVyKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXN1bHQyID0gb3BlcmF0b3IodmFsdWUsIG90aGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQyO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gY3JlYXRlT3ZlcihhcnJheUZ1bmMpIHtcbiAgICAgICAgICByZXR1cm4gZmxhdFJlc3QoZnVuY3Rpb24oaXRlcmF0ZWVzKSB7XG4gICAgICAgICAgICBpdGVyYXRlZXMgPSBhcnJheU1hcChpdGVyYXRlZXMsIGJhc2VVbmFyeShnZXRJdGVyYXRlZSgpKSk7XG4gICAgICAgICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICAgICAgICB2YXIgdGhpc0FyZyA9IHRoaXM7XG4gICAgICAgICAgICAgIHJldHVybiBhcnJheUZ1bmMoaXRlcmF0ZWVzLCBmdW5jdGlvbihpdGVyYXRlZTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXBwbHkoaXRlcmF0ZWUyLCB0aGlzQXJnLCBhcmdzKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBjcmVhdGVQYWRkaW5nKGxlbmd0aCwgY2hhcnMpIHtcbiAgICAgICAgICBjaGFycyA9IGNoYXJzID09PSB1bmRlZmluZWQyID8gXCIgXCIgOiBiYXNlVG9TdHJpbmcoY2hhcnMpO1xuICAgICAgICAgIHZhciBjaGFyc0xlbmd0aCA9IGNoYXJzLmxlbmd0aDtcbiAgICAgICAgICBpZiAoY2hhcnNMZW5ndGggPCAyKSB7XG4gICAgICAgICAgICByZXR1cm4gY2hhcnNMZW5ndGggPyBiYXNlUmVwZWF0KGNoYXJzLCBsZW5ndGgpIDogY2hhcnM7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciByZXN1bHQyID0gYmFzZVJlcGVhdChjaGFycywgbmF0aXZlQ2VpbChsZW5ndGggLyBzdHJpbmdTaXplKGNoYXJzKSkpO1xuICAgICAgICAgIHJldHVybiBoYXNVbmljb2RlKGNoYXJzKSA/IGNhc3RTbGljZShzdHJpbmdUb0FycmF5KHJlc3VsdDIpLCAwLCBsZW5ndGgpLmpvaW4oXCJcIikgOiByZXN1bHQyLnNsaWNlKDAsIGxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gY3JlYXRlUGFydGlhbChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscykge1xuICAgICAgICAgIHZhciBpc0JpbmQgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcsIEN0b3IgPSBjcmVhdGVDdG9yKGZ1bmMpO1xuICAgICAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgICAgICB2YXIgYXJnc0luZGV4ID0gLTEsIGFyZ3NMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLCBsZWZ0SW5kZXggPSAtMSwgbGVmdExlbmd0aCA9IHBhcnRpYWxzLmxlbmd0aCwgYXJncyA9IEFycmF5MihsZWZ0TGVuZ3RoICsgYXJnc0xlbmd0aCksIGZuID0gdGhpcyAmJiB0aGlzICE9PSByb290ICYmIHRoaXMgaW5zdGFuY2VvZiB3cmFwcGVyID8gQ3RvciA6IGZ1bmM7XG4gICAgICAgICAgICB3aGlsZSAoKytsZWZ0SW5kZXggPCBsZWZ0TGVuZ3RoKSB7XG4gICAgICAgICAgICAgIGFyZ3NbbGVmdEluZGV4XSA9IHBhcnRpYWxzW2xlZnRJbmRleF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aGlsZSAoYXJnc0xlbmd0aC0tKSB7XG4gICAgICAgICAgICAgIGFyZ3NbbGVmdEluZGV4KytdID0gYXJndW1lbnRzWysrYXJnc0luZGV4XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhcHBseShmbiwgaXNCaW5kID8gdGhpc0FyZyA6IHRoaXMsIGFyZ3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBjcmVhdGVSYW5nZShmcm9tUmlnaHQpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oc3RhcnQsIGVuZCwgc3RlcCkge1xuICAgICAgICAgICAgaWYgKHN0ZXAgJiYgdHlwZW9mIHN0ZXAgIT0gXCJudW1iZXJcIiAmJiBpc0l0ZXJhdGVlQ2FsbChzdGFydCwgZW5kLCBzdGVwKSkge1xuICAgICAgICAgICAgICBlbmQgPSBzdGVwID0gdW5kZWZpbmVkMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0YXJ0ID0gdG9GaW5pdGUoc3RhcnQpO1xuICAgICAgICAgICAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkMikge1xuICAgICAgICAgICAgICBlbmQgPSBzdGFydDtcbiAgICAgICAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZW5kID0gdG9GaW5pdGUoZW5kKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0ZXAgPSBzdGVwID09PSB1bmRlZmluZWQyID8gc3RhcnQgPCBlbmQgPyAxIDogLTEgOiB0b0Zpbml0ZShzdGVwKTtcbiAgICAgICAgICAgIHJldHVybiBiYXNlUmFuZ2Uoc3RhcnQsIGVuZCwgc3RlcCwgZnJvbVJpZ2h0KTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24ob3BlcmF0b3IpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICAgICAgICBpZiAoISh0eXBlb2YgdmFsdWUgPT0gXCJzdHJpbmdcIiAmJiB0eXBlb2Ygb3RoZXIgPT0gXCJzdHJpbmdcIikpIHtcbiAgICAgICAgICAgICAgdmFsdWUgPSB0b051bWJlcih2YWx1ZSk7XG4gICAgICAgICAgICAgIG90aGVyID0gdG9OdW1iZXIob3RoZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG9wZXJhdG9yKHZhbHVlLCBvdGhlcik7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBjcmVhdGVSZWN1cnJ5KGZ1bmMsIGJpdG1hc2ssIHdyYXBGdW5jLCBwbGFjZWhvbGRlciwgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMsIGFyZ1BvcywgYXJ5MiwgYXJpdHkpIHtcbiAgICAgICAgICB2YXIgaXNDdXJyeSA9IGJpdG1hc2sgJiBXUkFQX0NVUlJZX0ZMQUcsIG5ld0hvbGRlcnMgPSBpc0N1cnJ5ID8gaG9sZGVycyA6IHVuZGVmaW5lZDIsIG5ld0hvbGRlcnNSaWdodCA9IGlzQ3VycnkgPyB1bmRlZmluZWQyIDogaG9sZGVycywgbmV3UGFydGlhbHMgPSBpc0N1cnJ5ID8gcGFydGlhbHMgOiB1bmRlZmluZWQyLCBuZXdQYXJ0aWFsc1JpZ2h0ID0gaXNDdXJyeSA/IHVuZGVmaW5lZDIgOiBwYXJ0aWFscztcbiAgICAgICAgICBiaXRtYXNrIHw9IGlzQ3VycnkgPyBXUkFQX1BBUlRJQUxfRkxBRyA6IFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHO1xuICAgICAgICAgIGJpdG1hc2sgJj0gfihpc0N1cnJ5ID8gV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcgOiBXUkFQX1BBUlRJQUxfRkxBRyk7XG4gICAgICAgICAgaWYgKCEoYml0bWFzayAmIFdSQVBfQ1VSUllfQk9VTkRfRkxBRykpIHtcbiAgICAgICAgICAgIGJpdG1hc2sgJj0gfihXUkFQX0JJTkRfRkxBRyB8IFdSQVBfQklORF9LRVlfRkxBRyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBuZXdEYXRhID0gW1xuICAgICAgICAgICAgZnVuYyxcbiAgICAgICAgICAgIGJpdG1hc2ssXG4gICAgICAgICAgICB0aGlzQXJnLFxuICAgICAgICAgICAgbmV3UGFydGlhbHMsXG4gICAgICAgICAgICBuZXdIb2xkZXJzLFxuICAgICAgICAgICAgbmV3UGFydGlhbHNSaWdodCxcbiAgICAgICAgICAgIG5ld0hvbGRlcnNSaWdodCxcbiAgICAgICAgICAgIGFyZ1BvcyxcbiAgICAgICAgICAgIGFyeTIsXG4gICAgICAgICAgICBhcml0eVxuICAgICAgICAgIF07XG4gICAgICAgICAgdmFyIHJlc3VsdDIgPSB3cmFwRnVuYy5hcHBseSh1bmRlZmluZWQyLCBuZXdEYXRhKTtcbiAgICAgICAgICBpZiAoaXNMYXppYWJsZShmdW5jKSkge1xuICAgICAgICAgICAgc2V0RGF0YShyZXN1bHQyLCBuZXdEYXRhKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0Mi5wbGFjZWhvbGRlciA9IHBsYWNlaG9sZGVyO1xuICAgICAgICAgIHJldHVybiBzZXRXcmFwVG9TdHJpbmcocmVzdWx0MiwgZnVuYywgYml0bWFzayk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gY3JlYXRlUm91bmQobWV0aG9kTmFtZSkge1xuICAgICAgICAgIHZhciBmdW5jID0gTWF0aDJbbWV0aG9kTmFtZV07XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKG51bWJlciwgcHJlY2lzaW9uKSB7XG4gICAgICAgICAgICBudW1iZXIgPSB0b051bWJlcihudW1iZXIpO1xuICAgICAgICAgICAgcHJlY2lzaW9uID0gcHJlY2lzaW9uID09IG51bGwgPyAwIDogbmF0aXZlTWluKHRvSW50ZWdlcihwcmVjaXNpb24pLCAyOTIpO1xuICAgICAgICAgICAgaWYgKHByZWNpc2lvbiAmJiBuYXRpdmVJc0Zpbml0ZShudW1iZXIpKSB7XG4gICAgICAgICAgICAgIHZhciBwYWlyID0gKHRvU3RyaW5nKG51bWJlcikgKyBcImVcIikuc3BsaXQoXCJlXCIpLCB2YWx1ZSA9IGZ1bmMocGFpclswXSArIFwiZVwiICsgKCtwYWlyWzFdICsgcHJlY2lzaW9uKSk7XG4gICAgICAgICAgICAgIHBhaXIgPSAodG9TdHJpbmcodmFsdWUpICsgXCJlXCIpLnNwbGl0KFwiZVwiKTtcbiAgICAgICAgICAgICAgcmV0dXJuICsocGFpclswXSArIFwiZVwiICsgKCtwYWlyWzFdIC0gcHJlY2lzaW9uKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZnVuYyhudW1iZXIpO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNyZWF0ZVNldCA9ICEoU2V0MiAmJiAxIC8gc2V0VG9BcnJheShuZXcgU2V0MihbLCAtMF0pKVsxXSA9PSBJTkZJTklUWSkgPyBub29wIDogZnVuY3Rpb24odmFsdWVzMikge1xuICAgICAgICAgIHJldHVybiBuZXcgU2V0Mih2YWx1ZXMyKTtcbiAgICAgICAgfTtcbiAgICAgICAgZnVuY3Rpb24gY3JlYXRlVG9QYWlycyhrZXlzRnVuYykge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgICAgIHZhciB0YWcgPSBnZXRUYWcob2JqZWN0KTtcbiAgICAgICAgICAgIGlmICh0YWcgPT0gbWFwVGFnKSB7XG4gICAgICAgICAgICAgIHJldHVybiBtYXBUb0FycmF5KG9iamVjdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGFnID09IHNldFRhZykge1xuICAgICAgICAgICAgICByZXR1cm4gc2V0VG9QYWlycyhvYmplY3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGJhc2VUb1BhaXJzKG9iamVjdCwga2V5c0Z1bmMob2JqZWN0KSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBjcmVhdGVXcmFwKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBhcmdQb3MsIGFyeTIsIGFyaXR5KSB7XG4gICAgICAgICAgdmFyIGlzQmluZEtleSA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfS0VZX0ZMQUc7XG4gICAgICAgICAgaWYgKCFpc0JpbmRLZXkgJiYgdHlwZW9mIGZ1bmMgIT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yMihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgbGVuZ3RoID0gcGFydGlhbHMgPyBwYXJ0aWFscy5sZW5ndGggOiAwO1xuICAgICAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgICAgICBiaXRtYXNrICY9IH4oV1JBUF9QQVJUSUFMX0ZMQUcgfCBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyk7XG4gICAgICAgICAgICBwYXJ0aWFscyA9IGhvbGRlcnMgPSB1bmRlZmluZWQyO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhcnkyID0gYXJ5MiA9PT0gdW5kZWZpbmVkMiA/IGFyeTIgOiBuYXRpdmVNYXgodG9JbnRlZ2VyKGFyeTIpLCAwKTtcbiAgICAgICAgICBhcml0eSA9IGFyaXR5ID09PSB1bmRlZmluZWQyID8gYXJpdHkgOiB0b0ludGVnZXIoYXJpdHkpO1xuICAgICAgICAgIGxlbmd0aCAtPSBob2xkZXJzID8gaG9sZGVycy5sZW5ndGggOiAwO1xuICAgICAgICAgIGlmIChiaXRtYXNrICYgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcpIHtcbiAgICAgICAgICAgIHZhciBwYXJ0aWFsc1JpZ2h0ID0gcGFydGlhbHMsIGhvbGRlcnNSaWdodCA9IGhvbGRlcnM7XG4gICAgICAgICAgICBwYXJ0aWFscyA9IGhvbGRlcnMgPSB1bmRlZmluZWQyO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgZGF0YSA9IGlzQmluZEtleSA/IHVuZGVmaW5lZDIgOiBnZXREYXRhKGZ1bmMpO1xuICAgICAgICAgIHZhciBuZXdEYXRhID0gW1xuICAgICAgICAgICAgZnVuYyxcbiAgICAgICAgICAgIGJpdG1hc2ssXG4gICAgICAgICAgICB0aGlzQXJnLFxuICAgICAgICAgICAgcGFydGlhbHMsXG4gICAgICAgICAgICBob2xkZXJzLFxuICAgICAgICAgICAgcGFydGlhbHNSaWdodCxcbiAgICAgICAgICAgIGhvbGRlcnNSaWdodCxcbiAgICAgICAgICAgIGFyZ1BvcyxcbiAgICAgICAgICAgIGFyeTIsXG4gICAgICAgICAgICBhcml0eVxuICAgICAgICAgIF07XG4gICAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgIG1lcmdlRGF0YShuZXdEYXRhLCBkYXRhKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuYyA9IG5ld0RhdGFbMF07XG4gICAgICAgICAgYml0bWFzayA9IG5ld0RhdGFbMV07XG4gICAgICAgICAgdGhpc0FyZyA9IG5ld0RhdGFbMl07XG4gICAgICAgICAgcGFydGlhbHMgPSBuZXdEYXRhWzNdO1xuICAgICAgICAgIGhvbGRlcnMgPSBuZXdEYXRhWzRdO1xuICAgICAgICAgIGFyaXR5ID0gbmV3RGF0YVs5XSA9IG5ld0RhdGFbOV0gPT09IHVuZGVmaW5lZDIgPyBpc0JpbmRLZXkgPyAwIDogZnVuYy5sZW5ndGggOiBuYXRpdmVNYXgobmV3RGF0YVs5XSAtIGxlbmd0aCwgMCk7XG4gICAgICAgICAgaWYgKCFhcml0eSAmJiBiaXRtYXNrICYgKFdSQVBfQ1VSUllfRkxBRyB8IFdSQVBfQ1VSUllfUklHSFRfRkxBRykpIHtcbiAgICAgICAgICAgIGJpdG1hc2sgJj0gfihXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIWJpdG1hc2sgfHwgYml0bWFzayA9PSBXUkFQX0JJTkRfRkxBRykge1xuICAgICAgICAgICAgdmFyIHJlc3VsdDIgPSBjcmVhdGVCaW5kKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoYml0bWFzayA9PSBXUkFQX0NVUlJZX0ZMQUcgfHwgYml0bWFzayA9PSBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpIHtcbiAgICAgICAgICAgIHJlc3VsdDIgPSBjcmVhdGVDdXJyeShmdW5jLCBiaXRtYXNrLCBhcml0eSk7XG4gICAgICAgICAgfSBlbHNlIGlmICgoYml0bWFzayA9PSBXUkFQX1BBUlRJQUxfRkxBRyB8fCBiaXRtYXNrID09IChXUkFQX0JJTkRfRkxBRyB8IFdSQVBfUEFSVElBTF9GTEFHKSkgJiYgIWhvbGRlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXN1bHQyID0gY3JlYXRlUGFydGlhbChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdDIgPSBjcmVhdGVIeWJyaWQuYXBwbHkodW5kZWZpbmVkMiwgbmV3RGF0YSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBzZXR0ZXIgPSBkYXRhID8gYmFzZVNldERhdGEgOiBzZXREYXRhO1xuICAgICAgICAgIHJldHVybiBzZXRXcmFwVG9TdHJpbmcoc2V0dGVyKHJlc3VsdDIsIG5ld0RhdGEpLCBmdW5jLCBiaXRtYXNrKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBjdXN0b21EZWZhdWx0c0Fzc2lnbkluKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgICAgICBpZiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZDIgfHwgZXEob2JqVmFsdWUsIG9iamVjdFByb3RvW2tleV0pICYmICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkge1xuICAgICAgICAgICAgcmV0dXJuIHNyY1ZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gb2JqVmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gY3VzdG9tRGVmYXVsdHNNZXJnZShvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKSB7XG4gICAgICAgICAgaWYgKGlzT2JqZWN0KG9ialZhbHVlKSAmJiBpc09iamVjdChzcmNWYWx1ZSkpIHtcbiAgICAgICAgICAgIHN0YWNrLnNldChzcmNWYWx1ZSwgb2JqVmFsdWUpO1xuICAgICAgICAgICAgYmFzZU1lcmdlKG9ialZhbHVlLCBzcmNWYWx1ZSwgdW5kZWZpbmVkMiwgY3VzdG9tRGVmYXVsdHNNZXJnZSwgc3RhY2spO1xuICAgICAgICAgICAgc3RhY2tbXCJkZWxldGVcIl0oc3JjVmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gb2JqVmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gY3VzdG9tT21pdENsb25lKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGlzUGxhaW5PYmplY3QodmFsdWUpID8gdW5kZWZpbmVkMiA6IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGVxdWFsQXJyYXlzKGFycmF5LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICAgICAgICAgIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcsIGFyckxlbmd0aCA9IGFycmF5Lmxlbmd0aCwgb3RoTGVuZ3RoID0gb3RoZXIubGVuZ3RoO1xuICAgICAgICAgIGlmIChhcnJMZW5ndGggIT0gb3RoTGVuZ3RoICYmICEoaXNQYXJ0aWFsICYmIG90aExlbmd0aCA+IGFyckxlbmd0aCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGFyclN0YWNrZWQgPSBzdGFjay5nZXQoYXJyYXkpO1xuICAgICAgICAgIHZhciBvdGhTdGFja2VkID0gc3RhY2suZ2V0KG90aGVyKTtcbiAgICAgICAgICBpZiAoYXJyU3RhY2tlZCAmJiBvdGhTdGFja2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gYXJyU3RhY2tlZCA9PSBvdGhlciAmJiBvdGhTdGFja2VkID09IGFycmF5O1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgaW5kZXggPSAtMSwgcmVzdWx0MiA9IHRydWUsIHNlZW4gPSBiaXRtYXNrICYgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA/IG5ldyBTZXRDYWNoZSgpIDogdW5kZWZpbmVkMjtcbiAgICAgICAgICBzdGFjay5zZXQoYXJyYXksIG90aGVyKTtcbiAgICAgICAgICBzdGFjay5zZXQob3RoZXIsIGFycmF5KTtcbiAgICAgICAgICB3aGlsZSAoKytpbmRleCA8IGFyckxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIGFyclZhbHVlID0gYXJyYXlbaW5kZXhdLCBvdGhWYWx1ZSA9IG90aGVyW2luZGV4XTtcbiAgICAgICAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgICAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbCA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIGFyclZhbHVlLCBpbmRleCwgb3RoZXIsIGFycmF5LCBzdGFjaykgOiBjdXN0b21pemVyKGFyclZhbHVlLCBvdGhWYWx1ZSwgaW5kZXgsIGFycmF5LCBvdGhlciwgc3RhY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNvbXBhcmVkICE9PSB1bmRlZmluZWQyKSB7XG4gICAgICAgICAgICAgIGlmIChjb21wYXJlZCkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJlc3VsdDIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2Vlbikge1xuICAgICAgICAgICAgICBpZiAoIWFycmF5U29tZShvdGhlciwgZnVuY3Rpb24ob3RoVmFsdWUyLCBvdGhJbmRleCkge1xuICAgICAgICAgICAgICAgIGlmICghY2FjaGVIYXMoc2Vlbiwgb3RoSW5kZXgpICYmIChhcnJWYWx1ZSA9PT0gb3RoVmFsdWUyIHx8IGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gc2Vlbi5wdXNoKG90aEluZGV4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0MiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCEoYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSkpIHtcbiAgICAgICAgICAgICAgcmVzdWx0MiA9IGZhbHNlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgc3RhY2tbXCJkZWxldGVcIl0oYXJyYXkpO1xuICAgICAgICAgIHN0YWNrW1wiZGVsZXRlXCJdKG90aGVyKTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0MjtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIHRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICAgICAgICAgIHN3aXRjaCAodGFnKSB7XG4gICAgICAgICAgICBjYXNlIGRhdGFWaWV3VGFnOlxuICAgICAgICAgICAgICBpZiAob2JqZWN0LmJ5dGVMZW5ndGggIT0gb3RoZXIuYnl0ZUxlbmd0aCB8fCBvYmplY3QuYnl0ZU9mZnNldCAhPSBvdGhlci5ieXRlT2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIG9iamVjdCA9IG9iamVjdC5idWZmZXI7XG4gICAgICAgICAgICAgIG90aGVyID0gb3RoZXIuYnVmZmVyO1xuICAgICAgICAgICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgICAgICAgICAgaWYgKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGggfHwgIWVxdWFsRnVuYyhuZXcgVWludDhBcnJheTIob2JqZWN0KSwgbmV3IFVpbnQ4QXJyYXkyKG90aGVyKSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICBjYXNlIGJvb2xUYWc6XG4gICAgICAgICAgICBjYXNlIGRhdGVUYWc6XG4gICAgICAgICAgICBjYXNlIG51bWJlclRhZzpcbiAgICAgICAgICAgICAgcmV0dXJuIGVxKCtvYmplY3QsICtvdGhlcik7XG4gICAgICAgICAgICBjYXNlIGVycm9yVGFnOlxuICAgICAgICAgICAgICByZXR1cm4gb2JqZWN0Lm5hbWUgPT0gb3RoZXIubmFtZSAmJiBvYmplY3QubWVzc2FnZSA9PSBvdGhlci5tZXNzYWdlO1xuICAgICAgICAgICAgY2FzZSByZWdleHBUYWc6XG4gICAgICAgICAgICBjYXNlIHN0cmluZ1RhZzpcbiAgICAgICAgICAgICAgcmV0dXJuIG9iamVjdCA9PSBvdGhlciArIFwiXCI7XG4gICAgICAgICAgICBjYXNlIG1hcFRhZzpcbiAgICAgICAgICAgICAgdmFyIGNvbnZlcnQgPSBtYXBUb0FycmF5O1xuICAgICAgICAgICAgY2FzZSBzZXRUYWc6XG4gICAgICAgICAgICAgIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUc7XG4gICAgICAgICAgICAgIGNvbnZlcnQgfHwgKGNvbnZlcnQgPSBzZXRUb0FycmF5KTtcbiAgICAgICAgICAgICAgaWYgKG9iamVjdC5zaXplICE9IG90aGVyLnNpemUgJiYgIWlzUGFydGlhbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICAgICAgICAgICAgICBpZiAoc3RhY2tlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJpdG1hc2sgfD0gQ09NUEFSRV9VTk9SREVSRURfRkxBRztcbiAgICAgICAgICAgICAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICAgICAgICAgICAgICB2YXIgcmVzdWx0MiA9IGVxdWFsQXJyYXlzKGNvbnZlcnQob2JqZWN0KSwgY29udmVydChvdGhlciksIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICAgICAgICAgICAgICBzdGFja1tcImRlbGV0ZVwiXShvYmplY3QpO1xuICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0MjtcbiAgICAgICAgICAgIGNhc2Ugc3ltYm9sVGFnOlxuICAgICAgICAgICAgICBpZiAoc3ltYm9sVmFsdWVPZikge1xuICAgICAgICAgICAgICAgIHJldHVybiBzeW1ib2xWYWx1ZU9mLmNhbGwob2JqZWN0KSA9PSBzeW1ib2xWYWx1ZU9mLmNhbGwob3RoZXIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICAgICAgICAgIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcsIG9ialByb3BzID0gZ2V0QWxsS2V5cyhvYmplY3QpLCBvYmpMZW5ndGggPSBvYmpQcm9wcy5sZW5ndGgsIG90aFByb3BzID0gZ2V0QWxsS2V5cyhvdGhlciksIG90aExlbmd0aCA9IG90aFByb3BzLmxlbmd0aDtcbiAgICAgICAgICBpZiAob2JqTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBpbmRleCA9IG9iakxlbmd0aDtcbiAgICAgICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICAgICAgdmFyIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICAgICAgICAgIGlmICghKGlzUGFydGlhbCA/IGtleSBpbiBvdGhlciA6IGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsIGtleSkpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIG9ialN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgICAgICAgICB2YXIgb3RoU3RhY2tlZCA9IHN0YWNrLmdldChvdGhlcik7XG4gICAgICAgICAgaWYgKG9ialN0YWNrZWQgJiYgb3RoU3RhY2tlZCkge1xuICAgICAgICAgICAgcmV0dXJuIG9ialN0YWNrZWQgPT0gb3RoZXIgJiYgb3RoU3RhY2tlZCA9PSBvYmplY3Q7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciByZXN1bHQyID0gdHJ1ZTtcbiAgICAgICAgICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gICAgICAgICAgc3RhY2suc2V0KG90aGVyLCBvYmplY3QpO1xuICAgICAgICAgIHZhciBza2lwQ3RvciA9IGlzUGFydGlhbDtcbiAgICAgICAgICB3aGlsZSAoKytpbmRleCA8IG9iakxlbmd0aCkge1xuICAgICAgICAgICAga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgICAgICAgICAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV0sIG90aFZhbHVlID0gb3RoZXJba2V5XTtcbiAgICAgICAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgICAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbCA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIG9ialZhbHVlLCBrZXksIG90aGVyLCBvYmplY3QsIHN0YWNrKSA6IGN1c3RvbWl6ZXIob2JqVmFsdWUsIG90aFZhbHVlLCBrZXksIG9iamVjdCwgb3RoZXIsIHN0YWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghKGNvbXBhcmVkID09PSB1bmRlZmluZWQyID8gb2JqVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhvYmpWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSA6IGNvbXBhcmVkKSkge1xuICAgICAgICAgICAgICByZXN1bHQyID0gZmFsc2U7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2tpcEN0b3IgfHwgKHNraXBDdG9yID0ga2V5ID09IFwiY29uc3RydWN0b3JcIik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyZXN1bHQyICYmICFza2lwQ3Rvcikge1xuICAgICAgICAgICAgdmFyIG9iakN0b3IgPSBvYmplY3QuY29uc3RydWN0b3IsIG90aEN0b3IgPSBvdGhlci5jb25zdHJ1Y3RvcjtcbiAgICAgICAgICAgIGlmIChvYmpDdG9yICE9IG90aEN0b3IgJiYgKFwiY29uc3RydWN0b3JcIiBpbiBvYmplY3QgJiYgXCJjb25zdHJ1Y3RvclwiIGluIG90aGVyKSAmJiAhKHR5cGVvZiBvYmpDdG9yID09IFwiZnVuY3Rpb25cIiAmJiBvYmpDdG9yIGluc3RhbmNlb2Ygb2JqQ3RvciAmJiB0eXBlb2Ygb3RoQ3RvciA9PSBcImZ1bmN0aW9uXCIgJiYgb3RoQ3RvciBpbnN0YW5jZW9mIG90aEN0b3IpKSB7XG4gICAgICAgICAgICAgIHJlc3VsdDIgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgc3RhY2tbXCJkZWxldGVcIl0ob2JqZWN0KTtcbiAgICAgICAgICBzdGFja1tcImRlbGV0ZVwiXShvdGhlcik7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDI7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZmxhdFJlc3QoZnVuYykge1xuICAgICAgICAgIHJldHVybiBzZXRUb1N0cmluZyhvdmVyUmVzdChmdW5jLCB1bmRlZmluZWQyLCBmbGF0dGVuKSwgZnVuYyArIFwiXCIpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGdldEFsbEtleXMob2JqZWN0KSB7XG4gICAgICAgICAgcmV0dXJuIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5cywgZ2V0U3ltYm9scyk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZ2V0QWxsS2V5c0luKG9iamVjdCkge1xuICAgICAgICAgIHJldHVybiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXNJbiwgZ2V0U3ltYm9sc0luKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZ2V0RGF0YSA9ICFtZXRhTWFwID8gbm9vcCA6IGZ1bmN0aW9uKGZ1bmMpIHtcbiAgICAgICAgICByZXR1cm4gbWV0YU1hcC5nZXQoZnVuYyk7XG4gICAgICAgIH07XG4gICAgICAgIGZ1bmN0aW9uIGdldEZ1bmNOYW1lKGZ1bmMpIHtcbiAgICAgICAgICB2YXIgcmVzdWx0MiA9IGZ1bmMubmFtZSArIFwiXCIsIGFycmF5ID0gcmVhbE5hbWVzW3Jlc3VsdDJdLCBsZW5ndGggPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlYWxOYW1lcywgcmVzdWx0MikgPyBhcnJheS5sZW5ndGggOiAwO1xuICAgICAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICAgICAgdmFyIGRhdGEgPSBhcnJheVtsZW5ndGhdLCBvdGhlckZ1bmMgPSBkYXRhLmZ1bmM7XG4gICAgICAgICAgICBpZiAob3RoZXJGdW5jID09IG51bGwgfHwgb3RoZXJGdW5jID09IGZ1bmMpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGRhdGEubmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDI7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZ2V0SG9sZGVyKGZ1bmMpIHtcbiAgICAgICAgICB2YXIgb2JqZWN0ID0gaGFzT3duUHJvcGVydHkuY2FsbChsb2Rhc2gsIFwicGxhY2Vob2xkZXJcIikgPyBsb2Rhc2ggOiBmdW5jO1xuICAgICAgICAgIHJldHVybiBvYmplY3QucGxhY2Vob2xkZXI7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZ2V0SXRlcmF0ZWUoKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdDIgPSBsb2Rhc2guaXRlcmF0ZWUgfHwgaXRlcmF0ZWU7XG4gICAgICAgICAgcmVzdWx0MiA9IHJlc3VsdDIgPT09IGl0ZXJhdGVlID8gYmFzZUl0ZXJhdGVlIDogcmVzdWx0MjtcbiAgICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHJlc3VsdDIoYXJndW1lbnRzWzBdLCBhcmd1bWVudHNbMV0pIDogcmVzdWx0MjtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBnZXRNYXBEYXRhKG1hcDIsIGtleSkge1xuICAgICAgICAgIHZhciBkYXRhID0gbWFwMi5fX2RhdGFfXztcbiAgICAgICAgICByZXR1cm4gaXNLZXlhYmxlKGtleSkgPyBkYXRhW3R5cGVvZiBrZXkgPT0gXCJzdHJpbmdcIiA/IFwic3RyaW5nXCIgOiBcImhhc2hcIl0gOiBkYXRhLm1hcDtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBnZXRNYXRjaERhdGEob2JqZWN0KSB7XG4gICAgICAgICAgdmFyIHJlc3VsdDIgPSBrZXlzKG9iamVjdCksIGxlbmd0aCA9IHJlc3VsdDIubGVuZ3RoO1xuICAgICAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICAgICAgdmFyIGtleSA9IHJlc3VsdDJbbGVuZ3RoXSwgdmFsdWUgPSBvYmplY3Rba2V5XTtcbiAgICAgICAgICAgIHJlc3VsdDJbbGVuZ3RoXSA9IFtrZXksIHZhbHVlLCBpc1N0cmljdENvbXBhcmFibGUodmFsdWUpXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDI7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZ2V0TmF0aXZlKG9iamVjdCwga2V5KSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gZ2V0VmFsdWUob2JqZWN0LCBrZXkpO1xuICAgICAgICAgIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpID8gdmFsdWUgOiB1bmRlZmluZWQyO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuICAgICAgICAgIHZhciBpc093biA9IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnKSwgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB1bmRlZmluZWQyO1xuICAgICAgICAgICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciByZXN1bHQyID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gICAgICAgICAgaWYgKHVubWFza2VkKSB7XG4gICAgICAgICAgICBpZiAoaXNPd24pIHtcbiAgICAgICAgICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdGFnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDI7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGdldFN5bWJvbHMgPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvYmplY3QgPSBPYmplY3QyKG9iamVjdCk7XG4gICAgICAgICAgcmV0dXJuIGFycmF5RmlsdGVyKG5hdGl2ZUdldFN5bWJvbHMob2JqZWN0KSwgZnVuY3Rpb24oc3ltYm9sKSB7XG4gICAgICAgICAgICByZXR1cm4gcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmplY3QsIHN5bWJvbCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBnZXRTeW1ib2xzSW4gPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICAgIHZhciByZXN1bHQyID0gW107XG4gICAgICAgICAgd2hpbGUgKG9iamVjdCkge1xuICAgICAgICAgICAgYXJyYXlQdXNoKHJlc3VsdDIsIGdldFN5bWJvbHMob2JqZWN0KSk7XG4gICAgICAgICAgICBvYmplY3QgPSBnZXRQcm90b3R5cGUob2JqZWN0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDI7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBnZXRUYWcgPSBiYXNlR2V0VGFnO1xuICAgICAgICBpZiAoRGF0YVZpZXcgJiYgZ2V0VGFnKG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMSkpKSAhPSBkYXRhVmlld1RhZyB8fCBNYXAyICYmIGdldFRhZyhuZXcgTWFwMigpKSAhPSBtYXBUYWcgfHwgUHJvbWlzZTIgJiYgZ2V0VGFnKFByb21pc2UyLnJlc29sdmUoKSkgIT0gcHJvbWlzZVRhZyB8fCBTZXQyICYmIGdldFRhZyhuZXcgU2V0MigpKSAhPSBzZXRUYWcgfHwgV2Vha01hcCAmJiBnZXRUYWcobmV3IFdlYWtNYXAoKSkgIT0gd2Vha01hcFRhZykge1xuICAgICAgICAgIGdldFRhZyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0MiA9IGJhc2VHZXRUYWcodmFsdWUpLCBDdG9yID0gcmVzdWx0MiA9PSBvYmplY3RUYWcgPyB2YWx1ZS5jb25zdHJ1Y3RvciA6IHVuZGVmaW5lZDIsIGN0b3JTdHJpbmcgPSBDdG9yID8gdG9Tb3VyY2UoQ3RvcikgOiBcIlwiO1xuICAgICAgICAgICAgaWYgKGN0b3JTdHJpbmcpIHtcbiAgICAgICAgICAgICAgc3dpdGNoIChjdG9yU3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBkYXRhVmlld0N0b3JTdHJpbmc6XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YVZpZXdUYWc7XG4gICAgICAgICAgICAgICAgY2FzZSBtYXBDdG9yU3RyaW5nOlxuICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hcFRhZztcbiAgICAgICAgICAgICAgICBjYXNlIHByb21pc2VDdG9yU3RyaW5nOlxuICAgICAgICAgICAgICAgICAgcmV0dXJuIHByb21pc2VUYWc7XG4gICAgICAgICAgICAgICAgY2FzZSBzZXRDdG9yU3RyaW5nOlxuICAgICAgICAgICAgICAgICAgcmV0dXJuIHNldFRhZztcbiAgICAgICAgICAgICAgICBjYXNlIHdlYWtNYXBDdG9yU3RyaW5nOlxuICAgICAgICAgICAgICAgICAgcmV0dXJuIHdlYWtNYXBUYWc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQyO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZ2V0VmlldyhzdGFydCwgZW5kLCB0cmFuc2Zvcm1zKSB7XG4gICAgICAgICAgdmFyIGluZGV4ID0gLTEsIGxlbmd0aCA9IHRyYW5zZm9ybXMubGVuZ3RoO1xuICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgZGF0YSA9IHRyYW5zZm9ybXNbaW5kZXhdLCBzaXplMiA9IGRhdGEuc2l6ZTtcbiAgICAgICAgICAgIHN3aXRjaCAoZGF0YS50eXBlKSB7XG4gICAgICAgICAgICAgIGNhc2UgXCJkcm9wXCI6XG4gICAgICAgICAgICAgICAgc3RhcnQgKz0gc2l6ZTI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJkcm9wUmlnaHRcIjpcbiAgICAgICAgICAgICAgICBlbmQgLT0gc2l6ZTI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJ0YWtlXCI6XG4gICAgICAgICAgICAgICAgZW5kID0gbmF0aXZlTWluKGVuZCwgc3RhcnQgKyBzaXplMik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJ0YWtlUmlnaHRcIjpcbiAgICAgICAgICAgICAgICBzdGFydCA9IG5hdGl2ZU1heChzdGFydCwgZW5kIC0gc2l6ZTIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4geyBcInN0YXJ0XCI6IHN0YXJ0LCBcImVuZFwiOiBlbmQgfTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBnZXRXcmFwRGV0YWlscyhzb3VyY2UpIHtcbiAgICAgICAgICB2YXIgbWF0Y2ggPSBzb3VyY2UubWF0Y2gocmVXcmFwRGV0YWlscyk7XG4gICAgICAgICAgcmV0dXJuIG1hdGNoID8gbWF0Y2hbMV0uc3BsaXQocmVTcGxpdERldGFpbHMpIDogW107XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gaGFzUGF0aChvYmplY3QsIHBhdGgsIGhhc0Z1bmMpIHtcbiAgICAgICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcbiAgICAgICAgICB2YXIgaW5kZXggPSAtMSwgbGVuZ3RoID0gcGF0aC5sZW5ndGgsIHJlc3VsdDIgPSBmYWxzZTtcbiAgICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIGtleSA9IHRvS2V5KHBhdGhbaW5kZXhdKTtcbiAgICAgICAgICAgIGlmICghKHJlc3VsdDIgPSBvYmplY3QgIT0gbnVsbCAmJiBoYXNGdW5jKG9iamVjdCwga2V5KSkpIHtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvYmplY3QgPSBvYmplY3Rba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJlc3VsdDIgfHwgKytpbmRleCAhPSBsZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQyO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZW5ndGggPSBvYmplY3QgPT0gbnVsbCA/IDAgOiBvYmplY3QubGVuZ3RoO1xuICAgICAgICAgIHJldHVybiAhIWxlbmd0aCAmJiBpc0xlbmd0aChsZW5ndGgpICYmIGlzSW5kZXgoa2V5LCBsZW5ndGgpICYmIChpc0FycmF5KG9iamVjdCkgfHwgaXNBcmd1bWVudHMob2JqZWN0KSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gaW5pdENsb25lQXJyYXkoYXJyYXkpIHtcbiAgICAgICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLCByZXN1bHQyID0gbmV3IGFycmF5LmNvbnN0cnVjdG9yKGxlbmd0aCk7XG4gICAgICAgICAgaWYgKGxlbmd0aCAmJiB0eXBlb2YgYXJyYXlbMF0gPT0gXCJzdHJpbmdcIiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGFycmF5LCBcImluZGV4XCIpKSB7XG4gICAgICAgICAgICByZXN1bHQyLmluZGV4ID0gYXJyYXkuaW5kZXg7XG4gICAgICAgICAgICByZXN1bHQyLmlucHV0ID0gYXJyYXkuaW5wdXQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXN1bHQyO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGluaXRDbG9uZU9iamVjdChvYmplY3QpIHtcbiAgICAgICAgICByZXR1cm4gdHlwZW9mIG9iamVjdC5jb25zdHJ1Y3RvciA9PSBcImZ1bmN0aW9uXCIgJiYgIWlzUHJvdG90eXBlKG9iamVjdCkgPyBiYXNlQ3JlYXRlKGdldFByb3RvdHlwZShvYmplY3QpKSA6IHt9O1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGluaXRDbG9uZUJ5VGFnKG9iamVjdCwgdGFnLCBpc0RlZXApIHtcbiAgICAgICAgICB2YXIgQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcjtcbiAgICAgICAgICBzd2l0Y2ggKHRhZykge1xuICAgICAgICAgICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgICAgICAgICAgcmV0dXJuIGNsb25lQXJyYXlCdWZmZXIob2JqZWN0KTtcbiAgICAgICAgICAgIGNhc2UgYm9vbFRhZzpcbiAgICAgICAgICAgIGNhc2UgZGF0ZVRhZzpcbiAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDdG9yKCtvYmplY3QpO1xuICAgICAgICAgICAgY2FzZSBkYXRhVmlld1RhZzpcbiAgICAgICAgICAgICAgcmV0dXJuIGNsb25lRGF0YVZpZXcob2JqZWN0LCBpc0RlZXApO1xuICAgICAgICAgICAgY2FzZSBmbG9hdDMyVGFnOlxuICAgICAgICAgICAgY2FzZSBmbG9hdDY0VGFnOlxuICAgICAgICAgICAgY2FzZSBpbnQ4VGFnOlxuICAgICAgICAgICAgY2FzZSBpbnQxNlRhZzpcbiAgICAgICAgICAgIGNhc2UgaW50MzJUYWc6XG4gICAgICAgICAgICBjYXNlIHVpbnQ4VGFnOlxuICAgICAgICAgICAgY2FzZSB1aW50OENsYW1wZWRUYWc6XG4gICAgICAgICAgICBjYXNlIHVpbnQxNlRhZzpcbiAgICAgICAgICAgIGNhc2UgdWludDMyVGFnOlxuICAgICAgICAgICAgICByZXR1cm4gY2xvbmVUeXBlZEFycmF5KG9iamVjdCwgaXNEZWVwKTtcbiAgICAgICAgICAgIGNhc2UgbWFwVGFnOlxuICAgICAgICAgICAgICByZXR1cm4gbmV3IEN0b3IoKTtcbiAgICAgICAgICAgIGNhc2UgbnVtYmVyVGFnOlxuICAgICAgICAgICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICAgICAgICAgIHJldHVybiBuZXcgQ3RvcihvYmplY3QpO1xuICAgICAgICAgICAgY2FzZSByZWdleHBUYWc6XG4gICAgICAgICAgICAgIHJldHVybiBjbG9uZVJlZ0V4cChvYmplY3QpO1xuICAgICAgICAgICAgY2FzZSBzZXRUYWc6XG4gICAgICAgICAgICAgIHJldHVybiBuZXcgQ3RvcigpO1xuICAgICAgICAgICAgY2FzZSBzeW1ib2xUYWc6XG4gICAgICAgICAgICAgIHJldHVybiBjbG9uZVN5bWJvbChvYmplY3QpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBpbnNlcnRXcmFwRGV0YWlscyhzb3VyY2UsIGRldGFpbHMpIHtcbiAgICAgICAgICB2YXIgbGVuZ3RoID0gZGV0YWlscy5sZW5ndGg7XG4gICAgICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBzb3VyY2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBsYXN0SW5kZXggPSBsZW5ndGggLSAxO1xuICAgICAgICAgIGRldGFpbHNbbGFzdEluZGV4XSA9IChsZW5ndGggPiAxID8gXCImIFwiIDogXCJcIikgKyBkZXRhaWxzW2xhc3RJbmRleF07XG4gICAgICAgICAgZGV0YWlscyA9IGRldGFpbHMuam9pbihsZW5ndGggPiAyID8gXCIsIFwiIDogXCIgXCIpO1xuICAgICAgICAgIHJldHVybiBzb3VyY2UucmVwbGFjZShyZVdyYXBDb21tZW50LCBcIntcXG4vKiBbd3JhcHBlZCB3aXRoIFwiICsgZGV0YWlscyArIFwiXSAqL1xcblwiKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBpc0ZsYXR0ZW5hYmxlKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpIHx8IGlzQXJndW1lbnRzKHZhbHVlKSB8fCAhIShzcHJlYWRhYmxlU3ltYm9sICYmIHZhbHVlICYmIHZhbHVlW3NwcmVhZGFibGVTeW1ib2xdKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBpc0luZGV4KHZhbHVlLCBsZW5ndGgpIHtcbiAgICAgICAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgICAgICBsZW5ndGggPSBsZW5ndGggPT0gbnVsbCA/IE1BWF9TQUZFX0lOVEVHRVIgOiBsZW5ndGg7XG4gICAgICAgICAgcmV0dXJuICEhbGVuZ3RoICYmICh0eXBlID09IFwibnVtYmVyXCIgfHwgdHlwZSAhPSBcInN5bWJvbFwiICYmIHJlSXNVaW50LnRlc3QodmFsdWUpKSAmJiAodmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8IGxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gaXNJdGVyYXRlZUNhbGwodmFsdWUsIGluZGV4LCBvYmplY3QpIHtcbiAgICAgICAgICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgaW5kZXg7XG4gICAgICAgICAgaWYgKHR5cGUgPT0gXCJudW1iZXJcIiA/IGlzQXJyYXlMaWtlKG9iamVjdCkgJiYgaXNJbmRleChpbmRleCwgb2JqZWN0Lmxlbmd0aCkgOiB0eXBlID09IFwic3RyaW5nXCIgJiYgaW5kZXggaW4gb2JqZWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gZXEob2JqZWN0W2luZGV4XSwgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gaXNLZXkodmFsdWUsIG9iamVjdCkge1xuICAgICAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgICAgICBpZiAodHlwZSA9PSBcIm51bWJlclwiIHx8IHR5cGUgPT0gXCJzeW1ib2xcIiB8fCB0eXBlID09IFwiYm9vbGVhblwiIHx8IHZhbHVlID09IG51bGwgfHwgaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlSXNQbGFpblByb3AudGVzdCh2YWx1ZSkgfHwgIXJlSXNEZWVwUHJvcC50ZXN0KHZhbHVlKSB8fCBvYmplY3QgIT0gbnVsbCAmJiB2YWx1ZSBpbiBPYmplY3QyKG9iamVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gaXNLZXlhYmxlKHZhbHVlKSB7XG4gICAgICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICAgICAgcmV0dXJuIHR5cGUgPT0gXCJzdHJpbmdcIiB8fCB0eXBlID09IFwibnVtYmVyXCIgfHwgdHlwZSA9PSBcInN5bWJvbFwiIHx8IHR5cGUgPT0gXCJib29sZWFuXCIgPyB2YWx1ZSAhPT0gXCJfX3Byb3RvX19cIiA6IHZhbHVlID09PSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGlzTGF6aWFibGUoZnVuYykge1xuICAgICAgICAgIHZhciBmdW5jTmFtZSA9IGdldEZ1bmNOYW1lKGZ1bmMpLCBvdGhlciA9IGxvZGFzaFtmdW5jTmFtZV07XG4gICAgICAgICAgaWYgKHR5cGVvZiBvdGhlciAhPSBcImZ1bmN0aW9uXCIgfHwgIShmdW5jTmFtZSBpbiBMYXp5V3JhcHBlci5wcm90b3R5cGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChmdW5jID09PSBvdGhlcikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBkYXRhID0gZ2V0RGF0YShvdGhlcik7XG4gICAgICAgICAgcmV0dXJuICEhZGF0YSAmJiBmdW5jID09PSBkYXRhWzBdO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGlzTWFza2VkKGZ1bmMpIHtcbiAgICAgICAgICByZXR1cm4gISFtYXNrU3JjS2V5ICYmIG1hc2tTcmNLZXkgaW4gZnVuYztcbiAgICAgICAgfVxuICAgICAgICB2YXIgaXNNYXNrYWJsZSA9IGNvcmVKc0RhdGEgPyBpc0Z1bmN0aW9uIDogc3R1YkZhbHNlO1xuICAgICAgICBmdW5jdGlvbiBpc1Byb3RvdHlwZSh2YWx1ZSkge1xuICAgICAgICAgIHZhciBDdG9yID0gdmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IsIHByb3RvID0gdHlwZW9mIEN0b3IgPT0gXCJmdW5jdGlvblwiICYmIEN0b3IucHJvdG90eXBlIHx8IG9iamVjdFByb3RvO1xuICAgICAgICAgIHJldHVybiB2YWx1ZSA9PT0gcHJvdG87XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gaXNTdHJpY3RDb21wYXJhYmxlKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSAmJiAhaXNPYmplY3QodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKGtleSwgc3JjVmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG9iamVjdFtrZXldID09PSBzcmNWYWx1ZSAmJiAoc3JjVmFsdWUgIT09IHVuZGVmaW5lZDIgfHwga2V5IGluIE9iamVjdDIob2JqZWN0KSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBtZW1vaXplQ2FwcGVkKGZ1bmMpIHtcbiAgICAgICAgICB2YXIgcmVzdWx0MiA9IG1lbW9pemUoZnVuYywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgICBpZiAoY2FjaGUuc2l6ZSA9PT0gTUFYX01FTU9JWkVfU0laRSkge1xuICAgICAgICAgICAgICBjYWNoZS5jbGVhcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB2YXIgY2FjaGUgPSByZXN1bHQyLmNhY2hlO1xuICAgICAgICAgIHJldHVybiByZXN1bHQyO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIG1lcmdlRGF0YShkYXRhLCBzb3VyY2UpIHtcbiAgICAgICAgICB2YXIgYml0bWFzayA9IGRhdGFbMV0sIHNyY0JpdG1hc2sgPSBzb3VyY2VbMV0sIG5ld0JpdG1hc2sgPSBiaXRtYXNrIHwgc3JjQml0bWFzaywgaXNDb21tb24gPSBuZXdCaXRtYXNrIDwgKFdSQVBfQklORF9GTEFHIHwgV1JBUF9CSU5EX0tFWV9GTEFHIHwgV1JBUF9BUllfRkxBRyk7XG4gICAgICAgICAgdmFyIGlzQ29tYm8gPSBzcmNCaXRtYXNrID09IFdSQVBfQVJZX0ZMQUcgJiYgYml0bWFzayA9PSBXUkFQX0NVUlJZX0ZMQUcgfHwgc3JjQml0bWFzayA9PSBXUkFQX0FSWV9GTEFHICYmIGJpdG1hc2sgPT0gV1JBUF9SRUFSR19GTEFHICYmIGRhdGFbN10ubGVuZ3RoIDw9IHNvdXJjZVs4XSB8fCBzcmNCaXRtYXNrID09IChXUkFQX0FSWV9GTEFHIHwgV1JBUF9SRUFSR19GTEFHKSAmJiBzb3VyY2VbN10ubGVuZ3RoIDw9IHNvdXJjZVs4XSAmJiBiaXRtYXNrID09IFdSQVBfQ1VSUllfRkxBRztcbiAgICAgICAgICBpZiAoIShpc0NvbW1vbiB8fCBpc0NvbWJvKSkge1xuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzcmNCaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcpIHtcbiAgICAgICAgICAgIGRhdGFbMl0gPSBzb3VyY2VbMl07XG4gICAgICAgICAgICBuZXdCaXRtYXNrIHw9IGJpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRyA/IDAgOiBXUkFQX0NVUlJZX0JPVU5EX0ZMQUc7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciB2YWx1ZSA9IHNvdXJjZVszXTtcbiAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBwYXJ0aWFscyA9IGRhdGFbM107XG4gICAgICAgICAgICBkYXRhWzNdID0gcGFydGlhbHMgPyBjb21wb3NlQXJncyhwYXJ0aWFscywgdmFsdWUsIHNvdXJjZVs0XSkgOiB2YWx1ZTtcbiAgICAgICAgICAgIGRhdGFbNF0gPSBwYXJ0aWFscyA/IHJlcGxhY2VIb2xkZXJzKGRhdGFbM10sIFBMQUNFSE9MREVSKSA6IHNvdXJjZVs0XTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFsdWUgPSBzb3VyY2VbNV07XG4gICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICBwYXJ0aWFscyA9IGRhdGFbNV07XG4gICAgICAgICAgICBkYXRhWzVdID0gcGFydGlhbHMgPyBjb21wb3NlQXJnc1JpZ2h0KHBhcnRpYWxzLCB2YWx1ZSwgc291cmNlWzZdKSA6IHZhbHVlO1xuICAgICAgICAgICAgZGF0YVs2XSA9IHBhcnRpYWxzID8gcmVwbGFjZUhvbGRlcnMoZGF0YVs1XSwgUExBQ0VIT0xERVIpIDogc291cmNlWzZdO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YWx1ZSA9IHNvdXJjZVs3XTtcbiAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIGRhdGFbN10gPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNyY0JpdG1hc2sgJiBXUkFQX0FSWV9GTEFHKSB7XG4gICAgICAgICAgICBkYXRhWzhdID0gZGF0YVs4XSA9PSBudWxsID8gc291cmNlWzhdIDogbmF0aXZlTWluKGRhdGFbOF0sIHNvdXJjZVs4XSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChkYXRhWzldID09IG51bGwpIHtcbiAgICAgICAgICAgIGRhdGFbOV0gPSBzb3VyY2VbOV07XG4gICAgICAgICAgfVxuICAgICAgICAgIGRhdGFbMF0gPSBzb3VyY2VbMF07XG4gICAgICAgICAgZGF0YVsxXSA9IG5ld0JpdG1hc2s7XG4gICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gbmF0aXZlS2V5c0luKG9iamVjdCkge1xuICAgICAgICAgIHZhciByZXN1bHQyID0gW107XG4gICAgICAgICAgaWYgKG9iamVjdCAhPSBudWxsKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0MihvYmplY3QpKSB7XG4gICAgICAgICAgICAgIHJlc3VsdDIucHVzaChrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0MjtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBvYmplY3RUb1N0cmluZyh2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBvdmVyUmVzdChmdW5jLCBzdGFydCwgdHJhbnNmb3JtMikge1xuICAgICAgICAgIHN0YXJ0ID0gbmF0aXZlTWF4KHN0YXJ0ID09PSB1bmRlZmluZWQyID8gZnVuYy5sZW5ndGggLSAxIDogc3RhcnQsIDApO1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLCBpbmRleCA9IC0xLCBsZW5ndGggPSBuYXRpdmVNYXgoYXJncy5sZW5ndGggLSBzdGFydCwgMCksIGFycmF5ID0gQXJyYXkyKGxlbmd0aCk7XG4gICAgICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgICAgICBhcnJheVtpbmRleF0gPSBhcmdzW3N0YXJ0ICsgaW5kZXhdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW5kZXggPSAtMTtcbiAgICAgICAgICAgIHZhciBvdGhlckFyZ3MgPSBBcnJheTIoc3RhcnQgKyAxKTtcbiAgICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgc3RhcnQpIHtcbiAgICAgICAgICAgICAgb3RoZXJBcmdzW2luZGV4XSA9IGFyZ3NbaW5kZXhdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3RoZXJBcmdzW3N0YXJ0XSA9IHRyYW5zZm9ybTIoYXJyYXkpO1xuICAgICAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHRoaXMsIG90aGVyQXJncyk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBwYXJlbnQob2JqZWN0LCBwYXRoKSB7XG4gICAgICAgICAgcmV0dXJuIHBhdGgubGVuZ3RoIDwgMiA/IG9iamVjdCA6IGJhc2VHZXQob2JqZWN0LCBiYXNlU2xpY2UocGF0aCwgMCwgLTEpKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiByZW9yZGVyKGFycmF5LCBpbmRleGVzKSB7XG4gICAgICAgICAgdmFyIGFyckxlbmd0aCA9IGFycmF5Lmxlbmd0aCwgbGVuZ3RoID0gbmF0aXZlTWluKGluZGV4ZXMubGVuZ3RoLCBhcnJMZW5ndGgpLCBvbGRBcnJheSA9IGNvcHlBcnJheShhcnJheSk7XG4gICAgICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSBpbmRleGVzW2xlbmd0aF07XG4gICAgICAgICAgICBhcnJheVtsZW5ndGhdID0gaXNJbmRleChpbmRleCwgYXJyTGVuZ3RoKSA/IG9sZEFycmF5W2luZGV4XSA6IHVuZGVmaW5lZDI7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBhcnJheTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBzYWZlR2V0KG9iamVjdCwga2V5KSB7XG4gICAgICAgICAgaWYgKGtleSA9PT0gXCJjb25zdHJ1Y3RvclwiICYmIHR5cGVvZiBvYmplY3Rba2V5XSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChrZXkgPT0gXCJfX3Byb3RvX19cIikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gb2JqZWN0W2tleV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNldERhdGEgPSBzaG9ydE91dChiYXNlU2V0RGF0YSk7XG4gICAgICAgIHZhciBzZXRUaW1lb3V0ID0gY3R4U2V0VGltZW91dCB8fCBmdW5jdGlvbihmdW5jLCB3YWl0KSB7XG4gICAgICAgICAgcmV0dXJuIHJvb3Quc2V0VGltZW91dChmdW5jLCB3YWl0KTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHNldFRvU3RyaW5nID0gc2hvcnRPdXQoYmFzZVNldFRvU3RyaW5nKTtcbiAgICAgICAgZnVuY3Rpb24gc2V0V3JhcFRvU3RyaW5nKHdyYXBwZXIsIHJlZmVyZW5jZSwgYml0bWFzaykge1xuICAgICAgICAgIHZhciBzb3VyY2UgPSByZWZlcmVuY2UgKyBcIlwiO1xuICAgICAgICAgIHJldHVybiBzZXRUb1N0cmluZyh3cmFwcGVyLCBpbnNlcnRXcmFwRGV0YWlscyhzb3VyY2UsIHVwZGF0ZVdyYXBEZXRhaWxzKGdldFdyYXBEZXRhaWxzKHNvdXJjZSksIGJpdG1hc2spKSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gc2hvcnRPdXQoZnVuYykge1xuICAgICAgICAgIHZhciBjb3VudCA9IDAsIGxhc3RDYWxsZWQgPSAwO1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBzdGFtcCA9IG5hdGl2ZU5vdygpLCByZW1haW5pbmcgPSBIT1RfU1BBTiAtIChzdGFtcCAtIGxhc3RDYWxsZWQpO1xuICAgICAgICAgICAgbGFzdENhbGxlZCA9IHN0YW1wO1xuICAgICAgICAgICAgaWYgKHJlbWFpbmluZyA+IDApIHtcbiAgICAgICAgICAgICAgaWYgKCsrY291bnQgPj0gSE9UX0NPVU5UKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFyZ3VtZW50c1swXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY291bnQgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodW5kZWZpbmVkMiwgYXJndW1lbnRzKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHNodWZmbGVTZWxmKGFycmF5LCBzaXplMikge1xuICAgICAgICAgIHZhciBpbmRleCA9IC0xLCBsZW5ndGggPSBhcnJheS5sZW5ndGgsIGxhc3RJbmRleCA9IGxlbmd0aCAtIDE7XG4gICAgICAgICAgc2l6ZTIgPSBzaXplMiA9PT0gdW5kZWZpbmVkMiA/IGxlbmd0aCA6IHNpemUyO1xuICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgc2l6ZTIpIHtcbiAgICAgICAgICAgIHZhciByYW5kID0gYmFzZVJhbmRvbShpbmRleCwgbGFzdEluZGV4KSwgdmFsdWUgPSBhcnJheVtyYW5kXTtcbiAgICAgICAgICAgIGFycmF5W3JhbmRdID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICAgICAgYXJyYXlbaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGFycmF5Lmxlbmd0aCA9IHNpemUyO1xuICAgICAgICAgIHJldHVybiBhcnJheTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3RyaW5nVG9QYXRoID0gbWVtb2l6ZUNhcHBlZChmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgICAgICB2YXIgcmVzdWx0MiA9IFtdO1xuICAgICAgICAgIGlmIChzdHJpbmcuY2hhckNvZGVBdCgwKSA9PT0gNDYpIHtcbiAgICAgICAgICAgIHJlc3VsdDIucHVzaChcIlwiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3RyaW5nLnJlcGxhY2UocmVQcm9wTmFtZSwgZnVuY3Rpb24obWF0Y2gsIG51bWJlciwgcXVvdGUsIHN1YlN0cmluZykge1xuICAgICAgICAgICAgcmVzdWx0Mi5wdXNoKHF1b3RlID8gc3ViU3RyaW5nLnJlcGxhY2UocmVFc2NhcGVDaGFyLCBcIiQxXCIpIDogbnVtYmVyIHx8IG1hdGNoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0MjtcbiAgICAgICAgfSk7XG4gICAgICAgIGZ1bmN0aW9uIHRvS2V5KHZhbHVlKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSBcInN0cmluZ1wiIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgcmVzdWx0MiA9IHZhbHVlICsgXCJcIjtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0MiA9PSBcIjBcIiAmJiAxIC8gdmFsdWUgPT0gLUlORklOSVRZID8gXCItMFwiIDogcmVzdWx0MjtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiB0b1NvdXJjZShmdW5jKSB7XG4gICAgICAgICAgaWYgKGZ1bmMgIT0gbnVsbCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZ1bmNUb1N0cmluZy5jYWxsKGZ1bmMpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZ1bmMgKyBcIlwiO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVXcmFwRGV0YWlscyhkZXRhaWxzLCBiaXRtYXNrKSB7XG4gICAgICAgICAgYXJyYXlFYWNoKHdyYXBGbGFncywgZnVuY3Rpb24ocGFpcikge1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gXCJfLlwiICsgcGFpclswXTtcbiAgICAgICAgICAgIGlmIChiaXRtYXNrICYgcGFpclsxXSAmJiAhYXJyYXlJbmNsdWRlcyhkZXRhaWxzLCB2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgZGV0YWlscy5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gZGV0YWlscy5zb3J0KCk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gd3JhcHBlckNsb25lKHdyYXBwZXIpIHtcbiAgICAgICAgICBpZiAod3JhcHBlciBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gd3JhcHBlci5jbG9uZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgcmVzdWx0MiA9IG5ldyBMb2Rhc2hXcmFwcGVyKHdyYXBwZXIuX193cmFwcGVkX18sIHdyYXBwZXIuX19jaGFpbl9fKTtcbiAgICAgICAgICByZXN1bHQyLl9fYWN0aW9uc19fID0gY29weUFycmF5KHdyYXBwZXIuX19hY3Rpb25zX18pO1xuICAgICAgICAgIHJlc3VsdDIuX19pbmRleF9fID0gd3JhcHBlci5fX2luZGV4X187XG4gICAgICAgICAgcmVzdWx0Mi5fX3ZhbHVlc19fID0gd3JhcHBlci5fX3ZhbHVlc19fO1xuICAgICAgICAgIHJldHVybiByZXN1bHQyO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGNodW5rKGFycmF5LCBzaXplMiwgZ3VhcmQpIHtcbiAgICAgICAgICBpZiAoZ3VhcmQgPyBpc0l0ZXJhdGVlQ2FsbChhcnJheSwgc2l6ZTIsIGd1YXJkKSA6IHNpemUyID09PSB1bmRlZmluZWQyKSB7XG4gICAgICAgICAgICBzaXplMiA9IDE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNpemUyID0gbmF0aXZlTWF4KHRvSW50ZWdlcihzaXplMiksIDApO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICAgICAgaWYgKCFsZW5ndGggfHwgc2l6ZTIgPCAxKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBpbmRleCA9IDAsIHJlc0luZGV4ID0gMCwgcmVzdWx0MiA9IEFycmF5MihuYXRpdmVDZWlsKGxlbmd0aCAvIHNpemUyKSk7XG4gICAgICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICByZXN1bHQyW3Jlc0luZGV4KytdID0gYmFzZVNsaWNlKGFycmF5LCBpbmRleCwgaW5kZXggKz0gc2l6ZTIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0MjtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBjb21wYWN0KGFycmF5KSB7XG4gICAgICAgICAgdmFyIGluZGV4ID0gLTEsIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLCByZXNJbmRleCA9IDAsIHJlc3VsdDIgPSBbXTtcbiAgICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgIHJlc3VsdDJbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDI7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gY29uY2F0KCkge1xuICAgICAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBhcmdzID0gQXJyYXkyKGxlbmd0aCAtIDEpLCBhcnJheSA9IGFyZ3VtZW50c1swXSwgaW5kZXggPSBsZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgICAgIGFyZ3NbaW5kZXggLSAxXSA9IGFyZ3VtZW50c1tpbmRleF07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBhcnJheVB1c2goaXNBcnJheShhcnJheSkgPyBjb3B5QXJyYXkoYXJyYXkpIDogW2FycmF5XSwgYmFzZUZsYXR0ZW4oYXJncywgMSkpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkaWZmZXJlbmNlID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXksIHZhbHVlczIpIHtcbiAgICAgICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpID8gYmFzZURpZmZlcmVuY2UoYXJyYXksIGJhc2VGbGF0dGVuKHZhbHVlczIsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSkgOiBbXTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBkaWZmZXJlbmNlQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheSwgdmFsdWVzMikge1xuICAgICAgICAgIHZhciBpdGVyYXRlZTIgPSBsYXN0KHZhbHVlczIpO1xuICAgICAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChpdGVyYXRlZTIpKSB7XG4gICAgICAgICAgICBpdGVyYXRlZTIgPSB1bmRlZmluZWQyO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpID8gYmFzZURpZmZlcmVuY2UoYXJyYXksIGJhc2VGbGF0dGVuKHZhbHVlczIsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUyLCAyKSkgOiBbXTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBkaWZmZXJlbmNlV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5LCB2YWx1ZXMyKSB7XG4gICAgICAgICAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KHZhbHVlczIpO1xuICAgICAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChjb21wYXJhdG9yKSkge1xuICAgICAgICAgICAgY29tcGFyYXRvciA9IHVuZGVmaW5lZDI7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdChhcnJheSkgPyBiYXNlRGlmZmVyZW5jZShhcnJheSwgYmFzZUZsYXR0ZW4odmFsdWVzMiwgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpLCB1bmRlZmluZWQyLCBjb21wYXJhdG9yKSA6IFtdO1xuICAgICAgICB9KTtcbiAgICAgICAgZnVuY3Rpb24gZHJvcChhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICAgICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbiA9IGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZDIgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIG4gPCAwID8gMCA6IG4sIGxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZHJvcFJpZ2h0KGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBuID0gZ3VhcmQgfHwgbiA9PT0gdW5kZWZpbmVkMiA/IDEgOiB0b0ludGVnZXIobik7XG4gICAgICAgICAgbiA9IGxlbmd0aCAtIG47XG4gICAgICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgMCwgbiA8IDAgPyAwIDogbik7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZHJvcFJpZ2h0V2hpbGUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgICAgIHJldHVybiBhcnJheSAmJiBhcnJheS5sZW5ndGggPyBiYXNlV2hpbGUoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIHRydWUsIHRydWUpIDogW107XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZHJvcFdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgICAgICByZXR1cm4gYXJyYXkgJiYgYXJyYXkubGVuZ3RoID8gYmFzZVdoaWxlKGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCB0cnVlKSA6IFtdO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGZpbGwoYXJyYXksIHZhbHVlLCBzdGFydCwgZW5kKSB7XG4gICAgICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzdGFydCAmJiB0eXBlb2Ygc3RhcnQgIT0gXCJudW1iZXJcIiAmJiBpc0l0ZXJhdGVlQ2FsbChhcnJheSwgdmFsdWUsIHN0YXJ0KSkge1xuICAgICAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICAgICAgZW5kID0gbGVuZ3RoO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gYmFzZUZpbGwoYXJyYXksIHZhbHVlLCBzdGFydCwgZW5kKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBmaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4KSB7XG4gICAgICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBpbmRleCA9IGZyb21JbmRleCA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihmcm9tSW5kZXgpO1xuICAgICAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgICAgIGluZGV4ID0gbmF0aXZlTWF4KGxlbmd0aCArIGluZGV4LCAwKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGJhc2VGaW5kSW5kZXgoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBmaW5kTGFzdEluZGV4KGFycmF5LCBwcmVkaWNhdGUsIGZyb21JbmRleCkge1xuICAgICAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgaW5kZXggPSBsZW5ndGggLSAxO1xuICAgICAgICAgIGlmIChmcm9tSW5kZXggIT09IHVuZGVmaW5lZDIpIHtcbiAgICAgICAgICAgIGluZGV4ID0gdG9JbnRlZ2VyKGZyb21JbmRleCk7XG4gICAgICAgICAgICBpbmRleCA9IGZyb21JbmRleCA8IDAgPyBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApIDogbmF0aXZlTWluKGluZGV4LCBsZW5ndGggLSAxKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGJhc2VGaW5kSW5kZXgoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGluZGV4LCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBmbGF0dGVuKGFycmF5KSB7XG4gICAgICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlRmxhdHRlbihhcnJheSwgMSkgOiBbXTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBmbGF0dGVuRGVlcChhcnJheSkge1xuICAgICAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZUZsYXR0ZW4oYXJyYXksIElORklOSVRZKSA6IFtdO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGZsYXR0ZW5EZXB0aChhcnJheSwgZGVwdGgpIHtcbiAgICAgICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZGVwdGggPSBkZXB0aCA9PT0gdW5kZWZpbmVkMiA/IDEgOiB0b0ludGVnZXIoZGVwdGgpO1xuICAgICAgICAgIHJldHVybiBiYXNlRmxhdHRlbihhcnJheSwgZGVwdGgpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGZyb21QYWlycyhwYWlycykge1xuICAgICAgICAgIHZhciBpbmRleCA9IC0xLCBsZW5ndGggPSBwYWlycyA9PSBudWxsID8gMCA6IHBhaXJzLmxlbmd0aCwgcmVzdWx0MiA9IHt9O1xuICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgcGFpciA9IHBhaXJzW2luZGV4XTtcbiAgICAgICAgICAgIHJlc3VsdDJbcGFpclswXV0gPSBwYWlyWzFdO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0MjtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBoZWFkKGFycmF5KSB7XG4gICAgICAgICAgcmV0dXJuIGFycmF5ICYmIGFycmF5Lmxlbmd0aCA/IGFycmF5WzBdIDogdW5kZWZpbmVkMjtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBpbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBpbmRleCA9IGZyb21JbmRleCA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihmcm9tSW5kZXgpO1xuICAgICAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgICAgIGluZGV4ID0gbmF0aXZlTWF4KGxlbmd0aCArIGluZGV4LCAwKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGJhc2VJbmRleE9mKGFycmF5LCB2YWx1ZSwgaW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGluaXRpYWwoYXJyYXkpIHtcbiAgICAgICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VTbGljZShhcnJheSwgMCwgLTEpIDogW107XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGludGVyc2VjdGlvbiA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgICAgIHZhciBtYXBwZWQgPSBhcnJheU1hcChhcnJheXMsIGNhc3RBcnJheUxpa2VPYmplY3QpO1xuICAgICAgICAgIHJldHVybiBtYXBwZWQubGVuZ3RoICYmIG1hcHBlZFswXSA9PT0gYXJyYXlzWzBdID8gYmFzZUludGVyc2VjdGlvbihtYXBwZWQpIDogW107XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgaW50ZXJzZWN0aW9uQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgICAgICB2YXIgaXRlcmF0ZWUyID0gbGFzdChhcnJheXMpLCBtYXBwZWQgPSBhcnJheU1hcChhcnJheXMsIGNhc3RBcnJheUxpa2VPYmplY3QpO1xuICAgICAgICAgIGlmIChpdGVyYXRlZTIgPT09IGxhc3QobWFwcGVkKSkge1xuICAgICAgICAgICAgaXRlcmF0ZWUyID0gdW5kZWZpbmVkMjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWFwcGVkLnBvcCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbWFwcGVkLmxlbmd0aCAmJiBtYXBwZWRbMF0gPT09IGFycmF5c1swXSA/IGJhc2VJbnRlcnNlY3Rpb24obWFwcGVkLCBnZXRJdGVyYXRlZShpdGVyYXRlZTIsIDIpKSA6IFtdO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGludGVyc2VjdGlvbldpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgICAgICB2YXIgY29tcGFyYXRvciA9IGxhc3QoYXJyYXlzKSwgbWFwcGVkID0gYXJyYXlNYXAoYXJyYXlzLCBjYXN0QXJyYXlMaWtlT2JqZWN0KTtcbiAgICAgICAgICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gXCJmdW5jdGlvblwiID8gY29tcGFyYXRvciA6IHVuZGVmaW5lZDI7XG4gICAgICAgICAgaWYgKGNvbXBhcmF0b3IpIHtcbiAgICAgICAgICAgIG1hcHBlZC5wb3AoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG1hcHBlZC5sZW5ndGggJiYgbWFwcGVkWzBdID09PSBhcnJheXNbMF0gPyBiYXNlSW50ZXJzZWN0aW9uKG1hcHBlZCwgdW5kZWZpbmVkMiwgY29tcGFyYXRvcikgOiBbXTtcbiAgICAgICAgfSk7XG4gICAgICAgIGZ1bmN0aW9uIGpvaW4oYXJyYXksIHNlcGFyYXRvcikge1xuICAgICAgICAgIHJldHVybiBhcnJheSA9PSBudWxsID8gXCJcIiA6IG5hdGl2ZUpvaW4uY2FsbChhcnJheSwgc2VwYXJhdG9yKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBsYXN0KGFycmF5KSB7XG4gICAgICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgICAgIHJldHVybiBsZW5ndGggPyBhcnJheVtsZW5ndGggLSAxXSA6IHVuZGVmaW5lZDI7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gbGFzdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICAgICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGluZGV4ID0gbGVuZ3RoO1xuICAgICAgICAgIGlmIChmcm9tSW5kZXggIT09IHVuZGVmaW5lZDIpIHtcbiAgICAgICAgICAgIGluZGV4ID0gdG9JbnRlZ2VyKGZyb21JbmRleCk7XG4gICAgICAgICAgICBpbmRleCA9IGluZGV4IDwgMCA/IG5hdGl2ZU1heChsZW5ndGggKyBpbmRleCwgMCkgOiBuYXRpdmVNaW4oaW5kZXgsIGxlbmd0aCAtIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gc3RyaWN0TGFzdEluZGV4T2YoYXJyYXksIHZhbHVlLCBpbmRleCkgOiBiYXNlRmluZEluZGV4KGFycmF5LCBiYXNlSXNOYU4sIGluZGV4LCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBudGgoYXJyYXksIG4pIHtcbiAgICAgICAgICByZXR1cm4gYXJyYXkgJiYgYXJyYXkubGVuZ3RoID8gYmFzZU50aChhcnJheSwgdG9JbnRlZ2VyKG4pKSA6IHVuZGVmaW5lZDI7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHB1bGwgPSBiYXNlUmVzdChwdWxsQWxsKTtcbiAgICAgICAgZnVuY3Rpb24gcHVsbEFsbChhcnJheSwgdmFsdWVzMikge1xuICAgICAgICAgIHJldHVybiBhcnJheSAmJiBhcnJheS5sZW5ndGggJiYgdmFsdWVzMiAmJiB2YWx1ZXMyLmxlbmd0aCA/IGJhc2VQdWxsQWxsKGFycmF5LCB2YWx1ZXMyKSA6IGFycmF5O1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHB1bGxBbGxCeShhcnJheSwgdmFsdWVzMiwgaXRlcmF0ZWUyKSB7XG4gICAgICAgICAgcmV0dXJuIGFycmF5ICYmIGFycmF5Lmxlbmd0aCAmJiB2YWx1ZXMyICYmIHZhbHVlczIubGVuZ3RoID8gYmFzZVB1bGxBbGwoYXJyYXksIHZhbHVlczIsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlMiwgMikpIDogYXJyYXk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gcHVsbEFsbFdpdGgoYXJyYXksIHZhbHVlczIsIGNvbXBhcmF0b3IpIHtcbiAgICAgICAgICByZXR1cm4gYXJyYXkgJiYgYXJyYXkubGVuZ3RoICYmIHZhbHVlczIgJiYgdmFsdWVzMi5sZW5ndGggPyBiYXNlUHVsbEFsbChhcnJheSwgdmFsdWVzMiwgdW5kZWZpbmVkMiwgY29tcGFyYXRvcikgOiBhcnJheTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcHVsbEF0ID0gZmxhdFJlc3QoZnVuY3Rpb24oYXJyYXksIGluZGV4ZXMpIHtcbiAgICAgICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsIHJlc3VsdDIgPSBiYXNlQXQoYXJyYXksIGluZGV4ZXMpO1xuICAgICAgICAgIGJhc2VQdWxsQXQoYXJyYXksIGFycmF5TWFwKGluZGV4ZXMsIGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgICAgICByZXR1cm4gaXNJbmRleChpbmRleCwgbGVuZ3RoKSA/ICtpbmRleCA6IGluZGV4O1xuICAgICAgICAgIH0pLnNvcnQoY29tcGFyZUFzY2VuZGluZykpO1xuICAgICAgICAgIHJldHVybiByZXN1bHQyO1xuICAgICAgICB9KTtcbiAgICAgICAgZnVuY3Rpb24gcmVtb3ZlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgICAgICB2YXIgcmVzdWx0MiA9IFtdO1xuICAgICAgICAgIGlmICghKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQyO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgaW5kZXggPSAtMSwgaW5kZXhlcyA9IFtdLCBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgICAgICAgcHJlZGljYXRlID0gZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKTtcbiAgICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICAgICAgICByZXN1bHQyLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgICBpbmRleGVzLnB1c2goaW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBiYXNlUHVsbEF0KGFycmF5LCBpbmRleGVzKTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0MjtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiByZXZlcnNlKGFycmF5KSB7XG4gICAgICAgICAgcmV0dXJuIGFycmF5ID09IG51bGwgPyBhcnJheSA6IG5hdGl2ZVJldmVyc2UuY2FsbChhcnJheSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gc2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGVuZCAmJiB0eXBlb2YgZW5kICE9IFwibnVtYmVyXCIgJiYgaXNJdGVyYXRlZUNhbGwoYXJyYXksIHN0YXJ0LCBlbmQpKSB7XG4gICAgICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgICAgICBlbmQgPSBsZW5ndGg7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0YXJ0ID0gc3RhcnQgPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIoc3RhcnQpO1xuICAgICAgICAgICAgZW5kID0gZW5kID09PSB1bmRlZmluZWQyID8gbGVuZ3RoIDogdG9JbnRlZ2VyKGVuZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBzb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaXRlcmF0ZWUyKSB7XG4gICAgICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUyLCAyKSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gc29ydGVkSW5kZXhPZihhcnJheSwgdmFsdWUpIHtcbiAgICAgICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICAgICAgaWYgKGxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSk7XG4gICAgICAgICAgICBpZiAoaW5kZXggPCBsZW5ndGggJiYgZXEoYXJyYXlbaW5kZXhdLCB2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gc29ydGVkTGFzdEluZGV4KGFycmF5LCB2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBzb3J0ZWRMYXN0SW5kZXhCeShhcnJheSwgdmFsdWUsIGl0ZXJhdGVlMikge1xuICAgICAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlMiwgMiksIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHNvcnRlZExhc3RJbmRleE9mKGFycmF5LCB2YWx1ZSkge1xuICAgICAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgICAgICBpZiAobGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlLCB0cnVlKSAtIDE7XG4gICAgICAgICAgICBpZiAoZXEoYXJyYXlbaW5kZXhdLCB2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gc29ydGVkVW5pcShhcnJheSkge1xuICAgICAgICAgIHJldHVybiBhcnJheSAmJiBhcnJheS5sZW5ndGggPyBiYXNlU29ydGVkVW5pcShhcnJheSkgOiBbXTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBzb3J0ZWRVbmlxQnkoYXJyYXksIGl0ZXJhdGVlMikge1xuICAgICAgICAgIHJldHVybiBhcnJheSAmJiBhcnJheS5sZW5ndGggPyBiYXNlU29ydGVkVW5pcShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUyLCAyKSkgOiBbXTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiB0YWlsKGFycmF5KSB7XG4gICAgICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlU2xpY2UoYXJyYXksIDEsIGxlbmd0aCkgOiBbXTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiB0YWtlKGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgICAgIGlmICghKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbiA9IGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZDIgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIDAsIG4gPCAwID8gMCA6IG4pO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHRha2VSaWdodChhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICAgICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbiA9IGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZDIgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgICAgIG4gPSBsZW5ndGggLSBuO1xuICAgICAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIG4gPCAwID8gMCA6IG4sIGxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gdGFrZVJpZ2h0V2hpbGUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgICAgIHJldHVybiBhcnJheSAmJiBhcnJheS5sZW5ndGggPyBiYXNlV2hpbGUoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGZhbHNlLCB0cnVlKSA6IFtdO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHRha2VXaGlsZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICAgICAgcmV0dXJuIGFycmF5ICYmIGFycmF5Lmxlbmd0aCA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSkgOiBbXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdW5pb24gPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4oYXJyYXlzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSkpO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIHVuaW9uQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgICAgICB2YXIgaXRlcmF0ZWUyID0gbGFzdChhcnJheXMpO1xuICAgICAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChpdGVyYXRlZTIpKSB7XG4gICAgICAgICAgICBpdGVyYXRlZTIgPSB1bmRlZmluZWQyO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4oYXJyYXlzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlMiwgMikpO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIHVuaW9uV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgICAgIHZhciBjb21wYXJhdG9yID0gbGFzdChhcnJheXMpO1xuICAgICAgICAgIGNvbXBhcmF0b3IgPSB0eXBlb2YgY29tcGFyYXRvciA9PSBcImZ1bmN0aW9uXCIgPyBjb21wYXJhdG9yIDogdW5kZWZpbmVkMjtcbiAgICAgICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4oYXJyYXlzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSksIHVuZGVmaW5lZDIsIGNvbXBhcmF0b3IpO1xuICAgICAgICB9KTtcbiAgICAgICAgZnVuY3Rpb24gdW5pcShhcnJheSkge1xuICAgICAgICAgIHJldHVybiBhcnJheSAmJiBhcnJheS5sZW5ndGggPyBiYXNlVW5pcShhcnJheSkgOiBbXTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiB1bmlxQnkoYXJyYXksIGl0ZXJhdGVlMikge1xuICAgICAgICAgIHJldHVybiBhcnJheSAmJiBhcnJheS5sZW5ndGggPyBiYXNlVW5pcShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUyLCAyKSkgOiBbXTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiB1bmlxV2l0aChhcnJheSwgY29tcGFyYXRvcikge1xuICAgICAgICAgIGNvbXBhcmF0b3IgPSB0eXBlb2YgY29tcGFyYXRvciA9PSBcImZ1bmN0aW9uXCIgPyBjb21wYXJhdG9yIDogdW5kZWZpbmVkMjtcbiAgICAgICAgICByZXR1cm4gYXJyYXkgJiYgYXJyYXkubGVuZ3RoID8gYmFzZVVuaXEoYXJyYXksIHVuZGVmaW5lZDIsIGNvbXBhcmF0b3IpIDogW107XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gdW56aXAoYXJyYXkpIHtcbiAgICAgICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBsZW5ndGggPSAwO1xuICAgICAgICAgIGFycmF5ID0gYXJyYXlGaWx0ZXIoYXJyYXksIGZ1bmN0aW9uKGdyb3VwKSB7XG4gICAgICAgICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoZ3JvdXApKSB7XG4gICAgICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChncm91cC5sZW5ndGgsIGxlbmd0aCk7XG4gICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBiYXNlVGltZXMobGVuZ3RoLCBmdW5jdGlvbihpbmRleCkge1xuICAgICAgICAgICAgcmV0dXJuIGFycmF5TWFwKGFycmF5LCBiYXNlUHJvcGVydHkoaW5kZXgpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiB1bnppcFdpdGgoYXJyYXksIGl0ZXJhdGVlMikge1xuICAgICAgICAgIGlmICghKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHJlc3VsdDIgPSB1bnppcChhcnJheSk7XG4gICAgICAgICAgaWYgKGl0ZXJhdGVlMiA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0MjtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGFycmF5TWFwKHJlc3VsdDIsIGZ1bmN0aW9uKGdyb3VwKSB7XG4gICAgICAgICAgICByZXR1cm4gYXBwbHkoaXRlcmF0ZWUyLCB1bmRlZmluZWQyLCBncm91cCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHdpdGhvdXQgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheSwgdmFsdWVzMikge1xuICAgICAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdChhcnJheSkgPyBiYXNlRGlmZmVyZW5jZShhcnJheSwgdmFsdWVzMikgOiBbXTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciB4b3IgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgICAgICByZXR1cm4gYmFzZVhvcihhcnJheUZpbHRlcihhcnJheXMsIGlzQXJyYXlMaWtlT2JqZWN0KSk7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgeG9yQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgICAgICB2YXIgaXRlcmF0ZWUyID0gbGFzdChhcnJheXMpO1xuICAgICAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChpdGVyYXRlZTIpKSB7XG4gICAgICAgICAgICBpdGVyYXRlZTIgPSB1bmRlZmluZWQyO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gYmFzZVhvcihhcnJheUZpbHRlcihhcnJheXMsIGlzQXJyYXlMaWtlT2JqZWN0KSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUyLCAyKSk7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgeG9yV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgICAgIHZhciBjb21wYXJhdG9yID0gbGFzdChhcnJheXMpO1xuICAgICAgICAgIGNvbXBhcmF0b3IgPSB0eXBlb2YgY29tcGFyYXRvciA9PSBcImZ1bmN0aW9uXCIgPyBjb21wYXJhdG9yIDogdW5kZWZpbmVkMjtcbiAgICAgICAgICByZXR1cm4gYmFzZVhvcihhcnJheUZpbHRlcihhcnJheXMsIGlzQXJyYXlMaWtlT2JqZWN0KSwgdW5kZWZpbmVkMiwgY29tcGFyYXRvcik7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgemlwID0gYmFzZVJlc3QodW56aXApO1xuICAgICAgICBmdW5jdGlvbiB6aXBPYmplY3QocHJvcHMsIHZhbHVlczIpIHtcbiAgICAgICAgICByZXR1cm4gYmFzZVppcE9iamVjdChwcm9wcyB8fCBbXSwgdmFsdWVzMiB8fCBbXSwgYXNzaWduVmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHppcE9iamVjdERlZXAocHJvcHMsIHZhbHVlczIpIHtcbiAgICAgICAgICByZXR1cm4gYmFzZVppcE9iamVjdChwcm9wcyB8fCBbXSwgdmFsdWVzMiB8fCBbXSwgYmFzZVNldCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHppcFdpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgICAgICB2YXIgbGVuZ3RoID0gYXJyYXlzLmxlbmd0aCwgaXRlcmF0ZWUyID0gbGVuZ3RoID4gMSA/IGFycmF5c1tsZW5ndGggLSAxXSA6IHVuZGVmaW5lZDI7XG4gICAgICAgICAgaXRlcmF0ZWUyID0gdHlwZW9mIGl0ZXJhdGVlMiA9PSBcImZ1bmN0aW9uXCIgPyAoYXJyYXlzLnBvcCgpLCBpdGVyYXRlZTIpIDogdW5kZWZpbmVkMjtcbiAgICAgICAgICByZXR1cm4gdW56aXBXaXRoKGFycmF5cywgaXRlcmF0ZWUyKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGZ1bmN0aW9uIGNoYWluKHZhbHVlKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdDIgPSBsb2Rhc2godmFsdWUpO1xuICAgICAgICAgIHJlc3VsdDIuX19jaGFpbl9fID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0MjtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiB0YXAodmFsdWUsIGludGVyY2VwdG9yKSB7XG4gICAgICAgICAgaW50ZXJjZXB0b3IodmFsdWUpO1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiB0aHJ1KHZhbHVlLCBpbnRlcmNlcHRvcikge1xuICAgICAgICAgIHJldHVybiBpbnRlcmNlcHRvcih2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHdyYXBwZXJBdCA9IGZsYXRSZXN0KGZ1bmN0aW9uKHBhdGhzKSB7XG4gICAgICAgICAgdmFyIGxlbmd0aCA9IHBhdGhzLmxlbmd0aCwgc3RhcnQgPSBsZW5ndGggPyBwYXRoc1swXSA6IDAsIHZhbHVlID0gdGhpcy5fX3dyYXBwZWRfXywgaW50ZXJjZXB0b3IgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgICAgIHJldHVybiBiYXNlQXQob2JqZWN0LCBwYXRocyk7XG4gICAgICAgICAgfTtcbiAgICAgICAgICBpZiAobGVuZ3RoID4gMSB8fCB0aGlzLl9fYWN0aW9uc19fLmxlbmd0aCB8fCAhKHZhbHVlIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpIHx8ICFpc0luZGV4KHN0YXJ0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudGhydShpbnRlcmNlcHRvcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhbHVlID0gdmFsdWUuc2xpY2Uoc3RhcnQsICtzdGFydCArIChsZW5ndGggPyAxIDogMCkpO1xuICAgICAgICAgIHZhbHVlLl9fYWN0aW9uc19fLnB1c2goe1xuICAgICAgICAgICAgXCJmdW5jXCI6IHRocnUsXG4gICAgICAgICAgICBcImFyZ3NcIjogW2ludGVyY2VwdG9yXSxcbiAgICAgICAgICAgIFwidGhpc0FyZ1wiOiB1bmRlZmluZWQyXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHZhbHVlLCB0aGlzLl9fY2hhaW5fXykudGhydShmdW5jdGlvbihhcnJheSkge1xuICAgICAgICAgICAgaWYgKGxlbmd0aCAmJiAhYXJyYXkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIGFycmF5LnB1c2godW5kZWZpbmVkMik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBmdW5jdGlvbiB3cmFwcGVyQ2hhaW4oKSB7XG4gICAgICAgICAgcmV0dXJuIGNoYWluKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHdyYXBwZXJDb21taXQoKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHRoaXMudmFsdWUoKSwgdGhpcy5fX2NoYWluX18pO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHdyYXBwZXJOZXh0KCkge1xuICAgICAgICAgIGlmICh0aGlzLl9fdmFsdWVzX18gPT09IHVuZGVmaW5lZDIpIHtcbiAgICAgICAgICAgIHRoaXMuX192YWx1ZXNfXyA9IHRvQXJyYXkodGhpcy52YWx1ZSgpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGRvbmUgPSB0aGlzLl9faW5kZXhfXyA+PSB0aGlzLl9fdmFsdWVzX18ubGVuZ3RoLCB2YWx1ZSA9IGRvbmUgPyB1bmRlZmluZWQyIDogdGhpcy5fX3ZhbHVlc19fW3RoaXMuX19pbmRleF9fKytdO1xuICAgICAgICAgIHJldHVybiB7IFwiZG9uZVwiOiBkb25lLCBcInZhbHVlXCI6IHZhbHVlIH07XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gd3JhcHBlclRvSXRlcmF0b3IoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gd3JhcHBlclBsYW50KHZhbHVlKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdDIsIHBhcmVudDIgPSB0aGlzO1xuICAgICAgICAgIHdoaWxlIChwYXJlbnQyIGluc3RhbmNlb2YgYmFzZUxvZGFzaCkge1xuICAgICAgICAgICAgdmFyIGNsb25lMiA9IHdyYXBwZXJDbG9uZShwYXJlbnQyKTtcbiAgICAgICAgICAgIGNsb25lMi5fX2luZGV4X18gPSAwO1xuICAgICAgICAgICAgY2xvbmUyLl9fdmFsdWVzX18gPSB1bmRlZmluZWQyO1xuICAgICAgICAgICAgaWYgKHJlc3VsdDIpIHtcbiAgICAgICAgICAgICAgcHJldmlvdXMuX193cmFwcGVkX18gPSBjbG9uZTI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXN1bHQyID0gY2xvbmUyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHByZXZpb3VzID0gY2xvbmUyO1xuICAgICAgICAgICAgcGFyZW50MiA9IHBhcmVudDIuX193cmFwcGVkX187XG4gICAgICAgICAgfVxuICAgICAgICAgIHByZXZpb3VzLl9fd3JhcHBlZF9fID0gdmFsdWU7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDI7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gd3JhcHBlclJldmVyc2UoKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5fX3dyYXBwZWRfXztcbiAgICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikge1xuICAgICAgICAgICAgdmFyIHdyYXBwZWQgPSB2YWx1ZTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9fYWN0aW9uc19fLmxlbmd0aCkge1xuICAgICAgICAgICAgICB3cmFwcGVkID0gbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd3JhcHBlZCA9IHdyYXBwZWQucmV2ZXJzZSgpO1xuICAgICAgICAgICAgd3JhcHBlZC5fX2FjdGlvbnNfXy5wdXNoKHtcbiAgICAgICAgICAgICAgXCJmdW5jXCI6IHRocnUsXG4gICAgICAgICAgICAgIFwiYXJnc1wiOiBbcmV2ZXJzZV0sXG4gICAgICAgICAgICAgIFwidGhpc0FyZ1wiOiB1bmRlZmluZWQyXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcih3cmFwcGVkLCB0aGlzLl9fY2hhaW5fXyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aGlzLnRocnUocmV2ZXJzZSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gd3JhcHBlclZhbHVlKCkge1xuICAgICAgICAgIHJldHVybiBiYXNlV3JhcHBlclZhbHVlKHRoaXMuX193cmFwcGVkX18sIHRoaXMuX19hY3Rpb25zX18pO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjb3VudEJ5ID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQyLCB2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocmVzdWx0Miwga2V5KSkge1xuICAgICAgICAgICAgKytyZXN1bHQyW2tleV07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQyLCBrZXksIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGZ1bmN0aW9uIGV2ZXJ5KGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZ3VhcmQpIHtcbiAgICAgICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUV2ZXJ5IDogYmFzZUV2ZXJ5O1xuICAgICAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGd1YXJkKSkge1xuICAgICAgICAgICAgcHJlZGljYXRlID0gdW5kZWZpbmVkMjtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZmlsdGVyKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RmlsdGVyIDogYmFzZUZpbHRlcjtcbiAgICAgICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZmluZCA9IGNyZWF0ZUZpbmQoZmluZEluZGV4KTtcbiAgICAgICAgdmFyIGZpbmRMYXN0ID0gY3JlYXRlRmluZChmaW5kTGFzdEluZGV4KTtcbiAgICAgICAgZnVuY3Rpb24gZmxhdE1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZTIpIHtcbiAgICAgICAgICByZXR1cm4gYmFzZUZsYXR0ZW4obWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlMiksIDEpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGZsYXRNYXBEZWVwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlMikge1xuICAgICAgICAgIHJldHVybiBiYXNlRmxhdHRlbihtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUyKSwgSU5GSU5JVFkpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGZsYXRNYXBEZXB0aChjb2xsZWN0aW9uLCBpdGVyYXRlZTIsIGRlcHRoKSB7XG4gICAgICAgICAgZGVwdGggPSBkZXB0aCA9PT0gdW5kZWZpbmVkMiA/IDEgOiB0b0ludGVnZXIoZGVwdGgpO1xuICAgICAgICAgIHJldHVybiBiYXNlRmxhdHRlbihtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUyKSwgZGVwdGgpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGZvckVhY2goY29sbGVjdGlvbiwgaXRlcmF0ZWUyKSB7XG4gICAgICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlFYWNoIDogYmFzZUVhY2g7XG4gICAgICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUyLCAzKSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZm9yRWFjaFJpZ2h0KGNvbGxlY3Rpb24sIGl0ZXJhdGVlMikge1xuICAgICAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RWFjaFJpZ2h0IDogYmFzZUVhY2hSaWdodDtcbiAgICAgICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZTIsIDMpKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZ3JvdXBCeSA9IGNyZWF0ZUFnZ3JlZ2F0b3IoZnVuY3Rpb24ocmVzdWx0MiwgdmFsdWUsIGtleSkge1xuICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdDIsIGtleSkpIHtcbiAgICAgICAgICAgIHJlc3VsdDJba2V5XS5wdXNoKHZhbHVlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdDIsIGtleSwgW3ZhbHVlXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgZnVuY3Rpb24gaW5jbHVkZXMoY29sbGVjdGlvbiwgdmFsdWUsIGZyb21JbmRleCwgZ3VhcmQpIHtcbiAgICAgICAgICBjb2xsZWN0aW9uID0gaXNBcnJheUxpa2UoY29sbGVjdGlvbikgPyBjb2xsZWN0aW9uIDogdmFsdWVzKGNvbGxlY3Rpb24pO1xuICAgICAgICAgIGZyb21JbmRleCA9IGZyb21JbmRleCAmJiAhZ3VhcmQgPyB0b0ludGVnZXIoZnJvbUluZGV4KSA6IDA7XG4gICAgICAgICAgdmFyIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuICAgICAgICAgIGlmIChmcm9tSW5kZXggPCAwKSB7XG4gICAgICAgICAgICBmcm9tSW5kZXggPSBuYXRpdmVNYXgobGVuZ3RoICsgZnJvbUluZGV4LCAwKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGlzU3RyaW5nKGNvbGxlY3Rpb24pID8gZnJvbUluZGV4IDw9IGxlbmd0aCAmJiBjb2xsZWN0aW9uLmluZGV4T2YodmFsdWUsIGZyb21JbmRleCkgPiAtMSA6ICEhbGVuZ3RoICYmIGJhc2VJbmRleE9mKGNvbGxlY3Rpb24sIHZhbHVlLCBmcm9tSW5kZXgpID4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGludm9rZU1hcCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGNvbGxlY3Rpb24sIHBhdGgsIGFyZ3MpIHtcbiAgICAgICAgICB2YXIgaW5kZXggPSAtMSwgaXNGdW5jID0gdHlwZW9mIHBhdGggPT0gXCJmdW5jdGlvblwiLCByZXN1bHQyID0gaXNBcnJheUxpa2UoY29sbGVjdGlvbikgPyBBcnJheTIoY29sbGVjdGlvbi5sZW5ndGgpIDogW107XG4gICAgICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIHJlc3VsdDJbKytpbmRleF0gPSBpc0Z1bmMgPyBhcHBseShwYXRoLCB2YWx1ZSwgYXJncykgOiBiYXNlSW52b2tlKHZhbHVlLCBwYXRoLCBhcmdzKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0MjtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBrZXlCeSA9IGNyZWF0ZUFnZ3JlZ2F0b3IoZnVuY3Rpb24ocmVzdWx0MiwgdmFsdWUsIGtleSkge1xuICAgICAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQyLCBrZXksIHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGZ1bmN0aW9uIG1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZTIpIHtcbiAgICAgICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheU1hcCA6IGJhc2VNYXA7XG4gICAgICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUyLCAzKSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gb3JkZXJCeShjb2xsZWN0aW9uLCBpdGVyYXRlZXMsIG9yZGVycywgZ3VhcmQpIHtcbiAgICAgICAgICBpZiAoY29sbGVjdGlvbiA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghaXNBcnJheShpdGVyYXRlZXMpKSB7XG4gICAgICAgICAgICBpdGVyYXRlZXMgPSBpdGVyYXRlZXMgPT0gbnVsbCA/IFtdIDogW2l0ZXJhdGVlc107XG4gICAgICAgICAgfVxuICAgICAgICAgIG9yZGVycyA9IGd1YXJkID8gdW5kZWZpbmVkMiA6IG9yZGVycztcbiAgICAgICAgICBpZiAoIWlzQXJyYXkob3JkZXJzKSkge1xuICAgICAgICAgICAgb3JkZXJzID0gb3JkZXJzID09IG51bGwgPyBbXSA6IFtvcmRlcnNdO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gYmFzZU9yZGVyQnkoY29sbGVjdGlvbiwgaXRlcmF0ZWVzLCBvcmRlcnMpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwYXJ0aXRpb24gPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdDIsIHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICByZXN1bHQyW2tleSA/IDAgOiAxXS5wdXNoKHZhbHVlKTtcbiAgICAgICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIFtbXSwgW11dO1xuICAgICAgICB9KTtcbiAgICAgICAgZnVuY3Rpb24gcmVkdWNlKGNvbGxlY3Rpb24sIGl0ZXJhdGVlMiwgYWNjdW11bGF0b3IpIHtcbiAgICAgICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVJlZHVjZSA6IGJhc2VSZWR1Y2UsIGluaXRBY2N1bSA9IGFyZ3VtZW50cy5sZW5ndGggPCAzO1xuICAgICAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKGl0ZXJhdGVlMiwgNCksIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0sIGJhc2VFYWNoKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiByZWR1Y2VSaWdodChjb2xsZWN0aW9uLCBpdGVyYXRlZTIsIGFjY3VtdWxhdG9yKSB7XG4gICAgICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlSZWR1Y2VSaWdodCA6IGJhc2VSZWR1Y2UsIGluaXRBY2N1bSA9IGFyZ3VtZW50cy5sZW5ndGggPCAzO1xuICAgICAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKGl0ZXJhdGVlMiwgNCksIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0sIGJhc2VFYWNoUmlnaHQpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdChjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUZpbHRlciA6IGJhc2VGaWx0ZXI7XG4gICAgICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgbmVnYXRlKGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBzYW1wbGUoY29sbGVjdGlvbikge1xuICAgICAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U2FtcGxlIDogYmFzZVNhbXBsZTtcbiAgICAgICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBzYW1wbGVTaXplKGNvbGxlY3Rpb24sIG4sIGd1YXJkKSB7XG4gICAgICAgICAgaWYgKGd1YXJkID8gaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgbiwgZ3VhcmQpIDogbiA9PT0gdW5kZWZpbmVkMikge1xuICAgICAgICAgICAgbiA9IDE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U2FtcGxlU2l6ZSA6IGJhc2VTYW1wbGVTaXplO1xuICAgICAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIG4pO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHNodWZmbGUoY29sbGVjdGlvbikge1xuICAgICAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U2h1ZmZsZSA6IGJhc2VTaHVmZmxlO1xuICAgICAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24pO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHNpemUoY29sbGVjdGlvbikge1xuICAgICAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgICAgICAgIHJldHVybiBpc1N0cmluZyhjb2xsZWN0aW9uKSA/IHN0cmluZ1NpemUoY29sbGVjdGlvbikgOiBjb2xsZWN0aW9uLmxlbmd0aDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHRhZyA9IGdldFRhZyhjb2xsZWN0aW9uKTtcbiAgICAgICAgICBpZiAodGFnID09IG1hcFRhZyB8fCB0YWcgPT0gc2V0VGFnKSB7XG4gICAgICAgICAgICByZXR1cm4gY29sbGVjdGlvbi5zaXplO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gYmFzZUtleXMoY29sbGVjdGlvbikubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHNvbWUoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkge1xuICAgICAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U29tZSA6IGJhc2VTb21lO1xuICAgICAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGd1YXJkKSkge1xuICAgICAgICAgICAgcHJlZGljYXRlID0gdW5kZWZpbmVkMjtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNvcnRCeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGl0ZXJhdGVlcykge1xuICAgICAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGxlbmd0aCA9IGl0ZXJhdGVlcy5sZW5ndGg7XG4gICAgICAgICAgaWYgKGxlbmd0aCA+IDEgJiYgaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgaXRlcmF0ZWVzWzBdLCBpdGVyYXRlZXNbMV0pKSB7XG4gICAgICAgICAgICBpdGVyYXRlZXMgPSBbXTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGxlbmd0aCA+IDIgJiYgaXNJdGVyYXRlZUNhbGwoaXRlcmF0ZWVzWzBdLCBpdGVyYXRlZXNbMV0sIGl0ZXJhdGVlc1syXSkpIHtcbiAgICAgICAgICAgIGl0ZXJhdGVlcyA9IFtpdGVyYXRlZXNbMF1dO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gYmFzZU9yZGVyQnkoY29sbGVjdGlvbiwgYmFzZUZsYXR0ZW4oaXRlcmF0ZWVzLCAxKSwgW10pO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIG5vdyA9IGN0eE5vdyB8fCBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gcm9vdC5EYXRlLm5vdygpO1xuICAgICAgICB9O1xuICAgICAgICBmdW5jdGlvbiBhZnRlcihuLCBmdW5jKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBmdW5jICE9IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcjIoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoLS1uIDwgMSkge1xuICAgICAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYXJ5KGZ1bmMsIG4sIGd1YXJkKSB7XG4gICAgICAgICAgbiA9IGd1YXJkID8gdW5kZWZpbmVkMiA6IG47XG4gICAgICAgICAgbiA9IGZ1bmMgJiYgbiA9PSBudWxsID8gZnVuYy5sZW5ndGggOiBuO1xuICAgICAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfQVJZX0ZMQUcsIHVuZGVmaW5lZDIsIHVuZGVmaW5lZDIsIHVuZGVmaW5lZDIsIHVuZGVmaW5lZDIsIG4pO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGJlZm9yZShuLCBmdW5jKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdDI7XG4gICAgICAgICAgaWYgKHR5cGVvZiBmdW5jICE9IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcjIoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoLS1uID4gMCkge1xuICAgICAgICAgICAgICByZXN1bHQyID0gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG4gPD0gMSkge1xuICAgICAgICAgICAgICBmdW5jID0gdW5kZWZpbmVkMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQyO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGJpbmQgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCB0aGlzQXJnLCBwYXJ0aWFscykge1xuICAgICAgICAgIHZhciBiaXRtYXNrID0gV1JBUF9CSU5EX0ZMQUc7XG4gICAgICAgICAgaWYgKHBhcnRpYWxzLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIGhvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhwYXJ0aWFscywgZ2V0SG9sZGVyKGJpbmQpKTtcbiAgICAgICAgICAgIGJpdG1hc2sgfD0gV1JBUF9QQVJUSUFMX0ZMQUc7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBiaW5kS2V5ID0gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBrZXksIHBhcnRpYWxzKSB7XG4gICAgICAgICAgdmFyIGJpdG1hc2sgPSBXUkFQX0JJTkRfRkxBRyB8IFdSQVBfQklORF9LRVlfRkxBRztcbiAgICAgICAgICBpZiAocGFydGlhbHMubGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIoYmluZEtleSkpO1xuICAgICAgICAgICAgYml0bWFzayB8PSBXUkFQX1BBUlRJQUxfRkxBRztcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoa2V5LCBiaXRtYXNrLCBvYmplY3QsIHBhcnRpYWxzLCBob2xkZXJzKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGZ1bmN0aW9uIGN1cnJ5KGZ1bmMsIGFyaXR5LCBndWFyZCkge1xuICAgICAgICAgIGFyaXR5ID0gZ3VhcmQgPyB1bmRlZmluZWQyIDogYXJpdHk7XG4gICAgICAgICAgdmFyIHJlc3VsdDIgPSBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfQ1VSUllfRkxBRywgdW5kZWZpbmVkMiwgdW5kZWZpbmVkMiwgdW5kZWZpbmVkMiwgdW5kZWZpbmVkMiwgdW5kZWZpbmVkMiwgYXJpdHkpO1xuICAgICAgICAgIHJlc3VsdDIucGxhY2Vob2xkZXIgPSBjdXJyeS5wbGFjZWhvbGRlcjtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0MjtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBjdXJyeVJpZ2h0KGZ1bmMsIGFyaXR5LCBndWFyZCkge1xuICAgICAgICAgIGFyaXR5ID0gZ3VhcmQgPyB1bmRlZmluZWQyIDogYXJpdHk7XG4gICAgICAgICAgdmFyIHJlc3VsdDIgPSBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfQ1VSUllfUklHSFRfRkxBRywgdW5kZWZpbmVkMiwgdW5kZWZpbmVkMiwgdW5kZWZpbmVkMiwgdW5kZWZpbmVkMiwgdW5kZWZpbmVkMiwgYXJpdHkpO1xuICAgICAgICAgIHJlc3VsdDIucGxhY2Vob2xkZXIgPSBjdXJyeVJpZ2h0LnBsYWNlaG9sZGVyO1xuICAgICAgICAgIHJldHVybiByZXN1bHQyO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgICAgICAgICB2YXIgbGFzdEFyZ3MsIGxhc3RUaGlzLCBtYXhXYWl0LCByZXN1bHQyLCB0aW1lcklkLCBsYXN0Q2FsbFRpbWUsIGxhc3RJbnZva2VUaW1lID0gMCwgbGVhZGluZyA9IGZhbHNlLCBtYXhpbmcgPSBmYWxzZSwgdHJhaWxpbmcgPSB0cnVlO1xuICAgICAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IyKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHdhaXQgPSB0b051bWJlcih3YWl0KSB8fCAwO1xuICAgICAgICAgIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgICAgICAgICAgbGVhZGluZyA9ICEhb3B0aW9ucy5sZWFkaW5nO1xuICAgICAgICAgICAgbWF4aW5nID0gXCJtYXhXYWl0XCIgaW4gb3B0aW9ucztcbiAgICAgICAgICAgIG1heFdhaXQgPSBtYXhpbmcgPyBuYXRpdmVNYXgodG9OdW1iZXIob3B0aW9ucy5tYXhXYWl0KSB8fCAwLCB3YWl0KSA6IG1heFdhaXQ7XG4gICAgICAgICAgICB0cmFpbGluZyA9IFwidHJhaWxpbmdcIiBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIGludm9rZUZ1bmModGltZSkge1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBsYXN0QXJncywgdGhpc0FyZyA9IGxhc3RUaGlzO1xuICAgICAgICAgICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDI7XG4gICAgICAgICAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgICAgICAgICByZXN1bHQyID0gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQyO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBsZWFkaW5nRWRnZSh0aW1lKSB7XG4gICAgICAgICAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICAgICAgcmV0dXJuIGxlYWRpbmcgPyBpbnZva2VGdW5jKHRpbWUpIDogcmVzdWx0MjtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gcmVtYWluaW5nV2FpdCh0aW1lKSB7XG4gICAgICAgICAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLCB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lLCB0aW1lV2FpdGluZyA9IHdhaXQgLSB0aW1lU2luY2VMYXN0Q2FsbDtcbiAgICAgICAgICAgIHJldHVybiBtYXhpbmcgPyBuYXRpdmVNaW4odGltZVdhaXRpbmcsIG1heFdhaXQgLSB0aW1lU2luY2VMYXN0SW52b2tlKSA6IHRpbWVXYWl0aW5nO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBzaG91bGRJbnZva2UodGltZSkge1xuICAgICAgICAgICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSwgdGltZVNpbmNlTGFzdEludm9rZSA9IHRpbWUgLSBsYXN0SW52b2tlVGltZTtcbiAgICAgICAgICAgIHJldHVybiBsYXN0Q2FsbFRpbWUgPT09IHVuZGVmaW5lZDIgfHwgdGltZVNpbmNlTGFzdENhbGwgPj0gd2FpdCB8fCB0aW1lU2luY2VMYXN0Q2FsbCA8IDAgfHwgbWF4aW5nICYmIHRpbWVTaW5jZUxhc3RJbnZva2UgPj0gbWF4V2FpdDtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gdGltZXJFeHBpcmVkKCkge1xuICAgICAgICAgICAgdmFyIHRpbWUgPSBub3coKTtcbiAgICAgICAgICAgIGlmIChzaG91bGRJbnZva2UodGltZSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRyYWlsaW5nRWRnZSh0aW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgcmVtYWluaW5nV2FpdCh0aW1lKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIHRyYWlsaW5nRWRnZSh0aW1lKSB7XG4gICAgICAgICAgICB0aW1lcklkID0gdW5kZWZpbmVkMjtcbiAgICAgICAgICAgIGlmICh0cmFpbGluZyAmJiBsYXN0QXJncykge1xuICAgICAgICAgICAgICByZXR1cm4gaW52b2tlRnVuYyh0aW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQyO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICAgICAgICAgIGlmICh0aW1lcklkICE9PSB1bmRlZmluZWQyKSB7XG4gICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcklkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxhc3RJbnZva2VUaW1lID0gMDtcbiAgICAgICAgICAgIGxhc3RBcmdzID0gbGFzdENhbGxUaW1lID0gbGFzdFRoaXMgPSB0aW1lcklkID0gdW5kZWZpbmVkMjtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgICAgICAgICByZXR1cm4gdGltZXJJZCA9PT0gdW5kZWZpbmVkMiA/IHJlc3VsdDIgOiB0cmFpbGluZ0VkZ2Uobm93KCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBkZWJvdW5jZWQoKSB7XG4gICAgICAgICAgICB2YXIgdGltZSA9IG5vdygpLCBpc0ludm9raW5nID0gc2hvdWxkSW52b2tlKHRpbWUpO1xuICAgICAgICAgICAgbGFzdEFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgICAgICBsYXN0VGhpcyA9IHRoaXM7XG4gICAgICAgICAgICBsYXN0Q2FsbFRpbWUgPSB0aW1lO1xuICAgICAgICAgICAgaWYgKGlzSW52b2tpbmcpIHtcbiAgICAgICAgICAgICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZDIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbGVhZGluZ0VkZ2UobGFzdENhbGxUaW1lKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAobWF4aW5nKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xuICAgICAgICAgICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGludm9rZUZ1bmMobGFzdENhbGxUaW1lKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZDIpIHtcbiAgICAgICAgICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQyO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkZWJvdW5jZWQuY2FuY2VsID0gY2FuY2VsO1xuICAgICAgICAgIGRlYm91bmNlZC5mbHVzaCA9IGZsdXNoO1xuICAgICAgICAgIHJldHVybiBkZWJvdW5jZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRlZmVyID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgYXJncykge1xuICAgICAgICAgIHJldHVybiBiYXNlRGVsYXkoZnVuYywgMSwgYXJncyk7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgZGVsYXkgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCB3YWl0LCBhcmdzKSB7XG4gICAgICAgICAgcmV0dXJuIGJhc2VEZWxheShmdW5jLCB0b051bWJlcih3YWl0KSB8fCAwLCBhcmdzKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGZ1bmN0aW9uIGZsaXAoZnVuYykge1xuICAgICAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfRkxJUF9GTEFHKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBtZW1vaXplKGZ1bmMsIHJlc29sdmVyKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBmdW5jICE9IFwiZnVuY3Rpb25cIiB8fCByZXNvbHZlciAhPSBudWxsICYmIHR5cGVvZiByZXNvbHZlciAhPSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IyKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBtZW1vaXplZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsIGtleSA9IHJlc29sdmVyID8gcmVzb2x2ZXIuYXBwbHkodGhpcywgYXJncykgOiBhcmdzWzBdLCBjYWNoZSA9IG1lbW9pemVkLmNhY2hlO1xuICAgICAgICAgICAgaWYgKGNhY2hlLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBjYWNoZS5nZXQoa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciByZXN1bHQyID0gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgIG1lbW9pemVkLmNhY2hlID0gY2FjaGUuc2V0KGtleSwgcmVzdWx0MikgfHwgY2FjaGU7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0MjtcbiAgICAgICAgICB9O1xuICAgICAgICAgIG1lbW9pemVkLmNhY2hlID0gbmV3IChtZW1vaXplLkNhY2hlIHx8IE1hcENhY2hlKSgpO1xuICAgICAgICAgIHJldHVybiBtZW1vaXplZDtcbiAgICAgICAgfVxuICAgICAgICBtZW1vaXplLkNhY2hlID0gTWFwQ2FjaGU7XG4gICAgICAgIGZ1bmN0aW9uIG5lZ2F0ZShwcmVkaWNhdGUpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHByZWRpY2F0ZSAhPSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IyKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgcmV0dXJuICFwcmVkaWNhdGUuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHJldHVybiAhcHJlZGljYXRlLmNhbGwodGhpcywgYXJnc1swXSk7XG4gICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKHRoaXMsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgcmV0dXJuICFwcmVkaWNhdGUuY2FsbCh0aGlzLCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAhcHJlZGljYXRlLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gb25jZShmdW5jKSB7XG4gICAgICAgICAgcmV0dXJuIGJlZm9yZSgyLCBmdW5jKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgb3ZlckFyZ3MgPSBjYXN0UmVzdChmdW5jdGlvbihmdW5jLCB0cmFuc2Zvcm1zKSB7XG4gICAgICAgICAgdHJhbnNmb3JtcyA9IHRyYW5zZm9ybXMubGVuZ3RoID09IDEgJiYgaXNBcnJheSh0cmFuc2Zvcm1zWzBdKSA/IGFycmF5TWFwKHRyYW5zZm9ybXNbMF0sIGJhc2VVbmFyeShnZXRJdGVyYXRlZSgpKSkgOiBhcnJheU1hcChiYXNlRmxhdHRlbih0cmFuc2Zvcm1zLCAxKSwgYmFzZVVuYXJ5KGdldEl0ZXJhdGVlKCkpKTtcbiAgICAgICAgICB2YXIgZnVuY3NMZW5ndGggPSB0cmFuc2Zvcm1zLmxlbmd0aDtcbiAgICAgICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gLTEsIGxlbmd0aCA9IG5hdGl2ZU1pbihhcmdzLmxlbmd0aCwgZnVuY3NMZW5ndGgpO1xuICAgICAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICAgICAgYXJnc1tpbmRleF0gPSB0cmFuc2Zvcm1zW2luZGV4XS5jYWxsKHRoaXMsIGFyZ3NbaW5kZXhdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhcHBseShmdW5jLCB0aGlzLCBhcmdzKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBwYXJ0aWFsID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgcGFydGlhbHMpIHtcbiAgICAgICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIocGFydGlhbCkpO1xuICAgICAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfUEFSVElBTF9GTEFHLCB1bmRlZmluZWQyLCBwYXJ0aWFscywgaG9sZGVycyk7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgcGFydGlhbFJpZ2h0ID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgcGFydGlhbHMpIHtcbiAgICAgICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIocGFydGlhbFJpZ2h0KSk7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcsIHVuZGVmaW5lZDIsIHBhcnRpYWxzLCBob2xkZXJzKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciByZWFyZyA9IGZsYXRSZXN0KGZ1bmN0aW9uKGZ1bmMsIGluZGV4ZXMpIHtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBXUkFQX1JFQVJHX0ZMQUcsIHVuZGVmaW5lZDIsIHVuZGVmaW5lZDIsIHVuZGVmaW5lZDIsIGluZGV4ZXMpO1xuICAgICAgICB9KTtcbiAgICAgICAgZnVuY3Rpb24gcmVzdChmdW5jLCBzdGFydCkge1xuICAgICAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IyKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN0YXJ0ID0gc3RhcnQgPT09IHVuZGVmaW5lZDIgPyBzdGFydCA6IHRvSW50ZWdlcihzdGFydCk7XG4gICAgICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmMsIHN0YXJ0KTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBzcHJlYWQoZnVuYywgc3RhcnQpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yMihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzdGFydCA9IHN0YXJ0ID09IG51bGwgPyAwIDogbmF0aXZlTWF4KHRvSW50ZWdlcihzdGFydCksIDApO1xuICAgICAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgICAgICB2YXIgYXJyYXkgPSBhcmdzW3N0YXJ0XSwgb3RoZXJBcmdzID0gY2FzdFNsaWNlKGFyZ3MsIDAsIHN0YXJ0KTtcbiAgICAgICAgICAgIGlmIChhcnJheSkge1xuICAgICAgICAgICAgICBhcnJheVB1c2gob3RoZXJBcmdzLCBhcnJheSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgb3RoZXJBcmdzKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiB0aHJvdHRsZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gICAgICAgICAgdmFyIGxlYWRpbmcgPSB0cnVlLCB0cmFpbGluZyA9IHRydWU7XG4gICAgICAgICAgaWYgKHR5cGVvZiBmdW5jICE9IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcjIoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgICAgICAgICBsZWFkaW5nID0gXCJsZWFkaW5nXCIgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy5sZWFkaW5nIDogbGVhZGluZztcbiAgICAgICAgICAgIHRyYWlsaW5nID0gXCJ0cmFpbGluZ1wiIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMudHJhaWxpbmcgOiB0cmFpbGluZztcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGRlYm91bmNlKGZ1bmMsIHdhaXQsIHtcbiAgICAgICAgICAgIFwibGVhZGluZ1wiOiBsZWFkaW5nLFxuICAgICAgICAgICAgXCJtYXhXYWl0XCI6IHdhaXQsXG4gICAgICAgICAgICBcInRyYWlsaW5nXCI6IHRyYWlsaW5nXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gdW5hcnkoZnVuYykge1xuICAgICAgICAgIHJldHVybiBhcnkoZnVuYywgMSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gd3JhcCh2YWx1ZSwgd3JhcHBlcikge1xuICAgICAgICAgIHJldHVybiBwYXJ0aWFsKGNhc3RGdW5jdGlvbih3cmFwcGVyKSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGNhc3RBcnJheSgpIHtcbiAgICAgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHZhbHVlID0gYXJndW1lbnRzWzBdO1xuICAgICAgICAgIHJldHVybiBpc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW3ZhbHVlXTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBjbG9uZSh2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX1NZTUJPTFNfRkxBRyk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gY2xvbmVXaXRoKHZhbHVlLCBjdXN0b21pemVyKSB7XG4gICAgICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09IFwiZnVuY3Rpb25cIiA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQyO1xuICAgICAgICAgIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX1NZTUJPTFNfRkxBRywgY3VzdG9taXplcik7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gY2xvbmVEZWVwKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgQ0xPTkVfREVFUF9GTEFHIHwgQ0xPTkVfU1lNQk9MU19GTEFHKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBjbG9uZURlZXBXaXRoKHZhbHVlLCBjdXN0b21pemVyKSB7XG4gICAgICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09IFwiZnVuY3Rpb25cIiA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQyO1xuICAgICAgICAgIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX0RFRVBfRkxBRyB8IENMT05FX1NZTUJPTFNfRkxBRywgY3VzdG9taXplcik7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gY29uZm9ybXNUbyhvYmplY3QsIHNvdXJjZSkge1xuICAgICAgICAgIHJldHVybiBzb3VyY2UgPT0gbnVsbCB8fCBiYXNlQ29uZm9ybXNUbyhvYmplY3QsIHNvdXJjZSwga2V5cyhzb3VyY2UpKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBlcSh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8IHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXI7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGd0ID0gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihiYXNlR3QpO1xuICAgICAgICB2YXIgZ3RlID0gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWUgPj0gb3RoZXI7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgaXNBcmd1bWVudHMgPSBiYXNlSXNBcmd1bWVudHMoLyogQF9fUFVSRV9fICovIChmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gYXJndW1lbnRzO1xuICAgICAgICB9KSgpKSA/IGJhc2VJc0FyZ3VtZW50cyA6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgXCJjYWxsZWVcIikgJiYgIXByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodmFsdWUsIFwiY2FsbGVlXCIpO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgaXNBcnJheSA9IEFycmF5Mi5pc0FycmF5O1xuICAgICAgICB2YXIgaXNBcnJheUJ1ZmZlciA9IG5vZGVJc0FycmF5QnVmZmVyID8gYmFzZVVuYXJ5KG5vZGVJc0FycmF5QnVmZmVyKSA6IGJhc2VJc0FycmF5QnVmZmVyO1xuICAgICAgICBmdW5jdGlvbiBpc0FycmF5TGlrZSh2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgIWlzRnVuY3Rpb24odmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGlzQXJyYXlMaWtlT2JqZWN0KHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaXNBcnJheUxpa2UodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGlzQm9vbGVhbih2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiB2YWx1ZSA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gZmFsc2UgfHwgaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBib29sVGFnO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpc0J1ZmZlciA9IG5hdGl2ZUlzQnVmZmVyIHx8IHN0dWJGYWxzZTtcbiAgICAgICAgdmFyIGlzRGF0ZSA9IG5vZGVJc0RhdGUgPyBiYXNlVW5hcnkobm9kZUlzRGF0ZSkgOiBiYXNlSXNEYXRlO1xuICAgICAgICBmdW5jdGlvbiBpc0VsZW1lbnQodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiB2YWx1ZS5ub2RlVHlwZSA9PT0gMSAmJiAhaXNQbGFpbk9iamVjdCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gaXNFbXB0eSh2YWx1ZSkge1xuICAgICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGlzQXJyYXlMaWtlKHZhbHVlKSAmJiAoaXNBcnJheSh2YWx1ZSkgfHwgdHlwZW9mIHZhbHVlID09IFwic3RyaW5nXCIgfHwgdHlwZW9mIHZhbHVlLnNwbGljZSA9PSBcImZ1bmN0aW9uXCIgfHwgaXNCdWZmZXIodmFsdWUpIHx8IGlzVHlwZWRBcnJheSh2YWx1ZSkgfHwgaXNBcmd1bWVudHModmFsdWUpKSkge1xuICAgICAgICAgICAgcmV0dXJuICF2YWx1ZS5sZW5ndGg7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciB0YWcgPSBnZXRUYWcodmFsdWUpO1xuICAgICAgICAgIGlmICh0YWcgPT0gbWFwVGFnIHx8IHRhZyA9PSBzZXRUYWcpIHtcbiAgICAgICAgICAgIHJldHVybiAhdmFsdWUuc2l6ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGlzUHJvdG90eXBlKHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuICFiYXNlS2V5cyh2YWx1ZSkubGVuZ3RoO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gaXNFcXVhbCh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgICAgICByZXR1cm4gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBpc0VxdWFsV2l0aCh2YWx1ZSwgb3RoZXIsIGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gXCJmdW5jdGlvblwiID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDI7XG4gICAgICAgICAgdmFyIHJlc3VsdDIgPSBjdXN0b21pemVyID8gY3VzdG9taXplcih2YWx1ZSwgb3RoZXIpIDogdW5kZWZpbmVkMjtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0MiA9PT0gdW5kZWZpbmVkMiA/IGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlciwgdW5kZWZpbmVkMiwgY3VzdG9taXplcikgOiAhIXJlc3VsdDI7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gaXNFcnJvcih2YWx1ZSkge1xuICAgICAgICAgIGlmICghaXNPYmplY3RMaWtlKHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgdGFnID0gYmFzZUdldFRhZyh2YWx1ZSk7XG4gICAgICAgICAgcmV0dXJuIHRhZyA9PSBlcnJvclRhZyB8fCB0YWcgPT0gZG9tRXhjVGFnIHx8IHR5cGVvZiB2YWx1ZS5tZXNzYWdlID09IFwic3RyaW5nXCIgJiYgdHlwZW9mIHZhbHVlLm5hbWUgPT0gXCJzdHJpbmdcIiAmJiAhaXNQbGFpbk9iamVjdCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gaXNGaW5pdGUodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09IFwibnVtYmVyXCIgJiYgbmF0aXZlSXNGaW5pdGUodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgdGFnID0gYmFzZUdldFRhZyh2YWx1ZSk7XG4gICAgICAgICAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWcgfHwgdGFnID09IGFzeW5jVGFnIHx8IHRhZyA9PSBwcm94eVRhZztcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBpc0ludGVnZXIodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09IFwibnVtYmVyXCIgJiYgdmFsdWUgPT0gdG9JbnRlZ2VyKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBpc0xlbmd0aCh2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gXCJudW1iZXJcIiAmJiB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgICAgICAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgICAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAodHlwZSA9PSBcIm9iamVjdFwiIHx8IHR5cGUgPT0gXCJmdW5jdGlvblwiKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gXCJvYmplY3RcIjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaXNNYXAgPSBub2RlSXNNYXAgPyBiYXNlVW5hcnkobm9kZUlzTWFwKSA6IGJhc2VJc01hcDtcbiAgICAgICAgZnVuY3Rpb24gaXNNYXRjaChvYmplY3QsIHNvdXJjZSkge1xuICAgICAgICAgIHJldHVybiBvYmplY3QgPT09IHNvdXJjZSB8fCBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgZ2V0TWF0Y2hEYXRhKHNvdXJjZSkpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGlzTWF0Y2hXaXRoKG9iamVjdCwgc291cmNlLCBjdXN0b21pemVyKSB7XG4gICAgICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09IFwiZnVuY3Rpb25cIiA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQyO1xuICAgICAgICAgIHJldHVybiBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgZ2V0TWF0Y2hEYXRhKHNvdXJjZSksIGN1c3RvbWl6ZXIpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGlzTmFOKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGlzTnVtYmVyKHZhbHVlKSAmJiB2YWx1ZSAhPSArdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gaXNOYXRpdmUodmFsdWUpIHtcbiAgICAgICAgICBpZiAoaXNNYXNrYWJsZSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcjIoQ09SRV9FUlJPUl9URVhUKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gaXNOdWxsKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlID09PSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGlzTmlsKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlID09IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gaXNOdW1iZXIodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09IFwibnVtYmVyXCIgfHwgaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBudW1iZXJUYWc7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZSkge1xuICAgICAgICAgIGlmICghaXNPYmplY3RMaWtlKHZhbHVlKSB8fCBiYXNlR2V0VGFnKHZhbHVlKSAhPSBvYmplY3RUYWcpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHByb3RvID0gZ2V0UHJvdG90eXBlKHZhbHVlKTtcbiAgICAgICAgICBpZiAocHJvdG8gPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgQ3RvciA9IGhhc093blByb3BlcnR5LmNhbGwocHJvdG8sIFwiY29uc3RydWN0b3JcIikgJiYgcHJvdG8uY29uc3RydWN0b3I7XG4gICAgICAgICAgcmV0dXJuIHR5cGVvZiBDdG9yID09IFwiZnVuY3Rpb25cIiAmJiBDdG9yIGluc3RhbmNlb2YgQ3RvciAmJiBmdW5jVG9TdHJpbmcuY2FsbChDdG9yKSA9PSBvYmplY3RDdG9yU3RyaW5nO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpc1JlZ0V4cCA9IG5vZGVJc1JlZ0V4cCA/IGJhc2VVbmFyeShub2RlSXNSZWdFeHApIDogYmFzZUlzUmVnRXhwO1xuICAgICAgICBmdW5jdGlvbiBpc1NhZmVJbnRlZ2VyKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGlzSW50ZWdlcih2YWx1ZSkgJiYgdmFsdWUgPj0gLU1BWF9TQUZFX0lOVEVHRVIgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaXNTZXQgPSBub2RlSXNTZXQgPyBiYXNlVW5hcnkobm9kZUlzU2V0KSA6IGJhc2VJc1NldDtcbiAgICAgICAgZnVuY3Rpb24gaXNTdHJpbmcodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09IFwic3RyaW5nXCIgfHwgIWlzQXJyYXkodmFsdWUpICYmIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gc3RyaW5nVGFnO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGlzU3ltYm9sKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSBcInN5bWJvbFwiIHx8IGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gc3ltYm9sVGFnO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpc1R5cGVkQXJyYXkgPSBub2RlSXNUeXBlZEFycmF5ID8gYmFzZVVuYXJ5KG5vZGVJc1R5cGVkQXJyYXkpIDogYmFzZUlzVHlwZWRBcnJheTtcbiAgICAgICAgZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZDI7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gaXNXZWFrTWFwKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSB3ZWFrTWFwVGFnO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGlzV2Vha1NldCh2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHdlYWtTZXRUYWc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGx0ID0gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihiYXNlTHQpO1xuICAgICAgICB2YXIgbHRlID0gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWUgPD0gb3RoZXI7XG4gICAgICAgIH0pO1xuICAgICAgICBmdW5jdGlvbiB0b0FycmF5KHZhbHVlKSB7XG4gICAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNBcnJheUxpa2UodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNTdHJpbmcodmFsdWUpID8gc3RyaW5nVG9BcnJheSh2YWx1ZSkgOiBjb3B5QXJyYXkodmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc3ltSXRlcmF0b3IgJiYgdmFsdWVbc3ltSXRlcmF0b3JdKSB7XG4gICAgICAgICAgICByZXR1cm4gaXRlcmF0b3JUb0FycmF5KHZhbHVlW3N5bUl0ZXJhdG9yXSgpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSksIGZ1bmMgPSB0YWcgPT0gbWFwVGFnID8gbWFwVG9BcnJheSA6IHRhZyA9PSBzZXRUYWcgPyBzZXRUb0FycmF5IDogdmFsdWVzO1xuICAgICAgICAgIHJldHVybiBmdW5jKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiB0b0Zpbml0ZSh2YWx1ZSkge1xuICAgICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IHZhbHVlIDogMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFsdWUgPSB0b051bWJlcih2YWx1ZSk7XG4gICAgICAgICAgaWYgKHZhbHVlID09PSBJTkZJTklUWSB8fCB2YWx1ZSA9PT0gLUlORklOSVRZKSB7XG4gICAgICAgICAgICB2YXIgc2lnbiA9IHZhbHVlIDwgMCA/IC0xIDogMTtcbiAgICAgICAgICAgIHJldHVybiBzaWduICogTUFYX0lOVEVHRVI7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgPyB2YWx1ZSA6IDA7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gdG9JbnRlZ2VyKHZhbHVlKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdDIgPSB0b0Zpbml0ZSh2YWx1ZSksIHJlbWFpbmRlciA9IHJlc3VsdDIgJSAxO1xuICAgICAgICAgIHJldHVybiByZXN1bHQyID09PSByZXN1bHQyID8gcmVtYWluZGVyID8gcmVzdWx0MiAtIHJlbWFpbmRlciA6IHJlc3VsdDIgOiAwO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHRvTGVuZ3RoKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlID8gYmFzZUNsYW1wKHRvSW50ZWdlcih2YWx1ZSksIDAsIE1BWF9BUlJBWV9MRU5HVEgpIDogMDtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiB0b051bWJlcih2YWx1ZSkge1xuICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gTkFOO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgICAgICB2YXIgb3RoZXIgPSB0eXBlb2YgdmFsdWUudmFsdWVPZiA9PSBcImZ1bmN0aW9uXCIgPyB2YWx1ZS52YWx1ZU9mKCkgOiB2YWx1ZTtcbiAgICAgICAgICAgIHZhbHVlID0gaXNPYmplY3Qob3RoZXIpID8gb3RoZXIgKyBcIlwiIDogb3RoZXI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlID09PSAwID8gdmFsdWUgOiArdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhbHVlID0gYmFzZVRyaW0odmFsdWUpO1xuICAgICAgICAgIHZhciBpc0JpbmFyeSA9IHJlSXNCaW5hcnkudGVzdCh2YWx1ZSk7XG4gICAgICAgICAgcmV0dXJuIGlzQmluYXJ5IHx8IHJlSXNPY3RhbC50ZXN0KHZhbHVlKSA/IGZyZWVQYXJzZUludCh2YWx1ZS5zbGljZSgyKSwgaXNCaW5hcnkgPyAyIDogOCkgOiByZUlzQmFkSGV4LnRlc3QodmFsdWUpID8gTkFOIDogK3ZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHRvUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gY29weU9iamVjdCh2YWx1ZSwga2V5c0luKHZhbHVlKSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gdG9TYWZlSW50ZWdlcih2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiB2YWx1ZSA/IGJhc2VDbGFtcCh0b0ludGVnZXIodmFsdWUpLCAtTUFYX1NBRkVfSU5URUdFUiwgTUFYX1NBRkVfSU5URUdFUikgOiB2YWx1ZSA9PT0gMCA/IHZhbHVlIDogMDtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiB0b1N0cmluZyh2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IGJhc2VUb1N0cmluZyh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGFzc2lnbiA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlKSB7XG4gICAgICAgICAgaWYgKGlzUHJvdG90eXBlKHNvdXJjZSkgfHwgaXNBcnJheUxpa2Uoc291cmNlKSkge1xuICAgICAgICAgICAgY29weU9iamVjdChzb3VyY2UsIGtleXMoc291cmNlKSwgb2JqZWN0KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgICAgIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGFzc2lnbkluID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgICAgICBjb3B5T2JqZWN0KHNvdXJjZSwga2V5c0luKHNvdXJjZSksIG9iamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgYXNzaWduSW5XaXRoID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyKSB7XG4gICAgICAgICAgY29weU9iamVjdChzb3VyY2UsIGtleXNJbihzb3VyY2UpLCBvYmplY3QsIGN1c3RvbWl6ZXIpO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGFzc2lnbldpdGggPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgICBjb3B5T2JqZWN0KHNvdXJjZSwga2V5cyhzb3VyY2UpLCBvYmplY3QsIGN1c3RvbWl6ZXIpO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGF0ID0gZmxhdFJlc3QoYmFzZUF0KTtcbiAgICAgICAgZnVuY3Rpb24gY3JlYXRlKHByb3RvdHlwZSwgcHJvcGVydGllcykge1xuICAgICAgICAgIHZhciByZXN1bHQyID0gYmFzZUNyZWF0ZShwcm90b3R5cGUpO1xuICAgICAgICAgIHJldHVybiBwcm9wZXJ0aWVzID09IG51bGwgPyByZXN1bHQyIDogYmFzZUFzc2lnbihyZXN1bHQyLCBwcm9wZXJ0aWVzKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGVmYXVsdHMgPSBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIHNvdXJjZXMpIHtcbiAgICAgICAgICBvYmplY3QgPSBPYmplY3QyKG9iamVjdCk7XG4gICAgICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICAgICAgdmFyIGxlbmd0aCA9IHNvdXJjZXMubGVuZ3RoO1xuICAgICAgICAgIHZhciBndWFyZCA9IGxlbmd0aCA+IDIgPyBzb3VyY2VzWzJdIDogdW5kZWZpbmVkMjtcbiAgICAgICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoc291cmNlc1swXSwgc291cmNlc1sxXSwgZ3VhcmQpKSB7XG4gICAgICAgICAgICBsZW5ndGggPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIHNvdXJjZSA9IHNvdXJjZXNbaW5kZXhdO1xuICAgICAgICAgICAgdmFyIHByb3BzID0ga2V5c0luKHNvdXJjZSk7XG4gICAgICAgICAgICB2YXIgcHJvcHNJbmRleCA9IC0xO1xuICAgICAgICAgICAgdmFyIHByb3BzTGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuICAgICAgICAgICAgd2hpbGUgKCsrcHJvcHNJbmRleCA8IHByb3BzTGVuZ3RoKSB7XG4gICAgICAgICAgICAgIHZhciBrZXkgPSBwcm9wc1twcm9wc0luZGV4XTtcbiAgICAgICAgICAgICAgdmFyIHZhbHVlID0gb2JqZWN0W2tleV07XG4gICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkMiB8fCBlcSh2YWx1ZSwgb2JqZWN0UHJvdG9ba2V5XSkgJiYgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgb2JqZWN0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGRlZmF1bHRzRGVlcCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgICBhcmdzLnB1c2godW5kZWZpbmVkMiwgY3VzdG9tRGVmYXVsdHNNZXJnZSk7XG4gICAgICAgICAgcmV0dXJuIGFwcGx5KG1lcmdlV2l0aCwgdW5kZWZpbmVkMiwgYXJncyk7XG4gICAgICAgIH0pO1xuICAgICAgICBmdW5jdGlvbiBmaW5kS2V5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gICAgICAgICAgcmV0dXJuIGJhc2VGaW5kS2V5KG9iamVjdCwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgYmFzZUZvck93bik7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZmluZExhc3RLZXkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgICAgICAgICByZXR1cm4gYmFzZUZpbmRLZXkob2JqZWN0LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBiYXNlRm9yT3duUmlnaHQpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGZvckluKG9iamVjdCwgaXRlcmF0ZWUyKSB7XG4gICAgICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZUZvcihvYmplY3QsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlMiwgMyksIGtleXNJbik7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZm9ySW5SaWdodChvYmplY3QsIGl0ZXJhdGVlMikge1xuICAgICAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IGJhc2VGb3JSaWdodChvYmplY3QsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlMiwgMyksIGtleXNJbik7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZm9yT3duKG9iamVjdCwgaXRlcmF0ZWUyKSB7XG4gICAgICAgICAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yT3duKG9iamVjdCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUyLCAzKSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZm9yT3duUmlnaHQob2JqZWN0LCBpdGVyYXRlZTIpIHtcbiAgICAgICAgICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3JPd25SaWdodChvYmplY3QsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlMiwgMykpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGZ1bmN0aW9ucyhvYmplY3QpIHtcbiAgICAgICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBbXSA6IGJhc2VGdW5jdGlvbnMob2JqZWN0LCBrZXlzKG9iamVjdCkpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGZ1bmN0aW9uc0luKG9iamVjdCkge1xuICAgICAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZUZ1bmN0aW9ucyhvYmplY3QsIGtleXNJbihvYmplY3QpKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBnZXQob2JqZWN0LCBwYXRoLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgICB2YXIgcmVzdWx0MiA9IG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkMiA6IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0MiA9PT0gdW5kZWZpbmVkMiA/IGRlZmF1bHRWYWx1ZSA6IHJlc3VsdDI7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gaGFzKG9iamVjdCwgcGF0aCkge1xuICAgICAgICAgIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgYmFzZUhhcyk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gaGFzSW4ob2JqZWN0LCBwYXRoKSB7XG4gICAgICAgICAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBiYXNlSGFzSW4pO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpbnZlcnQgPSBjcmVhdGVJbnZlcnRlcihmdW5jdGlvbihyZXN1bHQyLCB2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgaWYgKHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlLnRvU3RyaW5nICE9IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgdmFsdWUgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0Mlt2YWx1ZV0gPSBrZXk7XG4gICAgICAgIH0sIGNvbnN0YW50KGlkZW50aXR5KSk7XG4gICAgICAgIHZhciBpbnZlcnRCeSA9IGNyZWF0ZUludmVydGVyKGZ1bmN0aW9uKHJlc3VsdDIsIHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUudG9TdHJpbmcgIT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChyZXN1bHQyLCB2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJlc3VsdDJbdmFsdWVdLnB1c2goa2V5KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0Mlt2YWx1ZV0gPSBba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIGdldEl0ZXJhdGVlKTtcbiAgICAgICAgdmFyIGludm9rZSA9IGJhc2VSZXN0KGJhc2VJbnZva2UpO1xuICAgICAgICBmdW5jdGlvbiBrZXlzKG9iamVjdCkge1xuICAgICAgICAgIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QpIDogYmFzZUtleXMob2JqZWN0KTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBrZXlzSW4ob2JqZWN0KSB7XG4gICAgICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCwgdHJ1ZSkgOiBiYXNlS2V5c0luKG9iamVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gbWFwS2V5cyhvYmplY3QsIGl0ZXJhdGVlMikge1xuICAgICAgICAgIHZhciByZXN1bHQyID0ge307XG4gICAgICAgICAgaXRlcmF0ZWUyID0gZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUyLCAzKTtcbiAgICAgICAgICBiYXNlRm9yT3duKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqZWN0Mikge1xuICAgICAgICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdDIsIGl0ZXJhdGVlMih2YWx1ZSwga2V5LCBvYmplY3QyKSwgdmFsdWUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiByZXN1bHQyO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIG1hcFZhbHVlcyhvYmplY3QsIGl0ZXJhdGVlMikge1xuICAgICAgICAgIHZhciByZXN1bHQyID0ge307XG4gICAgICAgICAgaXRlcmF0ZWUyID0gZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUyLCAzKTtcbiAgICAgICAgICBiYXNlRm9yT3duKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqZWN0Mikge1xuICAgICAgICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdDIsIGtleSwgaXRlcmF0ZWUyKHZhbHVlLCBrZXksIG9iamVjdDIpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0MjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbWVyZ2UgPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgpIHtcbiAgICAgICAgICBiYXNlTWVyZ2Uob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBtZXJnZVdpdGggPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgICBiYXNlTWVyZ2Uob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBvbWl0ID0gZmxhdFJlc3QoZnVuY3Rpb24ob2JqZWN0LCBwYXRocykge1xuICAgICAgICAgIHZhciByZXN1bHQyID0ge307XG4gICAgICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0MjtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGlzRGVlcCA9IGZhbHNlO1xuICAgICAgICAgIHBhdGhzID0gYXJyYXlNYXAocGF0aHMsIGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgICAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuICAgICAgICAgICAgaXNEZWVwIHx8IChpc0RlZXAgPSBwYXRoLmxlbmd0aCA+IDEpO1xuICAgICAgICAgICAgcmV0dXJuIHBhdGg7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgY29weU9iamVjdChvYmplY3QsIGdldEFsbEtleXNJbihvYmplY3QpLCByZXN1bHQyKTtcbiAgICAgICAgICBpZiAoaXNEZWVwKSB7XG4gICAgICAgICAgICByZXN1bHQyID0gYmFzZUNsb25lKHJlc3VsdDIsIENMT05FX0RFRVBfRkxBRyB8IENMT05FX0ZMQVRfRkxBRyB8IENMT05FX1NZTUJPTFNfRkxBRywgY3VzdG9tT21pdENsb25lKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGxlbmd0aCA9IHBhdGhzLmxlbmd0aDtcbiAgICAgICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgICAgIGJhc2VVbnNldChyZXN1bHQyLCBwYXRoc1tsZW5ndGhdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDI7XG4gICAgICAgIH0pO1xuICAgICAgICBmdW5jdGlvbiBvbWl0Qnkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgICAgICAgICByZXR1cm4gcGlja0J5KG9iamVjdCwgbmVnYXRlKGdldEl0ZXJhdGVlKHByZWRpY2F0ZSkpKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcGljayA9IGZsYXRSZXN0KGZ1bmN0aW9uKG9iamVjdCwgcGF0aHMpIHtcbiAgICAgICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB7fSA6IGJhc2VQaWNrKG9iamVjdCwgcGF0aHMpO1xuICAgICAgICB9KTtcbiAgICAgICAgZnVuY3Rpb24gcGlja0J5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gICAgICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBwcm9wcyA9IGFycmF5TWFwKGdldEFsbEtleXNJbihvYmplY3QpLCBmdW5jdGlvbihwcm9wKSB7XG4gICAgICAgICAgICByZXR1cm4gW3Byb3BdO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHByZWRpY2F0ZSA9IGdldEl0ZXJhdGVlKHByZWRpY2F0ZSk7XG4gICAgICAgICAgcmV0dXJuIGJhc2VQaWNrQnkob2JqZWN0LCBwcm9wcywgZnVuY3Rpb24odmFsdWUsIHBhdGgpIHtcbiAgICAgICAgICAgIHJldHVybiBwcmVkaWNhdGUodmFsdWUsIHBhdGhbMF0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHJlc3VsdChvYmplY3QsIHBhdGgsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuICAgICAgICAgIHZhciBpbmRleCA9IC0xLCBsZW5ndGggPSBwYXRoLmxlbmd0aDtcbiAgICAgICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICAgICAgbGVuZ3RoID0gMTtcbiAgICAgICAgICAgIG9iamVjdCA9IHVuZGVmaW5lZDI7XG4gICAgICAgICAgfVxuICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZDIgOiBvYmplY3RbdG9LZXkocGF0aFtpbmRleF0pXTtcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkMikge1xuICAgICAgICAgICAgICBpbmRleCA9IGxlbmd0aDtcbiAgICAgICAgICAgICAgdmFsdWUgPSBkZWZhdWx0VmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvYmplY3QgPSBpc0Z1bmN0aW9uKHZhbHVlKSA/IHZhbHVlLmNhbGwob2JqZWN0KSA6IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHNldChvYmplY3QsIHBhdGgsIHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVNldChvYmplY3QsIHBhdGgsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBzZXRXaXRoKG9iamVjdCwgcGF0aCwgdmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gXCJmdW5jdGlvblwiID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDI7XG4gICAgICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVNldChvYmplY3QsIHBhdGgsIHZhbHVlLCBjdXN0b21pemVyKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdG9QYWlycyA9IGNyZWF0ZVRvUGFpcnMoa2V5cyk7XG4gICAgICAgIHZhciB0b1BhaXJzSW4gPSBjcmVhdGVUb1BhaXJzKGtleXNJbik7XG4gICAgICAgIGZ1bmN0aW9uIHRyYW5zZm9ybShvYmplY3QsIGl0ZXJhdGVlMiwgYWNjdW11bGF0b3IpIHtcbiAgICAgICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KG9iamVjdCksIGlzQXJyTGlrZSA9IGlzQXJyIHx8IGlzQnVmZmVyKG9iamVjdCkgfHwgaXNUeXBlZEFycmF5KG9iamVjdCk7XG4gICAgICAgICAgaXRlcmF0ZWUyID0gZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUyLCA0KTtcbiAgICAgICAgICBpZiAoYWNjdW11bGF0b3IgPT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIEN0b3IgPSBvYmplY3QgJiYgb2JqZWN0LmNvbnN0cnVjdG9yO1xuICAgICAgICAgICAgaWYgKGlzQXJyTGlrZSkge1xuICAgICAgICAgICAgICBhY2N1bXVsYXRvciA9IGlzQXJyID8gbmV3IEN0b3IoKSA6IFtdO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc09iamVjdChvYmplY3QpKSB7XG4gICAgICAgICAgICAgIGFjY3VtdWxhdG9yID0gaXNGdW5jdGlvbihDdG9yKSA/IGJhc2VDcmVhdGUoZ2V0UHJvdG90eXBlKG9iamVjdCkpIDoge307XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBhY2N1bXVsYXRvciA9IHt9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAoaXNBcnJMaWtlID8gYXJyYXlFYWNoIDogYmFzZUZvck93bikob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIG9iamVjdDIpIHtcbiAgICAgICAgICAgIHJldHVybiBpdGVyYXRlZTIoYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleCwgb2JqZWN0Mik7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHVuc2V0KG9iamVjdCwgcGF0aCkge1xuICAgICAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHRydWUgOiBiYXNlVW5zZXQob2JqZWN0LCBwYXRoKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiB1cGRhdGUob2JqZWN0LCBwYXRoLCB1cGRhdGVyKSB7XG4gICAgICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVVwZGF0ZShvYmplY3QsIHBhdGgsIGNhc3RGdW5jdGlvbih1cGRhdGVyKSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlV2l0aChvYmplY3QsIHBhdGgsIHVwZGF0ZXIsIGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gXCJmdW5jdGlvblwiID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDI7XG4gICAgICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVVwZGF0ZShvYmplY3QsIHBhdGgsIGNhc3RGdW5jdGlvbih1cGRhdGVyKSwgY3VzdG9taXplcik7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gdmFsdWVzKG9iamVjdCkge1xuICAgICAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZVZhbHVlcyhvYmplY3QsIGtleXMob2JqZWN0KSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gdmFsdWVzSW4ob2JqZWN0KSB7XG4gICAgICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gW10gOiBiYXNlVmFsdWVzKG9iamVjdCwga2V5c0luKG9iamVjdCkpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGNsYW1wKG51bWJlciwgbG93ZXIsIHVwcGVyKSB7XG4gICAgICAgICAgaWYgKHVwcGVyID09PSB1bmRlZmluZWQyKSB7XG4gICAgICAgICAgICB1cHBlciA9IGxvd2VyO1xuICAgICAgICAgICAgbG93ZXIgPSB1bmRlZmluZWQyO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodXBwZXIgIT09IHVuZGVmaW5lZDIpIHtcbiAgICAgICAgICAgIHVwcGVyID0gdG9OdW1iZXIodXBwZXIpO1xuICAgICAgICAgICAgdXBwZXIgPSB1cHBlciA9PT0gdXBwZXIgPyB1cHBlciA6IDA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChsb3dlciAhPT0gdW5kZWZpbmVkMikge1xuICAgICAgICAgICAgbG93ZXIgPSB0b051bWJlcihsb3dlcik7XG4gICAgICAgICAgICBsb3dlciA9IGxvd2VyID09PSBsb3dlciA/IGxvd2VyIDogMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGJhc2VDbGFtcCh0b051bWJlcihudW1iZXIpLCBsb3dlciwgdXBwZXIpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGluUmFuZ2UobnVtYmVyLCBzdGFydCwgZW5kKSB7XG4gICAgICAgICAgc3RhcnQgPSB0b0Zpbml0ZShzdGFydCk7XG4gICAgICAgICAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkMikge1xuICAgICAgICAgICAgZW5kID0gc3RhcnQ7XG4gICAgICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVuZCA9IHRvRmluaXRlKGVuZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG51bWJlciA9IHRvTnVtYmVyKG51bWJlcik7XG4gICAgICAgICAgcmV0dXJuIGJhc2VJblJhbmdlKG51bWJlciwgc3RhcnQsIGVuZCk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gcmFuZG9tKGxvd2VyLCB1cHBlciwgZmxvYXRpbmcpIHtcbiAgICAgICAgICBpZiAoZmxvYXRpbmcgJiYgdHlwZW9mIGZsb2F0aW5nICE9IFwiYm9vbGVhblwiICYmIGlzSXRlcmF0ZWVDYWxsKGxvd2VyLCB1cHBlciwgZmxvYXRpbmcpKSB7XG4gICAgICAgICAgICB1cHBlciA9IGZsb2F0aW5nID0gdW5kZWZpbmVkMjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGZsb2F0aW5nID09PSB1bmRlZmluZWQyKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHVwcGVyID09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgICAgICAgIGZsb2F0aW5nID0gdXBwZXI7XG4gICAgICAgICAgICAgIHVwcGVyID0gdW5kZWZpbmVkMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGxvd2VyID09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgICAgICAgIGZsb2F0aW5nID0gbG93ZXI7XG4gICAgICAgICAgICAgIGxvd2VyID0gdW5kZWZpbmVkMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGxvd2VyID09PSB1bmRlZmluZWQyICYmIHVwcGVyID09PSB1bmRlZmluZWQyKSB7XG4gICAgICAgICAgICBsb3dlciA9IDA7XG4gICAgICAgICAgICB1cHBlciA9IDE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxvd2VyID0gdG9GaW5pdGUobG93ZXIpO1xuICAgICAgICAgICAgaWYgKHVwcGVyID09PSB1bmRlZmluZWQyKSB7XG4gICAgICAgICAgICAgIHVwcGVyID0gbG93ZXI7XG4gICAgICAgICAgICAgIGxvd2VyID0gMDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHVwcGVyID0gdG9GaW5pdGUodXBwZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobG93ZXIgPiB1cHBlcikge1xuICAgICAgICAgICAgdmFyIHRlbXAgPSBsb3dlcjtcbiAgICAgICAgICAgIGxvd2VyID0gdXBwZXI7XG4gICAgICAgICAgICB1cHBlciA9IHRlbXA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChmbG9hdGluZyB8fCBsb3dlciAlIDEgfHwgdXBwZXIgJSAxKSB7XG4gICAgICAgICAgICB2YXIgcmFuZCA9IG5hdGl2ZVJhbmRvbSgpO1xuICAgICAgICAgICAgcmV0dXJuIG5hdGl2ZU1pbihsb3dlciArIHJhbmQgKiAodXBwZXIgLSBsb3dlciArIGZyZWVQYXJzZUZsb2F0KFwiMWUtXCIgKyAoKHJhbmQgKyBcIlwiKS5sZW5ndGggLSAxKSkpLCB1cHBlcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBiYXNlUmFuZG9tKGxvd2VyLCB1cHBlcik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNhbWVsQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0Miwgd29yZCwgaW5kZXgpIHtcbiAgICAgICAgICB3b3JkID0gd29yZC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgIHJldHVybiByZXN1bHQyICsgKGluZGV4ID8gY2FwaXRhbGl6ZSh3b3JkKSA6IHdvcmQpO1xuICAgICAgICB9KTtcbiAgICAgICAgZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHJpbmcpIHtcbiAgICAgICAgICByZXR1cm4gdXBwZXJGaXJzdCh0b1N0cmluZyhzdHJpbmcpLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGRlYnVycihzdHJpbmcpIHtcbiAgICAgICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgICAgIHJldHVybiBzdHJpbmcgJiYgc3RyaW5nLnJlcGxhY2UocmVMYXRpbiwgZGVidXJyTGV0dGVyKS5yZXBsYWNlKHJlQ29tYm9NYXJrLCBcIlwiKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBlbmRzV2l0aChzdHJpbmcsIHRhcmdldCwgcG9zaXRpb24pIHtcbiAgICAgICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgICAgIHRhcmdldCA9IGJhc2VUb1N0cmluZyh0YXJnZXQpO1xuICAgICAgICAgIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICAgICAgICAgIHBvc2l0aW9uID0gcG9zaXRpb24gPT09IHVuZGVmaW5lZDIgPyBsZW5ndGggOiBiYXNlQ2xhbXAodG9JbnRlZ2VyKHBvc2l0aW9uKSwgMCwgbGVuZ3RoKTtcbiAgICAgICAgICB2YXIgZW5kID0gcG9zaXRpb247XG4gICAgICAgICAgcG9zaXRpb24gLT0gdGFyZ2V0Lmxlbmd0aDtcbiAgICAgICAgICByZXR1cm4gcG9zaXRpb24gPj0gMCAmJiBzdHJpbmcuc2xpY2UocG9zaXRpb24sIGVuZCkgPT0gdGFyZ2V0O1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGVzY2FwZShzdHJpbmcpIHtcbiAgICAgICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgICAgIHJldHVybiBzdHJpbmcgJiYgcmVIYXNVbmVzY2FwZWRIdG1sLnRlc3Qoc3RyaW5nKSA/IHN0cmluZy5yZXBsYWNlKHJlVW5lc2NhcGVkSHRtbCwgZXNjYXBlSHRtbENoYXIpIDogc3RyaW5nO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGVzY2FwZVJlZ0V4cChzdHJpbmcpIHtcbiAgICAgICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgICAgIHJldHVybiBzdHJpbmcgJiYgcmVIYXNSZWdFeHBDaGFyLnRlc3Qoc3RyaW5nKSA/IHN0cmluZy5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgXCJcXFxcJCZcIikgOiBzdHJpbmc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGtlYmFiQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0Miwgd29yZCwgaW5kZXgpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0MiArIChpbmRleCA/IFwiLVwiIDogXCJcIikgKyB3b3JkLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgbG93ZXJDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQyLCB3b3JkLCBpbmRleCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQyICsgKGluZGV4ID8gXCIgXCIgOiBcIlwiKSArIHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBsb3dlckZpcnN0ID0gY3JlYXRlQ2FzZUZpcnN0KFwidG9Mb3dlckNhc2VcIik7XG4gICAgICAgIGZ1bmN0aW9uIHBhZChzdHJpbmcsIGxlbmd0aCwgY2hhcnMpIHtcbiAgICAgICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgICAgIGxlbmd0aCA9IHRvSW50ZWdlcihsZW5ndGgpO1xuICAgICAgICAgIHZhciBzdHJMZW5ndGggPSBsZW5ndGggPyBzdHJpbmdTaXplKHN0cmluZykgOiAwO1xuICAgICAgICAgIGlmICghbGVuZ3RoIHx8IHN0ckxlbmd0aCA+PSBsZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBtaWQgPSAobGVuZ3RoIC0gc3RyTGVuZ3RoKSAvIDI7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZVBhZGRpbmcobmF0aXZlRmxvb3IobWlkKSwgY2hhcnMpICsgc3RyaW5nICsgY3JlYXRlUGFkZGluZyhuYXRpdmVDZWlsKG1pZCksIGNoYXJzKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBwYWRFbmQoc3RyaW5nLCBsZW5ndGgsIGNoYXJzKSB7XG4gICAgICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgICAgICBsZW5ndGggPSB0b0ludGVnZXIobGVuZ3RoKTtcbiAgICAgICAgICB2YXIgc3RyTGVuZ3RoID0gbGVuZ3RoID8gc3RyaW5nU2l6ZShzdHJpbmcpIDogMDtcbiAgICAgICAgICByZXR1cm4gbGVuZ3RoICYmIHN0ckxlbmd0aCA8IGxlbmd0aCA/IHN0cmluZyArIGNyZWF0ZVBhZGRpbmcobGVuZ3RoIC0gc3RyTGVuZ3RoLCBjaGFycykgOiBzdHJpbmc7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gcGFkU3RhcnQoc3RyaW5nLCBsZW5ndGgsIGNoYXJzKSB7XG4gICAgICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgICAgICBsZW5ndGggPSB0b0ludGVnZXIobGVuZ3RoKTtcbiAgICAgICAgICB2YXIgc3RyTGVuZ3RoID0gbGVuZ3RoID8gc3RyaW5nU2l6ZShzdHJpbmcpIDogMDtcbiAgICAgICAgICByZXR1cm4gbGVuZ3RoICYmIHN0ckxlbmd0aCA8IGxlbmd0aCA/IGNyZWF0ZVBhZGRpbmcobGVuZ3RoIC0gc3RyTGVuZ3RoLCBjaGFycykgKyBzdHJpbmcgOiBzdHJpbmc7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gcGFyc2VJbnQyKHN0cmluZywgcmFkaXgsIGd1YXJkKSB7XG4gICAgICAgICAgaWYgKGd1YXJkIHx8IHJhZGl4ID09IG51bGwpIHtcbiAgICAgICAgICAgIHJhZGl4ID0gMDtcbiAgICAgICAgICB9IGVsc2UgaWYgKHJhZGl4KSB7XG4gICAgICAgICAgICByYWRpeCA9ICtyYWRpeDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG5hdGl2ZVBhcnNlSW50KHRvU3RyaW5nKHN0cmluZykucmVwbGFjZShyZVRyaW1TdGFydCwgXCJcIiksIHJhZGl4IHx8IDApO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHJlcGVhdChzdHJpbmcsIG4sIGd1YXJkKSB7XG4gICAgICAgICAgaWYgKGd1YXJkID8gaXNJdGVyYXRlZUNhbGwoc3RyaW5nLCBuLCBndWFyZCkgOiBuID09PSB1bmRlZmluZWQyKSB7XG4gICAgICAgICAgICBuID0gMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGJhc2VSZXBlYXQodG9TdHJpbmcoc3RyaW5nKSwgbik7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gcmVwbGFjZSgpIHtcbiAgICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cywgc3RyaW5nID0gdG9TdHJpbmcoYXJnc1swXSk7XG4gICAgICAgICAgcmV0dXJuIGFyZ3MubGVuZ3RoIDwgMyA/IHN0cmluZyA6IHN0cmluZy5yZXBsYWNlKGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzbmFrZUNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdDIsIHdvcmQsIGluZGV4KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDIgKyAoaW5kZXggPyBcIl9cIiA6IFwiXCIpICsgd29yZC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgZnVuY3Rpb24gc3BsaXQoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICAgICAgaWYgKGxpbWl0ICYmIHR5cGVvZiBsaW1pdCAhPSBcIm51bWJlclwiICYmIGlzSXRlcmF0ZWVDYWxsKHN0cmluZywgc2VwYXJhdG9yLCBsaW1pdCkpIHtcbiAgICAgICAgICAgIHNlcGFyYXRvciA9IGxpbWl0ID0gdW5kZWZpbmVkMjtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGltaXQgPSBsaW1pdCA9PT0gdW5kZWZpbmVkMiA/IE1BWF9BUlJBWV9MRU5HVEggOiBsaW1pdCA+Pj4gMDtcbiAgICAgICAgICBpZiAoIWxpbWl0KSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgfVxuICAgICAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICAgICAgaWYgKHN0cmluZyAmJiAodHlwZW9mIHNlcGFyYXRvciA9PSBcInN0cmluZ1wiIHx8IHNlcGFyYXRvciAhPSBudWxsICYmICFpc1JlZ0V4cChzZXBhcmF0b3IpKSkge1xuICAgICAgICAgICAgc2VwYXJhdG9yID0gYmFzZVRvU3RyaW5nKHNlcGFyYXRvcik7XG4gICAgICAgICAgICBpZiAoIXNlcGFyYXRvciAmJiBoYXNVbmljb2RlKHN0cmluZykpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGNhc3RTbGljZShzdHJpbmdUb0FycmF5KHN0cmluZyksIDAsIGxpbWl0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHN0cmluZy5zcGxpdChzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3RhcnRDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQyLCB3b3JkLCBpbmRleCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQyICsgKGluZGV4ID8gXCIgXCIgOiBcIlwiKSArIHVwcGVyRmlyc3Qod29yZCk7XG4gICAgICAgIH0pO1xuICAgICAgICBmdW5jdGlvbiBzdGFydHNXaXRoKHN0cmluZywgdGFyZ2V0LCBwb3NpdGlvbikge1xuICAgICAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICAgICAgcG9zaXRpb24gPSBwb3NpdGlvbiA9PSBudWxsID8gMCA6IGJhc2VDbGFtcCh0b0ludGVnZXIocG9zaXRpb24pLCAwLCBzdHJpbmcubGVuZ3RoKTtcbiAgICAgICAgICB0YXJnZXQgPSBiYXNlVG9TdHJpbmcodGFyZ2V0KTtcbiAgICAgICAgICByZXR1cm4gc3RyaW5nLnNsaWNlKHBvc2l0aW9uLCBwb3NpdGlvbiArIHRhcmdldC5sZW5ndGgpID09IHRhcmdldDtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiB0ZW1wbGF0ZShzdHJpbmcsIG9wdGlvbnMsIGd1YXJkKSB7XG4gICAgICAgICAgdmFyIHNldHRpbmdzID0gbG9kYXNoLnRlbXBsYXRlU2V0dGluZ3M7XG4gICAgICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHN0cmluZywgb3B0aW9ucywgZ3VhcmQpKSB7XG4gICAgICAgICAgICBvcHRpb25zID0gdW5kZWZpbmVkMjtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgICAgICBvcHRpb25zID0gYXNzaWduSW5XaXRoKHt9LCBvcHRpb25zLCBzZXR0aW5ncywgY3VzdG9tRGVmYXVsdHNBc3NpZ25Jbik7XG4gICAgICAgICAgdmFyIGltcG9ydHMgPSBhc3NpZ25JbldpdGgoe30sIG9wdGlvbnMuaW1wb3J0cywgc2V0dGluZ3MuaW1wb3J0cywgY3VzdG9tRGVmYXVsdHNBc3NpZ25JbiksIGltcG9ydHNLZXlzID0ga2V5cyhpbXBvcnRzKSwgaW1wb3J0c1ZhbHVlcyA9IGJhc2VWYWx1ZXMoaW1wb3J0cywgaW1wb3J0c0tleXMpO1xuICAgICAgICAgIHZhciBpc0VzY2FwaW5nLCBpc0V2YWx1YXRpbmcsIGluZGV4ID0gMCwgaW50ZXJwb2xhdGUgPSBvcHRpb25zLmludGVycG9sYXRlIHx8IHJlTm9NYXRjaCwgc291cmNlID0gXCJfX3AgKz0gJ1wiO1xuICAgICAgICAgIHZhciByZURlbGltaXRlcnMgPSBSZWdFeHAyKFxuICAgICAgICAgICAgKG9wdGlvbnMuZXNjYXBlIHx8IHJlTm9NYXRjaCkuc291cmNlICsgXCJ8XCIgKyBpbnRlcnBvbGF0ZS5zb3VyY2UgKyBcInxcIiArIChpbnRlcnBvbGF0ZSA9PT0gcmVJbnRlcnBvbGF0ZSA/IHJlRXNUZW1wbGF0ZSA6IHJlTm9NYXRjaCkuc291cmNlICsgXCJ8XCIgKyAob3B0aW9ucy5ldmFsdWF0ZSB8fCByZU5vTWF0Y2gpLnNvdXJjZSArIFwifCRcIixcbiAgICAgICAgICAgIFwiZ1wiXG4gICAgICAgICAgKTtcbiAgICAgICAgICB2YXIgc291cmNlVVJMID0gXCIvLyMgc291cmNlVVJMPVwiICsgKGhhc093blByb3BlcnR5LmNhbGwob3B0aW9ucywgXCJzb3VyY2VVUkxcIikgPyAob3B0aW9ucy5zb3VyY2VVUkwgKyBcIlwiKS5yZXBsYWNlKC9cXHMvZywgXCIgXCIpIDogXCJsb2Rhc2gudGVtcGxhdGVTb3VyY2VzW1wiICsgKyt0ZW1wbGF0ZUNvdW50ZXIgKyBcIl1cIikgKyBcIlxcblwiO1xuICAgICAgICAgIHN0cmluZy5yZXBsYWNlKHJlRGVsaW1pdGVycywgZnVuY3Rpb24obWF0Y2gsIGVzY2FwZVZhbHVlLCBpbnRlcnBvbGF0ZVZhbHVlLCBlc1RlbXBsYXRlVmFsdWUsIGV2YWx1YXRlVmFsdWUsIG9mZnNldCkge1xuICAgICAgICAgICAgaW50ZXJwb2xhdGVWYWx1ZSB8fCAoaW50ZXJwb2xhdGVWYWx1ZSA9IGVzVGVtcGxhdGVWYWx1ZSk7XG4gICAgICAgICAgICBzb3VyY2UgKz0gc3RyaW5nLnNsaWNlKGluZGV4LCBvZmZzZXQpLnJlcGxhY2UocmVVbmVzY2FwZWRTdHJpbmcsIGVzY2FwZVN0cmluZ0NoYXIpO1xuICAgICAgICAgICAgaWYgKGVzY2FwZVZhbHVlKSB7XG4gICAgICAgICAgICAgIGlzRXNjYXBpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICBzb3VyY2UgKz0gXCInICtcXG5fX2UoXCIgKyBlc2NhcGVWYWx1ZSArIFwiKSArXFxuJ1wiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGV2YWx1YXRlVmFsdWUpIHtcbiAgICAgICAgICAgICAgaXNFdmFsdWF0aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgc291cmNlICs9IFwiJztcXG5cIiArIGV2YWx1YXRlVmFsdWUgKyBcIjtcXG5fX3AgKz0gJ1wiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGludGVycG9sYXRlVmFsdWUpIHtcbiAgICAgICAgICAgICAgc291cmNlICs9IFwiJyArXFxuKChfX3QgPSAoXCIgKyBpbnRlcnBvbGF0ZVZhbHVlICsgXCIpKSA9PSBudWxsID8gJycgOiBfX3QpICtcXG4nXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpbmRleCA9IG9mZnNldCArIG1hdGNoLmxlbmd0aDtcbiAgICAgICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzb3VyY2UgKz0gXCInO1xcblwiO1xuICAgICAgICAgIHZhciB2YXJpYWJsZSA9IGhhc093blByb3BlcnR5LmNhbGwob3B0aW9ucywgXCJ2YXJpYWJsZVwiKSAmJiBvcHRpb25zLnZhcmlhYmxlO1xuICAgICAgICAgIGlmICghdmFyaWFibGUpIHtcbiAgICAgICAgICAgIHNvdXJjZSA9IFwid2l0aCAob2JqKSB7XFxuXCIgKyBzb3VyY2UgKyBcIlxcbn1cXG5cIjtcbiAgICAgICAgICB9IGVsc2UgaWYgKHJlRm9yYmlkZGVuSWRlbnRpZmllckNoYXJzLnRlc3QodmFyaWFibGUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IyKElOVkFMSURfVEVNUExfVkFSX0VSUk9SX1RFWFQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzb3VyY2UgPSAoaXNFdmFsdWF0aW5nID8gc291cmNlLnJlcGxhY2UocmVFbXB0eVN0cmluZ0xlYWRpbmcsIFwiXCIpIDogc291cmNlKS5yZXBsYWNlKHJlRW1wdHlTdHJpbmdNaWRkbGUsIFwiJDFcIikucmVwbGFjZShyZUVtcHR5U3RyaW5nVHJhaWxpbmcsIFwiJDE7XCIpO1xuICAgICAgICAgIHNvdXJjZSA9IFwiZnVuY3Rpb24oXCIgKyAodmFyaWFibGUgfHwgXCJvYmpcIikgKyBcIikge1xcblwiICsgKHZhcmlhYmxlID8gXCJcIiA6IFwib2JqIHx8IChvYmogPSB7fSk7XFxuXCIpICsgXCJ2YXIgX190LCBfX3AgPSAnJ1wiICsgKGlzRXNjYXBpbmcgPyBcIiwgX19lID0gXy5lc2NhcGVcIiA6IFwiXCIpICsgKGlzRXZhbHVhdGluZyA/IFwiLCBfX2ogPSBBcnJheS5wcm90b3R5cGUuam9pbjtcXG5mdW5jdGlvbiBwcmludCgpIHsgX19wICs9IF9fai5jYWxsKGFyZ3VtZW50cywgJycpIH1cXG5cIiA6IFwiO1xcblwiKSArIHNvdXJjZSArIFwicmV0dXJuIF9fcFxcbn1cIjtcbiAgICAgICAgICB2YXIgcmVzdWx0MiA9IGF0dGVtcHQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gRnVuY3Rpb24yKGltcG9ydHNLZXlzLCBzb3VyY2VVUkwgKyBcInJldHVybiBcIiArIHNvdXJjZSkuYXBwbHkodW5kZWZpbmVkMiwgaW1wb3J0c1ZhbHVlcyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmVzdWx0Mi5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgICAgaWYgKGlzRXJyb3IocmVzdWx0MikpIHtcbiAgICAgICAgICAgIHRocm93IHJlc3VsdDI7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXN1bHQyO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHRvTG93ZXIodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gdG9TdHJpbmcodmFsdWUpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gdG9VcHBlcih2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiB0b1N0cmluZyh2YWx1ZSkudG9VcHBlckNhc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiB0cmltKHN0cmluZywgY2hhcnMsIGd1YXJkKSB7XG4gICAgICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgICAgICBpZiAoc3RyaW5nICYmIChndWFyZCB8fCBjaGFycyA9PT0gdW5kZWZpbmVkMikpIHtcbiAgICAgICAgICAgIHJldHVybiBiYXNlVHJpbShzdHJpbmcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIXN0cmluZyB8fCAhKGNoYXJzID0gYmFzZVRvU3RyaW5nKGNoYXJzKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBzdHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShzdHJpbmcpLCBjaHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShjaGFycyksIHN0YXJ0ID0gY2hhcnNTdGFydEluZGV4KHN0clN5bWJvbHMsIGNoclN5bWJvbHMpLCBlbmQgPSBjaGFyc0VuZEluZGV4KHN0clN5bWJvbHMsIGNoclN5bWJvbHMpICsgMTtcbiAgICAgICAgICByZXR1cm4gY2FzdFNsaWNlKHN0clN5bWJvbHMsIHN0YXJ0LCBlbmQpLmpvaW4oXCJcIik7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gdHJpbUVuZChzdHJpbmcsIGNoYXJzLCBndWFyZCkge1xuICAgICAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICAgICAgaWYgKHN0cmluZyAmJiAoZ3VhcmQgfHwgY2hhcnMgPT09IHVuZGVmaW5lZDIpKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnNsaWNlKDAsIHRyaW1tZWRFbmRJbmRleChzdHJpbmcpICsgMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghc3RyaW5nIHx8ICEoY2hhcnMgPSBiYXNlVG9TdHJpbmcoY2hhcnMpKSkge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHN0clN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KHN0cmluZyksIGVuZCA9IGNoYXJzRW5kSW5kZXgoc3RyU3ltYm9scywgc3RyaW5nVG9BcnJheShjaGFycykpICsgMTtcbiAgICAgICAgICByZXR1cm4gY2FzdFNsaWNlKHN0clN5bWJvbHMsIDAsIGVuZCkuam9pbihcIlwiKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiB0cmltU3RhcnQoc3RyaW5nLCBjaGFycywgZ3VhcmQpIHtcbiAgICAgICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgICAgIGlmIChzdHJpbmcgJiYgKGd1YXJkIHx8IGNoYXJzID09PSB1bmRlZmluZWQyKSkge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKHJlVHJpbVN0YXJ0LCBcIlwiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFzdHJpbmcgfHwgIShjaGFycyA9IGJhc2VUb1N0cmluZyhjaGFycykpKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgc3RyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoc3RyaW5nKSwgc3RhcnQgPSBjaGFyc1N0YXJ0SW5kZXgoc3RyU3ltYm9scywgc3RyaW5nVG9BcnJheShjaGFycykpO1xuICAgICAgICAgIHJldHVybiBjYXN0U2xpY2Uoc3RyU3ltYm9scywgc3RhcnQpLmpvaW4oXCJcIik7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gdHJ1bmNhdGUoc3RyaW5nLCBvcHRpb25zKSB7XG4gICAgICAgICAgdmFyIGxlbmd0aCA9IERFRkFVTFRfVFJVTkNfTEVOR1RILCBvbWlzc2lvbiA9IERFRkFVTFRfVFJVTkNfT01JU1NJT047XG4gICAgICAgICAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgICAgICAgICB2YXIgc2VwYXJhdG9yID0gXCJzZXBhcmF0b3JcIiBpbiBvcHRpb25zID8gb3B0aW9ucy5zZXBhcmF0b3IgOiBzZXBhcmF0b3I7XG4gICAgICAgICAgICBsZW5ndGggPSBcImxlbmd0aFwiIGluIG9wdGlvbnMgPyB0b0ludGVnZXIob3B0aW9ucy5sZW5ndGgpIDogbGVuZ3RoO1xuICAgICAgICAgICAgb21pc3Npb24gPSBcIm9taXNzaW9uXCIgaW4gb3B0aW9ucyA/IGJhc2VUb1N0cmluZyhvcHRpb25zLm9taXNzaW9uKSA6IG9taXNzaW9uO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgICAgIHZhciBzdHJMZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICAgICAgICAgIGlmIChoYXNVbmljb2RlKHN0cmluZykpIHtcbiAgICAgICAgICAgIHZhciBzdHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShzdHJpbmcpO1xuICAgICAgICAgICAgc3RyTGVuZ3RoID0gc3RyU3ltYm9scy5sZW5ndGg7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChsZW5ndGggPj0gc3RyTGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgZW5kID0gbGVuZ3RoIC0gc3RyaW5nU2l6ZShvbWlzc2lvbik7XG4gICAgICAgICAgaWYgKGVuZCA8IDEpIHtcbiAgICAgICAgICAgIHJldHVybiBvbWlzc2lvbjtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHJlc3VsdDIgPSBzdHJTeW1ib2xzID8gY2FzdFNsaWNlKHN0clN5bWJvbHMsIDAsIGVuZCkuam9pbihcIlwiKSA6IHN0cmluZy5zbGljZSgwLCBlbmQpO1xuICAgICAgICAgIGlmIChzZXBhcmF0b3IgPT09IHVuZGVmaW5lZDIpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQyICsgb21pc3Npb247XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzdHJTeW1ib2xzKSB7XG4gICAgICAgICAgICBlbmQgKz0gcmVzdWx0Mi5sZW5ndGggLSBlbmQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpc1JlZ0V4cChzZXBhcmF0b3IpKSB7XG4gICAgICAgICAgICBpZiAoc3RyaW5nLnNsaWNlKGVuZCkuc2VhcmNoKHNlcGFyYXRvcikpIHtcbiAgICAgICAgICAgICAgdmFyIG1hdGNoLCBzdWJzdHJpbmcgPSByZXN1bHQyO1xuICAgICAgICAgICAgICBpZiAoIXNlcGFyYXRvci5nbG9iYWwpIHtcbiAgICAgICAgICAgICAgICBzZXBhcmF0b3IgPSBSZWdFeHAyKHNlcGFyYXRvci5zb3VyY2UsIHRvU3RyaW5nKHJlRmxhZ3MuZXhlYyhzZXBhcmF0b3IpKSArIFwiZ1wiKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBzZXBhcmF0b3IubGFzdEluZGV4ID0gMDtcbiAgICAgICAgICAgICAgd2hpbGUgKG1hdGNoID0gc2VwYXJhdG9yLmV4ZWMoc3Vic3RyaW5nKSkge1xuICAgICAgICAgICAgICAgIHZhciBuZXdFbmQgPSBtYXRjaC5pbmRleDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXN1bHQyID0gcmVzdWx0Mi5zbGljZSgwLCBuZXdFbmQgPT09IHVuZGVmaW5lZDIgPyBlbmQgOiBuZXdFbmQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoc3RyaW5nLmluZGV4T2YoYmFzZVRvU3RyaW5nKHNlcGFyYXRvciksIGVuZCkgIT0gZW5kKSB7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSByZXN1bHQyLmxhc3RJbmRleE9mKHNlcGFyYXRvcik7XG4gICAgICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgICAgICByZXN1bHQyID0gcmVzdWx0Mi5zbGljZSgwLCBpbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXN1bHQyICsgb21pc3Npb247XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gdW5lc2NhcGUoc3RyaW5nKSB7XG4gICAgICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgICAgICByZXR1cm4gc3RyaW5nICYmIHJlSGFzRXNjYXBlZEh0bWwudGVzdChzdHJpbmcpID8gc3RyaW5nLnJlcGxhY2UocmVFc2NhcGVkSHRtbCwgdW5lc2NhcGVIdG1sQ2hhcikgOiBzdHJpbmc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHVwcGVyQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0Miwgd29yZCwgaW5kZXgpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0MiArIChpbmRleCA/IFwiIFwiIDogXCJcIikgKyB3b3JkLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgdXBwZXJGaXJzdCA9IGNyZWF0ZUNhc2VGaXJzdChcInRvVXBwZXJDYXNlXCIpO1xuICAgICAgICBmdW5jdGlvbiB3b3JkcyhzdHJpbmcsIHBhdHRlcm4sIGd1YXJkKSB7XG4gICAgICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgICAgICBwYXR0ZXJuID0gZ3VhcmQgPyB1bmRlZmluZWQyIDogcGF0dGVybjtcbiAgICAgICAgICBpZiAocGF0dGVybiA9PT0gdW5kZWZpbmVkMikge1xuICAgICAgICAgICAgcmV0dXJuIGhhc1VuaWNvZGVXb3JkKHN0cmluZykgPyB1bmljb2RlV29yZHMoc3RyaW5nKSA6IGFzY2lpV29yZHMoc3RyaW5nKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHN0cmluZy5tYXRjaChwYXR0ZXJuKSB8fCBbXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYXR0ZW1wdCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIGFyZ3MpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHVuZGVmaW5lZDIsIGFyZ3MpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBpc0Vycm9yKGUpID8gZSA6IG5ldyBFcnJvcjIoZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGJpbmRBbGwgPSBmbGF0UmVzdChmdW5jdGlvbihvYmplY3QsIG1ldGhvZE5hbWVzKSB7XG4gICAgICAgICAgYXJyYXlFYWNoKG1ldGhvZE5hbWVzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICAgIGtleSA9IHRvS2V5KGtleSk7XG4gICAgICAgICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIGJpbmQob2JqZWN0W2tleV0sIG9iamVjdCkpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICAgIH0pO1xuICAgICAgICBmdW5jdGlvbiBjb25kKHBhaXJzKSB7XG4gICAgICAgICAgdmFyIGxlbmd0aCA9IHBhaXJzID09IG51bGwgPyAwIDogcGFpcnMubGVuZ3RoLCB0b0l0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoKTtcbiAgICAgICAgICBwYWlycyA9ICFsZW5ndGggPyBbXSA6IGFycmF5TWFwKHBhaXJzLCBmdW5jdGlvbihwYWlyKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHBhaXJbMV0gIT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IyKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gW3RvSXRlcmF0ZWUocGFpclswXSksIHBhaXJbMV1dO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICAgIHZhciBwYWlyID0gcGFpcnNbaW5kZXhdO1xuICAgICAgICAgICAgICBpZiAoYXBwbHkocGFpclswXSwgdGhpcywgYXJncykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXBwbHkocGFpclsxXSwgdGhpcywgYXJncyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBjb25mb3Jtcyhzb3VyY2UpIHtcbiAgICAgICAgICByZXR1cm4gYmFzZUNvbmZvcm1zKGJhc2VDbG9uZShzb3VyY2UsIENMT05FX0RFRVBfRkxBRykpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGNvbnN0YW50KHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZGVmYXVsdFRvKHZhbHVlLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUgPyBkZWZhdWx0VmFsdWUgOiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZmxvdyA9IGNyZWF0ZUZsb3coKTtcbiAgICAgICAgdmFyIGZsb3dSaWdodCA9IGNyZWF0ZUZsb3codHJ1ZSk7XG4gICAgICAgIGZ1bmN0aW9uIGlkZW50aXR5KHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGl0ZXJhdGVlKGZ1bmMpIHtcbiAgICAgICAgICByZXR1cm4gYmFzZUl0ZXJhdGVlKHR5cGVvZiBmdW5jID09IFwiZnVuY3Rpb25cIiA/IGZ1bmMgOiBiYXNlQ2xvbmUoZnVuYywgQ0xPTkVfREVFUF9GTEFHKSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gbWF0Y2hlcyhzb3VyY2UpIHtcbiAgICAgICAgICByZXR1cm4gYmFzZU1hdGNoZXMoYmFzZUNsb25lKHNvdXJjZSwgQ0xPTkVfREVFUF9GTEFHKSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gbWF0Y2hlc1Byb3BlcnR5KHBhdGgsIHNyY1ZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGJhc2VNYXRjaGVzUHJvcGVydHkocGF0aCwgYmFzZUNsb25lKHNyY1ZhbHVlLCBDTE9ORV9ERUVQX0ZMQUcpKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbWV0aG9kID0gYmFzZVJlc3QoZnVuY3Rpb24ocGF0aCwgYXJncykge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgICAgIHJldHVybiBiYXNlSW52b2tlKG9iamVjdCwgcGF0aCwgYXJncyk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBtZXRob2RPZiA9IGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwgYXJncykge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbihwYXRoKSB7XG4gICAgICAgICAgICByZXR1cm4gYmFzZUludm9rZShvYmplY3QsIHBhdGgsIGFyZ3MpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICBmdW5jdGlvbiBtaXhpbihvYmplY3QsIHNvdXJjZSwgb3B0aW9ucykge1xuICAgICAgICAgIHZhciBwcm9wcyA9IGtleXMoc291cmNlKSwgbWV0aG9kTmFtZXMgPSBiYXNlRnVuY3Rpb25zKHNvdXJjZSwgcHJvcHMpO1xuICAgICAgICAgIGlmIChvcHRpb25zID09IG51bGwgJiYgIShpc09iamVjdChzb3VyY2UpICYmIChtZXRob2ROYW1lcy5sZW5ndGggfHwgIXByb3BzLmxlbmd0aCkpKSB7XG4gICAgICAgICAgICBvcHRpb25zID0gc291cmNlO1xuICAgICAgICAgICAgc291cmNlID0gb2JqZWN0O1xuICAgICAgICAgICAgb2JqZWN0ID0gdGhpcztcbiAgICAgICAgICAgIG1ldGhvZE5hbWVzID0gYmFzZUZ1bmN0aW9ucyhzb3VyY2UsIGtleXMoc291cmNlKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBjaGFpbjIgPSAhKGlzT2JqZWN0KG9wdGlvbnMpICYmIFwiY2hhaW5cIiBpbiBvcHRpb25zKSB8fCAhIW9wdGlvbnMuY2hhaW4sIGlzRnVuYyA9IGlzRnVuY3Rpb24ob2JqZWN0KTtcbiAgICAgICAgICBhcnJheUVhY2gobWV0aG9kTmFtZXMsIGZ1bmN0aW9uKG1ldGhvZE5hbWUpIHtcbiAgICAgICAgICAgIHZhciBmdW5jID0gc291cmNlW21ldGhvZE5hbWVdO1xuICAgICAgICAgICAgb2JqZWN0W21ldGhvZE5hbWVdID0gZnVuYztcbiAgICAgICAgICAgIGlmIChpc0Z1bmMpIHtcbiAgICAgICAgICAgICAgb2JqZWN0LnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBjaGFpbkFsbCA9IHRoaXMuX19jaGFpbl9fO1xuICAgICAgICAgICAgICAgIGlmIChjaGFpbjIgfHwgY2hhaW5BbGwpIHtcbiAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQyID0gb2JqZWN0KHRoaXMuX193cmFwcGVkX18pLCBhY3Rpb25zID0gcmVzdWx0Mi5fX2FjdGlvbnNfXyA9IGNvcHlBcnJheSh0aGlzLl9fYWN0aW9uc19fKTtcbiAgICAgICAgICAgICAgICAgIGFjdGlvbnMucHVzaCh7IFwiZnVuY1wiOiBmdW5jLCBcImFyZ3NcIjogYXJndW1lbnRzLCBcInRoaXNBcmdcIjogb2JqZWN0IH0pO1xuICAgICAgICAgICAgICAgICAgcmVzdWx0Mi5fX2NoYWluX18gPSBjaGFpbkFsbDtcbiAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseShvYmplY3QsIGFycmF5UHVzaChbdGhpcy52YWx1ZSgpXSwgYXJndW1lbnRzKSk7XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBub0NvbmZsaWN0KCkge1xuICAgICAgICAgIGlmIChyb290Ll8gPT09IHRoaXMpIHtcbiAgICAgICAgICAgIHJvb3QuXyA9IG9sZERhc2g7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIG5vb3AoKSB7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gbnRoQXJnKG4pIHtcbiAgICAgICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgICAgICByZXR1cm4gYmFzZU50aChhcmdzLCBuKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgb3ZlciA9IGNyZWF0ZU92ZXIoYXJyYXlNYXApO1xuICAgICAgICB2YXIgb3ZlckV2ZXJ5ID0gY3JlYXRlT3ZlcihhcnJheUV2ZXJ5KTtcbiAgICAgICAgdmFyIG92ZXJTb21lID0gY3JlYXRlT3ZlcihhcnJheVNvbWUpO1xuICAgICAgICBmdW5jdGlvbiBwcm9wZXJ0eShwYXRoKSB7XG4gICAgICAgICAgcmV0dXJuIGlzS2V5KHBhdGgpID8gYmFzZVByb3BlcnR5KHRvS2V5KHBhdGgpKSA6IGJhc2VQcm9wZXJ0eURlZXAocGF0aCk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gcHJvcGVydHlPZihvYmplY3QpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24ocGF0aCkge1xuICAgICAgICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkMiA6IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHZhciByYW5nZSA9IGNyZWF0ZVJhbmdlKCk7XG4gICAgICAgIHZhciByYW5nZVJpZ2h0ID0gY3JlYXRlUmFuZ2UodHJ1ZSk7XG4gICAgICAgIGZ1bmN0aW9uIHN0dWJBcnJheSgpIHtcbiAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gc3R1YkZhbHNlKCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBzdHViT2JqZWN0KCkge1xuICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBzdHViU3RyaW5nKCkge1xuICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHN0dWJUcnVlKCkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHRpbWVzKG4sIGl0ZXJhdGVlMikge1xuICAgICAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICAgICAgaWYgKG4gPCAxIHx8IG4gPiBNQVhfU0FGRV9JTlRFR0VSKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBpbmRleCA9IE1BWF9BUlJBWV9MRU5HVEgsIGxlbmd0aCA9IG5hdGl2ZU1pbihuLCBNQVhfQVJSQVlfTEVOR1RIKTtcbiAgICAgICAgICBpdGVyYXRlZTIgPSBnZXRJdGVyYXRlZShpdGVyYXRlZTIpO1xuICAgICAgICAgIG4gLT0gTUFYX0FSUkFZX0xFTkdUSDtcbiAgICAgICAgICB2YXIgcmVzdWx0MiA9IGJhc2VUaW1lcyhsZW5ndGgsIGl0ZXJhdGVlMik7XG4gICAgICAgICAgd2hpbGUgKCsraW5kZXggPCBuKSB7XG4gICAgICAgICAgICBpdGVyYXRlZTIoaW5kZXgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0MjtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiB0b1BhdGgodmFsdWUpIHtcbiAgICAgICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBhcnJheU1hcCh2YWx1ZSwgdG9LZXkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gaXNTeW1ib2wodmFsdWUpID8gW3ZhbHVlXSA6IGNvcHlBcnJheShzdHJpbmdUb1BhdGgodG9TdHJpbmcodmFsdWUpKSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gdW5pcXVlSWQocHJlZml4KSB7XG4gICAgICAgICAgdmFyIGlkID0gKytpZENvdW50ZXI7XG4gICAgICAgICAgcmV0dXJuIHRvU3RyaW5nKHByZWZpeCkgKyBpZDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYWRkID0gY3JlYXRlTWF0aE9wZXJhdGlvbihmdW5jdGlvbihhdWdlbmQsIGFkZGVuZCkge1xuICAgICAgICAgIHJldHVybiBhdWdlbmQgKyBhZGRlbmQ7XG4gICAgICAgIH0sIDApO1xuICAgICAgICB2YXIgY2VpbCA9IGNyZWF0ZVJvdW5kKFwiY2VpbFwiKTtcbiAgICAgICAgdmFyIGRpdmlkZSA9IGNyZWF0ZU1hdGhPcGVyYXRpb24oZnVuY3Rpb24oZGl2aWRlbmQsIGRpdmlzb3IpIHtcbiAgICAgICAgICByZXR1cm4gZGl2aWRlbmQgLyBkaXZpc29yO1xuICAgICAgICB9LCAxKTtcbiAgICAgICAgdmFyIGZsb29yID0gY3JlYXRlUm91bmQoXCJmbG9vclwiKTtcbiAgICAgICAgZnVuY3Rpb24gbWF4KGFycmF5KSB7XG4gICAgICAgICAgcmV0dXJuIGFycmF5ICYmIGFycmF5Lmxlbmd0aCA/IGJhc2VFeHRyZW11bShhcnJheSwgaWRlbnRpdHksIGJhc2VHdCkgOiB1bmRlZmluZWQyO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIG1heEJ5KGFycmF5LCBpdGVyYXRlZTIpIHtcbiAgICAgICAgICByZXR1cm4gYXJyYXkgJiYgYXJyYXkubGVuZ3RoID8gYmFzZUV4dHJlbXVtKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZTIsIDIpLCBiYXNlR3QpIDogdW5kZWZpbmVkMjtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBtZWFuKGFycmF5KSB7XG4gICAgICAgICAgcmV0dXJuIGJhc2VNZWFuKGFycmF5LCBpZGVudGl0eSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gbWVhbkJ5KGFycmF5LCBpdGVyYXRlZTIpIHtcbiAgICAgICAgICByZXR1cm4gYmFzZU1lYW4oYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlMiwgMikpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIG1pbihhcnJheSkge1xuICAgICAgICAgIHJldHVybiBhcnJheSAmJiBhcnJheS5sZW5ndGggPyBiYXNlRXh0cmVtdW0oYXJyYXksIGlkZW50aXR5LCBiYXNlTHQpIDogdW5kZWZpbmVkMjtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBtaW5CeShhcnJheSwgaXRlcmF0ZWUyKSB7XG4gICAgICAgICAgcmV0dXJuIGFycmF5ICYmIGFycmF5Lmxlbmd0aCA/IGJhc2VFeHRyZW11bShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUyLCAyKSwgYmFzZUx0KSA6IHVuZGVmaW5lZDI7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG11bHRpcGx5ID0gY3JlYXRlTWF0aE9wZXJhdGlvbihmdW5jdGlvbihtdWx0aXBsaWVyLCBtdWx0aXBsaWNhbmQpIHtcbiAgICAgICAgICByZXR1cm4gbXVsdGlwbGllciAqIG11bHRpcGxpY2FuZDtcbiAgICAgICAgfSwgMSk7XG4gICAgICAgIHZhciByb3VuZCA9IGNyZWF0ZVJvdW5kKFwicm91bmRcIik7XG4gICAgICAgIHZhciBzdWJ0cmFjdCA9IGNyZWF0ZU1hdGhPcGVyYXRpb24oZnVuY3Rpb24obWludWVuZCwgc3VidHJhaGVuZCkge1xuICAgICAgICAgIHJldHVybiBtaW51ZW5kIC0gc3VidHJhaGVuZDtcbiAgICAgICAgfSwgMCk7XG4gICAgICAgIGZ1bmN0aW9uIHN1bShhcnJheSkge1xuICAgICAgICAgIHJldHVybiBhcnJheSAmJiBhcnJheS5sZW5ndGggPyBiYXNlU3VtKGFycmF5LCBpZGVudGl0eSkgOiAwO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHN1bUJ5KGFycmF5LCBpdGVyYXRlZTIpIHtcbiAgICAgICAgICByZXR1cm4gYXJyYXkgJiYgYXJyYXkubGVuZ3RoID8gYmFzZVN1bShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUyLCAyKSkgOiAwO1xuICAgICAgICB9XG4gICAgICAgIGxvZGFzaC5hZnRlciA9IGFmdGVyO1xuICAgICAgICBsb2Rhc2guYXJ5ID0gYXJ5O1xuICAgICAgICBsb2Rhc2guYXNzaWduID0gYXNzaWduO1xuICAgICAgICBsb2Rhc2guYXNzaWduSW4gPSBhc3NpZ25JbjtcbiAgICAgICAgbG9kYXNoLmFzc2lnbkluV2l0aCA9IGFzc2lnbkluV2l0aDtcbiAgICAgICAgbG9kYXNoLmFzc2lnbldpdGggPSBhc3NpZ25XaXRoO1xuICAgICAgICBsb2Rhc2guYXQgPSBhdDtcbiAgICAgICAgbG9kYXNoLmJlZm9yZSA9IGJlZm9yZTtcbiAgICAgICAgbG9kYXNoLmJpbmQgPSBiaW5kO1xuICAgICAgICBsb2Rhc2guYmluZEFsbCA9IGJpbmRBbGw7XG4gICAgICAgIGxvZGFzaC5iaW5kS2V5ID0gYmluZEtleTtcbiAgICAgICAgbG9kYXNoLmNhc3RBcnJheSA9IGNhc3RBcnJheTtcbiAgICAgICAgbG9kYXNoLmNoYWluID0gY2hhaW47XG4gICAgICAgIGxvZGFzaC5jaHVuayA9IGNodW5rO1xuICAgICAgICBsb2Rhc2guY29tcGFjdCA9IGNvbXBhY3Q7XG4gICAgICAgIGxvZGFzaC5jb25jYXQgPSBjb25jYXQ7XG4gICAgICAgIGxvZGFzaC5jb25kID0gY29uZDtcbiAgICAgICAgbG9kYXNoLmNvbmZvcm1zID0gY29uZm9ybXM7XG4gICAgICAgIGxvZGFzaC5jb25zdGFudCA9IGNvbnN0YW50O1xuICAgICAgICBsb2Rhc2guY291bnRCeSA9IGNvdW50Qnk7XG4gICAgICAgIGxvZGFzaC5jcmVhdGUgPSBjcmVhdGU7XG4gICAgICAgIGxvZGFzaC5jdXJyeSA9IGN1cnJ5O1xuICAgICAgICBsb2Rhc2guY3VycnlSaWdodCA9IGN1cnJ5UmlnaHQ7XG4gICAgICAgIGxvZGFzaC5kZWJvdW5jZSA9IGRlYm91bmNlO1xuICAgICAgICBsb2Rhc2guZGVmYXVsdHMgPSBkZWZhdWx0cztcbiAgICAgICAgbG9kYXNoLmRlZmF1bHRzRGVlcCA9IGRlZmF1bHRzRGVlcDtcbiAgICAgICAgbG9kYXNoLmRlZmVyID0gZGVmZXI7XG4gICAgICAgIGxvZGFzaC5kZWxheSA9IGRlbGF5O1xuICAgICAgICBsb2Rhc2guZGlmZmVyZW5jZSA9IGRpZmZlcmVuY2U7XG4gICAgICAgIGxvZGFzaC5kaWZmZXJlbmNlQnkgPSBkaWZmZXJlbmNlQnk7XG4gICAgICAgIGxvZGFzaC5kaWZmZXJlbmNlV2l0aCA9IGRpZmZlcmVuY2VXaXRoO1xuICAgICAgICBsb2Rhc2guZHJvcCA9IGRyb3A7XG4gICAgICAgIGxvZGFzaC5kcm9wUmlnaHQgPSBkcm9wUmlnaHQ7XG4gICAgICAgIGxvZGFzaC5kcm9wUmlnaHRXaGlsZSA9IGRyb3BSaWdodFdoaWxlO1xuICAgICAgICBsb2Rhc2guZHJvcFdoaWxlID0gZHJvcFdoaWxlO1xuICAgICAgICBsb2Rhc2guZmlsbCA9IGZpbGw7XG4gICAgICAgIGxvZGFzaC5maWx0ZXIgPSBmaWx0ZXI7XG4gICAgICAgIGxvZGFzaC5mbGF0TWFwID0gZmxhdE1hcDtcbiAgICAgICAgbG9kYXNoLmZsYXRNYXBEZWVwID0gZmxhdE1hcERlZXA7XG4gICAgICAgIGxvZGFzaC5mbGF0TWFwRGVwdGggPSBmbGF0TWFwRGVwdGg7XG4gICAgICAgIGxvZGFzaC5mbGF0dGVuID0gZmxhdHRlbjtcbiAgICAgICAgbG9kYXNoLmZsYXR0ZW5EZWVwID0gZmxhdHRlbkRlZXA7XG4gICAgICAgIGxvZGFzaC5mbGF0dGVuRGVwdGggPSBmbGF0dGVuRGVwdGg7XG4gICAgICAgIGxvZGFzaC5mbGlwID0gZmxpcDtcbiAgICAgICAgbG9kYXNoLmZsb3cgPSBmbG93O1xuICAgICAgICBsb2Rhc2guZmxvd1JpZ2h0ID0gZmxvd1JpZ2h0O1xuICAgICAgICBsb2Rhc2guZnJvbVBhaXJzID0gZnJvbVBhaXJzO1xuICAgICAgICBsb2Rhc2guZnVuY3Rpb25zID0gZnVuY3Rpb25zO1xuICAgICAgICBsb2Rhc2guZnVuY3Rpb25zSW4gPSBmdW5jdGlvbnNJbjtcbiAgICAgICAgbG9kYXNoLmdyb3VwQnkgPSBncm91cEJ5O1xuICAgICAgICBsb2Rhc2guaW5pdGlhbCA9IGluaXRpYWw7XG4gICAgICAgIGxvZGFzaC5pbnRlcnNlY3Rpb24gPSBpbnRlcnNlY3Rpb247XG4gICAgICAgIGxvZGFzaC5pbnRlcnNlY3Rpb25CeSA9IGludGVyc2VjdGlvbkJ5O1xuICAgICAgICBsb2Rhc2guaW50ZXJzZWN0aW9uV2l0aCA9IGludGVyc2VjdGlvbldpdGg7XG4gICAgICAgIGxvZGFzaC5pbnZlcnQgPSBpbnZlcnQ7XG4gICAgICAgIGxvZGFzaC5pbnZlcnRCeSA9IGludmVydEJ5O1xuICAgICAgICBsb2Rhc2guaW52b2tlTWFwID0gaW52b2tlTWFwO1xuICAgICAgICBsb2Rhc2guaXRlcmF0ZWUgPSBpdGVyYXRlZTtcbiAgICAgICAgbG9kYXNoLmtleUJ5ID0ga2V5Qnk7XG4gICAgICAgIGxvZGFzaC5rZXlzID0ga2V5cztcbiAgICAgICAgbG9kYXNoLmtleXNJbiA9IGtleXNJbjtcbiAgICAgICAgbG9kYXNoLm1hcCA9IG1hcDtcbiAgICAgICAgbG9kYXNoLm1hcEtleXMgPSBtYXBLZXlzO1xuICAgICAgICBsb2Rhc2gubWFwVmFsdWVzID0gbWFwVmFsdWVzO1xuICAgICAgICBsb2Rhc2gubWF0Y2hlcyA9IG1hdGNoZXM7XG4gICAgICAgIGxvZGFzaC5tYXRjaGVzUHJvcGVydHkgPSBtYXRjaGVzUHJvcGVydHk7XG4gICAgICAgIGxvZGFzaC5tZW1vaXplID0gbWVtb2l6ZTtcbiAgICAgICAgbG9kYXNoLm1lcmdlID0gbWVyZ2U7XG4gICAgICAgIGxvZGFzaC5tZXJnZVdpdGggPSBtZXJnZVdpdGg7XG4gICAgICAgIGxvZGFzaC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICAgIGxvZGFzaC5tZXRob2RPZiA9IG1ldGhvZE9mO1xuICAgICAgICBsb2Rhc2gubWl4aW4gPSBtaXhpbjtcbiAgICAgICAgbG9kYXNoLm5lZ2F0ZSA9IG5lZ2F0ZTtcbiAgICAgICAgbG9kYXNoLm50aEFyZyA9IG50aEFyZztcbiAgICAgICAgbG9kYXNoLm9taXQgPSBvbWl0O1xuICAgICAgICBsb2Rhc2gub21pdEJ5ID0gb21pdEJ5O1xuICAgICAgICBsb2Rhc2gub25jZSA9IG9uY2U7XG4gICAgICAgIGxvZGFzaC5vcmRlckJ5ID0gb3JkZXJCeTtcbiAgICAgICAgbG9kYXNoLm92ZXIgPSBvdmVyO1xuICAgICAgICBsb2Rhc2gub3ZlckFyZ3MgPSBvdmVyQXJncztcbiAgICAgICAgbG9kYXNoLm92ZXJFdmVyeSA9IG92ZXJFdmVyeTtcbiAgICAgICAgbG9kYXNoLm92ZXJTb21lID0gb3ZlclNvbWU7XG4gICAgICAgIGxvZGFzaC5wYXJ0aWFsID0gcGFydGlhbDtcbiAgICAgICAgbG9kYXNoLnBhcnRpYWxSaWdodCA9IHBhcnRpYWxSaWdodDtcbiAgICAgICAgbG9kYXNoLnBhcnRpdGlvbiA9IHBhcnRpdGlvbjtcbiAgICAgICAgbG9kYXNoLnBpY2sgPSBwaWNrO1xuICAgICAgICBsb2Rhc2gucGlja0J5ID0gcGlja0J5O1xuICAgICAgICBsb2Rhc2gucHJvcGVydHkgPSBwcm9wZXJ0eTtcbiAgICAgICAgbG9kYXNoLnByb3BlcnR5T2YgPSBwcm9wZXJ0eU9mO1xuICAgICAgICBsb2Rhc2gucHVsbCA9IHB1bGw7XG4gICAgICAgIGxvZGFzaC5wdWxsQWxsID0gcHVsbEFsbDtcbiAgICAgICAgbG9kYXNoLnB1bGxBbGxCeSA9IHB1bGxBbGxCeTtcbiAgICAgICAgbG9kYXNoLnB1bGxBbGxXaXRoID0gcHVsbEFsbFdpdGg7XG4gICAgICAgIGxvZGFzaC5wdWxsQXQgPSBwdWxsQXQ7XG4gICAgICAgIGxvZGFzaC5yYW5nZSA9IHJhbmdlO1xuICAgICAgICBsb2Rhc2gucmFuZ2VSaWdodCA9IHJhbmdlUmlnaHQ7XG4gICAgICAgIGxvZGFzaC5yZWFyZyA9IHJlYXJnO1xuICAgICAgICBsb2Rhc2gucmVqZWN0ID0gcmVqZWN0O1xuICAgICAgICBsb2Rhc2gucmVtb3ZlID0gcmVtb3ZlO1xuICAgICAgICBsb2Rhc2gucmVzdCA9IHJlc3Q7XG4gICAgICAgIGxvZGFzaC5yZXZlcnNlID0gcmV2ZXJzZTtcbiAgICAgICAgbG9kYXNoLnNhbXBsZVNpemUgPSBzYW1wbGVTaXplO1xuICAgICAgICBsb2Rhc2guc2V0ID0gc2V0O1xuICAgICAgICBsb2Rhc2guc2V0V2l0aCA9IHNldFdpdGg7XG4gICAgICAgIGxvZGFzaC5zaHVmZmxlID0gc2h1ZmZsZTtcbiAgICAgICAgbG9kYXNoLnNsaWNlID0gc2xpY2U7XG4gICAgICAgIGxvZGFzaC5zb3J0QnkgPSBzb3J0Qnk7XG4gICAgICAgIGxvZGFzaC5zb3J0ZWRVbmlxID0gc29ydGVkVW5pcTtcbiAgICAgICAgbG9kYXNoLnNvcnRlZFVuaXFCeSA9IHNvcnRlZFVuaXFCeTtcbiAgICAgICAgbG9kYXNoLnNwbGl0ID0gc3BsaXQ7XG4gICAgICAgIGxvZGFzaC5zcHJlYWQgPSBzcHJlYWQ7XG4gICAgICAgIGxvZGFzaC50YWlsID0gdGFpbDtcbiAgICAgICAgbG9kYXNoLnRha2UgPSB0YWtlO1xuICAgICAgICBsb2Rhc2gudGFrZVJpZ2h0ID0gdGFrZVJpZ2h0O1xuICAgICAgICBsb2Rhc2gudGFrZVJpZ2h0V2hpbGUgPSB0YWtlUmlnaHRXaGlsZTtcbiAgICAgICAgbG9kYXNoLnRha2VXaGlsZSA9IHRha2VXaGlsZTtcbiAgICAgICAgbG9kYXNoLnRhcCA9IHRhcDtcbiAgICAgICAgbG9kYXNoLnRocm90dGxlID0gdGhyb3R0bGU7XG4gICAgICAgIGxvZGFzaC50aHJ1ID0gdGhydTtcbiAgICAgICAgbG9kYXNoLnRvQXJyYXkgPSB0b0FycmF5O1xuICAgICAgICBsb2Rhc2gudG9QYWlycyA9IHRvUGFpcnM7XG4gICAgICAgIGxvZGFzaC50b1BhaXJzSW4gPSB0b1BhaXJzSW47XG4gICAgICAgIGxvZGFzaC50b1BhdGggPSB0b1BhdGg7XG4gICAgICAgIGxvZGFzaC50b1BsYWluT2JqZWN0ID0gdG9QbGFpbk9iamVjdDtcbiAgICAgICAgbG9kYXNoLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICAgICAgbG9kYXNoLnVuYXJ5ID0gdW5hcnk7XG4gICAgICAgIGxvZGFzaC51bmlvbiA9IHVuaW9uO1xuICAgICAgICBsb2Rhc2gudW5pb25CeSA9IHVuaW9uQnk7XG4gICAgICAgIGxvZGFzaC51bmlvbldpdGggPSB1bmlvbldpdGg7XG4gICAgICAgIGxvZGFzaC51bmlxID0gdW5pcTtcbiAgICAgICAgbG9kYXNoLnVuaXFCeSA9IHVuaXFCeTtcbiAgICAgICAgbG9kYXNoLnVuaXFXaXRoID0gdW5pcVdpdGg7XG4gICAgICAgIGxvZGFzaC51bnNldCA9IHVuc2V0O1xuICAgICAgICBsb2Rhc2gudW56aXAgPSB1bnppcDtcbiAgICAgICAgbG9kYXNoLnVuemlwV2l0aCA9IHVuemlwV2l0aDtcbiAgICAgICAgbG9kYXNoLnVwZGF0ZSA9IHVwZGF0ZTtcbiAgICAgICAgbG9kYXNoLnVwZGF0ZVdpdGggPSB1cGRhdGVXaXRoO1xuICAgICAgICBsb2Rhc2gudmFsdWVzID0gdmFsdWVzO1xuICAgICAgICBsb2Rhc2gudmFsdWVzSW4gPSB2YWx1ZXNJbjtcbiAgICAgICAgbG9kYXNoLndpdGhvdXQgPSB3aXRob3V0O1xuICAgICAgICBsb2Rhc2gud29yZHMgPSB3b3JkcztcbiAgICAgICAgbG9kYXNoLndyYXAgPSB3cmFwO1xuICAgICAgICBsb2Rhc2gueG9yID0geG9yO1xuICAgICAgICBsb2Rhc2gueG9yQnkgPSB4b3JCeTtcbiAgICAgICAgbG9kYXNoLnhvcldpdGggPSB4b3JXaXRoO1xuICAgICAgICBsb2Rhc2guemlwID0gemlwO1xuICAgICAgICBsb2Rhc2guemlwT2JqZWN0ID0gemlwT2JqZWN0O1xuICAgICAgICBsb2Rhc2guemlwT2JqZWN0RGVlcCA9IHppcE9iamVjdERlZXA7XG4gICAgICAgIGxvZGFzaC56aXBXaXRoID0gemlwV2l0aDtcbiAgICAgICAgbG9kYXNoLmVudHJpZXMgPSB0b1BhaXJzO1xuICAgICAgICBsb2Rhc2guZW50cmllc0luID0gdG9QYWlyc0luO1xuICAgICAgICBsb2Rhc2guZXh0ZW5kID0gYXNzaWduSW47XG4gICAgICAgIGxvZGFzaC5leHRlbmRXaXRoID0gYXNzaWduSW5XaXRoO1xuICAgICAgICBtaXhpbihsb2Rhc2gsIGxvZGFzaCk7XG4gICAgICAgIGxvZGFzaC5hZGQgPSBhZGQ7XG4gICAgICAgIGxvZGFzaC5hdHRlbXB0ID0gYXR0ZW1wdDtcbiAgICAgICAgbG9kYXNoLmNhbWVsQ2FzZSA9IGNhbWVsQ2FzZTtcbiAgICAgICAgbG9kYXNoLmNhcGl0YWxpemUgPSBjYXBpdGFsaXplO1xuICAgICAgICBsb2Rhc2guY2VpbCA9IGNlaWw7XG4gICAgICAgIGxvZGFzaC5jbGFtcCA9IGNsYW1wO1xuICAgICAgICBsb2Rhc2guY2xvbmUgPSBjbG9uZTtcbiAgICAgICAgbG9kYXNoLmNsb25lRGVlcCA9IGNsb25lRGVlcDtcbiAgICAgICAgbG9kYXNoLmNsb25lRGVlcFdpdGggPSBjbG9uZURlZXBXaXRoO1xuICAgICAgICBsb2Rhc2guY2xvbmVXaXRoID0gY2xvbmVXaXRoO1xuICAgICAgICBsb2Rhc2guY29uZm9ybXNUbyA9IGNvbmZvcm1zVG87XG4gICAgICAgIGxvZGFzaC5kZWJ1cnIgPSBkZWJ1cnI7XG4gICAgICAgIGxvZGFzaC5kZWZhdWx0VG8gPSBkZWZhdWx0VG87XG4gICAgICAgIGxvZGFzaC5kaXZpZGUgPSBkaXZpZGU7XG4gICAgICAgIGxvZGFzaC5lbmRzV2l0aCA9IGVuZHNXaXRoO1xuICAgICAgICBsb2Rhc2guZXEgPSBlcTtcbiAgICAgICAgbG9kYXNoLmVzY2FwZSA9IGVzY2FwZTtcbiAgICAgICAgbG9kYXNoLmVzY2FwZVJlZ0V4cCA9IGVzY2FwZVJlZ0V4cDtcbiAgICAgICAgbG9kYXNoLmV2ZXJ5ID0gZXZlcnk7XG4gICAgICAgIGxvZGFzaC5maW5kID0gZmluZDtcbiAgICAgICAgbG9kYXNoLmZpbmRJbmRleCA9IGZpbmRJbmRleDtcbiAgICAgICAgbG9kYXNoLmZpbmRLZXkgPSBmaW5kS2V5O1xuICAgICAgICBsb2Rhc2guZmluZExhc3QgPSBmaW5kTGFzdDtcbiAgICAgICAgbG9kYXNoLmZpbmRMYXN0SW5kZXggPSBmaW5kTGFzdEluZGV4O1xuICAgICAgICBsb2Rhc2guZmluZExhc3RLZXkgPSBmaW5kTGFzdEtleTtcbiAgICAgICAgbG9kYXNoLmZsb29yID0gZmxvb3I7XG4gICAgICAgIGxvZGFzaC5mb3JFYWNoID0gZm9yRWFjaDtcbiAgICAgICAgbG9kYXNoLmZvckVhY2hSaWdodCA9IGZvckVhY2hSaWdodDtcbiAgICAgICAgbG9kYXNoLmZvckluID0gZm9ySW47XG4gICAgICAgIGxvZGFzaC5mb3JJblJpZ2h0ID0gZm9ySW5SaWdodDtcbiAgICAgICAgbG9kYXNoLmZvck93biA9IGZvck93bjtcbiAgICAgICAgbG9kYXNoLmZvck93blJpZ2h0ID0gZm9yT3duUmlnaHQ7XG4gICAgICAgIGxvZGFzaC5nZXQgPSBnZXQ7XG4gICAgICAgIGxvZGFzaC5ndCA9IGd0O1xuICAgICAgICBsb2Rhc2guZ3RlID0gZ3RlO1xuICAgICAgICBsb2Rhc2guaGFzID0gaGFzO1xuICAgICAgICBsb2Rhc2guaGFzSW4gPSBoYXNJbjtcbiAgICAgICAgbG9kYXNoLmhlYWQgPSBoZWFkO1xuICAgICAgICBsb2Rhc2guaWRlbnRpdHkgPSBpZGVudGl0eTtcbiAgICAgICAgbG9kYXNoLmluY2x1ZGVzID0gaW5jbHVkZXM7XG4gICAgICAgIGxvZGFzaC5pbmRleE9mID0gaW5kZXhPZjtcbiAgICAgICAgbG9kYXNoLmluUmFuZ2UgPSBpblJhbmdlO1xuICAgICAgICBsb2Rhc2guaW52b2tlID0gaW52b2tlO1xuICAgICAgICBsb2Rhc2guaXNBcmd1bWVudHMgPSBpc0FyZ3VtZW50cztcbiAgICAgICAgbG9kYXNoLmlzQXJyYXkgPSBpc0FycmF5O1xuICAgICAgICBsb2Rhc2guaXNBcnJheUJ1ZmZlciA9IGlzQXJyYXlCdWZmZXI7XG4gICAgICAgIGxvZGFzaC5pc0FycmF5TGlrZSA9IGlzQXJyYXlMaWtlO1xuICAgICAgICBsb2Rhc2guaXNBcnJheUxpa2VPYmplY3QgPSBpc0FycmF5TGlrZU9iamVjdDtcbiAgICAgICAgbG9kYXNoLmlzQm9vbGVhbiA9IGlzQm9vbGVhbjtcbiAgICAgICAgbG9kYXNoLmlzQnVmZmVyID0gaXNCdWZmZXI7XG4gICAgICAgIGxvZGFzaC5pc0RhdGUgPSBpc0RhdGU7XG4gICAgICAgIGxvZGFzaC5pc0VsZW1lbnQgPSBpc0VsZW1lbnQ7XG4gICAgICAgIGxvZGFzaC5pc0VtcHR5ID0gaXNFbXB0eTtcbiAgICAgICAgbG9kYXNoLmlzRXF1YWwgPSBpc0VxdWFsO1xuICAgICAgICBsb2Rhc2guaXNFcXVhbFdpdGggPSBpc0VxdWFsV2l0aDtcbiAgICAgICAgbG9kYXNoLmlzRXJyb3IgPSBpc0Vycm9yO1xuICAgICAgICBsb2Rhc2guaXNGaW5pdGUgPSBpc0Zpbml0ZTtcbiAgICAgICAgbG9kYXNoLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuICAgICAgICBsb2Rhc2guaXNJbnRlZ2VyID0gaXNJbnRlZ2VyO1xuICAgICAgICBsb2Rhc2guaXNMZW5ndGggPSBpc0xlbmd0aDtcbiAgICAgICAgbG9kYXNoLmlzTWFwID0gaXNNYXA7XG4gICAgICAgIGxvZGFzaC5pc01hdGNoID0gaXNNYXRjaDtcbiAgICAgICAgbG9kYXNoLmlzTWF0Y2hXaXRoID0gaXNNYXRjaFdpdGg7XG4gICAgICAgIGxvZGFzaC5pc05hTiA9IGlzTmFOO1xuICAgICAgICBsb2Rhc2guaXNOYXRpdmUgPSBpc05hdGl2ZTtcbiAgICAgICAgbG9kYXNoLmlzTmlsID0gaXNOaWw7XG4gICAgICAgIGxvZGFzaC5pc051bGwgPSBpc051bGw7XG4gICAgICAgIGxvZGFzaC5pc051bWJlciA9IGlzTnVtYmVyO1xuICAgICAgICBsb2Rhc2guaXNPYmplY3QgPSBpc09iamVjdDtcbiAgICAgICAgbG9kYXNoLmlzT2JqZWN0TGlrZSA9IGlzT2JqZWN0TGlrZTtcbiAgICAgICAgbG9kYXNoLmlzUGxhaW5PYmplY3QgPSBpc1BsYWluT2JqZWN0O1xuICAgICAgICBsb2Rhc2guaXNSZWdFeHAgPSBpc1JlZ0V4cDtcbiAgICAgICAgbG9kYXNoLmlzU2FmZUludGVnZXIgPSBpc1NhZmVJbnRlZ2VyO1xuICAgICAgICBsb2Rhc2guaXNTZXQgPSBpc1NldDtcbiAgICAgICAgbG9kYXNoLmlzU3RyaW5nID0gaXNTdHJpbmc7XG4gICAgICAgIGxvZGFzaC5pc1N5bWJvbCA9IGlzU3ltYm9sO1xuICAgICAgICBsb2Rhc2guaXNUeXBlZEFycmF5ID0gaXNUeXBlZEFycmF5O1xuICAgICAgICBsb2Rhc2guaXNVbmRlZmluZWQgPSBpc1VuZGVmaW5lZDtcbiAgICAgICAgbG9kYXNoLmlzV2Vha01hcCA9IGlzV2Vha01hcDtcbiAgICAgICAgbG9kYXNoLmlzV2Vha1NldCA9IGlzV2Vha1NldDtcbiAgICAgICAgbG9kYXNoLmpvaW4gPSBqb2luO1xuICAgICAgICBsb2Rhc2gua2ViYWJDYXNlID0ga2ViYWJDYXNlO1xuICAgICAgICBsb2Rhc2gubGFzdCA9IGxhc3Q7XG4gICAgICAgIGxvZGFzaC5sYXN0SW5kZXhPZiA9IGxhc3RJbmRleE9mO1xuICAgICAgICBsb2Rhc2gubG93ZXJDYXNlID0gbG93ZXJDYXNlO1xuICAgICAgICBsb2Rhc2gubG93ZXJGaXJzdCA9IGxvd2VyRmlyc3Q7XG4gICAgICAgIGxvZGFzaC5sdCA9IGx0O1xuICAgICAgICBsb2Rhc2gubHRlID0gbHRlO1xuICAgICAgICBsb2Rhc2gubWF4ID0gbWF4O1xuICAgICAgICBsb2Rhc2gubWF4QnkgPSBtYXhCeTtcbiAgICAgICAgbG9kYXNoLm1lYW4gPSBtZWFuO1xuICAgICAgICBsb2Rhc2gubWVhbkJ5ID0gbWVhbkJ5O1xuICAgICAgICBsb2Rhc2gubWluID0gbWluO1xuICAgICAgICBsb2Rhc2gubWluQnkgPSBtaW5CeTtcbiAgICAgICAgbG9kYXNoLnN0dWJBcnJheSA9IHN0dWJBcnJheTtcbiAgICAgICAgbG9kYXNoLnN0dWJGYWxzZSA9IHN0dWJGYWxzZTtcbiAgICAgICAgbG9kYXNoLnN0dWJPYmplY3QgPSBzdHViT2JqZWN0O1xuICAgICAgICBsb2Rhc2guc3R1YlN0cmluZyA9IHN0dWJTdHJpbmc7XG4gICAgICAgIGxvZGFzaC5zdHViVHJ1ZSA9IHN0dWJUcnVlO1xuICAgICAgICBsb2Rhc2gubXVsdGlwbHkgPSBtdWx0aXBseTtcbiAgICAgICAgbG9kYXNoLm50aCA9IG50aDtcbiAgICAgICAgbG9kYXNoLm5vQ29uZmxpY3QgPSBub0NvbmZsaWN0O1xuICAgICAgICBsb2Rhc2gubm9vcCA9IG5vb3A7XG4gICAgICAgIGxvZGFzaC5ub3cgPSBub3c7XG4gICAgICAgIGxvZGFzaC5wYWQgPSBwYWQ7XG4gICAgICAgIGxvZGFzaC5wYWRFbmQgPSBwYWRFbmQ7XG4gICAgICAgIGxvZGFzaC5wYWRTdGFydCA9IHBhZFN0YXJ0O1xuICAgICAgICBsb2Rhc2gucGFyc2VJbnQgPSBwYXJzZUludDI7XG4gICAgICAgIGxvZGFzaC5yYW5kb20gPSByYW5kb207XG4gICAgICAgIGxvZGFzaC5yZWR1Y2UgPSByZWR1Y2U7XG4gICAgICAgIGxvZGFzaC5yZWR1Y2VSaWdodCA9IHJlZHVjZVJpZ2h0O1xuICAgICAgICBsb2Rhc2gucmVwZWF0ID0gcmVwZWF0O1xuICAgICAgICBsb2Rhc2gucmVwbGFjZSA9IHJlcGxhY2U7XG4gICAgICAgIGxvZGFzaC5yZXN1bHQgPSByZXN1bHQ7XG4gICAgICAgIGxvZGFzaC5yb3VuZCA9IHJvdW5kO1xuICAgICAgICBsb2Rhc2gucnVuSW5Db250ZXh0ID0gcnVuSW5Db250ZXh0MjtcbiAgICAgICAgbG9kYXNoLnNhbXBsZSA9IHNhbXBsZTtcbiAgICAgICAgbG9kYXNoLnNpemUgPSBzaXplO1xuICAgICAgICBsb2Rhc2guc25ha2VDYXNlID0gc25ha2VDYXNlO1xuICAgICAgICBsb2Rhc2guc29tZSA9IHNvbWU7XG4gICAgICAgIGxvZGFzaC5zb3J0ZWRJbmRleCA9IHNvcnRlZEluZGV4O1xuICAgICAgICBsb2Rhc2guc29ydGVkSW5kZXhCeSA9IHNvcnRlZEluZGV4Qnk7XG4gICAgICAgIGxvZGFzaC5zb3J0ZWRJbmRleE9mID0gc29ydGVkSW5kZXhPZjtcbiAgICAgICAgbG9kYXNoLnNvcnRlZExhc3RJbmRleCA9IHNvcnRlZExhc3RJbmRleDtcbiAgICAgICAgbG9kYXNoLnNvcnRlZExhc3RJbmRleEJ5ID0gc29ydGVkTGFzdEluZGV4Qnk7XG4gICAgICAgIGxvZGFzaC5zb3J0ZWRMYXN0SW5kZXhPZiA9IHNvcnRlZExhc3RJbmRleE9mO1xuICAgICAgICBsb2Rhc2guc3RhcnRDYXNlID0gc3RhcnRDYXNlO1xuICAgICAgICBsb2Rhc2guc3RhcnRzV2l0aCA9IHN0YXJ0c1dpdGg7XG4gICAgICAgIGxvZGFzaC5zdWJ0cmFjdCA9IHN1YnRyYWN0O1xuICAgICAgICBsb2Rhc2guc3VtID0gc3VtO1xuICAgICAgICBsb2Rhc2guc3VtQnkgPSBzdW1CeTtcbiAgICAgICAgbG9kYXNoLnRlbXBsYXRlID0gdGVtcGxhdGU7XG4gICAgICAgIGxvZGFzaC50aW1lcyA9IHRpbWVzO1xuICAgICAgICBsb2Rhc2gudG9GaW5pdGUgPSB0b0Zpbml0ZTtcbiAgICAgICAgbG9kYXNoLnRvSW50ZWdlciA9IHRvSW50ZWdlcjtcbiAgICAgICAgbG9kYXNoLnRvTGVuZ3RoID0gdG9MZW5ndGg7XG4gICAgICAgIGxvZGFzaC50b0xvd2VyID0gdG9Mb3dlcjtcbiAgICAgICAgbG9kYXNoLnRvTnVtYmVyID0gdG9OdW1iZXI7XG4gICAgICAgIGxvZGFzaC50b1NhZmVJbnRlZ2VyID0gdG9TYWZlSW50ZWdlcjtcbiAgICAgICAgbG9kYXNoLnRvU3RyaW5nID0gdG9TdHJpbmc7XG4gICAgICAgIGxvZGFzaC50b1VwcGVyID0gdG9VcHBlcjtcbiAgICAgICAgbG9kYXNoLnRyaW0gPSB0cmltO1xuICAgICAgICBsb2Rhc2gudHJpbUVuZCA9IHRyaW1FbmQ7XG4gICAgICAgIGxvZGFzaC50cmltU3RhcnQgPSB0cmltU3RhcnQ7XG4gICAgICAgIGxvZGFzaC50cnVuY2F0ZSA9IHRydW5jYXRlO1xuICAgICAgICBsb2Rhc2gudW5lc2NhcGUgPSB1bmVzY2FwZTtcbiAgICAgICAgbG9kYXNoLnVuaXF1ZUlkID0gdW5pcXVlSWQ7XG4gICAgICAgIGxvZGFzaC51cHBlckNhc2UgPSB1cHBlckNhc2U7XG4gICAgICAgIGxvZGFzaC51cHBlckZpcnN0ID0gdXBwZXJGaXJzdDtcbiAgICAgICAgbG9kYXNoLmVhY2ggPSBmb3JFYWNoO1xuICAgICAgICBsb2Rhc2guZWFjaFJpZ2h0ID0gZm9yRWFjaFJpZ2h0O1xuICAgICAgICBsb2Rhc2guZmlyc3QgPSBoZWFkO1xuICAgICAgICBtaXhpbihsb2Rhc2gsIChmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgc291cmNlID0ge307XG4gICAgICAgICAgYmFzZUZvck93bihsb2Rhc2gsIGZ1bmN0aW9uKGZ1bmMsIG1ldGhvZE5hbWUpIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChsb2Rhc2gucHJvdG90eXBlLCBtZXRob2ROYW1lKSkge1xuICAgICAgICAgICAgICBzb3VyY2VbbWV0aG9kTmFtZV0gPSBmdW5jO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBzb3VyY2U7XG4gICAgICAgIH0pKCksIHsgXCJjaGFpblwiOiBmYWxzZSB9KTtcbiAgICAgICAgbG9kYXNoLlZFUlNJT04gPSBWRVJTSU9OO1xuICAgICAgICBhcnJheUVhY2goW1wiYmluZFwiLCBcImJpbmRLZXlcIiwgXCJjdXJyeVwiLCBcImN1cnJ5UmlnaHRcIiwgXCJwYXJ0aWFsXCIsIFwicGFydGlhbFJpZ2h0XCJdLCBmdW5jdGlvbihtZXRob2ROYW1lKSB7XG4gICAgICAgICAgbG9kYXNoW21ldGhvZE5hbWVdLnBsYWNlaG9sZGVyID0gbG9kYXNoO1xuICAgICAgICB9KTtcbiAgICAgICAgYXJyYXlFYWNoKFtcImRyb3BcIiwgXCJ0YWtlXCJdLCBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmRleCkge1xuICAgICAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgIG4gPSBuID09PSB1bmRlZmluZWQyID8gMSA6IG5hdGl2ZU1heCh0b0ludGVnZXIobiksIDApO1xuICAgICAgICAgICAgdmFyIHJlc3VsdDIgPSB0aGlzLl9fZmlsdGVyZWRfXyAmJiAhaW5kZXggPyBuZXcgTGF6eVdyYXBwZXIodGhpcykgOiB0aGlzLmNsb25lKCk7XG4gICAgICAgICAgICBpZiAocmVzdWx0Mi5fX2ZpbHRlcmVkX18pIHtcbiAgICAgICAgICAgICAgcmVzdWx0Mi5fX3Rha2VDb3VudF9fID0gbmF0aXZlTWluKG4sIHJlc3VsdDIuX190YWtlQ291bnRfXyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXN1bHQyLl9fdmlld3NfXy5wdXNoKHtcbiAgICAgICAgICAgICAgICBcInNpemVcIjogbmF0aXZlTWluKG4sIE1BWF9BUlJBWV9MRU5HVEgpLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBtZXRob2ROYW1lICsgKHJlc3VsdDIuX19kaXJfXyA8IDAgPyBcIlJpZ2h0XCIgOiBcIlwiKVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQyO1xuICAgICAgICAgIH07XG4gICAgICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWUgKyBcIlJpZ2h0XCJdID0gZnVuY3Rpb24obikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmV2ZXJzZSgpW21ldGhvZE5hbWVdKG4pLnJldmVyc2UoKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgICAgYXJyYXlFYWNoKFtcImZpbHRlclwiLCBcIm1hcFwiLCBcInRha2VXaGlsZVwiXSwgZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5kZXgpIHtcbiAgICAgICAgICB2YXIgdHlwZSA9IGluZGV4ICsgMSwgaXNGaWx0ZXIgPSB0eXBlID09IExBWllfRklMVEVSX0ZMQUcgfHwgdHlwZSA9PSBMQVpZX1dISUxFX0ZMQUc7XG4gICAgICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oaXRlcmF0ZWUyKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0MiA9IHRoaXMuY2xvbmUoKTtcbiAgICAgICAgICAgIHJlc3VsdDIuX19pdGVyYXRlZXNfXy5wdXNoKHtcbiAgICAgICAgICAgICAgXCJpdGVyYXRlZVwiOiBnZXRJdGVyYXRlZShpdGVyYXRlZTIsIDMpLFxuICAgICAgICAgICAgICBcInR5cGVcIjogdHlwZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXN1bHQyLl9fZmlsdGVyZWRfXyA9IHJlc3VsdDIuX19maWx0ZXJlZF9fIHx8IGlzRmlsdGVyO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDI7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIGFycmF5RWFjaChbXCJoZWFkXCIsIFwibGFzdFwiXSwgZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5kZXgpIHtcbiAgICAgICAgICB2YXIgdGFrZU5hbWUgPSBcInRha2VcIiArIChpbmRleCA/IFwiUmlnaHRcIiA6IFwiXCIpO1xuICAgICAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXNbdGFrZU5hbWVdKDEpLnZhbHVlKClbMF07XG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIGFycmF5RWFjaChbXCJpbml0aWFsXCIsIFwidGFpbFwiXSwgZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5kZXgpIHtcbiAgICAgICAgICB2YXIgZHJvcE5hbWUgPSBcImRyb3BcIiArIChpbmRleCA/IFwiXCIgOiBcIlJpZ2h0XCIpO1xuICAgICAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX19maWx0ZXJlZF9fID8gbmV3IExhenlXcmFwcGVyKHRoaXMpIDogdGhpc1tkcm9wTmFtZV0oMSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5jb21wYWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKGlkZW50aXR5KTtcbiAgICAgICAgfTtcbiAgICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmZpbmQgPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5maWx0ZXIocHJlZGljYXRlKS5oZWFkKCk7XG4gICAgICAgIH07XG4gICAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5maW5kTGFzdCA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnJldmVyc2UoKS5maW5kKHByZWRpY2F0ZSk7XG4gICAgICAgIH07XG4gICAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5pbnZva2VNYXAgPSBiYXNlUmVzdChmdW5jdGlvbihwYXRoLCBhcmdzKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBwYXRoID09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBMYXp5V3JhcHBlcih0aGlzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gYmFzZUludm9rZSh2YWx1ZSwgcGF0aCwgYXJncyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUucmVqZWN0ID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKG5lZ2F0ZShnZXRJdGVyYXRlZShwcmVkaWNhdGUpKSk7XG4gICAgICAgIH07XG4gICAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgICBzdGFydCA9IHRvSW50ZWdlcihzdGFydCk7XG4gICAgICAgICAgdmFyIHJlc3VsdDIgPSB0aGlzO1xuICAgICAgICAgIGlmIChyZXN1bHQyLl9fZmlsdGVyZWRfXyAmJiAoc3RhcnQgPiAwIHx8IGVuZCA8IDApKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IExhenlXcmFwcGVyKHJlc3VsdDIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgICAgICAgICByZXN1bHQyID0gcmVzdWx0Mi50YWtlUmlnaHQoLXN0YXJ0KTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHN0YXJ0KSB7XG4gICAgICAgICAgICByZXN1bHQyID0gcmVzdWx0Mi5kcm9wKHN0YXJ0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGVuZCAhPT0gdW5kZWZpbmVkMikge1xuICAgICAgICAgICAgZW5kID0gdG9JbnRlZ2VyKGVuZCk7XG4gICAgICAgICAgICByZXN1bHQyID0gZW5kIDwgMCA/IHJlc3VsdDIuZHJvcFJpZ2h0KC1lbmQpIDogcmVzdWx0Mi50YWtlKGVuZCAtIHN0YXJ0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDI7XG4gICAgICAgIH07XG4gICAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS50YWtlUmlnaHRXaGlsZSA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnJldmVyc2UoKS50YWtlV2hpbGUocHJlZGljYXRlKS5yZXZlcnNlKCk7XG4gICAgICAgIH07XG4gICAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMudGFrZShNQVhfQVJSQVlfTEVOR1RIKTtcbiAgICAgICAgfTtcbiAgICAgICAgYmFzZUZvck93bihMYXp5V3JhcHBlci5wcm90b3R5cGUsIGZ1bmN0aW9uKGZ1bmMsIG1ldGhvZE5hbWUpIHtcbiAgICAgICAgICB2YXIgY2hlY2tJdGVyYXRlZSA9IC9eKD86ZmlsdGVyfGZpbmR8bWFwfHJlamVjdCl8V2hpbGUkLy50ZXN0KG1ldGhvZE5hbWUpLCBpc1Rha2VyID0gL14oPzpoZWFkfGxhc3QpJC8udGVzdChtZXRob2ROYW1lKSwgbG9kYXNoRnVuYyA9IGxvZGFzaFtpc1Rha2VyID8gXCJ0YWtlXCIgKyAobWV0aG9kTmFtZSA9PSBcImxhc3RcIiA/IFwiUmlnaHRcIiA6IFwiXCIpIDogbWV0aG9kTmFtZV0sIHJldFVud3JhcHBlZCA9IGlzVGFrZXIgfHwgL15maW5kLy50ZXN0KG1ldGhvZE5hbWUpO1xuICAgICAgICAgIGlmICghbG9kYXNoRnVuYykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsb2Rhc2gucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLl9fd3JhcHBlZF9fLCBhcmdzID0gaXNUYWtlciA/IFsxXSA6IGFyZ3VtZW50cywgaXNMYXp5ID0gdmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlciwgaXRlcmF0ZWUyID0gYXJnc1swXSwgdXNlTGF6eSA9IGlzTGF6eSB8fCBpc0FycmF5KHZhbHVlKTtcbiAgICAgICAgICAgIHZhciBpbnRlcmNlcHRvciA9IGZ1bmN0aW9uKHZhbHVlMikge1xuICAgICAgICAgICAgICB2YXIgcmVzdWx0MyA9IGxvZGFzaEZ1bmMuYXBwbHkobG9kYXNoLCBhcnJheVB1c2goW3ZhbHVlMl0sIGFyZ3MpKTtcbiAgICAgICAgICAgICAgcmV0dXJuIGlzVGFrZXIgJiYgY2hhaW5BbGwgPyByZXN1bHQzWzBdIDogcmVzdWx0MztcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAodXNlTGF6eSAmJiBjaGVja0l0ZXJhdGVlICYmIHR5cGVvZiBpdGVyYXRlZTIgPT0gXCJmdW5jdGlvblwiICYmIGl0ZXJhdGVlMi5sZW5ndGggIT0gMSkge1xuICAgICAgICAgICAgICBpc0xhenkgPSB1c2VMYXp5ID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgY2hhaW5BbGwgPSB0aGlzLl9fY2hhaW5fXywgaXNIeWJyaWQgPSAhIXRoaXMuX19hY3Rpb25zX18ubGVuZ3RoLCBpc1Vud3JhcHBlZCA9IHJldFVud3JhcHBlZCAmJiAhY2hhaW5BbGwsIG9ubHlMYXp5ID0gaXNMYXp5ICYmICFpc0h5YnJpZDtcbiAgICAgICAgICAgIGlmICghcmV0VW53cmFwcGVkICYmIHVzZUxhenkpIHtcbiAgICAgICAgICAgICAgdmFsdWUgPSBvbmx5TGF6eSA/IHZhbHVlIDogbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgICAgICAgICB2YXIgcmVzdWx0MiA9IGZ1bmMuYXBwbHkodmFsdWUsIGFyZ3MpO1xuICAgICAgICAgICAgICByZXN1bHQyLl9fYWN0aW9uc19fLnB1c2goeyBcImZ1bmNcIjogdGhydSwgXCJhcmdzXCI6IFtpbnRlcmNlcHRvcl0sIFwidGhpc0FyZ1wiOiB1bmRlZmluZWQyIH0pO1xuICAgICAgICAgICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIocmVzdWx0MiwgY2hhaW5BbGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzVW53cmFwcGVkICYmIG9ubHlMYXp5KSB7XG4gICAgICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0MiA9IHRoaXMudGhydShpbnRlcmNlcHRvcik7XG4gICAgICAgICAgICByZXR1cm4gaXNVbndyYXBwZWQgPyBpc1Rha2VyID8gcmVzdWx0Mi52YWx1ZSgpWzBdIDogcmVzdWx0Mi52YWx1ZSgpIDogcmVzdWx0MjtcbiAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgICAgYXJyYXlFYWNoKFtcInBvcFwiLCBcInB1c2hcIiwgXCJzaGlmdFwiLCBcInNvcnRcIiwgXCJzcGxpY2VcIiwgXCJ1bnNoaWZ0XCJdLCBmdW5jdGlvbihtZXRob2ROYW1lKSB7XG4gICAgICAgICAgdmFyIGZ1bmMgPSBhcnJheVByb3RvW21ldGhvZE5hbWVdLCBjaGFpbk5hbWUgPSAvXig/OnB1c2h8c29ydHx1bnNoaWZ0KSQvLnRlc3QobWV0aG9kTmFtZSkgPyBcInRhcFwiIDogXCJ0aHJ1XCIsIHJldFVud3JhcHBlZCA9IC9eKD86cG9wfHNoaWZ0KSQvLnRlc3QobWV0aG9kTmFtZSk7XG4gICAgICAgICAgbG9kYXNoLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgICAgICBpZiAocmV0VW53cmFwcGVkICYmICF0aGlzLl9fY2hhaW5fXykge1xuICAgICAgICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLnZhbHVlKCk7XG4gICAgICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbXSwgYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpc1tjaGFpbk5hbWVdKGZ1bmN0aW9uKHZhbHVlMikge1xuICAgICAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseShpc0FycmF5KHZhbHVlMikgPyB2YWx1ZTIgOiBbXSwgYXJncyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgICAgYmFzZUZvck93bihMYXp5V3JhcHBlci5wcm90b3R5cGUsIGZ1bmN0aW9uKGZ1bmMsIG1ldGhvZE5hbWUpIHtcbiAgICAgICAgICB2YXIgbG9kYXNoRnVuYyA9IGxvZGFzaFttZXRob2ROYW1lXTtcbiAgICAgICAgICBpZiAobG9kYXNoRnVuYykge1xuICAgICAgICAgICAgdmFyIGtleSA9IGxvZGFzaEZ1bmMubmFtZSArIFwiXCI7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwocmVhbE5hbWVzLCBrZXkpKSB7XG4gICAgICAgICAgICAgIHJlYWxOYW1lc1trZXldID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWFsTmFtZXNba2V5XS5wdXNoKHsgXCJuYW1lXCI6IG1ldGhvZE5hbWUsIFwiZnVuY1wiOiBsb2Rhc2hGdW5jIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJlYWxOYW1lc1tjcmVhdGVIeWJyaWQodW5kZWZpbmVkMiwgV1JBUF9CSU5EX0tFWV9GTEFHKS5uYW1lXSA9IFt7XG4gICAgICAgICAgXCJuYW1lXCI6IFwid3JhcHBlclwiLFxuICAgICAgICAgIFwiZnVuY1wiOiB1bmRlZmluZWQyXG4gICAgICAgIH1dO1xuICAgICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuY2xvbmUgPSBsYXp5Q2xvbmU7XG4gICAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5yZXZlcnNlID0gbGF6eVJldmVyc2U7XG4gICAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS52YWx1ZSA9IGxhenlWYWx1ZTtcbiAgICAgICAgbG9kYXNoLnByb3RvdHlwZS5hdCA9IHdyYXBwZXJBdDtcbiAgICAgICAgbG9kYXNoLnByb3RvdHlwZS5jaGFpbiA9IHdyYXBwZXJDaGFpbjtcbiAgICAgICAgbG9kYXNoLnByb3RvdHlwZS5jb21taXQgPSB3cmFwcGVyQ29tbWl0O1xuICAgICAgICBsb2Rhc2gucHJvdG90eXBlLm5leHQgPSB3cmFwcGVyTmV4dDtcbiAgICAgICAgbG9kYXNoLnByb3RvdHlwZS5wbGFudCA9IHdyYXBwZXJQbGFudDtcbiAgICAgICAgbG9kYXNoLnByb3RvdHlwZS5yZXZlcnNlID0gd3JhcHBlclJldmVyc2U7XG4gICAgICAgIGxvZGFzaC5wcm90b3R5cGUudG9KU09OID0gbG9kYXNoLnByb3RvdHlwZS52YWx1ZU9mID0gbG9kYXNoLnByb3RvdHlwZS52YWx1ZSA9IHdyYXBwZXJWYWx1ZTtcbiAgICAgICAgbG9kYXNoLnByb3RvdHlwZS5maXJzdCA9IGxvZGFzaC5wcm90b3R5cGUuaGVhZDtcbiAgICAgICAgaWYgKHN5bUl0ZXJhdG9yKSB7XG4gICAgICAgICAgbG9kYXNoLnByb3RvdHlwZVtzeW1JdGVyYXRvcl0gPSB3cmFwcGVyVG9JdGVyYXRvcjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbG9kYXNoO1xuICAgICAgfSk7XG4gICAgICB2YXIgXzIgPSBydW5JbkNvbnRleHQoKTtcbiAgICAgIGlmICh0eXBlb2YgZGVmaW5lID09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgZGVmaW5lLmFtZCA9PSBcIm9iamVjdFwiICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgcm9vdC5fID0gXzI7XG4gICAgICAgIGRlZmluZShmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gXzI7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChmcmVlTW9kdWxlKSB7XG4gICAgICAgIChmcmVlTW9kdWxlLmV4cG9ydHMgPSBfMikuXyA9IF8yO1xuICAgICAgICBmcmVlRXhwb3J0cy5fID0gXzI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByb290Ll8gPSBfMjtcbiAgICAgIH1cbiAgICB9KS5jYWxsKGV4cG9ydHMyKTtcbiAgfVxufSk7XG5cbi8vIG5vZGVfbW9kdWxlcy9AbW9kZWxjb250ZXh0cHJvdG9jb2wvc2RrL2Rpc3QvZXNtL3NlcnZlci9zdGRpby5qc1xudmFyIGltcG9ydF9ub2RlX3Byb2Nlc3MgPSBfX3RvRVNNKHJlcXVpcmUoXCJub2RlOnByb2Nlc3NcIiksIDEpO1xuXG4vLyBub2RlX21vZHVsZXMvem9kL3YzL2V4dGVybmFsLmpzXG52YXIgZXh0ZXJuYWxfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoZXh0ZXJuYWxfZXhwb3J0cywge1xuICBCUkFORDogKCkgPT4gQlJBTkQsXG4gIERJUlRZOiAoKSA9PiBESVJUWSxcbiAgRU1QVFlfUEFUSDogKCkgPT4gRU1QVFlfUEFUSCxcbiAgSU5WQUxJRDogKCkgPT4gSU5WQUxJRCxcbiAgTkVWRVI6ICgpID0+IE5FVkVSLFxuICBPSzogKCkgPT4gT0ssXG4gIFBhcnNlU3RhdHVzOiAoKSA9PiBQYXJzZVN0YXR1cyxcbiAgU2NoZW1hOiAoKSA9PiBab2RUeXBlLFxuICBab2RBbnk6ICgpID0+IFpvZEFueSxcbiAgWm9kQXJyYXk6ICgpID0+IFpvZEFycmF5LFxuICBab2RCaWdJbnQ6ICgpID0+IFpvZEJpZ0ludCxcbiAgWm9kQm9vbGVhbjogKCkgPT4gWm9kQm9vbGVhbixcbiAgWm9kQnJhbmRlZDogKCkgPT4gWm9kQnJhbmRlZCxcbiAgWm9kQ2F0Y2g6ICgpID0+IFpvZENhdGNoLFxuICBab2REYXRlOiAoKSA9PiBab2REYXRlLFxuICBab2REZWZhdWx0OiAoKSA9PiBab2REZWZhdWx0LFxuICBab2REaXNjcmltaW5hdGVkVW5pb246ICgpID0+IFpvZERpc2NyaW1pbmF0ZWRVbmlvbixcbiAgWm9kRWZmZWN0czogKCkgPT4gWm9kRWZmZWN0cyxcbiAgWm9kRW51bTogKCkgPT4gWm9kRW51bSxcbiAgWm9kRXJyb3I6ICgpID0+IFpvZEVycm9yLFxuICBab2RGaXJzdFBhcnR5VHlwZUtpbmQ6ICgpID0+IFpvZEZpcnN0UGFydHlUeXBlS2luZCxcbiAgWm9kRnVuY3Rpb246ICgpID0+IFpvZEZ1bmN0aW9uLFxuICBab2RJbnRlcnNlY3Rpb246ICgpID0+IFpvZEludGVyc2VjdGlvbixcbiAgWm9kSXNzdWVDb2RlOiAoKSA9PiBab2RJc3N1ZUNvZGUsXG4gIFpvZExhenk6ICgpID0+IFpvZExhenksXG4gIFpvZExpdGVyYWw6ICgpID0+IFpvZExpdGVyYWwsXG4gIFpvZE1hcDogKCkgPT4gWm9kTWFwLFxuICBab2ROYU46ICgpID0+IFpvZE5hTixcbiAgWm9kTmF0aXZlRW51bTogKCkgPT4gWm9kTmF0aXZlRW51bSxcbiAgWm9kTmV2ZXI6ICgpID0+IFpvZE5ldmVyLFxuICBab2ROdWxsOiAoKSA9PiBab2ROdWxsLFxuICBab2ROdWxsYWJsZTogKCkgPT4gWm9kTnVsbGFibGUsXG4gIFpvZE51bWJlcjogKCkgPT4gWm9kTnVtYmVyLFxuICBab2RPYmplY3Q6ICgpID0+IFpvZE9iamVjdCxcbiAgWm9kT3B0aW9uYWw6ICgpID0+IFpvZE9wdGlvbmFsLFxuICBab2RQYXJzZWRUeXBlOiAoKSA9PiBab2RQYXJzZWRUeXBlLFxuICBab2RQaXBlbGluZTogKCkgPT4gWm9kUGlwZWxpbmUsXG4gIFpvZFByb21pc2U6ICgpID0+IFpvZFByb21pc2UsXG4gIFpvZFJlYWRvbmx5OiAoKSA9PiBab2RSZWFkb25seSxcbiAgWm9kUmVjb3JkOiAoKSA9PiBab2RSZWNvcmQsXG4gIFpvZFNjaGVtYTogKCkgPT4gWm9kVHlwZSxcbiAgWm9kU2V0OiAoKSA9PiBab2RTZXQsXG4gIFpvZFN0cmluZzogKCkgPT4gWm9kU3RyaW5nLFxuICBab2RTeW1ib2w6ICgpID0+IFpvZFN5bWJvbCxcbiAgWm9kVHJhbnNmb3JtZXI6ICgpID0+IFpvZEVmZmVjdHMsXG4gIFpvZFR1cGxlOiAoKSA9PiBab2RUdXBsZSxcbiAgWm9kVHlwZTogKCkgPT4gWm9kVHlwZSxcbiAgWm9kVW5kZWZpbmVkOiAoKSA9PiBab2RVbmRlZmluZWQsXG4gIFpvZFVuaW9uOiAoKSA9PiBab2RVbmlvbixcbiAgWm9kVW5rbm93bjogKCkgPT4gWm9kVW5rbm93bixcbiAgWm9kVm9pZDogKCkgPT4gWm9kVm9pZCxcbiAgYWRkSXNzdWVUb0NvbnRleHQ6ICgpID0+IGFkZElzc3VlVG9Db250ZXh0LFxuICBhbnk6ICgpID0+IGFueVR5cGUsXG4gIGFycmF5OiAoKSA9PiBhcnJheVR5cGUsXG4gIGJpZ2ludDogKCkgPT4gYmlnSW50VHlwZSxcbiAgYm9vbGVhbjogKCkgPT4gYm9vbGVhblR5cGUsXG4gIGNvZXJjZTogKCkgPT4gY29lcmNlLFxuICBjdXN0b206ICgpID0+IGN1c3RvbSxcbiAgZGF0ZTogKCkgPT4gZGF0ZVR5cGUsXG4gIGRhdGV0aW1lUmVnZXg6ICgpID0+IGRhdGV0aW1lUmVnZXgsXG4gIGRlZmF1bHRFcnJvck1hcDogKCkgPT4gZW5fZGVmYXVsdCxcbiAgZGlzY3JpbWluYXRlZFVuaW9uOiAoKSA9PiBkaXNjcmltaW5hdGVkVW5pb25UeXBlLFxuICBlZmZlY3Q6ICgpID0+IGVmZmVjdHNUeXBlLFxuICBlbnVtOiAoKSA9PiBlbnVtVHlwZSxcbiAgZnVuY3Rpb246ICgpID0+IGZ1bmN0aW9uVHlwZSxcbiAgZ2V0RXJyb3JNYXA6ICgpID0+IGdldEVycm9yTWFwLFxuICBnZXRQYXJzZWRUeXBlOiAoKSA9PiBnZXRQYXJzZWRUeXBlLFxuICBpbnN0YW5jZW9mOiAoKSA9PiBpbnN0YW5jZU9mVHlwZSxcbiAgaW50ZXJzZWN0aW9uOiAoKSA9PiBpbnRlcnNlY3Rpb25UeXBlLFxuICBpc0Fib3J0ZWQ6ICgpID0+IGlzQWJvcnRlZCxcbiAgaXNBc3luYzogKCkgPT4gaXNBc3luYyxcbiAgaXNEaXJ0eTogKCkgPT4gaXNEaXJ0eSxcbiAgaXNWYWxpZDogKCkgPT4gaXNWYWxpZCxcbiAgbGF0ZTogKCkgPT4gbGF0ZSxcbiAgbGF6eTogKCkgPT4gbGF6eVR5cGUsXG4gIGxpdGVyYWw6ICgpID0+IGxpdGVyYWxUeXBlLFxuICBtYWtlSXNzdWU6ICgpID0+IG1ha2VJc3N1ZSxcbiAgbWFwOiAoKSA9PiBtYXBUeXBlLFxuICBuYW46ICgpID0+IG5hblR5cGUsXG4gIG5hdGl2ZUVudW06ICgpID0+IG5hdGl2ZUVudW1UeXBlLFxuICBuZXZlcjogKCkgPT4gbmV2ZXJUeXBlLFxuICBudWxsOiAoKSA9PiBudWxsVHlwZSxcbiAgbnVsbGFibGU6ICgpID0+IG51bGxhYmxlVHlwZSxcbiAgbnVtYmVyOiAoKSA9PiBudW1iZXJUeXBlLFxuICBvYmplY3Q6ICgpID0+IG9iamVjdFR5cGUsXG4gIG9iamVjdFV0aWw6ICgpID0+IG9iamVjdFV0aWwsXG4gIG9ib29sZWFuOiAoKSA9PiBvYm9vbGVhbixcbiAgb251bWJlcjogKCkgPT4gb251bWJlcixcbiAgb3B0aW9uYWw6ICgpID0+IG9wdGlvbmFsVHlwZSxcbiAgb3N0cmluZzogKCkgPT4gb3N0cmluZyxcbiAgcGlwZWxpbmU6ICgpID0+IHBpcGVsaW5lVHlwZSxcbiAgcHJlcHJvY2VzczogKCkgPT4gcHJlcHJvY2Vzc1R5cGUsXG4gIHByb21pc2U6ICgpID0+IHByb21pc2VUeXBlLFxuICBxdW90ZWxlc3NKc29uOiAoKSA9PiBxdW90ZWxlc3NKc29uLFxuICByZWNvcmQ6ICgpID0+IHJlY29yZFR5cGUsXG4gIHNldDogKCkgPT4gc2V0VHlwZSxcbiAgc2V0RXJyb3JNYXA6ICgpID0+IHNldEVycm9yTWFwLFxuICBzdHJpY3RPYmplY3Q6ICgpID0+IHN0cmljdE9iamVjdFR5cGUsXG4gIHN0cmluZzogKCkgPT4gc3RyaW5nVHlwZSxcbiAgc3ltYm9sOiAoKSA9PiBzeW1ib2xUeXBlLFxuICB0cmFuc2Zvcm1lcjogKCkgPT4gZWZmZWN0c1R5cGUsXG4gIHR1cGxlOiAoKSA9PiB0dXBsZVR5cGUsXG4gIHVuZGVmaW5lZDogKCkgPT4gdW5kZWZpbmVkVHlwZSxcbiAgdW5pb246ICgpID0+IHVuaW9uVHlwZSxcbiAgdW5rbm93bjogKCkgPT4gdW5rbm93blR5cGUsXG4gIHV0aWw6ICgpID0+IHV0aWwsXG4gIHZvaWQ6ICgpID0+IHZvaWRUeXBlXG59KTtcblxuLy8gbm9kZV9tb2R1bGVzL3pvZC92My9oZWxwZXJzL3V0aWwuanNcbnZhciB1dGlsO1xuKGZ1bmN0aW9uKHV0aWwyKSB7XG4gIHV0aWwyLmFzc2VydEVxdWFsID0gKF8yKSA9PiB7XG4gIH07XG4gIGZ1bmN0aW9uIGFzc2VydElzKF9hcmcpIHtcbiAgfVxuICB1dGlsMi5hc3NlcnRJcyA9IGFzc2VydElzO1xuICBmdW5jdGlvbiBhc3NlcnROZXZlcihfeCkge1xuICAgIHRocm93IG5ldyBFcnJvcigpO1xuICB9XG4gIHV0aWwyLmFzc2VydE5ldmVyID0gYXNzZXJ0TmV2ZXI7XG4gIHV0aWwyLmFycmF5VG9FbnVtID0gKGl0ZW1zKSA9PiB7XG4gICAgY29uc3Qgb2JqID0ge307XG4gICAgZm9yIChjb25zdCBpdGVtIG9mIGl0ZW1zKSB7XG4gICAgICBvYmpbaXRlbV0gPSBpdGVtO1xuICAgIH1cbiAgICByZXR1cm4gb2JqO1xuICB9O1xuICB1dGlsMi5nZXRWYWxpZEVudW1WYWx1ZXMgPSAob2JqKSA9PiB7XG4gICAgY29uc3QgdmFsaWRLZXlzID0gdXRpbDIub2JqZWN0S2V5cyhvYmopLmZpbHRlcigoaykgPT4gdHlwZW9mIG9ialtvYmpba11dICE9PSBcIm51bWJlclwiKTtcbiAgICBjb25zdCBmaWx0ZXJlZCA9IHt9O1xuICAgIGZvciAoY29uc3QgayBvZiB2YWxpZEtleXMpIHtcbiAgICAgIGZpbHRlcmVkW2tdID0gb2JqW2tdO1xuICAgIH1cbiAgICByZXR1cm4gdXRpbDIub2JqZWN0VmFsdWVzKGZpbHRlcmVkKTtcbiAgfTtcbiAgdXRpbDIub2JqZWN0VmFsdWVzID0gKG9iaikgPT4ge1xuICAgIHJldHVybiB1dGlsMi5vYmplY3RLZXlzKG9iaikubWFwKGZ1bmN0aW9uKGUpIHtcbiAgICAgIHJldHVybiBvYmpbZV07XG4gICAgfSk7XG4gIH07XG4gIHV0aWwyLm9iamVjdEtleXMgPSB0eXBlb2YgT2JqZWN0LmtleXMgPT09IFwiZnVuY3Rpb25cIiA/IChvYmopID0+IE9iamVjdC5rZXlzKG9iaikgOiAob2JqZWN0KSA9PiB7XG4gICAgY29uc3Qga2V5cyA9IFtdO1xuICAgIGZvciAoY29uc3Qga2V5IGluIG9iamVjdCkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpIHtcbiAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBrZXlzO1xuICB9O1xuICB1dGlsMi5maW5kID0gKGFyciwgY2hlY2tlcikgPT4ge1xuICAgIGZvciAoY29uc3QgaXRlbSBvZiBhcnIpIHtcbiAgICAgIGlmIChjaGVja2VyKGl0ZW0pKVxuICAgICAgICByZXR1cm4gaXRlbTtcbiAgICB9XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfTtcbiAgdXRpbDIuaXNJbnRlZ2VyID0gdHlwZW9mIE51bWJlci5pc0ludGVnZXIgPT09IFwiZnVuY3Rpb25cIiA/ICh2YWwpID0+IE51bWJlci5pc0ludGVnZXIodmFsKSA6ICh2YWwpID0+IHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgJiYgTnVtYmVyLmlzRmluaXRlKHZhbCkgJiYgTWF0aC5mbG9vcih2YWwpID09PSB2YWw7XG4gIGZ1bmN0aW9uIGpvaW5WYWx1ZXMoYXJyYXksIHNlcGFyYXRvciA9IFwiIHwgXCIpIHtcbiAgICByZXR1cm4gYXJyYXkubWFwKCh2YWwpID0+IHR5cGVvZiB2YWwgPT09IFwic3RyaW5nXCIgPyBgJyR7dmFsfSdgIDogdmFsKS5qb2luKHNlcGFyYXRvcik7XG4gIH1cbiAgdXRpbDIuam9pblZhbHVlcyA9IGpvaW5WYWx1ZXM7XG4gIHV0aWwyLmpzb25TdHJpbmdpZnlSZXBsYWNlciA9IChfMiwgdmFsdWUpID0+IHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcImJpZ2ludFwiKSB7XG4gICAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xufSkodXRpbCB8fCAodXRpbCA9IHt9KSk7XG52YXIgb2JqZWN0VXRpbDtcbihmdW5jdGlvbihvYmplY3RVdGlsMikge1xuICBvYmplY3RVdGlsMi5tZXJnZVNoYXBlcyA9IChmaXJzdCwgc2Vjb25kKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLmZpcnN0LFxuICAgICAgLi4uc2Vjb25kXG4gICAgICAvLyBzZWNvbmQgb3ZlcndyaXRlcyBmaXJzdFxuICAgIH07XG4gIH07XG59KShvYmplY3RVdGlsIHx8IChvYmplY3RVdGlsID0ge30pKTtcbnZhciBab2RQYXJzZWRUeXBlID0gdXRpbC5hcnJheVRvRW51bShbXG4gIFwic3RyaW5nXCIsXG4gIFwibmFuXCIsXG4gIFwibnVtYmVyXCIsXG4gIFwiaW50ZWdlclwiLFxuICBcImZsb2F0XCIsXG4gIFwiYm9vbGVhblwiLFxuICBcImRhdGVcIixcbiAgXCJiaWdpbnRcIixcbiAgXCJzeW1ib2xcIixcbiAgXCJmdW5jdGlvblwiLFxuICBcInVuZGVmaW5lZFwiLFxuICBcIm51bGxcIixcbiAgXCJhcnJheVwiLFxuICBcIm9iamVjdFwiLFxuICBcInVua25vd25cIixcbiAgXCJwcm9taXNlXCIsXG4gIFwidm9pZFwiLFxuICBcIm5ldmVyXCIsXG4gIFwibWFwXCIsXG4gIFwic2V0XCJcbl0pO1xudmFyIGdldFBhcnNlZFR5cGUgPSAoZGF0YSkgPT4ge1xuICBjb25zdCB0ID0gdHlwZW9mIGRhdGE7XG4gIHN3aXRjaCAodCkge1xuICAgIGNhc2UgXCJ1bmRlZmluZWRcIjpcbiAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLnVuZGVmaW5lZDtcbiAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS5zdHJpbmc7XG4gICAgY2FzZSBcIm51bWJlclwiOlxuICAgICAgcmV0dXJuIE51bWJlci5pc05hTihkYXRhKSA/IFpvZFBhcnNlZFR5cGUubmFuIDogWm9kUGFyc2VkVHlwZS5udW1iZXI7XG4gICAgY2FzZSBcImJvb2xlYW5cIjpcbiAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLmJvb2xlYW47XG4gICAgY2FzZSBcImZ1bmN0aW9uXCI6XG4gICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS5mdW5jdGlvbjtcbiAgICBjYXNlIFwiYmlnaW50XCI6XG4gICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS5iaWdpbnQ7XG4gICAgY2FzZSBcInN5bWJvbFwiOlxuICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUuc3ltYm9sO1xuICAgIGNhc2UgXCJvYmplY3RcIjpcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLmFycmF5O1xuICAgICAgfVxuICAgICAgaWYgKGRhdGEgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUubnVsbDtcbiAgICAgIH1cbiAgICAgIGlmIChkYXRhLnRoZW4gJiYgdHlwZW9mIGRhdGEudGhlbiA9PT0gXCJmdW5jdGlvblwiICYmIGRhdGEuY2F0Y2ggJiYgdHlwZW9mIGRhdGEuY2F0Y2ggPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS5wcm9taXNlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBNYXAgIT09IFwidW5kZWZpbmVkXCIgJiYgZGF0YSBpbnN0YW5jZW9mIE1hcCkge1xuICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS5tYXA7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIFNldCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkYXRhIGluc3RhbmNlb2YgU2V0KSB7XG4gICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLnNldDtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgRGF0ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkYXRhIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS5kYXRlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUub2JqZWN0O1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS51bmtub3duO1xuICB9XG59O1xuXG4vLyBub2RlX21vZHVsZXMvem9kL3YzL1pvZEVycm9yLmpzXG52YXIgWm9kSXNzdWVDb2RlID0gdXRpbC5hcnJheVRvRW51bShbXG4gIFwiaW52YWxpZF90eXBlXCIsXG4gIFwiaW52YWxpZF9saXRlcmFsXCIsXG4gIFwiY3VzdG9tXCIsXG4gIFwiaW52YWxpZF91bmlvblwiLFxuICBcImludmFsaWRfdW5pb25fZGlzY3JpbWluYXRvclwiLFxuICBcImludmFsaWRfZW51bV92YWx1ZVwiLFxuICBcInVucmVjb2duaXplZF9rZXlzXCIsXG4gIFwiaW52YWxpZF9hcmd1bWVudHNcIixcbiAgXCJpbnZhbGlkX3JldHVybl90eXBlXCIsXG4gIFwiaW52YWxpZF9kYXRlXCIsXG4gIFwiaW52YWxpZF9zdHJpbmdcIixcbiAgXCJ0b29fc21hbGxcIixcbiAgXCJ0b29fYmlnXCIsXG4gIFwiaW52YWxpZF9pbnRlcnNlY3Rpb25fdHlwZXNcIixcbiAgXCJub3RfbXVsdGlwbGVfb2ZcIixcbiAgXCJub3RfZmluaXRlXCJcbl0pO1xudmFyIHF1b3RlbGVzc0pzb24gPSAob2JqKSA9PiB7XG4gIGNvbnN0IGpzb24gPSBKU09OLnN0cmluZ2lmeShvYmosIG51bGwsIDIpO1xuICByZXR1cm4ganNvbi5yZXBsYWNlKC9cIihbXlwiXSspXCI6L2csIFwiJDE6XCIpO1xufTtcbnZhciBab2RFcnJvciA9IGNsYXNzIF9ab2RFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgZ2V0IGVycm9ycygpIHtcbiAgICByZXR1cm4gdGhpcy5pc3N1ZXM7XG4gIH1cbiAgY29uc3RydWN0b3IoaXNzdWVzKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmlzc3VlcyA9IFtdO1xuICAgIHRoaXMuYWRkSXNzdWUgPSAoc3ViKSA9PiB7XG4gICAgICB0aGlzLmlzc3VlcyA9IFsuLi50aGlzLmlzc3Vlcywgc3ViXTtcbiAgICB9O1xuICAgIHRoaXMuYWRkSXNzdWVzID0gKHN1YnMgPSBbXSkgPT4ge1xuICAgICAgdGhpcy5pc3N1ZXMgPSBbLi4udGhpcy5pc3N1ZXMsIC4uLnN1YnNdO1xuICAgIH07XG4gICAgY29uc3QgYWN0dWFsUHJvdG8gPSBuZXcudGFyZ2V0LnByb3RvdHlwZTtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgYWN0dWFsUHJvdG8pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9fcHJvdG9fXyA9IGFjdHVhbFByb3RvO1xuICAgIH1cbiAgICB0aGlzLm5hbWUgPSBcIlpvZEVycm9yXCI7XG4gICAgdGhpcy5pc3N1ZXMgPSBpc3N1ZXM7XG4gIH1cbiAgZm9ybWF0KF9tYXBwZXIpIHtcbiAgICBjb25zdCBtYXBwZXIgPSBfbWFwcGVyIHx8IGZ1bmN0aW9uKGlzc3VlKSB7XG4gICAgICByZXR1cm4gaXNzdWUubWVzc2FnZTtcbiAgICB9O1xuICAgIGNvbnN0IGZpZWxkRXJyb3JzID0geyBfZXJyb3JzOiBbXSB9O1xuICAgIGNvbnN0IHByb2Nlc3NFcnJvciA9IChlcnJvcikgPT4ge1xuICAgICAgZm9yIChjb25zdCBpc3N1ZSBvZiBlcnJvci5pc3N1ZXMpIHtcbiAgICAgICAgaWYgKGlzc3VlLmNvZGUgPT09IFwiaW52YWxpZF91bmlvblwiKSB7XG4gICAgICAgICAgaXNzdWUudW5pb25FcnJvcnMubWFwKHByb2Nlc3NFcnJvcik7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNzdWUuY29kZSA9PT0gXCJpbnZhbGlkX3JldHVybl90eXBlXCIpIHtcbiAgICAgICAgICBwcm9jZXNzRXJyb3IoaXNzdWUucmV0dXJuVHlwZUVycm9yKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc3N1ZS5jb2RlID09PSBcImludmFsaWRfYXJndW1lbnRzXCIpIHtcbiAgICAgICAgICBwcm9jZXNzRXJyb3IoaXNzdWUuYXJndW1lbnRzRXJyb3IpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzc3VlLnBhdGgubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgZmllbGRFcnJvcnMuX2Vycm9ycy5wdXNoKG1hcHBlcihpc3N1ZSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxldCBjdXJyID0gZmllbGRFcnJvcnM7XG4gICAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICAgIHdoaWxlIChpIDwgaXNzdWUucGF0aC5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IGVsID0gaXNzdWUucGF0aFtpXTtcbiAgICAgICAgICAgIGNvbnN0IHRlcm1pbmFsID0gaSA9PT0gaXNzdWUucGF0aC5sZW5ndGggLSAxO1xuICAgICAgICAgICAgaWYgKCF0ZXJtaW5hbCkge1xuICAgICAgICAgICAgICBjdXJyW2VsXSA9IGN1cnJbZWxdIHx8IHsgX2Vycm9yczogW10gfTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGN1cnJbZWxdID0gY3VycltlbF0gfHwgeyBfZXJyb3JzOiBbXSB9O1xuICAgICAgICAgICAgICBjdXJyW2VsXS5fZXJyb3JzLnB1c2gobWFwcGVyKGlzc3VlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXJyID0gY3VycltlbF07XG4gICAgICAgICAgICBpKys7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBwcm9jZXNzRXJyb3IodGhpcyk7XG4gICAgcmV0dXJuIGZpZWxkRXJyb3JzO1xuICB9XG4gIHN0YXRpYyBhc3NlcnQodmFsdWUpIHtcbiAgICBpZiAoISh2YWx1ZSBpbnN0YW5jZW9mIF9ab2RFcnJvcikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTm90IGEgWm9kRXJyb3I6ICR7dmFsdWV9YCk7XG4gICAgfVxuICB9XG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1lc3NhZ2U7XG4gIH1cbiAgZ2V0IG1lc3NhZ2UoKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMuaXNzdWVzLCB1dGlsLmpzb25TdHJpbmdpZnlSZXBsYWNlciwgMik7XG4gIH1cbiAgZ2V0IGlzRW1wdHkoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNzdWVzLmxlbmd0aCA9PT0gMDtcbiAgfVxuICBmbGF0dGVuKG1hcHBlciA9IChpc3N1ZSkgPT4gaXNzdWUubWVzc2FnZSkge1xuICAgIGNvbnN0IGZpZWxkRXJyb3JzID0ge307XG4gICAgY29uc3QgZm9ybUVycm9ycyA9IFtdO1xuICAgIGZvciAoY29uc3Qgc3ViIG9mIHRoaXMuaXNzdWVzKSB7XG4gICAgICBpZiAoc3ViLnBhdGgubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBmaXJzdEVsID0gc3ViLnBhdGhbMF07XG4gICAgICAgIGZpZWxkRXJyb3JzW2ZpcnN0RWxdID0gZmllbGRFcnJvcnNbZmlyc3RFbF0gfHwgW107XG4gICAgICAgIGZpZWxkRXJyb3JzW2ZpcnN0RWxdLnB1c2gobWFwcGVyKHN1YikpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9ybUVycm9ycy5wdXNoKG1hcHBlcihzdWIpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHsgZm9ybUVycm9ycywgZmllbGRFcnJvcnMgfTtcbiAgfVxuICBnZXQgZm9ybUVycm9ycygpIHtcbiAgICByZXR1cm4gdGhpcy5mbGF0dGVuKCk7XG4gIH1cbn07XG5ab2RFcnJvci5jcmVhdGUgPSAoaXNzdWVzKSA9PiB7XG4gIGNvbnN0IGVycm9yID0gbmV3IFpvZEVycm9yKGlzc3Vlcyk7XG4gIHJldHVybiBlcnJvcjtcbn07XG5cbi8vIG5vZGVfbW9kdWxlcy96b2QvdjMvbG9jYWxlcy9lbi5qc1xudmFyIGVycm9yTWFwID0gKGlzc3VlLCBfY3R4KSA9PiB7XG4gIGxldCBtZXNzYWdlO1xuICBzd2l0Y2ggKGlzc3VlLmNvZGUpIHtcbiAgICBjYXNlIFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGU6XG4gICAgICBpZiAoaXNzdWUucmVjZWl2ZWQgPT09IFpvZFBhcnNlZFR5cGUudW5kZWZpbmVkKSB7XG4gICAgICAgIG1lc3NhZ2UgPSBcIlJlcXVpcmVkXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtZXNzYWdlID0gYEV4cGVjdGVkICR7aXNzdWUuZXhwZWN0ZWR9LCByZWNlaXZlZCAke2lzc3VlLnJlY2VpdmVkfWA7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIFpvZElzc3VlQ29kZS5pbnZhbGlkX2xpdGVyYWw6XG4gICAgICBtZXNzYWdlID0gYEludmFsaWQgbGl0ZXJhbCB2YWx1ZSwgZXhwZWN0ZWQgJHtKU09OLnN0cmluZ2lmeShpc3N1ZS5leHBlY3RlZCwgdXRpbC5qc29uU3RyaW5naWZ5UmVwbGFjZXIpfWA7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFpvZElzc3VlQ29kZS51bnJlY29nbml6ZWRfa2V5czpcbiAgICAgIG1lc3NhZ2UgPSBgVW5yZWNvZ25pemVkIGtleShzKSBpbiBvYmplY3Q6ICR7dXRpbC5qb2luVmFsdWVzKGlzc3VlLmtleXMsIFwiLCBcIil9YDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgWm9kSXNzdWVDb2RlLmludmFsaWRfdW5pb246XG4gICAgICBtZXNzYWdlID0gYEludmFsaWQgaW5wdXRgO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBab2RJc3N1ZUNvZGUuaW52YWxpZF91bmlvbl9kaXNjcmltaW5hdG9yOlxuICAgICAgbWVzc2FnZSA9IGBJbnZhbGlkIGRpc2NyaW1pbmF0b3IgdmFsdWUuIEV4cGVjdGVkICR7dXRpbC5qb2luVmFsdWVzKGlzc3VlLm9wdGlvbnMpfWA7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFpvZElzc3VlQ29kZS5pbnZhbGlkX2VudW1fdmFsdWU6XG4gICAgICBtZXNzYWdlID0gYEludmFsaWQgZW51bSB2YWx1ZS4gRXhwZWN0ZWQgJHt1dGlsLmpvaW5WYWx1ZXMoaXNzdWUub3B0aW9ucyl9LCByZWNlaXZlZCAnJHtpc3N1ZS5yZWNlaXZlZH0nYDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgWm9kSXNzdWVDb2RlLmludmFsaWRfYXJndW1lbnRzOlxuICAgICAgbWVzc2FnZSA9IGBJbnZhbGlkIGZ1bmN0aW9uIGFyZ3VtZW50c2A7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFpvZElzc3VlQ29kZS5pbnZhbGlkX3JldHVybl90eXBlOlxuICAgICAgbWVzc2FnZSA9IGBJbnZhbGlkIGZ1bmN0aW9uIHJldHVybiB0eXBlYDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgWm9kSXNzdWVDb2RlLmludmFsaWRfZGF0ZTpcbiAgICAgIG1lc3NhZ2UgPSBgSW52YWxpZCBkYXRlYDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgWm9kSXNzdWVDb2RlLmludmFsaWRfc3RyaW5nOlxuICAgICAgaWYgKHR5cGVvZiBpc3N1ZS52YWxpZGF0aW9uID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIGlmIChcImluY2x1ZGVzXCIgaW4gaXNzdWUudmFsaWRhdGlvbikge1xuICAgICAgICAgIG1lc3NhZ2UgPSBgSW52YWxpZCBpbnB1dDogbXVzdCBpbmNsdWRlIFwiJHtpc3N1ZS52YWxpZGF0aW9uLmluY2x1ZGVzfVwiYDtcbiAgICAgICAgICBpZiAodHlwZW9mIGlzc3VlLnZhbGlkYXRpb24ucG9zaXRpb24gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBgJHttZXNzYWdlfSBhdCBvbmUgb3IgbW9yZSBwb3NpdGlvbnMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvICR7aXNzdWUudmFsaWRhdGlvbi5wb3NpdGlvbn1gO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChcInN0YXJ0c1dpdGhcIiBpbiBpc3N1ZS52YWxpZGF0aW9uKSB7XG4gICAgICAgICAgbWVzc2FnZSA9IGBJbnZhbGlkIGlucHV0OiBtdXN0IHN0YXJ0IHdpdGggXCIke2lzc3VlLnZhbGlkYXRpb24uc3RhcnRzV2l0aH1cImA7XG4gICAgICAgIH0gZWxzZSBpZiAoXCJlbmRzV2l0aFwiIGluIGlzc3VlLnZhbGlkYXRpb24pIHtcbiAgICAgICAgICBtZXNzYWdlID0gYEludmFsaWQgaW5wdXQ6IG11c3QgZW5kIHdpdGggXCIke2lzc3VlLnZhbGlkYXRpb24uZW5kc1dpdGh9XCJgO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHV0aWwuYXNzZXJ0TmV2ZXIoaXNzdWUudmFsaWRhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaXNzdWUudmFsaWRhdGlvbiAhPT0gXCJyZWdleFwiKSB7XG4gICAgICAgIG1lc3NhZ2UgPSBgSW52YWxpZCAke2lzc3VlLnZhbGlkYXRpb259YDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1lc3NhZ2UgPSBcIkludmFsaWRcIjtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgWm9kSXNzdWVDb2RlLnRvb19zbWFsbDpcbiAgICAgIGlmIChpc3N1ZS50eXBlID09PSBcImFycmF5XCIpXG4gICAgICAgIG1lc3NhZ2UgPSBgQXJyYXkgbXVzdCBjb250YWluICR7aXNzdWUuZXhhY3QgPyBcImV4YWN0bHlcIiA6IGlzc3VlLmluY2x1c2l2ZSA/IGBhdCBsZWFzdGAgOiBgbW9yZSB0aGFuYH0gJHtpc3N1ZS5taW5pbXVtfSBlbGVtZW50KHMpYDtcbiAgICAgIGVsc2UgaWYgKGlzc3VlLnR5cGUgPT09IFwic3RyaW5nXCIpXG4gICAgICAgIG1lc3NhZ2UgPSBgU3RyaW5nIG11c3QgY29udGFpbiAke2lzc3VlLmV4YWN0ID8gXCJleGFjdGx5XCIgOiBpc3N1ZS5pbmNsdXNpdmUgPyBgYXQgbGVhc3RgIDogYG92ZXJgfSAke2lzc3VlLm1pbmltdW19IGNoYXJhY3RlcihzKWA7XG4gICAgICBlbHNlIGlmIChpc3N1ZS50eXBlID09PSBcIm51bWJlclwiKVxuICAgICAgICBtZXNzYWdlID0gYE51bWJlciBtdXN0IGJlICR7aXNzdWUuZXhhY3QgPyBgZXhhY3RseSBlcXVhbCB0byBgIDogaXNzdWUuaW5jbHVzaXZlID8gYGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byBgIDogYGdyZWF0ZXIgdGhhbiBgfSR7aXNzdWUubWluaW11bX1gO1xuICAgICAgZWxzZSBpZiAoaXNzdWUudHlwZSA9PT0gXCJiaWdpbnRcIilcbiAgICAgICAgbWVzc2FnZSA9IGBOdW1iZXIgbXVzdCBiZSAke2lzc3VlLmV4YWN0ID8gYGV4YWN0bHkgZXF1YWwgdG8gYCA6IGlzc3VlLmluY2x1c2l2ZSA/IGBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gYCA6IGBncmVhdGVyIHRoYW4gYH0ke2lzc3VlLm1pbmltdW19YDtcbiAgICAgIGVsc2UgaWYgKGlzc3VlLnR5cGUgPT09IFwiZGF0ZVwiKVxuICAgICAgICBtZXNzYWdlID0gYERhdGUgbXVzdCBiZSAke2lzc3VlLmV4YWN0ID8gYGV4YWN0bHkgZXF1YWwgdG8gYCA6IGlzc3VlLmluY2x1c2l2ZSA/IGBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gYCA6IGBncmVhdGVyIHRoYW4gYH0ke25ldyBEYXRlKE51bWJlcihpc3N1ZS5taW5pbXVtKSl9YDtcbiAgICAgIGVsc2VcbiAgICAgICAgbWVzc2FnZSA9IFwiSW52YWxpZCBpbnB1dFwiO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBab2RJc3N1ZUNvZGUudG9vX2JpZzpcbiAgICAgIGlmIChpc3N1ZS50eXBlID09PSBcImFycmF5XCIpXG4gICAgICAgIG1lc3NhZ2UgPSBgQXJyYXkgbXVzdCBjb250YWluICR7aXNzdWUuZXhhY3QgPyBgZXhhY3RseWAgOiBpc3N1ZS5pbmNsdXNpdmUgPyBgYXQgbW9zdGAgOiBgbGVzcyB0aGFuYH0gJHtpc3N1ZS5tYXhpbXVtfSBlbGVtZW50KHMpYDtcbiAgICAgIGVsc2UgaWYgKGlzc3VlLnR5cGUgPT09IFwic3RyaW5nXCIpXG4gICAgICAgIG1lc3NhZ2UgPSBgU3RyaW5nIG11c3QgY29udGFpbiAke2lzc3VlLmV4YWN0ID8gYGV4YWN0bHlgIDogaXNzdWUuaW5jbHVzaXZlID8gYGF0IG1vc3RgIDogYHVuZGVyYH0gJHtpc3N1ZS5tYXhpbXVtfSBjaGFyYWN0ZXIocylgO1xuICAgICAgZWxzZSBpZiAoaXNzdWUudHlwZSA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgbWVzc2FnZSA9IGBOdW1iZXIgbXVzdCBiZSAke2lzc3VlLmV4YWN0ID8gYGV4YWN0bHlgIDogaXNzdWUuaW5jbHVzaXZlID8gYGxlc3MgdGhhbiBvciBlcXVhbCB0b2AgOiBgbGVzcyB0aGFuYH0gJHtpc3N1ZS5tYXhpbXVtfWA7XG4gICAgICBlbHNlIGlmIChpc3N1ZS50eXBlID09PSBcImJpZ2ludFwiKVxuICAgICAgICBtZXNzYWdlID0gYEJpZ0ludCBtdXN0IGJlICR7aXNzdWUuZXhhY3QgPyBgZXhhY3RseWAgOiBpc3N1ZS5pbmNsdXNpdmUgPyBgbGVzcyB0aGFuIG9yIGVxdWFsIHRvYCA6IGBsZXNzIHRoYW5gfSAke2lzc3VlLm1heGltdW19YDtcbiAgICAgIGVsc2UgaWYgKGlzc3VlLnR5cGUgPT09IFwiZGF0ZVwiKVxuICAgICAgICBtZXNzYWdlID0gYERhdGUgbXVzdCBiZSAke2lzc3VlLmV4YWN0ID8gYGV4YWN0bHlgIDogaXNzdWUuaW5jbHVzaXZlID8gYHNtYWxsZXIgdGhhbiBvciBlcXVhbCB0b2AgOiBgc21hbGxlciB0aGFuYH0gJHtuZXcgRGF0ZShOdW1iZXIoaXNzdWUubWF4aW11bSkpfWA7XG4gICAgICBlbHNlXG4gICAgICAgIG1lc3NhZ2UgPSBcIkludmFsaWQgaW5wdXRcIjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgWm9kSXNzdWVDb2RlLmN1c3RvbTpcbiAgICAgIG1lc3NhZ2UgPSBgSW52YWxpZCBpbnB1dGA7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFpvZElzc3VlQ29kZS5pbnZhbGlkX2ludGVyc2VjdGlvbl90eXBlczpcbiAgICAgIG1lc3NhZ2UgPSBgSW50ZXJzZWN0aW9uIHJlc3VsdHMgY291bGQgbm90IGJlIG1lcmdlZGA7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFpvZElzc3VlQ29kZS5ub3RfbXVsdGlwbGVfb2Y6XG4gICAgICBtZXNzYWdlID0gYE51bWJlciBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgJHtpc3N1ZS5tdWx0aXBsZU9mfWA7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFpvZElzc3VlQ29kZS5ub3RfZmluaXRlOlxuICAgICAgbWVzc2FnZSA9IFwiTnVtYmVyIG11c3QgYmUgZmluaXRlXCI7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgbWVzc2FnZSA9IF9jdHguZGVmYXVsdEVycm9yO1xuICAgICAgdXRpbC5hc3NlcnROZXZlcihpc3N1ZSk7XG4gIH1cbiAgcmV0dXJuIHsgbWVzc2FnZSB9O1xufTtcbnZhciBlbl9kZWZhdWx0ID0gZXJyb3JNYXA7XG5cbi8vIG5vZGVfbW9kdWxlcy96b2QvdjMvZXJyb3JzLmpzXG52YXIgb3ZlcnJpZGVFcnJvck1hcCA9IGVuX2RlZmF1bHQ7XG5mdW5jdGlvbiBzZXRFcnJvck1hcChtYXApIHtcbiAgb3ZlcnJpZGVFcnJvck1hcCA9IG1hcDtcbn1cbmZ1bmN0aW9uIGdldEVycm9yTWFwKCkge1xuICByZXR1cm4gb3ZlcnJpZGVFcnJvck1hcDtcbn1cblxuLy8gbm9kZV9tb2R1bGVzL3pvZC92My9oZWxwZXJzL3BhcnNlVXRpbC5qc1xudmFyIG1ha2VJc3N1ZSA9IChwYXJhbXMpID0+IHtcbiAgY29uc3QgeyBkYXRhLCBwYXRoLCBlcnJvck1hcHMsIGlzc3VlRGF0YSB9ID0gcGFyYW1zO1xuICBjb25zdCBmdWxsUGF0aCA9IFsuLi5wYXRoLCAuLi5pc3N1ZURhdGEucGF0aCB8fCBbXV07XG4gIGNvbnN0IGZ1bGxJc3N1ZSA9IHtcbiAgICAuLi5pc3N1ZURhdGEsXG4gICAgcGF0aDogZnVsbFBhdGhcbiAgfTtcbiAgaWYgKGlzc3VlRGF0YS5tZXNzYWdlICE9PSB2b2lkIDApIHtcbiAgICByZXR1cm4ge1xuICAgICAgLi4uaXNzdWVEYXRhLFxuICAgICAgcGF0aDogZnVsbFBhdGgsXG4gICAgICBtZXNzYWdlOiBpc3N1ZURhdGEubWVzc2FnZVxuICAgIH07XG4gIH1cbiAgbGV0IGVycm9yTWVzc2FnZSA9IFwiXCI7XG4gIGNvbnN0IG1hcHMgPSBlcnJvck1hcHMuZmlsdGVyKChtKSA9PiAhIW0pLnNsaWNlKCkucmV2ZXJzZSgpO1xuICBmb3IgKGNvbnN0IG1hcCBvZiBtYXBzKSB7XG4gICAgZXJyb3JNZXNzYWdlID0gbWFwKGZ1bGxJc3N1ZSwgeyBkYXRhLCBkZWZhdWx0RXJyb3I6IGVycm9yTWVzc2FnZSB9KS5tZXNzYWdlO1xuICB9XG4gIHJldHVybiB7XG4gICAgLi4uaXNzdWVEYXRhLFxuICAgIHBhdGg6IGZ1bGxQYXRoLFxuICAgIG1lc3NhZ2U6IGVycm9yTWVzc2FnZVxuICB9O1xufTtcbnZhciBFTVBUWV9QQVRIID0gW107XG5mdW5jdGlvbiBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIGlzc3VlRGF0YSkge1xuICBjb25zdCBvdmVycmlkZU1hcCA9IGdldEVycm9yTWFwKCk7XG4gIGNvbnN0IGlzc3VlID0gbWFrZUlzc3VlKHtcbiAgICBpc3N1ZURhdGEsXG4gICAgZGF0YTogY3R4LmRhdGEsXG4gICAgcGF0aDogY3R4LnBhdGgsXG4gICAgZXJyb3JNYXBzOiBbXG4gICAgICBjdHguY29tbW9uLmNvbnRleHR1YWxFcnJvck1hcCxcbiAgICAgIC8vIGNvbnRleHR1YWwgZXJyb3IgbWFwIGlzIGZpcnN0IHByaW9yaXR5XG4gICAgICBjdHguc2NoZW1hRXJyb3JNYXAsXG4gICAgICAvLyB0aGVuIHNjaGVtYS1ib3VuZCBtYXAgaWYgYXZhaWxhYmxlXG4gICAgICBvdmVycmlkZU1hcCxcbiAgICAgIC8vIHRoZW4gZ2xvYmFsIG92ZXJyaWRlIG1hcFxuICAgICAgb3ZlcnJpZGVNYXAgPT09IGVuX2RlZmF1bHQgPyB2b2lkIDAgOiBlbl9kZWZhdWx0XG4gICAgICAvLyB0aGVuIGdsb2JhbCBkZWZhdWx0IG1hcFxuICAgIF0uZmlsdGVyKCh4KSA9PiAhIXgpXG4gIH0pO1xuICBjdHguY29tbW9uLmlzc3Vlcy5wdXNoKGlzc3VlKTtcbn1cbnZhciBQYXJzZVN0YXR1cyA9IGNsYXNzIF9QYXJzZVN0YXR1cyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMudmFsdWUgPSBcInZhbGlkXCI7XG4gIH1cbiAgZGlydHkoKSB7XG4gICAgaWYgKHRoaXMudmFsdWUgPT09IFwidmFsaWRcIilcbiAgICAgIHRoaXMudmFsdWUgPSBcImRpcnR5XCI7XG4gIH1cbiAgYWJvcnQoKSB7XG4gICAgaWYgKHRoaXMudmFsdWUgIT09IFwiYWJvcnRlZFwiKVxuICAgICAgdGhpcy52YWx1ZSA9IFwiYWJvcnRlZFwiO1xuICB9XG4gIHN0YXRpYyBtZXJnZUFycmF5KHN0YXR1cywgcmVzdWx0cykge1xuICAgIGNvbnN0IGFycmF5VmFsdWUgPSBbXTtcbiAgICBmb3IgKGNvbnN0IHMgb2YgcmVzdWx0cykge1xuICAgICAgaWYgKHMuc3RhdHVzID09PSBcImFib3J0ZWRcIilcbiAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICBpZiAocy5zdGF0dXMgPT09IFwiZGlydHlcIilcbiAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICBhcnJheVZhbHVlLnB1c2gocy52YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiB7IHN0YXR1czogc3RhdHVzLnZhbHVlLCB2YWx1ZTogYXJyYXlWYWx1ZSB9O1xuICB9XG4gIHN0YXRpYyBhc3luYyBtZXJnZU9iamVjdEFzeW5jKHN0YXR1cywgcGFpcnMpIHtcbiAgICBjb25zdCBzeW5jUGFpcnMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IHBhaXIgb2YgcGFpcnMpIHtcbiAgICAgIGNvbnN0IGtleSA9IGF3YWl0IHBhaXIua2V5O1xuICAgICAgY29uc3QgdmFsdWUgPSBhd2FpdCBwYWlyLnZhbHVlO1xuICAgICAgc3luY1BhaXJzLnB1c2goe1xuICAgICAgICBrZXksXG4gICAgICAgIHZhbHVlXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIF9QYXJzZVN0YXR1cy5tZXJnZU9iamVjdFN5bmMoc3RhdHVzLCBzeW5jUGFpcnMpO1xuICB9XG4gIHN0YXRpYyBtZXJnZU9iamVjdFN5bmMoc3RhdHVzLCBwYWlycykge1xuICAgIGNvbnN0IGZpbmFsT2JqZWN0ID0ge307XG4gICAgZm9yIChjb25zdCBwYWlyIG9mIHBhaXJzKSB7XG4gICAgICBjb25zdCB7IGtleSwgdmFsdWUgfSA9IHBhaXI7XG4gICAgICBpZiAoa2V5LnN0YXR1cyA9PT0gXCJhYm9ydGVkXCIpXG4gICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgaWYgKHZhbHVlLnN0YXR1cyA9PT0gXCJhYm9ydGVkXCIpXG4gICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgaWYgKGtleS5zdGF0dXMgPT09IFwiZGlydHlcIilcbiAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICBpZiAodmFsdWUuc3RhdHVzID09PSBcImRpcnR5XCIpXG4gICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgaWYgKGtleS52YWx1ZSAhPT0gXCJfX3Byb3RvX19cIiAmJiAodHlwZW9mIHZhbHVlLnZhbHVlICE9PSBcInVuZGVmaW5lZFwiIHx8IHBhaXIuYWx3YXlzU2V0KSkge1xuICAgICAgICBmaW5hbE9iamVjdFtrZXkudmFsdWVdID0gdmFsdWUudmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7IHN0YXR1czogc3RhdHVzLnZhbHVlLCB2YWx1ZTogZmluYWxPYmplY3QgfTtcbiAgfVxufTtcbnZhciBJTlZBTElEID0gT2JqZWN0LmZyZWV6ZSh7XG4gIHN0YXR1czogXCJhYm9ydGVkXCJcbn0pO1xudmFyIERJUlRZID0gKHZhbHVlKSA9PiAoeyBzdGF0dXM6IFwiZGlydHlcIiwgdmFsdWUgfSk7XG52YXIgT0sgPSAodmFsdWUpID0+ICh7IHN0YXR1czogXCJ2YWxpZFwiLCB2YWx1ZSB9KTtcbnZhciBpc0Fib3J0ZWQgPSAoeCkgPT4geC5zdGF0dXMgPT09IFwiYWJvcnRlZFwiO1xudmFyIGlzRGlydHkgPSAoeCkgPT4geC5zdGF0dXMgPT09IFwiZGlydHlcIjtcbnZhciBpc1ZhbGlkID0gKHgpID0+IHguc3RhdHVzID09PSBcInZhbGlkXCI7XG52YXIgaXNBc3luYyA9ICh4KSA9PiB0eXBlb2YgUHJvbWlzZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiB4IGluc3RhbmNlb2YgUHJvbWlzZTtcblxuLy8gbm9kZV9tb2R1bGVzL3pvZC92My9oZWxwZXJzL2Vycm9yVXRpbC5qc1xudmFyIGVycm9yVXRpbDtcbihmdW5jdGlvbihlcnJvclV0aWwyKSB7XG4gIGVycm9yVXRpbDIuZXJyVG9PYmogPSAobWVzc2FnZSkgPT4gdHlwZW9mIG1lc3NhZ2UgPT09IFwic3RyaW5nXCIgPyB7IG1lc3NhZ2UgfSA6IG1lc3NhZ2UgfHwge307XG4gIGVycm9yVXRpbDIudG9TdHJpbmcgPSAobWVzc2FnZSkgPT4gdHlwZW9mIG1lc3NhZ2UgPT09IFwic3RyaW5nXCIgPyBtZXNzYWdlIDogbWVzc2FnZT8ubWVzc2FnZTtcbn0pKGVycm9yVXRpbCB8fCAoZXJyb3JVdGlsID0ge30pKTtcblxuLy8gbm9kZV9tb2R1bGVzL3pvZC92My90eXBlcy5qc1xudmFyIFBhcnNlSW5wdXRMYXp5UGF0aCA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IocGFyZW50LCB2YWx1ZSwgcGF0aCwga2V5KSB7XG4gICAgdGhpcy5fY2FjaGVkUGF0aCA9IFtdO1xuICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICAgIHRoaXMuZGF0YSA9IHZhbHVlO1xuICAgIHRoaXMuX3BhdGggPSBwYXRoO1xuICAgIHRoaXMuX2tleSA9IGtleTtcbiAgfVxuICBnZXQgcGF0aCgpIHtcbiAgICBpZiAoIXRoaXMuX2NhY2hlZFBhdGgubGVuZ3RoKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLl9rZXkpKSB7XG4gICAgICAgIHRoaXMuX2NhY2hlZFBhdGgucHVzaCguLi50aGlzLl9wYXRoLCAuLi50aGlzLl9rZXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fY2FjaGVkUGF0aC5wdXNoKC4uLnRoaXMuX3BhdGgsIHRoaXMuX2tleSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9jYWNoZWRQYXRoO1xuICB9XG59O1xudmFyIGhhbmRsZVJlc3VsdCA9IChjdHgsIHJlc3VsdCkgPT4ge1xuICBpZiAoaXNWYWxpZChyZXN1bHQpKSB7XG4gICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgZGF0YTogcmVzdWx0LnZhbHVlIH07XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFjdHguY29tbW9uLmlzc3Vlcy5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlZhbGlkYXRpb24gZmFpbGVkIGJ1dCBubyBpc3N1ZXMgZGV0ZWN0ZWQuXCIpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICBnZXQgZXJyb3IoKSB7XG4gICAgICAgIGlmICh0aGlzLl9lcnJvcilcbiAgICAgICAgICByZXR1cm4gdGhpcy5fZXJyb3I7XG4gICAgICAgIGNvbnN0IGVycm9yID0gbmV3IFpvZEVycm9yKGN0eC5jb21tb24uaXNzdWVzKTtcbiAgICAgICAgdGhpcy5fZXJyb3IgPSBlcnJvcjtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Vycm9yO1xuICAgICAgfVxuICAgIH07XG4gIH1cbn07XG5mdW5jdGlvbiBwcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcykge1xuICBpZiAoIXBhcmFtcylcbiAgICByZXR1cm4ge307XG4gIGNvbnN0IHsgZXJyb3JNYXA6IGVycm9yTWFwMiwgaW52YWxpZF90eXBlX2Vycm9yLCByZXF1aXJlZF9lcnJvciwgZGVzY3JpcHRpb24gfSA9IHBhcmFtcztcbiAgaWYgKGVycm9yTWFwMiAmJiAoaW52YWxpZF90eXBlX2Vycm9yIHx8IHJlcXVpcmVkX2Vycm9yKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgQ2FuJ3QgdXNlIFwiaW52YWxpZF90eXBlX2Vycm9yXCIgb3IgXCJyZXF1aXJlZF9lcnJvclwiIGluIGNvbmp1bmN0aW9uIHdpdGggY3VzdG9tIGVycm9yIG1hcC5gKTtcbiAgfVxuICBpZiAoZXJyb3JNYXAyKVxuICAgIHJldHVybiB7IGVycm9yTWFwOiBlcnJvck1hcDIsIGRlc2NyaXB0aW9uIH07XG4gIGNvbnN0IGN1c3RvbU1hcCA9IChpc3MsIGN0eCkgPT4ge1xuICAgIGNvbnN0IHsgbWVzc2FnZSB9ID0gcGFyYW1zO1xuICAgIGlmIChpc3MuY29kZSA9PT0gXCJpbnZhbGlkX2VudW1fdmFsdWVcIikge1xuICAgICAgcmV0dXJuIHsgbWVzc2FnZTogbWVzc2FnZSA/PyBjdHguZGVmYXVsdEVycm9yIH07XG4gICAgfVxuICAgIGlmICh0eXBlb2YgY3R4LmRhdGEgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB7IG1lc3NhZ2U6IG1lc3NhZ2UgPz8gcmVxdWlyZWRfZXJyb3IgPz8gY3R4LmRlZmF1bHRFcnJvciB9O1xuICAgIH1cbiAgICBpZiAoaXNzLmNvZGUgIT09IFwiaW52YWxpZF90eXBlXCIpXG4gICAgICByZXR1cm4geyBtZXNzYWdlOiBjdHguZGVmYXVsdEVycm9yIH07XG4gICAgcmV0dXJuIHsgbWVzc2FnZTogbWVzc2FnZSA/PyBpbnZhbGlkX3R5cGVfZXJyb3IgPz8gY3R4LmRlZmF1bHRFcnJvciB9O1xuICB9O1xuICByZXR1cm4geyBlcnJvck1hcDogY3VzdG9tTWFwLCBkZXNjcmlwdGlvbiB9O1xufVxudmFyIFpvZFR5cGUgPSBjbGFzcyB7XG4gIGdldCBkZXNjcmlwdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fZGVmLmRlc2NyaXB0aW9uO1xuICB9XG4gIF9nZXRUeXBlKGlucHV0KSB7XG4gICAgcmV0dXJuIGdldFBhcnNlZFR5cGUoaW5wdXQuZGF0YSk7XG4gIH1cbiAgX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpIHtcbiAgICByZXR1cm4gY3R4IHx8IHtcbiAgICAgIGNvbW1vbjogaW5wdXQucGFyZW50LmNvbW1vbixcbiAgICAgIGRhdGE6IGlucHV0LmRhdGEsXG4gICAgICBwYXJzZWRUeXBlOiBnZXRQYXJzZWRUeXBlKGlucHV0LmRhdGEpLFxuICAgICAgc2NoZW1hRXJyb3JNYXA6IHRoaXMuX2RlZi5lcnJvck1hcCxcbiAgICAgIHBhdGg6IGlucHV0LnBhdGgsXG4gICAgICBwYXJlbnQ6IGlucHV0LnBhcmVudFxuICAgIH07XG4gIH1cbiAgX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCkge1xuICAgIHJldHVybiB7XG4gICAgICBzdGF0dXM6IG5ldyBQYXJzZVN0YXR1cygpLFxuICAgICAgY3R4OiB7XG4gICAgICAgIGNvbW1vbjogaW5wdXQucGFyZW50LmNvbW1vbixcbiAgICAgICAgZGF0YTogaW5wdXQuZGF0YSxcbiAgICAgICAgcGFyc2VkVHlwZTogZ2V0UGFyc2VkVHlwZShpbnB1dC5kYXRhKSxcbiAgICAgICAgc2NoZW1hRXJyb3JNYXA6IHRoaXMuX2RlZi5lcnJvck1hcCxcbiAgICAgICAgcGF0aDogaW5wdXQucGF0aCxcbiAgICAgICAgcGFyZW50OiBpbnB1dC5wYXJlbnRcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIF9wYXJzZVN5bmMoaW5wdXQpIHtcbiAgICBjb25zdCByZXN1bHQgPSB0aGlzLl9wYXJzZShpbnB1dCk7XG4gICAgaWYgKGlzQXN5bmMocmVzdWx0KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU3luY2hyb25vdXMgcGFyc2UgZW5jb3VudGVyZWQgcHJvbWlzZS5cIik7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgX3BhcnNlQXN5bmMoaW5wdXQpIHtcbiAgICBjb25zdCByZXN1bHQgPSB0aGlzLl9wYXJzZShpbnB1dCk7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXN1bHQpO1xuICB9XG4gIHBhcnNlKGRhdGEsIHBhcmFtcykge1xuICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuc2FmZVBhcnNlKGRhdGEsIHBhcmFtcyk7XG4gICAgaWYgKHJlc3VsdC5zdWNjZXNzKVxuICAgICAgcmV0dXJuIHJlc3VsdC5kYXRhO1xuICAgIHRocm93IHJlc3VsdC5lcnJvcjtcbiAgfVxuICBzYWZlUGFyc2UoZGF0YSwgcGFyYW1zKSB7XG4gICAgY29uc3QgY3R4ID0ge1xuICAgICAgY29tbW9uOiB7XG4gICAgICAgIGlzc3VlczogW10sXG4gICAgICAgIGFzeW5jOiBwYXJhbXM/LmFzeW5jID8/IGZhbHNlLFxuICAgICAgICBjb250ZXh0dWFsRXJyb3JNYXA6IHBhcmFtcz8uZXJyb3JNYXBcbiAgICAgIH0sXG4gICAgICBwYXRoOiBwYXJhbXM/LnBhdGggfHwgW10sXG4gICAgICBzY2hlbWFFcnJvck1hcDogdGhpcy5fZGVmLmVycm9yTWFwLFxuICAgICAgcGFyZW50OiBudWxsLFxuICAgICAgZGF0YSxcbiAgICAgIHBhcnNlZFR5cGU6IGdldFBhcnNlZFR5cGUoZGF0YSlcbiAgICB9O1xuICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuX3BhcnNlU3luYyh7IGRhdGEsIHBhdGg6IGN0eC5wYXRoLCBwYXJlbnQ6IGN0eCB9KTtcbiAgICByZXR1cm4gaGFuZGxlUmVzdWx0KGN0eCwgcmVzdWx0KTtcbiAgfVxuICBcIn52YWxpZGF0ZVwiKGRhdGEpIHtcbiAgICBjb25zdCBjdHggPSB7XG4gICAgICBjb21tb246IHtcbiAgICAgICAgaXNzdWVzOiBbXSxcbiAgICAgICAgYXN5bmM6ICEhdGhpc1tcIn5zdGFuZGFyZFwiXS5hc3luY1xuICAgICAgfSxcbiAgICAgIHBhdGg6IFtdLFxuICAgICAgc2NoZW1hRXJyb3JNYXA6IHRoaXMuX2RlZi5lcnJvck1hcCxcbiAgICAgIHBhcmVudDogbnVsbCxcbiAgICAgIGRhdGEsXG4gICAgICBwYXJzZWRUeXBlOiBnZXRQYXJzZWRUeXBlKGRhdGEpXG4gICAgfTtcbiAgICBpZiAoIXRoaXNbXCJ+c3RhbmRhcmRcIl0uYXN5bmMpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuX3BhcnNlU3luYyh7IGRhdGEsIHBhdGg6IFtdLCBwYXJlbnQ6IGN0eCB9KTtcbiAgICAgICAgcmV0dXJuIGlzVmFsaWQocmVzdWx0KSA/IHtcbiAgICAgICAgICB2YWx1ZTogcmVzdWx0LnZhbHVlXG4gICAgICAgIH0gOiB7XG4gICAgICAgICAgaXNzdWVzOiBjdHguY29tbW9uLmlzc3Vlc1xuICAgICAgICB9O1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGlmIChlcnI/Lm1lc3NhZ2U/LnRvTG93ZXJDYXNlKCk/LmluY2x1ZGVzKFwiZW5jb3VudGVyZWRcIikpIHtcbiAgICAgICAgICB0aGlzW1wifnN0YW5kYXJkXCJdLmFzeW5jID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBjdHguY29tbW9uID0ge1xuICAgICAgICAgIGlzc3VlczogW10sXG4gICAgICAgICAgYXN5bmM6IHRydWVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3BhcnNlQXN5bmMoeyBkYXRhLCBwYXRoOiBbXSwgcGFyZW50OiBjdHggfSkudGhlbigocmVzdWx0KSA9PiBpc1ZhbGlkKHJlc3VsdCkgPyB7XG4gICAgICB2YWx1ZTogcmVzdWx0LnZhbHVlXG4gICAgfSA6IHtcbiAgICAgIGlzc3VlczogY3R4LmNvbW1vbi5pc3N1ZXNcbiAgICB9KTtcbiAgfVxuICBhc3luYyBwYXJzZUFzeW5jKGRhdGEsIHBhcmFtcykge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuc2FmZVBhcnNlQXN5bmMoZGF0YSwgcGFyYW1zKTtcbiAgICBpZiAocmVzdWx0LnN1Y2Nlc3MpXG4gICAgICByZXR1cm4gcmVzdWx0LmRhdGE7XG4gICAgdGhyb3cgcmVzdWx0LmVycm9yO1xuICB9XG4gIGFzeW5jIHNhZmVQYXJzZUFzeW5jKGRhdGEsIHBhcmFtcykge1xuICAgIGNvbnN0IGN0eCA9IHtcbiAgICAgIGNvbW1vbjoge1xuICAgICAgICBpc3N1ZXM6IFtdLFxuICAgICAgICBjb250ZXh0dWFsRXJyb3JNYXA6IHBhcmFtcz8uZXJyb3JNYXAsXG4gICAgICAgIGFzeW5jOiB0cnVlXG4gICAgICB9LFxuICAgICAgcGF0aDogcGFyYW1zPy5wYXRoIHx8IFtdLFxuICAgICAgc2NoZW1hRXJyb3JNYXA6IHRoaXMuX2RlZi5lcnJvck1hcCxcbiAgICAgIHBhcmVudDogbnVsbCxcbiAgICAgIGRhdGEsXG4gICAgICBwYXJzZWRUeXBlOiBnZXRQYXJzZWRUeXBlKGRhdGEpXG4gICAgfTtcbiAgICBjb25zdCBtYXliZUFzeW5jUmVzdWx0ID0gdGhpcy5fcGFyc2UoeyBkYXRhLCBwYXRoOiBjdHgucGF0aCwgcGFyZW50OiBjdHggfSk7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgKGlzQXN5bmMobWF5YmVBc3luY1Jlc3VsdCkgPyBtYXliZUFzeW5jUmVzdWx0IDogUHJvbWlzZS5yZXNvbHZlKG1heWJlQXN5bmNSZXN1bHQpKTtcbiAgICByZXR1cm4gaGFuZGxlUmVzdWx0KGN0eCwgcmVzdWx0KTtcbiAgfVxuICByZWZpbmUoY2hlY2ssIG1lc3NhZ2UpIHtcbiAgICBjb25zdCBnZXRJc3N1ZVByb3BlcnRpZXMgPSAodmFsKSA9PiB7XG4gICAgICBpZiAodHlwZW9mIG1lc3NhZ2UgPT09IFwic3RyaW5nXCIgfHwgdHlwZW9mIG1lc3NhZ2UgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIHsgbWVzc2FnZSB9O1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbWVzc2FnZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBtZXNzYWdlKHZhbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiB0aGlzLl9yZWZpbmVtZW50KCh2YWwsIGN0eCkgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0ID0gY2hlY2sodmFsKTtcbiAgICAgIGNvbnN0IHNldEVycm9yID0gKCkgPT4gY3R4LmFkZElzc3VlKHtcbiAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmN1c3RvbSxcbiAgICAgICAgLi4uZ2V0SXNzdWVQcm9wZXJ0aWVzKHZhbClcbiAgICAgIH0pO1xuICAgICAgaWYgKHR5cGVvZiBQcm9taXNlICE9PSBcInVuZGVmaW5lZFwiICYmIHJlc3VsdCBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdC50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgICBzZXRFcnJvcigpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgc2V0RXJyb3IoKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcmVmaW5lbWVudChjaGVjaywgcmVmaW5lbWVudERhdGEpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVmaW5lbWVudCgodmFsLCBjdHgpID0+IHtcbiAgICAgIGlmICghY2hlY2sodmFsKSkge1xuICAgICAgICBjdHguYWRkSXNzdWUodHlwZW9mIHJlZmluZW1lbnREYXRhID09PSBcImZ1bmN0aW9uXCIgPyByZWZpbmVtZW50RGF0YSh2YWwsIGN0eCkgOiByZWZpbmVtZW50RGF0YSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIF9yZWZpbmVtZW50KHJlZmluZW1lbnQpIHtcbiAgICByZXR1cm4gbmV3IFpvZEVmZmVjdHMoe1xuICAgICAgc2NoZW1hOiB0aGlzLFxuICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RFZmZlY3RzLFxuICAgICAgZWZmZWN0OiB7IHR5cGU6IFwicmVmaW5lbWVudFwiLCByZWZpbmVtZW50IH1cbiAgICB9KTtcbiAgfVxuICBzdXBlclJlZmluZShyZWZpbmVtZW50KSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlZmluZW1lbnQocmVmaW5lbWVudCk7XG4gIH1cbiAgY29uc3RydWN0b3IoZGVmKSB7XG4gICAgdGhpcy5zcGEgPSB0aGlzLnNhZmVQYXJzZUFzeW5jO1xuICAgIHRoaXMuX2RlZiA9IGRlZjtcbiAgICB0aGlzLnBhcnNlID0gdGhpcy5wYXJzZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuc2FmZVBhcnNlID0gdGhpcy5zYWZlUGFyc2UuYmluZCh0aGlzKTtcbiAgICB0aGlzLnBhcnNlQXN5bmMgPSB0aGlzLnBhcnNlQXN5bmMuYmluZCh0aGlzKTtcbiAgICB0aGlzLnNhZmVQYXJzZUFzeW5jID0gdGhpcy5zYWZlUGFyc2VBc3luYy5iaW5kKHRoaXMpO1xuICAgIHRoaXMuc3BhID0gdGhpcy5zcGEuYmluZCh0aGlzKTtcbiAgICB0aGlzLnJlZmluZSA9IHRoaXMucmVmaW5lLmJpbmQodGhpcyk7XG4gICAgdGhpcy5yZWZpbmVtZW50ID0gdGhpcy5yZWZpbmVtZW50LmJpbmQodGhpcyk7XG4gICAgdGhpcy5zdXBlclJlZmluZSA9IHRoaXMuc3VwZXJSZWZpbmUuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9wdGlvbmFsID0gdGhpcy5vcHRpb25hbC5iaW5kKHRoaXMpO1xuICAgIHRoaXMubnVsbGFibGUgPSB0aGlzLm51bGxhYmxlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5udWxsaXNoID0gdGhpcy5udWxsaXNoLmJpbmQodGhpcyk7XG4gICAgdGhpcy5hcnJheSA9IHRoaXMuYXJyYXkuYmluZCh0aGlzKTtcbiAgICB0aGlzLnByb21pc2UgPSB0aGlzLnByb21pc2UuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9yID0gdGhpcy5vci5iaW5kKHRoaXMpO1xuICAgIHRoaXMuYW5kID0gdGhpcy5hbmQuYmluZCh0aGlzKTtcbiAgICB0aGlzLnRyYW5zZm9ybSA9IHRoaXMudHJhbnNmb3JtLmJpbmQodGhpcyk7XG4gICAgdGhpcy5icmFuZCA9IHRoaXMuYnJhbmQuYmluZCh0aGlzKTtcbiAgICB0aGlzLmRlZmF1bHQgPSB0aGlzLmRlZmF1bHQuYmluZCh0aGlzKTtcbiAgICB0aGlzLmNhdGNoID0gdGhpcy5jYXRjaC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuZGVzY3JpYmUgPSB0aGlzLmRlc2NyaWJlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5waXBlID0gdGhpcy5waXBlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5yZWFkb25seSA9IHRoaXMucmVhZG9ubHkuYmluZCh0aGlzKTtcbiAgICB0aGlzLmlzTnVsbGFibGUgPSB0aGlzLmlzTnVsbGFibGUuYmluZCh0aGlzKTtcbiAgICB0aGlzLmlzT3B0aW9uYWwgPSB0aGlzLmlzT3B0aW9uYWwuYmluZCh0aGlzKTtcbiAgICB0aGlzW1wifnN0YW5kYXJkXCJdID0ge1xuICAgICAgdmVyc2lvbjogMSxcbiAgICAgIHZlbmRvcjogXCJ6b2RcIixcbiAgICAgIHZhbGlkYXRlOiAoZGF0YSkgPT4gdGhpc1tcIn52YWxpZGF0ZVwiXShkYXRhKVxuICAgIH07XG4gIH1cbiAgb3B0aW9uYWwoKSB7XG4gICAgcmV0dXJuIFpvZE9wdGlvbmFsLmNyZWF0ZSh0aGlzLCB0aGlzLl9kZWYpO1xuICB9XG4gIG51bGxhYmxlKCkge1xuICAgIHJldHVybiBab2ROdWxsYWJsZS5jcmVhdGUodGhpcywgdGhpcy5fZGVmKTtcbiAgfVxuICBudWxsaXNoKCkge1xuICAgIHJldHVybiB0aGlzLm51bGxhYmxlKCkub3B0aW9uYWwoKTtcbiAgfVxuICBhcnJheSgpIHtcbiAgICByZXR1cm4gWm9kQXJyYXkuY3JlYXRlKHRoaXMpO1xuICB9XG4gIHByb21pc2UoKSB7XG4gICAgcmV0dXJuIFpvZFByb21pc2UuY3JlYXRlKHRoaXMsIHRoaXMuX2RlZik7XG4gIH1cbiAgb3Iob3B0aW9uKSB7XG4gICAgcmV0dXJuIFpvZFVuaW9uLmNyZWF0ZShbdGhpcywgb3B0aW9uXSwgdGhpcy5fZGVmKTtcbiAgfVxuICBhbmQoaW5jb21pbmcpIHtcbiAgICByZXR1cm4gWm9kSW50ZXJzZWN0aW9uLmNyZWF0ZSh0aGlzLCBpbmNvbWluZywgdGhpcy5fZGVmKTtcbiAgfVxuICB0cmFuc2Zvcm0odHJhbnNmb3JtKSB7XG4gICAgcmV0dXJuIG5ldyBab2RFZmZlY3RzKHtcbiAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXModGhpcy5fZGVmKSxcbiAgICAgIHNjaGVtYTogdGhpcyxcbiAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kRWZmZWN0cyxcbiAgICAgIGVmZmVjdDogeyB0eXBlOiBcInRyYW5zZm9ybVwiLCB0cmFuc2Zvcm0gfVxuICAgIH0pO1xuICB9XG4gIGRlZmF1bHQoZGVmKSB7XG4gICAgY29uc3QgZGVmYXVsdFZhbHVlRnVuYyA9IHR5cGVvZiBkZWYgPT09IFwiZnVuY3Rpb25cIiA/IGRlZiA6ICgpID0+IGRlZjtcbiAgICByZXR1cm4gbmV3IFpvZERlZmF1bHQoe1xuICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyh0aGlzLl9kZWYpLFxuICAgICAgaW5uZXJUeXBlOiB0aGlzLFxuICAgICAgZGVmYXVsdFZhbHVlOiBkZWZhdWx0VmFsdWVGdW5jLFxuICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2REZWZhdWx0XG4gICAgfSk7XG4gIH1cbiAgYnJhbmQoKSB7XG4gICAgcmV0dXJuIG5ldyBab2RCcmFuZGVkKHtcbiAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kQnJhbmRlZCxcbiAgICAgIHR5cGU6IHRoaXMsXG4gICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHRoaXMuX2RlZilcbiAgICB9KTtcbiAgfVxuICBjYXRjaChkZWYpIHtcbiAgICBjb25zdCBjYXRjaFZhbHVlRnVuYyA9IHR5cGVvZiBkZWYgPT09IFwiZnVuY3Rpb25cIiA/IGRlZiA6ICgpID0+IGRlZjtcbiAgICByZXR1cm4gbmV3IFpvZENhdGNoKHtcbiAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXModGhpcy5fZGVmKSxcbiAgICAgIGlubmVyVHlwZTogdGhpcyxcbiAgICAgIGNhdGNoVmFsdWU6IGNhdGNoVmFsdWVGdW5jLFxuICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RDYXRjaFxuICAgIH0pO1xuICB9XG4gIGRlc2NyaWJlKGRlc2NyaXB0aW9uKSB7XG4gICAgY29uc3QgVGhpcyA9IHRoaXMuY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIG5ldyBUaGlzKHtcbiAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgIGRlc2NyaXB0aW9uXG4gICAgfSk7XG4gIH1cbiAgcGlwZSh0YXJnZXQpIHtcbiAgICByZXR1cm4gWm9kUGlwZWxpbmUuY3JlYXRlKHRoaXMsIHRhcmdldCk7XG4gIH1cbiAgcmVhZG9ubHkoKSB7XG4gICAgcmV0dXJuIFpvZFJlYWRvbmx5LmNyZWF0ZSh0aGlzKTtcbiAgfVxuICBpc09wdGlvbmFsKCkge1xuICAgIHJldHVybiB0aGlzLnNhZmVQYXJzZSh2b2lkIDApLnN1Y2Nlc3M7XG4gIH1cbiAgaXNOdWxsYWJsZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zYWZlUGFyc2UobnVsbCkuc3VjY2VzcztcbiAgfVxufTtcbnZhciBjdWlkUmVnZXggPSAvXmNbXlxccy1dezgsfSQvaTtcbnZhciBjdWlkMlJlZ2V4ID0gL15bMC05YS16XSskLztcbnZhciB1bGlkUmVnZXggPSAvXlswLTlBLUhKS01OUC1UVi1aXXsyNn0kL2k7XG52YXIgdXVpZFJlZ2V4ID0gL15bMC05YS1mQS1GXXs4fVxcYi1bMC05YS1mQS1GXXs0fVxcYi1bMC05YS1mQS1GXXs0fVxcYi1bMC05YS1mQS1GXXs0fVxcYi1bMC05YS1mQS1GXXsxMn0kL2k7XG52YXIgbmFub2lkUmVnZXggPSAvXlthLXowLTlfLV17MjF9JC9pO1xudmFyIGp3dFJlZ2V4ID0gL15bQS1aYS16MC05LV9dK1xcLltBLVphLXowLTktX10rXFwuW0EtWmEtejAtOS1fXSokLztcbnZhciBkdXJhdGlvblJlZ2V4ID0gL15bLStdP1AoPyEkKSg/Oig/OlstK10/XFxkK1kpfCg/OlstK10/XFxkK1suLF1cXGQrWSQpKT8oPzooPzpbLStdP1xcZCtNKXwoPzpbLStdP1xcZCtbLixdXFxkK00kKSk/KD86KD86Wy0rXT9cXGQrVyl8KD86Wy0rXT9cXGQrWy4sXVxcZCtXJCkpPyg/Oig/OlstK10/XFxkK0QpfCg/OlstK10/XFxkK1suLF1cXGQrRCQpKT8oPzpUKD89W1xcZCstXSkoPzooPzpbLStdP1xcZCtIKXwoPzpbLStdP1xcZCtbLixdXFxkK0gkKSk/KD86KD86Wy0rXT9cXGQrTSl8KD86Wy0rXT9cXGQrWy4sXVxcZCtNJCkpPyg/OlstK10/XFxkKyg/OlsuLF1cXGQrKT9TKT8pPz8kLztcbnZhciBlbWFpbFJlZ2V4ID0gL14oPyFcXC4pKD8hLipcXC5cXC4pKFtBLVowLTlfJytcXC1cXC5dKilbQS1aMC05XystXUAoW0EtWjAtOV1bQS1aMC05XFwtXSpcXC4pK1tBLVpdezIsfSQvaTtcbnZhciBfZW1vamlSZWdleCA9IGBeKFxcXFxwe0V4dGVuZGVkX1BpY3RvZ3JhcGhpY318XFxcXHB7RW1vamlfQ29tcG9uZW50fSkrJGA7XG52YXIgZW1vamlSZWdleDtcbnZhciBpcHY0UmVnZXggPSAvXig/Oig/OjI1WzAtNV18MlswLTRdWzAtOV18MVswLTldWzAtOV18WzEtOV1bMC05XXxbMC05XSlcXC4pezN9KD86MjVbMC01XXwyWzAtNF1bMC05XXwxWzAtOV1bMC05XXxbMS05XVswLTldfFswLTldKSQvO1xudmFyIGlwdjRDaWRyUmVnZXggPSAvXig/Oig/OjI1WzAtNV18MlswLTRdWzAtOV18MVswLTldWzAtOV18WzEtOV1bMC05XXxbMC05XSlcXC4pezN9KD86MjVbMC01XXwyWzAtNF1bMC05XXwxWzAtOV1bMC05XXxbMS05XVswLTldfFswLTldKVxcLygzWzAtMl18WzEyXT9bMC05XSkkLztcbnZhciBpcHY2UmVnZXggPSAvXigoWzAtOWEtZkEtRl17MSw0fTopezcsN31bMC05YS1mQS1GXXsxLDR9fChbMC05YS1mQS1GXXsxLDR9Oil7MSw3fTp8KFswLTlhLWZBLUZdezEsNH06KXsxLDZ9OlswLTlhLWZBLUZdezEsNH18KFswLTlhLWZBLUZdezEsNH06KXsxLDV9KDpbMC05YS1mQS1GXXsxLDR9KXsxLDJ9fChbMC05YS1mQS1GXXsxLDR9Oil7MSw0fSg6WzAtOWEtZkEtRl17MSw0fSl7MSwzfXwoWzAtOWEtZkEtRl17MSw0fTopezEsM30oOlswLTlhLWZBLUZdezEsNH0pezEsNH18KFswLTlhLWZBLUZdezEsNH06KXsxLDJ9KDpbMC05YS1mQS1GXXsxLDR9KXsxLDV9fFswLTlhLWZBLUZdezEsNH06KCg6WzAtOWEtZkEtRl17MSw0fSl7MSw2fSl8OigoOlswLTlhLWZBLUZdezEsNH0pezEsN318Oil8ZmU4MDooOlswLTlhLWZBLUZdezAsNH0pezAsNH0lWzAtOWEtekEtWl17MSx9fDo6KGZmZmYoOjB7MSw0fSl7MCwxfTopezAsMX0oKDI1WzAtNV18KDJbMC00XXwxezAsMX1bMC05XSl7MCwxfVswLTldKVxcLil7MywzfSgyNVswLTVdfCgyWzAtNF18MXswLDF9WzAtOV0pezAsMX1bMC05XSl8KFswLTlhLWZBLUZdezEsNH06KXsxLDR9OigoMjVbMC01XXwoMlswLTRdfDF7MCwxfVswLTldKXswLDF9WzAtOV0pXFwuKXszLDN9KDI1WzAtNV18KDJbMC00XXwxezAsMX1bMC05XSl7MCwxfVswLTldKSkkLztcbnZhciBpcHY2Q2lkclJlZ2V4ID0gL14oKFswLTlhLWZBLUZdezEsNH06KXs3LDd9WzAtOWEtZkEtRl17MSw0fXwoWzAtOWEtZkEtRl17MSw0fTopezEsN306fChbMC05YS1mQS1GXXsxLDR9Oil7MSw2fTpbMC05YS1mQS1GXXsxLDR9fChbMC05YS1mQS1GXXsxLDR9Oil7MSw1fSg6WzAtOWEtZkEtRl17MSw0fSl7MSwyfXwoWzAtOWEtZkEtRl17MSw0fTopezEsNH0oOlswLTlhLWZBLUZdezEsNH0pezEsM318KFswLTlhLWZBLUZdezEsNH06KXsxLDN9KDpbMC05YS1mQS1GXXsxLDR9KXsxLDR9fChbMC05YS1mQS1GXXsxLDR9Oil7MSwyfSg6WzAtOWEtZkEtRl17MSw0fSl7MSw1fXxbMC05YS1mQS1GXXsxLDR9OigoOlswLTlhLWZBLUZdezEsNH0pezEsNn0pfDooKDpbMC05YS1mQS1GXXsxLDR9KXsxLDd9fDopfGZlODA6KDpbMC05YS1mQS1GXXswLDR9KXswLDR9JVswLTlhLXpBLVpdezEsfXw6OihmZmZmKDowezEsNH0pezAsMX06KXswLDF9KCgyNVswLTVdfCgyWzAtNF18MXswLDF9WzAtOV0pezAsMX1bMC05XSlcXC4pezMsM30oMjVbMC01XXwoMlswLTRdfDF7MCwxfVswLTldKXswLDF9WzAtOV0pfChbMC05YS1mQS1GXXsxLDR9Oil7MSw0fTooKDI1WzAtNV18KDJbMC00XXwxezAsMX1bMC05XSl7MCwxfVswLTldKVxcLil7MywzfSgyNVswLTVdfCgyWzAtNF18MXswLDF9WzAtOV0pezAsMX1bMC05XSkpXFwvKDEyWzAtOF18MVswMV1bMC05XXxbMS05XT9bMC05XSkkLztcbnZhciBiYXNlNjRSZWdleCA9IC9eKFswLTlhLXpBLVorL117NH0pKigoWzAtOWEtekEtWisvXXsyfT09KXwoWzAtOWEtekEtWisvXXszfT0pKT8kLztcbnZhciBiYXNlNjR1cmxSZWdleCA9IC9eKFswLTlhLXpBLVotX117NH0pKigoWzAtOWEtekEtWi1fXXsyfSg9PSk/KXwoWzAtOWEtekEtWi1fXXszfSg9KT8pKT8kLztcbnZhciBkYXRlUmVnZXhTb3VyY2UgPSBgKChcXFxcZFxcXFxkWzI0NjhdWzA0OF18XFxcXGRcXFxcZFsxMzU3OV1bMjZdfFxcXFxkXFxcXGQwWzQ4XXxbMDI0NjhdWzA0OF0wMHxbMTM1NzldWzI2XTAwKS0wMi0yOXxcXFxcZHs0fS0oKDBbMTM1NzhdfDFbMDJdKS0oMFsxLTldfFsxMl1cXFxcZHwzWzAxXSl8KDBbNDY5XXwxMSktKDBbMS05XXxbMTJdXFxcXGR8MzApfCgwMiktKDBbMS05XXwxXFxcXGR8MlswLThdKSkpYDtcbnZhciBkYXRlUmVnZXggPSBuZXcgUmVnRXhwKGBeJHtkYXRlUmVnZXhTb3VyY2V9JGApO1xuZnVuY3Rpb24gdGltZVJlZ2V4U291cmNlKGFyZ3MpIHtcbiAgbGV0IHNlY29uZHNSZWdleFNvdXJjZSA9IGBbMC01XVxcXFxkYDtcbiAgaWYgKGFyZ3MucHJlY2lzaW9uKSB7XG4gICAgc2Vjb25kc1JlZ2V4U291cmNlID0gYCR7c2Vjb25kc1JlZ2V4U291cmNlfVxcXFwuXFxcXGR7JHthcmdzLnByZWNpc2lvbn19YDtcbiAgfSBlbHNlIGlmIChhcmdzLnByZWNpc2lvbiA9PSBudWxsKSB7XG4gICAgc2Vjb25kc1JlZ2V4U291cmNlID0gYCR7c2Vjb25kc1JlZ2V4U291cmNlfShcXFxcLlxcXFxkKyk/YDtcbiAgfVxuICBjb25zdCBzZWNvbmRzUXVhbnRpZmllciA9IGFyZ3MucHJlY2lzaW9uID8gXCIrXCIgOiBcIj9cIjtcbiAgcmV0dXJuIGAoWzAxXVxcXFxkfDJbMC0zXSk6WzAtNV1cXFxcZCg6JHtzZWNvbmRzUmVnZXhTb3VyY2V9KSR7c2Vjb25kc1F1YW50aWZpZXJ9YDtcbn1cbmZ1bmN0aW9uIHRpbWVSZWdleChhcmdzKSB7XG4gIHJldHVybiBuZXcgUmVnRXhwKGBeJHt0aW1lUmVnZXhTb3VyY2UoYXJncyl9JGApO1xufVxuZnVuY3Rpb24gZGF0ZXRpbWVSZWdleChhcmdzKSB7XG4gIGxldCByZWdleCA9IGAke2RhdGVSZWdleFNvdXJjZX1UJHt0aW1lUmVnZXhTb3VyY2UoYXJncyl9YDtcbiAgY29uc3Qgb3B0cyA9IFtdO1xuICBvcHRzLnB1c2goYXJncy5sb2NhbCA/IGBaP2AgOiBgWmApO1xuICBpZiAoYXJncy5vZmZzZXQpXG4gICAgb3B0cy5wdXNoKGAoWystXVxcXFxkezJ9Oj9cXFxcZHsyfSlgKTtcbiAgcmVnZXggPSBgJHtyZWdleH0oJHtvcHRzLmpvaW4oXCJ8XCIpfSlgO1xuICByZXR1cm4gbmV3IFJlZ0V4cChgXiR7cmVnZXh9JGApO1xufVxuZnVuY3Rpb24gaXNWYWxpZElQKGlwLCB2ZXJzaW9uKSB7XG4gIGlmICgodmVyc2lvbiA9PT0gXCJ2NFwiIHx8ICF2ZXJzaW9uKSAmJiBpcHY0UmVnZXgudGVzdChpcCkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoKHZlcnNpb24gPT09IFwidjZcIiB8fCAhdmVyc2lvbikgJiYgaXB2NlJlZ2V4LnRlc3QoaXApKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gaXNWYWxpZEpXVChqd3QsIGFsZykge1xuICBpZiAoIWp3dFJlZ2V4LnRlc3Qoand0KSlcbiAgICByZXR1cm4gZmFsc2U7XG4gIHRyeSB7XG4gICAgY29uc3QgW2hlYWRlcl0gPSBqd3Quc3BsaXQoXCIuXCIpO1xuICAgIGlmICghaGVhZGVyKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGNvbnN0IGJhc2U2NCA9IGhlYWRlci5yZXBsYWNlKC8tL2csIFwiK1wiKS5yZXBsYWNlKC9fL2csIFwiL1wiKS5wYWRFbmQoaGVhZGVyLmxlbmd0aCArICg0IC0gaGVhZGVyLmxlbmd0aCAlIDQpICUgNCwgXCI9XCIpO1xuICAgIGNvbnN0IGRlY29kZWQgPSBKU09OLnBhcnNlKGF0b2IoYmFzZTY0KSk7XG4gICAgaWYgKHR5cGVvZiBkZWNvZGVkICE9PSBcIm9iamVjdFwiIHx8IGRlY29kZWQgPT09IG51bGwpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKFwidHlwXCIgaW4gZGVjb2RlZCAmJiBkZWNvZGVkPy50eXAgIT09IFwiSldUXCIpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKCFkZWNvZGVkLmFsZylcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAoYWxnICYmIGRlY29kZWQuYWxnICE9PSBhbGcpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2gge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuZnVuY3Rpb24gaXNWYWxpZENpZHIoaXAsIHZlcnNpb24pIHtcbiAgaWYgKCh2ZXJzaW9uID09PSBcInY0XCIgfHwgIXZlcnNpb24pICYmIGlwdjRDaWRyUmVnZXgudGVzdChpcCkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoKHZlcnNpb24gPT09IFwidjZcIiB8fCAhdmVyc2lvbikgJiYgaXB2NkNpZHJSZWdleC50ZXN0KGlwKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbnZhciBab2RTdHJpbmcgPSBjbGFzcyBfWm9kU3RyaW5nIGV4dGVuZHMgWm9kVHlwZSB7XG4gIF9wYXJzZShpbnB1dCkge1xuICAgIGlmICh0aGlzLl9kZWYuY29lcmNlKSB7XG4gICAgICBpbnB1dC5kYXRhID0gU3RyaW5nKGlucHV0LmRhdGEpO1xuICAgIH1cbiAgICBjb25zdCBwYXJzZWRUeXBlID0gdGhpcy5fZ2V0VHlwZShpbnB1dCk7XG4gICAgaWYgKHBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUuc3RyaW5nKSB7XG4gICAgICBjb25zdCBjdHgyID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4Miwge1xuICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5zdHJpbmcsXG4gICAgICAgIHJlY2VpdmVkOiBjdHgyLnBhcnNlZFR5cGVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgfVxuICAgIGNvbnN0IHN0YXR1cyA9IG5ldyBQYXJzZVN0YXR1cygpO1xuICAgIGxldCBjdHggPSB2b2lkIDA7XG4gICAgZm9yIChjb25zdCBjaGVjayBvZiB0aGlzLl9kZWYuY2hlY2tzKSB7XG4gICAgICBpZiAoY2hlY2sua2luZCA9PT0gXCJtaW5cIikge1xuICAgICAgICBpZiAoaW5wdXQuZGF0YS5sZW5ndGggPCBjaGVjay52YWx1ZSkge1xuICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnRvb19zbWFsbCxcbiAgICAgICAgICAgIG1pbmltdW06IGNoZWNrLnZhbHVlLFxuICAgICAgICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgIGV4YWN0OiBmYWxzZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjaGVjay5raW5kID09PSBcIm1heFwiKSB7XG4gICAgICAgIGlmIChpbnB1dC5kYXRhLmxlbmd0aCA+IGNoZWNrLnZhbHVlKSB7XG4gICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUudG9vX2JpZyxcbiAgICAgICAgICAgIG1heGltdW06IGNoZWNrLnZhbHVlLFxuICAgICAgICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgIGV4YWN0OiBmYWxzZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjaGVjay5raW5kID09PSBcImxlbmd0aFwiKSB7XG4gICAgICAgIGNvbnN0IHRvb0JpZyA9IGlucHV0LmRhdGEubGVuZ3RoID4gY2hlY2sudmFsdWU7XG4gICAgICAgIGNvbnN0IHRvb1NtYWxsID0gaW5wdXQuZGF0YS5sZW5ndGggPCBjaGVjay52YWx1ZTtcbiAgICAgICAgaWYgKHRvb0JpZyB8fCB0b29TbWFsbCkge1xuICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgIGlmICh0b29CaWcpIHtcbiAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUudG9vX2JpZyxcbiAgICAgICAgICAgICAgbWF4aW11bTogY2hlY2sudmFsdWUsXG4gICAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgZXhhY3Q6IHRydWUsXG4gICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2VcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSBpZiAodG9vU21hbGwpIHtcbiAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUudG9vX3NtYWxsLFxuICAgICAgICAgICAgICBtaW5pbXVtOiBjaGVjay52YWx1ZSxcbiAgICAgICAgICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgaW5jbHVzaXZlOiB0cnVlLFxuICAgICAgICAgICAgICBleGFjdDogdHJ1ZSxcbiAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwiZW1haWxcIikge1xuICAgICAgICBpZiAoIWVtYWlsUmVnZXgudGVzdChpbnB1dC5kYXRhKSkge1xuICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJlbWFpbFwiLFxuICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfc3RyaW5nLFxuICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwiZW1vamlcIikge1xuICAgICAgICBpZiAoIWVtb2ppUmVnZXgpIHtcbiAgICAgICAgICBlbW9qaVJlZ2V4ID0gbmV3IFJlZ0V4cChfZW1vamlSZWdleCwgXCJ1XCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZW1vamlSZWdleC50ZXN0KGlucHV0LmRhdGEpKSB7XG4gICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICB2YWxpZGF0aW9uOiBcImVtb2ppXCIsXG4gICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJ1dWlkXCIpIHtcbiAgICAgICAgaWYgKCF1dWlkUmVnZXgudGVzdChpbnB1dC5kYXRhKSkge1xuICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJ1dWlkXCIsXG4gICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJuYW5vaWRcIikge1xuICAgICAgICBpZiAoIW5hbm9pZFJlZ2V4LnRlc3QoaW5wdXQuZGF0YSkpIHtcbiAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgIHZhbGlkYXRpb246IFwibmFub2lkXCIsXG4gICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJjdWlkXCIpIHtcbiAgICAgICAgaWYgKCFjdWlkUmVnZXgudGVzdChpbnB1dC5kYXRhKSkge1xuICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJjdWlkXCIsXG4gICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJjdWlkMlwiKSB7XG4gICAgICAgIGlmICghY3VpZDJSZWdleC50ZXN0KGlucHV0LmRhdGEpKSB7XG4gICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICB2YWxpZGF0aW9uOiBcImN1aWQyXCIsXG4gICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJ1bGlkXCIpIHtcbiAgICAgICAgaWYgKCF1bGlkUmVnZXgudGVzdChpbnB1dC5kYXRhKSkge1xuICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJ1bGlkXCIsXG4gICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJ1cmxcIikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIG5ldyBVUkwoaW5wdXQuZGF0YSk7XG4gICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJ1cmxcIixcbiAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjaGVjay5raW5kID09PSBcInJlZ2V4XCIpIHtcbiAgICAgICAgY2hlY2sucmVnZXgubGFzdEluZGV4ID0gMDtcbiAgICAgICAgY29uc3QgdGVzdFJlc3VsdCA9IGNoZWNrLnJlZ2V4LnRlc3QoaW5wdXQuZGF0YSk7XG4gICAgICAgIGlmICghdGVzdFJlc3VsdCkge1xuICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJyZWdleFwiLFxuICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfc3RyaW5nLFxuICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwidHJpbVwiKSB7XG4gICAgICAgIGlucHV0LmRhdGEgPSBpbnB1dC5kYXRhLnRyaW0oKTtcbiAgICAgIH0gZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJpbmNsdWRlc1wiKSB7XG4gICAgICAgIGlmICghaW5wdXQuZGF0YS5pbmNsdWRlcyhjaGVjay52YWx1ZSwgY2hlY2sucG9zaXRpb24pKSB7XG4gICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICB2YWxpZGF0aW9uOiB7IGluY2x1ZGVzOiBjaGVjay52YWx1ZSwgcG9zaXRpb246IGNoZWNrLnBvc2l0aW9uIH0sXG4gICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJ0b0xvd2VyQ2FzZVwiKSB7XG4gICAgICAgIGlucHV0LmRhdGEgPSBpbnB1dC5kYXRhLnRvTG93ZXJDYXNlKCk7XG4gICAgICB9IGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwidG9VcHBlckNhc2VcIikge1xuICAgICAgICBpbnB1dC5kYXRhID0gaW5wdXQuZGF0YS50b1VwcGVyQ2FzZSgpO1xuICAgICAgfSBlbHNlIGlmIChjaGVjay5raW5kID09PSBcInN0YXJ0c1dpdGhcIikge1xuICAgICAgICBpZiAoIWlucHV0LmRhdGEuc3RhcnRzV2l0aChjaGVjay52YWx1ZSkpIHtcbiAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgIHZhbGlkYXRpb246IHsgc3RhcnRzV2l0aDogY2hlY2sudmFsdWUgfSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjaGVjay5raW5kID09PSBcImVuZHNXaXRoXCIpIHtcbiAgICAgICAgaWYgKCFpbnB1dC5kYXRhLmVuZHNXaXRoKGNoZWNrLnZhbHVlKSkge1xuICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfc3RyaW5nLFxuICAgICAgICAgICAgdmFsaWRhdGlvbjogeyBlbmRzV2l0aDogY2hlY2sudmFsdWUgfSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjaGVjay5raW5kID09PSBcImRhdGV0aW1lXCIpIHtcbiAgICAgICAgY29uc3QgcmVnZXggPSBkYXRldGltZVJlZ2V4KGNoZWNrKTtcbiAgICAgICAgaWYgKCFyZWdleC50ZXN0KGlucHV0LmRhdGEpKSB7XG4gICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICB2YWxpZGF0aW9uOiBcImRhdGV0aW1lXCIsXG4gICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJkYXRlXCIpIHtcbiAgICAgICAgY29uc3QgcmVnZXggPSBkYXRlUmVnZXg7XG4gICAgICAgIGlmICghcmVnZXgudGVzdChpbnB1dC5kYXRhKSkge1xuICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfc3RyaW5nLFxuICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJkYXRlXCIsXG4gICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJ0aW1lXCIpIHtcbiAgICAgICAgY29uc3QgcmVnZXggPSB0aW1lUmVnZXgoY2hlY2spO1xuICAgICAgICBpZiAoIXJlZ2V4LnRlc3QoaW5wdXQuZGF0YSkpIHtcbiAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgIHZhbGlkYXRpb246IFwidGltZVwiLFxuICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwiZHVyYXRpb25cIikge1xuICAgICAgICBpZiAoIWR1cmF0aW9uUmVnZXgudGVzdChpbnB1dC5kYXRhKSkge1xuICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJkdXJhdGlvblwiLFxuICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfc3RyaW5nLFxuICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwiaXBcIikge1xuICAgICAgICBpZiAoIWlzVmFsaWRJUChpbnB1dC5kYXRhLCBjaGVjay52ZXJzaW9uKSkge1xuICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJpcFwiLFxuICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfc3RyaW5nLFxuICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwiand0XCIpIHtcbiAgICAgICAgaWYgKCFpc1ZhbGlkSldUKGlucHV0LmRhdGEsIGNoZWNrLmFsZykpIHtcbiAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgIHZhbGlkYXRpb246IFwiand0XCIsXG4gICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJjaWRyXCIpIHtcbiAgICAgICAgaWYgKCFpc1ZhbGlkQ2lkcihpbnB1dC5kYXRhLCBjaGVjay52ZXJzaW9uKSkge1xuICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJjaWRyXCIsXG4gICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJiYXNlNjRcIikge1xuICAgICAgICBpZiAoIWJhc2U2NFJlZ2V4LnRlc3QoaW5wdXQuZGF0YSkpIHtcbiAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgIHZhbGlkYXRpb246IFwiYmFzZTY0XCIsXG4gICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJiYXNlNjR1cmxcIikge1xuICAgICAgICBpZiAoIWJhc2U2NHVybFJlZ2V4LnRlc3QoaW5wdXQuZGF0YSkpIHtcbiAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgIHZhbGlkYXRpb246IFwiYmFzZTY0dXJsXCIsXG4gICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHV0aWwuYXNzZXJ0TmV2ZXIoY2hlY2spO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4geyBzdGF0dXM6IHN0YXR1cy52YWx1ZSwgdmFsdWU6IGlucHV0LmRhdGEgfTtcbiAgfVxuICBfcmVnZXgocmVnZXgsIHZhbGlkYXRpb24sIG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5yZWZpbmVtZW50KChkYXRhKSA9PiByZWdleC50ZXN0KGRhdGEpLCB7XG4gICAgICB2YWxpZGF0aW9uLFxuICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfc3RyaW5nLFxuICAgICAgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpXG4gICAgfSk7XG4gIH1cbiAgX2FkZENoZWNrKGNoZWNrKSB7XG4gICAgcmV0dXJuIG5ldyBfWm9kU3RyaW5nKHtcbiAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgIGNoZWNrczogWy4uLnRoaXMuX2RlZi5jaGVja3MsIGNoZWNrXVxuICAgIH0pO1xuICB9XG4gIGVtYWlsKG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soeyBraW5kOiBcImVtYWlsXCIsIC4uLmVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKSB9KTtcbiAgfVxuICB1cmwobWVzc2FnZSkge1xuICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7IGtpbmQ6IFwidXJsXCIsIC4uLmVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKSB9KTtcbiAgfVxuICBlbW9qaShtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHsga2luZDogXCJlbW9qaVwiLCAuLi5lcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSkgfSk7XG4gIH1cbiAgdXVpZChtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHsga2luZDogXCJ1dWlkXCIsIC4uLmVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKSB9KTtcbiAgfVxuICBuYW5vaWQobWVzc2FnZSkge1xuICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7IGtpbmQ6IFwibmFub2lkXCIsIC4uLmVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKSB9KTtcbiAgfVxuICBjdWlkKG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soeyBraW5kOiBcImN1aWRcIiwgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpIH0pO1xuICB9XG4gIGN1aWQyKG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soeyBraW5kOiBcImN1aWQyXCIsIC4uLmVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKSB9KTtcbiAgfVxuICB1bGlkKG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soeyBraW5kOiBcInVsaWRcIiwgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpIH0pO1xuICB9XG4gIGJhc2U2NChtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHsga2luZDogXCJiYXNlNjRcIiwgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpIH0pO1xuICB9XG4gIGJhc2U2NHVybChtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgIGtpbmQ6IFwiYmFzZTY0dXJsXCIsXG4gICAgICAuLi5lcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSlcbiAgICB9KTtcbiAgfVxuICBqd3Qob3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7IGtpbmQ6IFwiand0XCIsIC4uLmVycm9yVXRpbC5lcnJUb09iaihvcHRpb25zKSB9KTtcbiAgfVxuICBpcChvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHsga2luZDogXCJpcFwiLCAuLi5lcnJvclV0aWwuZXJyVG9PYmoob3B0aW9ucykgfSk7XG4gIH1cbiAgY2lkcihvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHsga2luZDogXCJjaWRyXCIsIC4uLmVycm9yVXRpbC5lcnJUb09iaihvcHRpb25zKSB9KTtcbiAgfVxuICBkYXRldGltZShvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiKSB7XG4gICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICBraW5kOiBcImRhdGV0aW1lXCIsXG4gICAgICAgIHByZWNpc2lvbjogbnVsbCxcbiAgICAgICAgb2Zmc2V0OiBmYWxzZSxcbiAgICAgICAgbG9jYWw6IGZhbHNlLFxuICAgICAgICBtZXNzYWdlOiBvcHRpb25zXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgIGtpbmQ6IFwiZGF0ZXRpbWVcIixcbiAgICAgIHByZWNpc2lvbjogdHlwZW9mIG9wdGlvbnM/LnByZWNpc2lvbiA9PT0gXCJ1bmRlZmluZWRcIiA/IG51bGwgOiBvcHRpb25zPy5wcmVjaXNpb24sXG4gICAgICBvZmZzZXQ6IG9wdGlvbnM/Lm9mZnNldCA/PyBmYWxzZSxcbiAgICAgIGxvY2FsOiBvcHRpb25zPy5sb2NhbCA/PyBmYWxzZSxcbiAgICAgIC4uLmVycm9yVXRpbC5lcnJUb09iaihvcHRpb25zPy5tZXNzYWdlKVxuICAgIH0pO1xuICB9XG4gIGRhdGUobWVzc2FnZSkge1xuICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7IGtpbmQ6IFwiZGF0ZVwiLCBtZXNzYWdlIH0pO1xuICB9XG4gIHRpbWUob3B0aW9ucykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgICAga2luZDogXCJ0aW1lXCIsXG4gICAgICAgIHByZWNpc2lvbjogbnVsbCxcbiAgICAgICAgbWVzc2FnZTogb3B0aW9uc1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICBraW5kOiBcInRpbWVcIixcbiAgICAgIHByZWNpc2lvbjogdHlwZW9mIG9wdGlvbnM/LnByZWNpc2lvbiA9PT0gXCJ1bmRlZmluZWRcIiA/IG51bGwgOiBvcHRpb25zPy5wcmVjaXNpb24sXG4gICAgICAuLi5lcnJvclV0aWwuZXJyVG9PYmoob3B0aW9ucz8ubWVzc2FnZSlcbiAgICB9KTtcbiAgfVxuICBkdXJhdGlvbihtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHsga2luZDogXCJkdXJhdGlvblwiLCAuLi5lcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSkgfSk7XG4gIH1cbiAgcmVnZXgocmVnZXgsIG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAga2luZDogXCJyZWdleFwiLFxuICAgICAgcmVnZXgsXG4gICAgICAuLi5lcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSlcbiAgICB9KTtcbiAgfVxuICBpbmNsdWRlcyh2YWx1ZSwgb3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICBraW5kOiBcImluY2x1ZGVzXCIsXG4gICAgICB2YWx1ZSxcbiAgICAgIHBvc2l0aW9uOiBvcHRpb25zPy5wb3NpdGlvbixcbiAgICAgIC4uLmVycm9yVXRpbC5lcnJUb09iaihvcHRpb25zPy5tZXNzYWdlKVxuICAgIH0pO1xuICB9XG4gIHN0YXJ0c1dpdGgodmFsdWUsIG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAga2luZDogXCJzdGFydHNXaXRoXCIsXG4gICAgICB2YWx1ZSxcbiAgICAgIC4uLmVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKVxuICAgIH0pO1xuICB9XG4gIGVuZHNXaXRoKHZhbHVlLCBtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgIGtpbmQ6IFwiZW5kc1dpdGhcIixcbiAgICAgIHZhbHVlLFxuICAgICAgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpXG4gICAgfSk7XG4gIH1cbiAgbWluKG1pbkxlbmd0aCwgbWVzc2FnZSkge1xuICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICBraW5kOiBcIm1pblwiLFxuICAgICAgdmFsdWU6IG1pbkxlbmd0aCxcbiAgICAgIC4uLmVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKVxuICAgIH0pO1xuICB9XG4gIG1heChtYXhMZW5ndGgsIG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAga2luZDogXCJtYXhcIixcbiAgICAgIHZhbHVlOiBtYXhMZW5ndGgsXG4gICAgICAuLi5lcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSlcbiAgICB9KTtcbiAgfVxuICBsZW5ndGgobGVuLCBtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgIGtpbmQ6IFwibGVuZ3RoXCIsXG4gICAgICB2YWx1ZTogbGVuLFxuICAgICAgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEVxdWl2YWxlbnQgdG8gYC5taW4oMSlgXG4gICAqL1xuICBub25lbXB0eShtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMubWluKDEsIGVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKSk7XG4gIH1cbiAgdHJpbSgpIHtcbiAgICByZXR1cm4gbmV3IF9ab2RTdHJpbmcoe1xuICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgY2hlY2tzOiBbLi4udGhpcy5fZGVmLmNoZWNrcywgeyBraW5kOiBcInRyaW1cIiB9XVxuICAgIH0pO1xuICB9XG4gIHRvTG93ZXJDYXNlKCkge1xuICAgIHJldHVybiBuZXcgX1pvZFN0cmluZyh7XG4gICAgICAuLi50aGlzLl9kZWYsXG4gICAgICBjaGVja3M6IFsuLi50aGlzLl9kZWYuY2hlY2tzLCB7IGtpbmQ6IFwidG9Mb3dlckNhc2VcIiB9XVxuICAgIH0pO1xuICB9XG4gIHRvVXBwZXJDYXNlKCkge1xuICAgIHJldHVybiBuZXcgX1pvZFN0cmluZyh7XG4gICAgICAuLi50aGlzLl9kZWYsXG4gICAgICBjaGVja3M6IFsuLi50aGlzLl9kZWYuY2hlY2tzLCB7IGtpbmQ6IFwidG9VcHBlckNhc2VcIiB9XVxuICAgIH0pO1xuICB9XG4gIGdldCBpc0RhdGV0aW1lKCkge1xuICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwiZGF0ZXRpbWVcIik7XG4gIH1cbiAgZ2V0IGlzRGF0ZSgpIHtcbiAgICByZXR1cm4gISF0aGlzLl9kZWYuY2hlY2tzLmZpbmQoKGNoKSA9PiBjaC5raW5kID09PSBcImRhdGVcIik7XG4gIH1cbiAgZ2V0IGlzVGltZSgpIHtcbiAgICByZXR1cm4gISF0aGlzLl9kZWYuY2hlY2tzLmZpbmQoKGNoKSA9PiBjaC5raW5kID09PSBcInRpbWVcIik7XG4gIH1cbiAgZ2V0IGlzRHVyYXRpb24oKSB7XG4gICAgcmV0dXJuICEhdGhpcy5fZGVmLmNoZWNrcy5maW5kKChjaCkgPT4gY2gua2luZCA9PT0gXCJkdXJhdGlvblwiKTtcbiAgfVxuICBnZXQgaXNFbWFpbCgpIHtcbiAgICByZXR1cm4gISF0aGlzLl9kZWYuY2hlY2tzLmZpbmQoKGNoKSA9PiBjaC5raW5kID09PSBcImVtYWlsXCIpO1xuICB9XG4gIGdldCBpc1VSTCgpIHtcbiAgICByZXR1cm4gISF0aGlzLl9kZWYuY2hlY2tzLmZpbmQoKGNoKSA9PiBjaC5raW5kID09PSBcInVybFwiKTtcbiAgfVxuICBnZXQgaXNFbW9qaSgpIHtcbiAgICByZXR1cm4gISF0aGlzLl9kZWYuY2hlY2tzLmZpbmQoKGNoKSA9PiBjaC5raW5kID09PSBcImVtb2ppXCIpO1xuICB9XG4gIGdldCBpc1VVSUQoKSB7XG4gICAgcmV0dXJuICEhdGhpcy5fZGVmLmNoZWNrcy5maW5kKChjaCkgPT4gY2gua2luZCA9PT0gXCJ1dWlkXCIpO1xuICB9XG4gIGdldCBpc05BTk9JRCgpIHtcbiAgICByZXR1cm4gISF0aGlzLl9kZWYuY2hlY2tzLmZpbmQoKGNoKSA9PiBjaC5raW5kID09PSBcIm5hbm9pZFwiKTtcbiAgfVxuICBnZXQgaXNDVUlEKCkge1xuICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwiY3VpZFwiKTtcbiAgfVxuICBnZXQgaXNDVUlEMigpIHtcbiAgICByZXR1cm4gISF0aGlzLl9kZWYuY2hlY2tzLmZpbmQoKGNoKSA9PiBjaC5raW5kID09PSBcImN1aWQyXCIpO1xuICB9XG4gIGdldCBpc1VMSUQoKSB7XG4gICAgcmV0dXJuICEhdGhpcy5fZGVmLmNoZWNrcy5maW5kKChjaCkgPT4gY2gua2luZCA9PT0gXCJ1bGlkXCIpO1xuICB9XG4gIGdldCBpc0lQKCkge1xuICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwiaXBcIik7XG4gIH1cbiAgZ2V0IGlzQ0lEUigpIHtcbiAgICByZXR1cm4gISF0aGlzLl9kZWYuY2hlY2tzLmZpbmQoKGNoKSA9PiBjaC5raW5kID09PSBcImNpZHJcIik7XG4gIH1cbiAgZ2V0IGlzQmFzZTY0KCkge1xuICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwiYmFzZTY0XCIpO1xuICB9XG4gIGdldCBpc0Jhc2U2NHVybCgpIHtcbiAgICByZXR1cm4gISF0aGlzLl9kZWYuY2hlY2tzLmZpbmQoKGNoKSA9PiBjaC5raW5kID09PSBcImJhc2U2NHVybFwiKTtcbiAgfVxuICBnZXQgbWluTGVuZ3RoKCkge1xuICAgIGxldCBtaW4gPSBudWxsO1xuICAgIGZvciAoY29uc3QgY2ggb2YgdGhpcy5fZGVmLmNoZWNrcykge1xuICAgICAgaWYgKGNoLmtpbmQgPT09IFwibWluXCIpIHtcbiAgICAgICAgaWYgKG1pbiA9PT0gbnVsbCB8fCBjaC52YWx1ZSA+IG1pbilcbiAgICAgICAgICBtaW4gPSBjaC52YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1pbjtcbiAgfVxuICBnZXQgbWF4TGVuZ3RoKCkge1xuICAgIGxldCBtYXggPSBudWxsO1xuICAgIGZvciAoY29uc3QgY2ggb2YgdGhpcy5fZGVmLmNoZWNrcykge1xuICAgICAgaWYgKGNoLmtpbmQgPT09IFwibWF4XCIpIHtcbiAgICAgICAgaWYgKG1heCA9PT0gbnVsbCB8fCBjaC52YWx1ZSA8IG1heClcbiAgICAgICAgICBtYXggPSBjaC52YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1heDtcbiAgfVxufTtcblpvZFN0cmluZy5jcmVhdGUgPSAocGFyYW1zKSA9PiB7XG4gIHJldHVybiBuZXcgWm9kU3RyaW5nKHtcbiAgICBjaGVja3M6IFtdLFxuICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kU3RyaW5nLFxuICAgIGNvZXJjZTogcGFyYW1zPy5jb2VyY2UgPz8gZmFsc2UsXG4gICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpXG4gIH0pO1xufTtcbmZ1bmN0aW9uIGZsb2F0U2FmZVJlbWFpbmRlcih2YWwsIHN0ZXApIHtcbiAgY29uc3QgdmFsRGVjQ291bnQgPSAodmFsLnRvU3RyaW5nKCkuc3BsaXQoXCIuXCIpWzFdIHx8IFwiXCIpLmxlbmd0aDtcbiAgY29uc3Qgc3RlcERlY0NvdW50ID0gKHN0ZXAudG9TdHJpbmcoKS5zcGxpdChcIi5cIilbMV0gfHwgXCJcIikubGVuZ3RoO1xuICBjb25zdCBkZWNDb3VudCA9IHZhbERlY0NvdW50ID4gc3RlcERlY0NvdW50ID8gdmFsRGVjQ291bnQgOiBzdGVwRGVjQ291bnQ7XG4gIGNvbnN0IHZhbEludCA9IE51bWJlci5wYXJzZUludCh2YWwudG9GaXhlZChkZWNDb3VudCkucmVwbGFjZShcIi5cIiwgXCJcIikpO1xuICBjb25zdCBzdGVwSW50ID0gTnVtYmVyLnBhcnNlSW50KHN0ZXAudG9GaXhlZChkZWNDb3VudCkucmVwbGFjZShcIi5cIiwgXCJcIikpO1xuICByZXR1cm4gdmFsSW50ICUgc3RlcEludCAvIDEwICoqIGRlY0NvdW50O1xufVxudmFyIFpvZE51bWJlciA9IGNsYXNzIF9ab2ROdW1iZXIgZXh0ZW5kcyBab2RUeXBlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICB0aGlzLm1pbiA9IHRoaXMuZ3RlO1xuICAgIHRoaXMubWF4ID0gdGhpcy5sdGU7XG4gICAgdGhpcy5zdGVwID0gdGhpcy5tdWx0aXBsZU9mO1xuICB9XG4gIF9wYXJzZShpbnB1dCkge1xuICAgIGlmICh0aGlzLl9kZWYuY29lcmNlKSB7XG4gICAgICBpbnB1dC5kYXRhID0gTnVtYmVyKGlucHV0LmRhdGEpO1xuICAgIH1cbiAgICBjb25zdCBwYXJzZWRUeXBlID0gdGhpcy5fZ2V0VHlwZShpbnB1dCk7XG4gICAgaWYgKHBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUubnVtYmVyKSB7XG4gICAgICBjb25zdCBjdHgyID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4Miwge1xuICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5udW1iZXIsXG4gICAgICAgIHJlY2VpdmVkOiBjdHgyLnBhcnNlZFR5cGVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgfVxuICAgIGxldCBjdHggPSB2b2lkIDA7XG4gICAgY29uc3Qgc3RhdHVzID0gbmV3IFBhcnNlU3RhdHVzKCk7XG4gICAgZm9yIChjb25zdCBjaGVjayBvZiB0aGlzLl9kZWYuY2hlY2tzKSB7XG4gICAgICBpZiAoY2hlY2sua2luZCA9PT0gXCJpbnRcIikge1xuICAgICAgICBpZiAoIXV0aWwuaXNJbnRlZ2VyKGlucHV0LmRhdGEpKSB7XG4gICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgZXhwZWN0ZWQ6IFwiaW50ZWdlclwiLFxuICAgICAgICAgICAgcmVjZWl2ZWQ6IFwiZmxvYXRcIixcbiAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjaGVjay5raW5kID09PSBcIm1pblwiKSB7XG4gICAgICAgIGNvbnN0IHRvb1NtYWxsID0gY2hlY2suaW5jbHVzaXZlID8gaW5wdXQuZGF0YSA8IGNoZWNrLnZhbHVlIDogaW5wdXQuZGF0YSA8PSBjaGVjay52YWx1ZTtcbiAgICAgICAgaWYgKHRvb1NtYWxsKSB7XG4gICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUudG9vX3NtYWxsLFxuICAgICAgICAgICAgbWluaW11bTogY2hlY2sudmFsdWUsXG4gICAgICAgICAgICB0eXBlOiBcIm51bWJlclwiLFxuICAgICAgICAgICAgaW5jbHVzaXZlOiBjaGVjay5pbmNsdXNpdmUsXG4gICAgICAgICAgICBleGFjdDogZmFsc2UsXG4gICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJtYXhcIikge1xuICAgICAgICBjb25zdCB0b29CaWcgPSBjaGVjay5pbmNsdXNpdmUgPyBpbnB1dC5kYXRhID4gY2hlY2sudmFsdWUgOiBpbnB1dC5kYXRhID49IGNoZWNrLnZhbHVlO1xuICAgICAgICBpZiAodG9vQmlnKSB7XG4gICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUudG9vX2JpZyxcbiAgICAgICAgICAgIG1heGltdW06IGNoZWNrLnZhbHVlLFxuICAgICAgICAgICAgdHlwZTogXCJudW1iZXJcIixcbiAgICAgICAgICAgIGluY2x1c2l2ZTogY2hlY2suaW5jbHVzaXZlLFxuICAgICAgICAgICAgZXhhY3Q6IGZhbHNlLFxuICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwibXVsdGlwbGVPZlwiKSB7XG4gICAgICAgIGlmIChmbG9hdFNhZmVSZW1haW5kZXIoaW5wdXQuZGF0YSwgY2hlY2sudmFsdWUpICE9PSAwKSB7XG4gICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUubm90X211bHRpcGxlX29mLFxuICAgICAgICAgICAgbXVsdGlwbGVPZjogY2hlY2sudmFsdWUsXG4gICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJmaW5pdGVcIikge1xuICAgICAgICBpZiAoIU51bWJlci5pc0Zpbml0ZShpbnB1dC5kYXRhKSkge1xuICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLm5vdF9maW5pdGUsXG4gICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHV0aWwuYXNzZXJ0TmV2ZXIoY2hlY2spO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4geyBzdGF0dXM6IHN0YXR1cy52YWx1ZSwgdmFsdWU6IGlucHV0LmRhdGEgfTtcbiAgfVxuICBndGUodmFsdWUsIG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5zZXRMaW1pdChcIm1pblwiLCB2YWx1ZSwgdHJ1ZSwgZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpKTtcbiAgfVxuICBndCh2YWx1ZSwgbWVzc2FnZSkge1xuICAgIHJldHVybiB0aGlzLnNldExpbWl0KFwibWluXCIsIHZhbHVlLCBmYWxzZSwgZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpKTtcbiAgfVxuICBsdGUodmFsdWUsIG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5zZXRMaW1pdChcIm1heFwiLCB2YWx1ZSwgdHJ1ZSwgZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpKTtcbiAgfVxuICBsdCh2YWx1ZSwgbWVzc2FnZSkge1xuICAgIHJldHVybiB0aGlzLnNldExpbWl0KFwibWF4XCIsIHZhbHVlLCBmYWxzZSwgZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpKTtcbiAgfVxuICBzZXRMaW1pdChraW5kLCB2YWx1ZSwgaW5jbHVzaXZlLCBtZXNzYWdlKSB7XG4gICAgcmV0dXJuIG5ldyBfWm9kTnVtYmVyKHtcbiAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgIGNoZWNrczogW1xuICAgICAgICAuLi50aGlzLl9kZWYuY2hlY2tzLFxuICAgICAgICB7XG4gICAgICAgICAga2luZCxcbiAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICBpbmNsdXNpdmUsXG4gICAgICAgICAgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9KTtcbiAgfVxuICBfYWRkQ2hlY2soY2hlY2spIHtcbiAgICByZXR1cm4gbmV3IF9ab2ROdW1iZXIoe1xuICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgY2hlY2tzOiBbLi4udGhpcy5fZGVmLmNoZWNrcywgY2hlY2tdXG4gICAgfSk7XG4gIH1cbiAgaW50KG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAga2luZDogXCJpbnRcIixcbiAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKVxuICAgIH0pO1xuICB9XG4gIHBvc2l0aXZlKG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAga2luZDogXCJtaW5cIixcbiAgICAgIHZhbHVlOiAwLFxuICAgICAgaW5jbHVzaXZlOiBmYWxzZSxcbiAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKVxuICAgIH0pO1xuICB9XG4gIG5lZ2F0aXZlKG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAga2luZDogXCJtYXhcIixcbiAgICAgIHZhbHVlOiAwLFxuICAgICAgaW5jbHVzaXZlOiBmYWxzZSxcbiAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKVxuICAgIH0pO1xuICB9XG4gIG5vbnBvc2l0aXZlKG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAga2luZDogXCJtYXhcIixcbiAgICAgIHZhbHVlOiAwLFxuICAgICAgaW5jbHVzaXZlOiB0cnVlLFxuICAgICAgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpXG4gICAgfSk7XG4gIH1cbiAgbm9ubmVnYXRpdmUobWVzc2FnZSkge1xuICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICBraW5kOiBcIm1pblwiLFxuICAgICAgdmFsdWU6IDAsXG4gICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSlcbiAgICB9KTtcbiAgfVxuICBtdWx0aXBsZU9mKHZhbHVlLCBtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgIGtpbmQ6IFwibXVsdGlwbGVPZlwiLFxuICAgICAgdmFsdWUsXG4gICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSlcbiAgICB9KTtcbiAgfVxuICBmaW5pdGUobWVzc2FnZSkge1xuICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICBraW5kOiBcImZpbml0ZVwiLFxuICAgICAgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpXG4gICAgfSk7XG4gIH1cbiAgc2FmZShtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgIGtpbmQ6IFwibWluXCIsXG4gICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICB2YWx1ZTogTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVIsXG4gICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSlcbiAgICB9KS5fYWRkQ2hlY2soe1xuICAgICAga2luZDogXCJtYXhcIixcbiAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgIHZhbHVlOiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUixcbiAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKVxuICAgIH0pO1xuICB9XG4gIGdldCBtaW5WYWx1ZSgpIHtcbiAgICBsZXQgbWluID0gbnVsbDtcbiAgICBmb3IgKGNvbnN0IGNoIG9mIHRoaXMuX2RlZi5jaGVja3MpIHtcbiAgICAgIGlmIChjaC5raW5kID09PSBcIm1pblwiKSB7XG4gICAgICAgIGlmIChtaW4gPT09IG51bGwgfHwgY2gudmFsdWUgPiBtaW4pXG4gICAgICAgICAgbWluID0gY2gudmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtaW47XG4gIH1cbiAgZ2V0IG1heFZhbHVlKCkge1xuICAgIGxldCBtYXggPSBudWxsO1xuICAgIGZvciAoY29uc3QgY2ggb2YgdGhpcy5fZGVmLmNoZWNrcykge1xuICAgICAgaWYgKGNoLmtpbmQgPT09IFwibWF4XCIpIHtcbiAgICAgICAgaWYgKG1heCA9PT0gbnVsbCB8fCBjaC52YWx1ZSA8IG1heClcbiAgICAgICAgICBtYXggPSBjaC52YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1heDtcbiAgfVxuICBnZXQgaXNJbnQoKSB7XG4gICAgcmV0dXJuICEhdGhpcy5fZGVmLmNoZWNrcy5maW5kKChjaCkgPT4gY2gua2luZCA9PT0gXCJpbnRcIiB8fCBjaC5raW5kID09PSBcIm11bHRpcGxlT2ZcIiAmJiB1dGlsLmlzSW50ZWdlcihjaC52YWx1ZSkpO1xuICB9XG4gIGdldCBpc0Zpbml0ZSgpIHtcbiAgICBsZXQgbWF4ID0gbnVsbDtcbiAgICBsZXQgbWluID0gbnVsbDtcbiAgICBmb3IgKGNvbnN0IGNoIG9mIHRoaXMuX2RlZi5jaGVja3MpIHtcbiAgICAgIGlmIChjaC5raW5kID09PSBcImZpbml0ZVwiIHx8IGNoLmtpbmQgPT09IFwiaW50XCIgfHwgY2gua2luZCA9PT0gXCJtdWx0aXBsZU9mXCIpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2UgaWYgKGNoLmtpbmQgPT09IFwibWluXCIpIHtcbiAgICAgICAgaWYgKG1pbiA9PT0gbnVsbCB8fCBjaC52YWx1ZSA+IG1pbilcbiAgICAgICAgICBtaW4gPSBjaC52YWx1ZTtcbiAgICAgIH0gZWxzZSBpZiAoY2gua2luZCA9PT0gXCJtYXhcIikge1xuICAgICAgICBpZiAobWF4ID09PSBudWxsIHx8IGNoLnZhbHVlIDwgbWF4KVxuICAgICAgICAgIG1heCA9IGNoLnZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gTnVtYmVyLmlzRmluaXRlKG1pbikgJiYgTnVtYmVyLmlzRmluaXRlKG1heCk7XG4gIH1cbn07XG5ab2ROdW1iZXIuY3JlYXRlID0gKHBhcmFtcykgPT4ge1xuICByZXR1cm4gbmV3IFpvZE51bWJlcih7XG4gICAgY2hlY2tzOiBbXSxcbiAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZE51bWJlcixcbiAgICBjb2VyY2U6IHBhcmFtcz8uY29lcmNlIHx8IGZhbHNlLFxuICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKVxuICB9KTtcbn07XG52YXIgWm9kQmlnSW50ID0gY2xhc3MgX1pvZEJpZ0ludCBleHRlbmRzIFpvZFR5cGUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIHRoaXMubWluID0gdGhpcy5ndGU7XG4gICAgdGhpcy5tYXggPSB0aGlzLmx0ZTtcbiAgfVxuICBfcGFyc2UoaW5wdXQpIHtcbiAgICBpZiAodGhpcy5fZGVmLmNvZXJjZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaW5wdXQuZGF0YSA9IEJpZ0ludChpbnB1dC5kYXRhKTtcbiAgICAgIH0gY2F0Y2gge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0SW52YWxpZElucHV0KGlucHV0KTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgcGFyc2VkVHlwZSA9IHRoaXMuX2dldFR5cGUoaW5wdXQpO1xuICAgIGlmIChwYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLmJpZ2ludCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2dldEludmFsaWRJbnB1dChpbnB1dCk7XG4gICAgfVxuICAgIGxldCBjdHggPSB2b2lkIDA7XG4gICAgY29uc3Qgc3RhdHVzID0gbmV3IFBhcnNlU3RhdHVzKCk7XG4gICAgZm9yIChjb25zdCBjaGVjayBvZiB0aGlzLl9kZWYuY2hlY2tzKSB7XG4gICAgICBpZiAoY2hlY2sua2luZCA9PT0gXCJtaW5cIikge1xuICAgICAgICBjb25zdCB0b29TbWFsbCA9IGNoZWNrLmluY2x1c2l2ZSA/IGlucHV0LmRhdGEgPCBjaGVjay52YWx1ZSA6IGlucHV0LmRhdGEgPD0gY2hlY2sudmFsdWU7XG4gICAgICAgIGlmICh0b29TbWFsbCkge1xuICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnRvb19zbWFsbCxcbiAgICAgICAgICAgIHR5cGU6IFwiYmlnaW50XCIsXG4gICAgICAgICAgICBtaW5pbXVtOiBjaGVjay52YWx1ZSxcbiAgICAgICAgICAgIGluY2x1c2l2ZTogY2hlY2suaW5jbHVzaXZlLFxuICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwibWF4XCIpIHtcbiAgICAgICAgY29uc3QgdG9vQmlnID0gY2hlY2suaW5jbHVzaXZlID8gaW5wdXQuZGF0YSA+IGNoZWNrLnZhbHVlIDogaW5wdXQuZGF0YSA+PSBjaGVjay52YWx1ZTtcbiAgICAgICAgaWYgKHRvb0JpZykge1xuICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnRvb19iaWcsXG4gICAgICAgICAgICB0eXBlOiBcImJpZ2ludFwiLFxuICAgICAgICAgICAgbWF4aW11bTogY2hlY2sudmFsdWUsXG4gICAgICAgICAgICBpbmNsdXNpdmU6IGNoZWNrLmluY2x1c2l2ZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjaGVjay5raW5kID09PSBcIm11bHRpcGxlT2ZcIikge1xuICAgICAgICBpZiAoaW5wdXQuZGF0YSAlIGNoZWNrLnZhbHVlICE9PSBCaWdJbnQoMCkpIHtcbiAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5ub3RfbXVsdGlwbGVfb2YsXG4gICAgICAgICAgICBtdWx0aXBsZU9mOiBjaGVjay52YWx1ZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXRpbC5hc3NlcnROZXZlcihjaGVjayk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7IHN0YXR1czogc3RhdHVzLnZhbHVlLCB2YWx1ZTogaW5wdXQuZGF0YSB9O1xuICB9XG4gIF9nZXRJbnZhbGlkSW5wdXQoaW5wdXQpIHtcbiAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUuYmlnaW50LFxuICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlXG4gICAgfSk7XG4gICAgcmV0dXJuIElOVkFMSUQ7XG4gIH1cbiAgZ3RlKHZhbHVlLCBtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMuc2V0TGltaXQoXCJtaW5cIiwgdmFsdWUsIHRydWUsIGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSk7XG4gIH1cbiAgZ3QodmFsdWUsIG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5zZXRMaW1pdChcIm1pblwiLCB2YWx1ZSwgZmFsc2UsIGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSk7XG4gIH1cbiAgbHRlKHZhbHVlLCBtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMuc2V0TGltaXQoXCJtYXhcIiwgdmFsdWUsIHRydWUsIGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSk7XG4gIH1cbiAgbHQodmFsdWUsIG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5zZXRMaW1pdChcIm1heFwiLCB2YWx1ZSwgZmFsc2UsIGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSk7XG4gIH1cbiAgc2V0TGltaXQoa2luZCwgdmFsdWUsIGluY2x1c2l2ZSwgbWVzc2FnZSkge1xuICAgIHJldHVybiBuZXcgX1pvZEJpZ0ludCh7XG4gICAgICAuLi50aGlzLl9kZWYsXG4gICAgICBjaGVja3M6IFtcbiAgICAgICAgLi4udGhpcy5fZGVmLmNoZWNrcyxcbiAgICAgICAge1xuICAgICAgICAgIGtpbmQsXG4gICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgaW5jbHVzaXZlLFxuICAgICAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKVxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSk7XG4gIH1cbiAgX2FkZENoZWNrKGNoZWNrKSB7XG4gICAgcmV0dXJuIG5ldyBfWm9kQmlnSW50KHtcbiAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgIGNoZWNrczogWy4uLnRoaXMuX2RlZi5jaGVja3MsIGNoZWNrXVxuICAgIH0pO1xuICB9XG4gIHBvc2l0aXZlKG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAga2luZDogXCJtaW5cIixcbiAgICAgIHZhbHVlOiBCaWdJbnQoMCksXG4gICAgICBpbmNsdXNpdmU6IGZhbHNlLFxuICAgICAgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpXG4gICAgfSk7XG4gIH1cbiAgbmVnYXRpdmUobWVzc2FnZSkge1xuICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICBraW5kOiBcIm1heFwiLFxuICAgICAgdmFsdWU6IEJpZ0ludCgwKSxcbiAgICAgIGluY2x1c2l2ZTogZmFsc2UsXG4gICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSlcbiAgICB9KTtcbiAgfVxuICBub25wb3NpdGl2ZShtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgIGtpbmQ6IFwibWF4XCIsXG4gICAgICB2YWx1ZTogQmlnSW50KDApLFxuICAgICAgaW5jbHVzaXZlOiB0cnVlLFxuICAgICAgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpXG4gICAgfSk7XG4gIH1cbiAgbm9ubmVnYXRpdmUobWVzc2FnZSkge1xuICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICBraW5kOiBcIm1pblwiLFxuICAgICAgdmFsdWU6IEJpZ0ludCgwKSxcbiAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKVxuICAgIH0pO1xuICB9XG4gIG11bHRpcGxlT2YodmFsdWUsIG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAga2luZDogXCJtdWx0aXBsZU9mXCIsXG4gICAgICB2YWx1ZSxcbiAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKVxuICAgIH0pO1xuICB9XG4gIGdldCBtaW5WYWx1ZSgpIHtcbiAgICBsZXQgbWluID0gbnVsbDtcbiAgICBmb3IgKGNvbnN0IGNoIG9mIHRoaXMuX2RlZi5jaGVja3MpIHtcbiAgICAgIGlmIChjaC5raW5kID09PSBcIm1pblwiKSB7XG4gICAgICAgIGlmIChtaW4gPT09IG51bGwgfHwgY2gudmFsdWUgPiBtaW4pXG4gICAgICAgICAgbWluID0gY2gudmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtaW47XG4gIH1cbiAgZ2V0IG1heFZhbHVlKCkge1xuICAgIGxldCBtYXggPSBudWxsO1xuICAgIGZvciAoY29uc3QgY2ggb2YgdGhpcy5fZGVmLmNoZWNrcykge1xuICAgICAgaWYgKGNoLmtpbmQgPT09IFwibWF4XCIpIHtcbiAgICAgICAgaWYgKG1heCA9PT0gbnVsbCB8fCBjaC52YWx1ZSA8IG1heClcbiAgICAgICAgICBtYXggPSBjaC52YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1heDtcbiAgfVxufTtcblpvZEJpZ0ludC5jcmVhdGUgPSAocGFyYW1zKSA9PiB7XG4gIHJldHVybiBuZXcgWm9kQmlnSW50KHtcbiAgICBjaGVja3M6IFtdLFxuICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kQmlnSW50LFxuICAgIGNvZXJjZTogcGFyYW1zPy5jb2VyY2UgPz8gZmFsc2UsXG4gICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpXG4gIH0pO1xufTtcbnZhciBab2RCb29sZWFuID0gY2xhc3MgZXh0ZW5kcyBab2RUeXBlIHtcbiAgX3BhcnNlKGlucHV0KSB7XG4gICAgaWYgKHRoaXMuX2RlZi5jb2VyY2UpIHtcbiAgICAgIGlucHV0LmRhdGEgPSBCb29sZWFuKGlucHV0LmRhdGEpO1xuICAgIH1cbiAgICBjb25zdCBwYXJzZWRUeXBlID0gdGhpcy5fZ2V0VHlwZShpbnB1dCk7XG4gICAgaWYgKHBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUuYm9vbGVhbikge1xuICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGUsXG4gICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLmJvb2xlYW4sXG4gICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICB9XG4gICAgcmV0dXJuIE9LKGlucHV0LmRhdGEpO1xuICB9XG59O1xuWm9kQm9vbGVhbi5jcmVhdGUgPSAocGFyYW1zKSA9PiB7XG4gIHJldHVybiBuZXcgWm9kQm9vbGVhbih7XG4gICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RCb29sZWFuLFxuICAgIGNvZXJjZTogcGFyYW1zPy5jb2VyY2UgfHwgZmFsc2UsXG4gICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpXG4gIH0pO1xufTtcbnZhciBab2REYXRlID0gY2xhc3MgX1pvZERhdGUgZXh0ZW5kcyBab2RUeXBlIHtcbiAgX3BhcnNlKGlucHV0KSB7XG4gICAgaWYgKHRoaXMuX2RlZi5jb2VyY2UpIHtcbiAgICAgIGlucHV0LmRhdGEgPSBuZXcgRGF0ZShpbnB1dC5kYXRhKTtcbiAgICB9XG4gICAgY29uc3QgcGFyc2VkVHlwZSA9IHRoaXMuX2dldFR5cGUoaW5wdXQpO1xuICAgIGlmIChwYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLmRhdGUpIHtcbiAgICAgIGNvbnN0IGN0eDIgPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgyLCB7XG4gICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGUsXG4gICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLmRhdGUsXG4gICAgICAgIHJlY2VpdmVkOiBjdHgyLnBhcnNlZFR5cGVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgfVxuICAgIGlmIChOdW1iZXIuaXNOYU4oaW5wdXQuZGF0YS5nZXRUaW1lKCkpKSB7XG4gICAgICBjb25zdCBjdHgyID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4Miwge1xuICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9kYXRlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBJTlZBTElEO1xuICAgIH1cbiAgICBjb25zdCBzdGF0dXMgPSBuZXcgUGFyc2VTdGF0dXMoKTtcbiAgICBsZXQgY3R4ID0gdm9pZCAwO1xuICAgIGZvciAoY29uc3QgY2hlY2sgb2YgdGhpcy5fZGVmLmNoZWNrcykge1xuICAgICAgaWYgKGNoZWNrLmtpbmQgPT09IFwibWluXCIpIHtcbiAgICAgICAgaWYgKGlucHV0LmRhdGEuZ2V0VGltZSgpIDwgY2hlY2sudmFsdWUpIHtcbiAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS50b29fc21hbGwsXG4gICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgaW5jbHVzaXZlOiB0cnVlLFxuICAgICAgICAgICAgZXhhY3Q6IGZhbHNlLFxuICAgICAgICAgICAgbWluaW11bTogY2hlY2sudmFsdWUsXG4gICAgICAgICAgICB0eXBlOiBcImRhdGVcIlxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwibWF4XCIpIHtcbiAgICAgICAgaWYgKGlucHV0LmRhdGEuZ2V0VGltZSgpID4gY2hlY2sudmFsdWUpIHtcbiAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS50b29fYmlnLFxuICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgIGV4YWN0OiBmYWxzZSxcbiAgICAgICAgICAgIG1heGltdW06IGNoZWNrLnZhbHVlLFxuICAgICAgICAgICAgdHlwZTogXCJkYXRlXCJcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXRpbC5hc3NlcnROZXZlcihjaGVjayk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBzdGF0dXM6IHN0YXR1cy52YWx1ZSxcbiAgICAgIHZhbHVlOiBuZXcgRGF0ZShpbnB1dC5kYXRhLmdldFRpbWUoKSlcbiAgICB9O1xuICB9XG4gIF9hZGRDaGVjayhjaGVjaykge1xuICAgIHJldHVybiBuZXcgX1pvZERhdGUoe1xuICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgY2hlY2tzOiBbLi4udGhpcy5fZGVmLmNoZWNrcywgY2hlY2tdXG4gICAgfSk7XG4gIH1cbiAgbWluKG1pbkRhdGUsIG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAga2luZDogXCJtaW5cIixcbiAgICAgIHZhbHVlOiBtaW5EYXRlLmdldFRpbWUoKSxcbiAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKVxuICAgIH0pO1xuICB9XG4gIG1heChtYXhEYXRlLCBtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgIGtpbmQ6IFwibWF4XCIsXG4gICAgICB2YWx1ZTogbWF4RGF0ZS5nZXRUaW1lKCksXG4gICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSlcbiAgICB9KTtcbiAgfVxuICBnZXQgbWluRGF0ZSgpIHtcbiAgICBsZXQgbWluID0gbnVsbDtcbiAgICBmb3IgKGNvbnN0IGNoIG9mIHRoaXMuX2RlZi5jaGVja3MpIHtcbiAgICAgIGlmIChjaC5raW5kID09PSBcIm1pblwiKSB7XG4gICAgICAgIGlmIChtaW4gPT09IG51bGwgfHwgY2gudmFsdWUgPiBtaW4pXG4gICAgICAgICAgbWluID0gY2gudmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtaW4gIT0gbnVsbCA/IG5ldyBEYXRlKG1pbikgOiBudWxsO1xuICB9XG4gIGdldCBtYXhEYXRlKCkge1xuICAgIGxldCBtYXggPSBudWxsO1xuICAgIGZvciAoY29uc3QgY2ggb2YgdGhpcy5fZGVmLmNoZWNrcykge1xuICAgICAgaWYgKGNoLmtpbmQgPT09IFwibWF4XCIpIHtcbiAgICAgICAgaWYgKG1heCA9PT0gbnVsbCB8fCBjaC52YWx1ZSA8IG1heClcbiAgICAgICAgICBtYXggPSBjaC52YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1heCAhPSBudWxsID8gbmV3IERhdGUobWF4KSA6IG51bGw7XG4gIH1cbn07XG5ab2REYXRlLmNyZWF0ZSA9IChwYXJhbXMpID0+IHtcbiAgcmV0dXJuIG5ldyBab2REYXRlKHtcbiAgICBjaGVja3M6IFtdLFxuICAgIGNvZXJjZTogcGFyYW1zPy5jb2VyY2UgfHwgZmFsc2UsXG4gICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2REYXRlLFxuICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKVxuICB9KTtcbn07XG52YXIgWm9kU3ltYm9sID0gY2xhc3MgZXh0ZW5kcyBab2RUeXBlIHtcbiAgX3BhcnNlKGlucHV0KSB7XG4gICAgY29uc3QgcGFyc2VkVHlwZSA9IHRoaXMuX2dldFR5cGUoaW5wdXQpO1xuICAgIGlmIChwYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLnN5bWJvbCkge1xuICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGUsXG4gICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLnN5bWJvbCxcbiAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBJTlZBTElEO1xuICAgIH1cbiAgICByZXR1cm4gT0soaW5wdXQuZGF0YSk7XG4gIH1cbn07XG5ab2RTeW1ib2wuY3JlYXRlID0gKHBhcmFtcykgPT4ge1xuICByZXR1cm4gbmV3IFpvZFN5bWJvbCh7XG4gICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RTeW1ib2wsXG4gICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpXG4gIH0pO1xufTtcbnZhciBab2RVbmRlZmluZWQgPSBjbGFzcyBleHRlbmRzIFpvZFR5cGUge1xuICBfcGFyc2UoaW5wdXQpIHtcbiAgICBjb25zdCBwYXJzZWRUeXBlID0gdGhpcy5fZ2V0VHlwZShpbnB1dCk7XG4gICAgaWYgKHBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUudW5kZWZpbmVkKSB7XG4gICAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUudW5kZWZpbmVkLFxuICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgfVxuICAgIHJldHVybiBPSyhpbnB1dC5kYXRhKTtcbiAgfVxufTtcblpvZFVuZGVmaW5lZC5jcmVhdGUgPSAocGFyYW1zKSA9PiB7XG4gIHJldHVybiBuZXcgWm9kVW5kZWZpbmVkKHtcbiAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZFVuZGVmaW5lZCxcbiAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcylcbiAgfSk7XG59O1xudmFyIFpvZE51bGwgPSBjbGFzcyBleHRlbmRzIFpvZFR5cGUge1xuICBfcGFyc2UoaW5wdXQpIHtcbiAgICBjb25zdCBwYXJzZWRUeXBlID0gdGhpcy5fZ2V0VHlwZShpbnB1dCk7XG4gICAgaWYgKHBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUubnVsbCkge1xuICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGUsXG4gICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLm51bGwsXG4gICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICB9XG4gICAgcmV0dXJuIE9LKGlucHV0LmRhdGEpO1xuICB9XG59O1xuWm9kTnVsbC5jcmVhdGUgPSAocGFyYW1zKSA9PiB7XG4gIHJldHVybiBuZXcgWm9kTnVsbCh7XG4gICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2ROdWxsLFxuICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKVxuICB9KTtcbn07XG52YXIgWm9kQW55ID0gY2xhc3MgZXh0ZW5kcyBab2RUeXBlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICB0aGlzLl9hbnkgPSB0cnVlO1xuICB9XG4gIF9wYXJzZShpbnB1dCkge1xuICAgIHJldHVybiBPSyhpbnB1dC5kYXRhKTtcbiAgfVxufTtcblpvZEFueS5jcmVhdGUgPSAocGFyYW1zKSA9PiB7XG4gIHJldHVybiBuZXcgWm9kQW55KHtcbiAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZEFueSxcbiAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcylcbiAgfSk7XG59O1xudmFyIFpvZFVua25vd24gPSBjbGFzcyBleHRlbmRzIFpvZFR5cGUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIHRoaXMuX3Vua25vd24gPSB0cnVlO1xuICB9XG4gIF9wYXJzZShpbnB1dCkge1xuICAgIHJldHVybiBPSyhpbnB1dC5kYXRhKTtcbiAgfVxufTtcblpvZFVua25vd24uY3JlYXRlID0gKHBhcmFtcykgPT4ge1xuICByZXR1cm4gbmV3IFpvZFVua25vd24oe1xuICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kVW5rbm93bixcbiAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcylcbiAgfSk7XG59O1xudmFyIFpvZE5ldmVyID0gY2xhc3MgZXh0ZW5kcyBab2RUeXBlIHtcbiAgX3BhcnNlKGlucHV0KSB7XG4gICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLm5ldmVyLFxuICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlXG4gICAgfSk7XG4gICAgcmV0dXJuIElOVkFMSUQ7XG4gIH1cbn07XG5ab2ROZXZlci5jcmVhdGUgPSAocGFyYW1zKSA9PiB7XG4gIHJldHVybiBuZXcgWm9kTmV2ZXIoe1xuICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kTmV2ZXIsXG4gICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpXG4gIH0pO1xufTtcbnZhciBab2RWb2lkID0gY2xhc3MgZXh0ZW5kcyBab2RUeXBlIHtcbiAgX3BhcnNlKGlucHV0KSB7XG4gICAgY29uc3QgcGFyc2VkVHlwZSA9IHRoaXMuX2dldFR5cGUoaW5wdXQpO1xuICAgIGlmIChwYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLnVuZGVmaW5lZCkge1xuICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGUsXG4gICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLnZvaWQsXG4gICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICB9XG4gICAgcmV0dXJuIE9LKGlucHV0LmRhdGEpO1xuICB9XG59O1xuWm9kVm9pZC5jcmVhdGUgPSAocGFyYW1zKSA9PiB7XG4gIHJldHVybiBuZXcgWm9kVm9pZCh7XG4gICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RWb2lkLFxuICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKVxuICB9KTtcbn07XG52YXIgWm9kQXJyYXkgPSBjbGFzcyBfWm9kQXJyYXkgZXh0ZW5kcyBab2RUeXBlIHtcbiAgX3BhcnNlKGlucHV0KSB7XG4gICAgY29uc3QgeyBjdHgsIHN0YXR1cyB9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICBjb25zdCBkZWYgPSB0aGlzLl9kZWY7XG4gICAgaWYgKGN0eC5wYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLmFycmF5KSB7XG4gICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUuYXJyYXksXG4gICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICB9XG4gICAgaWYgKGRlZi5leGFjdExlbmd0aCAhPT0gbnVsbCkge1xuICAgICAgY29uc3QgdG9vQmlnID0gY3R4LmRhdGEubGVuZ3RoID4gZGVmLmV4YWN0TGVuZ3RoLnZhbHVlO1xuICAgICAgY29uc3QgdG9vU21hbGwgPSBjdHguZGF0YS5sZW5ndGggPCBkZWYuZXhhY3RMZW5ndGgudmFsdWU7XG4gICAgICBpZiAodG9vQmlnIHx8IHRvb1NtYWxsKSB7XG4gICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgIGNvZGU6IHRvb0JpZyA/IFpvZElzc3VlQ29kZS50b29fYmlnIDogWm9kSXNzdWVDb2RlLnRvb19zbWFsbCxcbiAgICAgICAgICBtaW5pbXVtOiB0b29TbWFsbCA/IGRlZi5leGFjdExlbmd0aC52YWx1ZSA6IHZvaWQgMCxcbiAgICAgICAgICBtYXhpbXVtOiB0b29CaWcgPyBkZWYuZXhhY3RMZW5ndGgudmFsdWUgOiB2b2lkIDAsXG4gICAgICAgICAgdHlwZTogXCJhcnJheVwiLFxuICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICBleGFjdDogdHJ1ZSxcbiAgICAgICAgICBtZXNzYWdlOiBkZWYuZXhhY3RMZW5ndGgubWVzc2FnZVxuICAgICAgICB9KTtcbiAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChkZWYubWluTGVuZ3RoICE9PSBudWxsKSB7XG4gICAgICBpZiAoY3R4LmRhdGEubGVuZ3RoIDwgZGVmLm1pbkxlbmd0aC52YWx1ZSkge1xuICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUudG9vX3NtYWxsLFxuICAgICAgICAgIG1pbmltdW06IGRlZi5taW5MZW5ndGgudmFsdWUsXG4gICAgICAgICAgdHlwZTogXCJhcnJheVwiLFxuICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICBleGFjdDogZmFsc2UsXG4gICAgICAgICAgbWVzc2FnZTogZGVmLm1pbkxlbmd0aC5tZXNzYWdlXG4gICAgICAgIH0pO1xuICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGRlZi5tYXhMZW5ndGggIT09IG51bGwpIHtcbiAgICAgIGlmIChjdHguZGF0YS5sZW5ndGggPiBkZWYubWF4TGVuZ3RoLnZhbHVlKSB7XG4gICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS50b29fYmlnLFxuICAgICAgICAgIG1heGltdW06IGRlZi5tYXhMZW5ndGgudmFsdWUsXG4gICAgICAgICAgdHlwZTogXCJhcnJheVwiLFxuICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICBleGFjdDogZmFsc2UsXG4gICAgICAgICAgbWVzc2FnZTogZGVmLm1heExlbmd0aC5tZXNzYWdlXG4gICAgICAgIH0pO1xuICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGN0eC5jb21tb24uYXN5bmMpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLmFsbChbLi4uY3R4LmRhdGFdLm1hcCgoaXRlbSwgaSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVmLnR5cGUuX3BhcnNlQXN5bmMobmV3IFBhcnNlSW5wdXRMYXp5UGF0aChjdHgsIGl0ZW0sIGN0eC5wYXRoLCBpKSk7XG4gICAgICB9KSkudGhlbigocmVzdWx0MikgPT4ge1xuICAgICAgICByZXR1cm4gUGFyc2VTdGF0dXMubWVyZ2VBcnJheShzdGF0dXMsIHJlc3VsdDIpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IFsuLi5jdHguZGF0YV0ubWFwKChpdGVtLCBpKSA9PiB7XG4gICAgICByZXR1cm4gZGVmLnR5cGUuX3BhcnNlU3luYyhuZXcgUGFyc2VJbnB1dExhenlQYXRoKGN0eCwgaXRlbSwgY3R4LnBhdGgsIGkpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gUGFyc2VTdGF0dXMubWVyZ2VBcnJheShzdGF0dXMsIHJlc3VsdCk7XG4gIH1cbiAgZ2V0IGVsZW1lbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RlZi50eXBlO1xuICB9XG4gIG1pbihtaW5MZW5ndGgsIG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gbmV3IF9ab2RBcnJheSh7XG4gICAgICAuLi50aGlzLl9kZWYsXG4gICAgICBtaW5MZW5ndGg6IHsgdmFsdWU6IG1pbkxlbmd0aCwgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpIH1cbiAgICB9KTtcbiAgfVxuICBtYXgobWF4TGVuZ3RoLCBtZXNzYWdlKSB7XG4gICAgcmV0dXJuIG5ldyBfWm9kQXJyYXkoe1xuICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgbWF4TGVuZ3RoOiB7IHZhbHVlOiBtYXhMZW5ndGgsIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSB9XG4gICAgfSk7XG4gIH1cbiAgbGVuZ3RoKGxlbiwgbWVzc2FnZSkge1xuICAgIHJldHVybiBuZXcgX1pvZEFycmF5KHtcbiAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgIGV4YWN0TGVuZ3RoOiB7IHZhbHVlOiBsZW4sIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSB9XG4gICAgfSk7XG4gIH1cbiAgbm9uZW1wdHkobWVzc2FnZSkge1xuICAgIHJldHVybiB0aGlzLm1pbigxLCBtZXNzYWdlKTtcbiAgfVxufTtcblpvZEFycmF5LmNyZWF0ZSA9IChzY2hlbWEsIHBhcmFtcykgPT4ge1xuICByZXR1cm4gbmV3IFpvZEFycmF5KHtcbiAgICB0eXBlOiBzY2hlbWEsXG4gICAgbWluTGVuZ3RoOiBudWxsLFxuICAgIG1heExlbmd0aDogbnVsbCxcbiAgICBleGFjdExlbmd0aDogbnVsbCxcbiAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZEFycmF5LFxuICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKVxuICB9KTtcbn07XG5mdW5jdGlvbiBkZWVwUGFydGlhbGlmeShzY2hlbWEpIHtcbiAgaWYgKHNjaGVtYSBpbnN0YW5jZW9mIFpvZE9iamVjdCkge1xuICAgIGNvbnN0IG5ld1NoYXBlID0ge307XG4gICAgZm9yIChjb25zdCBrZXkgaW4gc2NoZW1hLnNoYXBlKSB7XG4gICAgICBjb25zdCBmaWVsZFNjaGVtYSA9IHNjaGVtYS5zaGFwZVtrZXldO1xuICAgICAgbmV3U2hhcGVba2V5XSA9IFpvZE9wdGlvbmFsLmNyZWF0ZShkZWVwUGFydGlhbGlmeShmaWVsZFNjaGVtYSkpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFpvZE9iamVjdCh7XG4gICAgICAuLi5zY2hlbWEuX2RlZixcbiAgICAgIHNoYXBlOiAoKSA9PiBuZXdTaGFwZVxuICAgIH0pO1xuICB9IGVsc2UgaWYgKHNjaGVtYSBpbnN0YW5jZW9mIFpvZEFycmF5KSB7XG4gICAgcmV0dXJuIG5ldyBab2RBcnJheSh7XG4gICAgICAuLi5zY2hlbWEuX2RlZixcbiAgICAgIHR5cGU6IGRlZXBQYXJ0aWFsaWZ5KHNjaGVtYS5lbGVtZW50KVxuICAgIH0pO1xuICB9IGVsc2UgaWYgKHNjaGVtYSBpbnN0YW5jZW9mIFpvZE9wdGlvbmFsKSB7XG4gICAgcmV0dXJuIFpvZE9wdGlvbmFsLmNyZWF0ZShkZWVwUGFydGlhbGlmeShzY2hlbWEudW53cmFwKCkpKTtcbiAgfSBlbHNlIGlmIChzY2hlbWEgaW5zdGFuY2VvZiBab2ROdWxsYWJsZSkge1xuICAgIHJldHVybiBab2ROdWxsYWJsZS5jcmVhdGUoZGVlcFBhcnRpYWxpZnkoc2NoZW1hLnVud3JhcCgpKSk7XG4gIH0gZWxzZSBpZiAoc2NoZW1hIGluc3RhbmNlb2YgWm9kVHVwbGUpIHtcbiAgICByZXR1cm4gWm9kVHVwbGUuY3JlYXRlKHNjaGVtYS5pdGVtcy5tYXAoKGl0ZW0pID0+IGRlZXBQYXJ0aWFsaWZ5KGl0ZW0pKSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHNjaGVtYTtcbiAgfVxufVxudmFyIFpvZE9iamVjdCA9IGNsYXNzIF9ab2RPYmplY3QgZXh0ZW5kcyBab2RUeXBlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICB0aGlzLl9jYWNoZWQgPSBudWxsO1xuICAgIHRoaXMubm9uc3RyaWN0ID0gdGhpcy5wYXNzdGhyb3VnaDtcbiAgICB0aGlzLmF1Z21lbnQgPSB0aGlzLmV4dGVuZDtcbiAgfVxuICBfZ2V0Q2FjaGVkKCkge1xuICAgIGlmICh0aGlzLl9jYWNoZWQgIT09IG51bGwpXG4gICAgICByZXR1cm4gdGhpcy5fY2FjaGVkO1xuICAgIGNvbnN0IHNoYXBlID0gdGhpcy5fZGVmLnNoYXBlKCk7XG4gICAgY29uc3Qga2V5cyA9IHV0aWwub2JqZWN0S2V5cyhzaGFwZSk7XG4gICAgdGhpcy5fY2FjaGVkID0geyBzaGFwZSwga2V5cyB9O1xuICAgIHJldHVybiB0aGlzLl9jYWNoZWQ7XG4gIH1cbiAgX3BhcnNlKGlucHV0KSB7XG4gICAgY29uc3QgcGFyc2VkVHlwZSA9IHRoaXMuX2dldFR5cGUoaW5wdXQpO1xuICAgIGlmIChwYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLm9iamVjdCkge1xuICAgICAgY29uc3QgY3R4MiA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcbiAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eDIsIHtcbiAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUub2JqZWN0LFxuICAgICAgICByZWNlaXZlZDogY3R4Mi5wYXJzZWRUeXBlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBJTlZBTElEO1xuICAgIH1cbiAgICBjb25zdCB7IHN0YXR1cywgY3R4IH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgIGNvbnN0IHsgc2hhcGUsIGtleXM6IHNoYXBlS2V5cyB9ID0gdGhpcy5fZ2V0Q2FjaGVkKCk7XG4gICAgY29uc3QgZXh0cmFLZXlzID0gW107XG4gICAgaWYgKCEodGhpcy5fZGVmLmNhdGNoYWxsIGluc3RhbmNlb2YgWm9kTmV2ZXIgJiYgdGhpcy5fZGVmLnVua25vd25LZXlzID09PSBcInN0cmlwXCIpKSB7XG4gICAgICBmb3IgKGNvbnN0IGtleSBpbiBjdHguZGF0YSkge1xuICAgICAgICBpZiAoIXNoYXBlS2V5cy5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgZXh0cmFLZXlzLnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBwYWlycyA9IFtdO1xuICAgIGZvciAoY29uc3Qga2V5IG9mIHNoYXBlS2V5cykge1xuICAgICAgY29uc3Qga2V5VmFsaWRhdG9yID0gc2hhcGVba2V5XTtcbiAgICAgIGNvbnN0IHZhbHVlID0gY3R4LmRhdGFba2V5XTtcbiAgICAgIHBhaXJzLnB1c2goe1xuICAgICAgICBrZXk6IHsgc3RhdHVzOiBcInZhbGlkXCIsIHZhbHVlOiBrZXkgfSxcbiAgICAgICAgdmFsdWU6IGtleVZhbGlkYXRvci5fcGFyc2UobmV3IFBhcnNlSW5wdXRMYXp5UGF0aChjdHgsIHZhbHVlLCBjdHgucGF0aCwga2V5KSksXG4gICAgICAgIGFsd2F5c1NldDoga2V5IGluIGN0eC5kYXRhXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX2RlZi5jYXRjaGFsbCBpbnN0YW5jZW9mIFpvZE5ldmVyKSB7XG4gICAgICBjb25zdCB1bmtub3duS2V5cyA9IHRoaXMuX2RlZi51bmtub3duS2V5cztcbiAgICAgIGlmICh1bmtub3duS2V5cyA9PT0gXCJwYXNzdGhyb3VnaFwiKSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIGV4dHJhS2V5cykge1xuICAgICAgICAgIHBhaXJzLnB1c2goe1xuICAgICAgICAgICAga2V5OiB7IHN0YXR1czogXCJ2YWxpZFwiLCB2YWx1ZToga2V5IH0sXG4gICAgICAgICAgICB2YWx1ZTogeyBzdGF0dXM6IFwidmFsaWRcIiwgdmFsdWU6IGN0eC5kYXRhW2tleV0gfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHVua25vd25LZXlzID09PSBcInN0cmljdFwiKSB7XG4gICAgICAgIGlmIChleHRyYUtleXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnVucmVjb2duaXplZF9rZXlzLFxuICAgICAgICAgICAga2V5czogZXh0cmFLZXlzXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodW5rbm93bktleXMgPT09IFwic3RyaXBcIikge1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnRlcm5hbCBab2RPYmplY3QgZXJyb3I6IGludmFsaWQgdW5rbm93bktleXMgdmFsdWUuYCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGNhdGNoYWxsID0gdGhpcy5fZGVmLmNhdGNoYWxsO1xuICAgICAgZm9yIChjb25zdCBrZXkgb2YgZXh0cmFLZXlzKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gY3R4LmRhdGFba2V5XTtcbiAgICAgICAgcGFpcnMucHVzaCh7XG4gICAgICAgICAga2V5OiB7IHN0YXR1czogXCJ2YWxpZFwiLCB2YWx1ZToga2V5IH0sXG4gICAgICAgICAgdmFsdWU6IGNhdGNoYWxsLl9wYXJzZShcbiAgICAgICAgICAgIG5ldyBQYXJzZUlucHV0TGF6eVBhdGgoY3R4LCB2YWx1ZSwgY3R4LnBhdGgsIGtleSlcbiAgICAgICAgICAgIC8vLCBjdHguY2hpbGQoa2V5KSwgdmFsdWUsIGdldFBhcnNlZFR5cGUodmFsdWUpXG4gICAgICAgICAgKSxcbiAgICAgICAgICBhbHdheXNTZXQ6IGtleSBpbiBjdHguZGF0YVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGN0eC5jb21tb24uYXN5bmMpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3Qgc3luY1BhaXJzID0gW107XG4gICAgICAgIGZvciAoY29uc3QgcGFpciBvZiBwYWlycykge1xuICAgICAgICAgIGNvbnN0IGtleSA9IGF3YWl0IHBhaXIua2V5O1xuICAgICAgICAgIGNvbnN0IHZhbHVlID0gYXdhaXQgcGFpci52YWx1ZTtcbiAgICAgICAgICBzeW5jUGFpcnMucHVzaCh7XG4gICAgICAgICAgICBrZXksXG4gICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgIGFsd2F5c1NldDogcGFpci5hbHdheXNTZXRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3luY1BhaXJzO1xuICAgICAgfSkudGhlbigoc3luY1BhaXJzKSA9PiB7XG4gICAgICAgIHJldHVybiBQYXJzZVN0YXR1cy5tZXJnZU9iamVjdFN5bmMoc3RhdHVzLCBzeW5jUGFpcnMpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBQYXJzZVN0YXR1cy5tZXJnZU9iamVjdFN5bmMoc3RhdHVzLCBwYWlycyk7XG4gICAgfVxuICB9XG4gIGdldCBzaGFwZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGVmLnNoYXBlKCk7XG4gIH1cbiAgc3RyaWN0KG1lc3NhZ2UpIHtcbiAgICBlcnJvclV0aWwuZXJyVG9PYmo7XG4gICAgcmV0dXJuIG5ldyBfWm9kT2JqZWN0KHtcbiAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgIHVua25vd25LZXlzOiBcInN0cmljdFwiLFxuICAgICAgLi4ubWVzc2FnZSAhPT0gdm9pZCAwID8ge1xuICAgICAgICBlcnJvck1hcDogKGlzc3VlLCBjdHgpID0+IHtcbiAgICAgICAgICBjb25zdCBkZWZhdWx0RXJyb3IgPSB0aGlzLl9kZWYuZXJyb3JNYXA/Lihpc3N1ZSwgY3R4KS5tZXNzYWdlID8/IGN0eC5kZWZhdWx0RXJyb3I7XG4gICAgICAgICAgaWYgKGlzc3VlLmNvZGUgPT09IFwidW5yZWNvZ25pemVkX2tleXNcIilcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKS5tZXNzYWdlID8/IGRlZmF1bHRFcnJvclxuICAgICAgICAgICAgfTtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbWVzc2FnZTogZGVmYXVsdEVycm9yXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfSA6IHt9XG4gICAgfSk7XG4gIH1cbiAgc3RyaXAoKSB7XG4gICAgcmV0dXJuIG5ldyBfWm9kT2JqZWN0KHtcbiAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgIHVua25vd25LZXlzOiBcInN0cmlwXCJcbiAgICB9KTtcbiAgfVxuICBwYXNzdGhyb3VnaCgpIHtcbiAgICByZXR1cm4gbmV3IF9ab2RPYmplY3Qoe1xuICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgdW5rbm93bktleXM6IFwicGFzc3Rocm91Z2hcIlxuICAgIH0pO1xuICB9XG4gIC8vIGNvbnN0IEF1Z21lbnRGYWN0b3J5ID1cbiAgLy8gICA8RGVmIGV4dGVuZHMgWm9kT2JqZWN0RGVmPihkZWY6IERlZikgPT5cbiAgLy8gICA8QXVnbWVudGF0aW9uIGV4dGVuZHMgWm9kUmF3U2hhcGU+KFxuICAvLyAgICAgYXVnbWVudGF0aW9uOiBBdWdtZW50YXRpb25cbiAgLy8gICApOiBab2RPYmplY3Q8XG4gIC8vICAgICBleHRlbmRTaGFwZTxSZXR1cm5UeXBlPERlZltcInNoYXBlXCJdPiwgQXVnbWVudGF0aW9uPixcbiAgLy8gICAgIERlZltcInVua25vd25LZXlzXCJdLFxuICAvLyAgICAgRGVmW1wiY2F0Y2hhbGxcIl1cbiAgLy8gICA+ID0+IHtcbiAgLy8gICAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcbiAgLy8gICAgICAgLi4uZGVmLFxuICAvLyAgICAgICBzaGFwZTogKCkgPT4gKHtcbiAgLy8gICAgICAgICAuLi5kZWYuc2hhcGUoKSxcbiAgLy8gICAgICAgICAuLi5hdWdtZW50YXRpb24sXG4gIC8vICAgICAgIH0pLFxuICAvLyAgICAgfSkgYXMgYW55O1xuICAvLyAgIH07XG4gIGV4dGVuZChhdWdtZW50YXRpb24pIHtcbiAgICByZXR1cm4gbmV3IF9ab2RPYmplY3Qoe1xuICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgc2hhcGU6ICgpID0+ICh7XG4gICAgICAgIC4uLnRoaXMuX2RlZi5zaGFwZSgpLFxuICAgICAgICAuLi5hdWdtZW50YXRpb25cbiAgICAgIH0pXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFByaW9yIHRvIHpvZEAxLjAuMTIgdGhlcmUgd2FzIGEgYnVnIGluIHRoZVxuICAgKiBpbmZlcnJlZCB0eXBlIG9mIG1lcmdlZCBvYmplY3RzLiBQbGVhc2VcbiAgICogdXBncmFkZSBpZiB5b3UgYXJlIGV4cGVyaWVuY2luZyBpc3N1ZXMuXG4gICAqL1xuICBtZXJnZShtZXJnaW5nKSB7XG4gICAgY29uc3QgbWVyZ2VkID0gbmV3IF9ab2RPYmplY3Qoe1xuICAgICAgdW5rbm93bktleXM6IG1lcmdpbmcuX2RlZi51bmtub3duS2V5cyxcbiAgICAgIGNhdGNoYWxsOiBtZXJnaW5nLl9kZWYuY2F0Y2hhbGwsXG4gICAgICBzaGFwZTogKCkgPT4gKHtcbiAgICAgICAgLi4udGhpcy5fZGVmLnNoYXBlKCksXG4gICAgICAgIC4uLm1lcmdpbmcuX2RlZi5zaGFwZSgpXG4gICAgICB9KSxcbiAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kT2JqZWN0XG4gICAgfSk7XG4gICAgcmV0dXJuIG1lcmdlZDtcbiAgfVxuICAvLyBtZXJnZTxcbiAgLy8gICBJbmNvbWluZyBleHRlbmRzIEFueVpvZE9iamVjdCxcbiAgLy8gICBBdWdtZW50YXRpb24gZXh0ZW5kcyBJbmNvbWluZ1tcInNoYXBlXCJdLFxuICAvLyAgIE5ld091dHB1dCBleHRlbmRzIHtcbiAgLy8gICAgIFtrIGluIGtleW9mIEF1Z21lbnRhdGlvbiB8IGtleW9mIE91dHB1dF06IGsgZXh0ZW5kcyBrZXlvZiBBdWdtZW50YXRpb25cbiAgLy8gICAgICAgPyBBdWdtZW50YXRpb25ba11bXCJfb3V0cHV0XCJdXG4gIC8vICAgICAgIDogayBleHRlbmRzIGtleW9mIE91dHB1dFxuICAvLyAgICAgICA/IE91dHB1dFtrXVxuICAvLyAgICAgICA6IG5ldmVyO1xuICAvLyAgIH0sXG4gIC8vICAgTmV3SW5wdXQgZXh0ZW5kcyB7XG4gIC8vICAgICBbayBpbiBrZXlvZiBBdWdtZW50YXRpb24gfCBrZXlvZiBJbnB1dF06IGsgZXh0ZW5kcyBrZXlvZiBBdWdtZW50YXRpb25cbiAgLy8gICAgICAgPyBBdWdtZW50YXRpb25ba11bXCJfaW5wdXRcIl1cbiAgLy8gICAgICAgOiBrIGV4dGVuZHMga2V5b2YgSW5wdXRcbiAgLy8gICAgICAgPyBJbnB1dFtrXVxuICAvLyAgICAgICA6IG5ldmVyO1xuICAvLyAgIH1cbiAgLy8gPihcbiAgLy8gICBtZXJnaW5nOiBJbmNvbWluZ1xuICAvLyApOiBab2RPYmplY3Q8XG4gIC8vICAgZXh0ZW5kU2hhcGU8VCwgUmV0dXJuVHlwZTxJbmNvbWluZ1tcIl9kZWZcIl1bXCJzaGFwZVwiXT4+LFxuICAvLyAgIEluY29taW5nW1wiX2RlZlwiXVtcInVua25vd25LZXlzXCJdLFxuICAvLyAgIEluY29taW5nW1wiX2RlZlwiXVtcImNhdGNoYWxsXCJdLFxuICAvLyAgIE5ld091dHB1dCxcbiAgLy8gICBOZXdJbnB1dFxuICAvLyA+IHtcbiAgLy8gICBjb25zdCBtZXJnZWQ6IGFueSA9IG5ldyBab2RPYmplY3Qoe1xuICAvLyAgICAgdW5rbm93bktleXM6IG1lcmdpbmcuX2RlZi51bmtub3duS2V5cyxcbiAgLy8gICAgIGNhdGNoYWxsOiBtZXJnaW5nLl9kZWYuY2F0Y2hhbGwsXG4gIC8vICAgICBzaGFwZTogKCkgPT5cbiAgLy8gICAgICAgb2JqZWN0VXRpbC5tZXJnZVNoYXBlcyh0aGlzLl9kZWYuc2hhcGUoKSwgbWVyZ2luZy5fZGVmLnNoYXBlKCkpLFxuICAvLyAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RPYmplY3QsXG4gIC8vICAgfSkgYXMgYW55O1xuICAvLyAgIHJldHVybiBtZXJnZWQ7XG4gIC8vIH1cbiAgc2V0S2V5KGtleSwgc2NoZW1hKSB7XG4gICAgcmV0dXJuIHRoaXMuYXVnbWVudCh7IFtrZXldOiBzY2hlbWEgfSk7XG4gIH1cbiAgLy8gbWVyZ2U8SW5jb21pbmcgZXh0ZW5kcyBBbnlab2RPYmplY3Q+KFxuICAvLyAgIG1lcmdpbmc6IEluY29taW5nXG4gIC8vICk6IC8vWm9kT2JqZWN0PFQgJiBJbmNvbWluZ1tcIl9zaGFwZVwiXSwgVW5rbm93bktleXMsIENhdGNoYWxsPiA9IChtZXJnaW5nKSA9PiB7XG4gIC8vIFpvZE9iamVjdDxcbiAgLy8gICBleHRlbmRTaGFwZTxULCBSZXR1cm5UeXBlPEluY29taW5nW1wiX2RlZlwiXVtcInNoYXBlXCJdPj4sXG4gIC8vICAgSW5jb21pbmdbXCJfZGVmXCJdW1widW5rbm93bktleXNcIl0sXG4gIC8vICAgSW5jb21pbmdbXCJfZGVmXCJdW1wiY2F0Y2hhbGxcIl1cbiAgLy8gPiB7XG4gIC8vICAgLy8gY29uc3QgbWVyZ2VkU2hhcGUgPSBvYmplY3RVdGlsLm1lcmdlU2hhcGVzKFxuICAvLyAgIC8vICAgdGhpcy5fZGVmLnNoYXBlKCksXG4gIC8vICAgLy8gICBtZXJnaW5nLl9kZWYuc2hhcGUoKVxuICAvLyAgIC8vICk7XG4gIC8vICAgY29uc3QgbWVyZ2VkOiBhbnkgPSBuZXcgWm9kT2JqZWN0KHtcbiAgLy8gICAgIHVua25vd25LZXlzOiBtZXJnaW5nLl9kZWYudW5rbm93bktleXMsXG4gIC8vICAgICBjYXRjaGFsbDogbWVyZ2luZy5fZGVmLmNhdGNoYWxsLFxuICAvLyAgICAgc2hhcGU6ICgpID0+XG4gIC8vICAgICAgIG9iamVjdFV0aWwubWVyZ2VTaGFwZXModGhpcy5fZGVmLnNoYXBlKCksIG1lcmdpbmcuX2RlZi5zaGFwZSgpKSxcbiAgLy8gICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kT2JqZWN0LFxuICAvLyAgIH0pIGFzIGFueTtcbiAgLy8gICByZXR1cm4gbWVyZ2VkO1xuICAvLyB9XG4gIGNhdGNoYWxsKGluZGV4KSB7XG4gICAgcmV0dXJuIG5ldyBfWm9kT2JqZWN0KHtcbiAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgIGNhdGNoYWxsOiBpbmRleFxuICAgIH0pO1xuICB9XG4gIHBpY2sobWFzaykge1xuICAgIGNvbnN0IHNoYXBlID0ge307XG4gICAgZm9yIChjb25zdCBrZXkgb2YgdXRpbC5vYmplY3RLZXlzKG1hc2spKSB7XG4gICAgICBpZiAobWFza1trZXldICYmIHRoaXMuc2hhcGVba2V5XSkge1xuICAgICAgICBzaGFwZVtrZXldID0gdGhpcy5zaGFwZVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3IF9ab2RPYmplY3Qoe1xuICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgc2hhcGU6ICgpID0+IHNoYXBlXG4gICAgfSk7XG4gIH1cbiAgb21pdChtYXNrKSB7XG4gICAgY29uc3Qgc2hhcGUgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiB1dGlsLm9iamVjdEtleXModGhpcy5zaGFwZSkpIHtcbiAgICAgIGlmICghbWFza1trZXldKSB7XG4gICAgICAgIHNoYXBlW2tleV0gPSB0aGlzLnNoYXBlW2tleV07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXcgX1pvZE9iamVjdCh7XG4gICAgICAuLi50aGlzLl9kZWYsXG4gICAgICBzaGFwZTogKCkgPT4gc2hhcGVcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQGRlcHJlY2F0ZWRcbiAgICovXG4gIGRlZXBQYXJ0aWFsKCkge1xuICAgIHJldHVybiBkZWVwUGFydGlhbGlmeSh0aGlzKTtcbiAgfVxuICBwYXJ0aWFsKG1hc2spIHtcbiAgICBjb25zdCBuZXdTaGFwZSA9IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IG9mIHV0aWwub2JqZWN0S2V5cyh0aGlzLnNoYXBlKSkge1xuICAgICAgY29uc3QgZmllbGRTY2hlbWEgPSB0aGlzLnNoYXBlW2tleV07XG4gICAgICBpZiAobWFzayAmJiAhbWFza1trZXldKSB7XG4gICAgICAgIG5ld1NoYXBlW2tleV0gPSBmaWVsZFNjaGVtYTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld1NoYXBlW2tleV0gPSBmaWVsZFNjaGVtYS5vcHRpb25hbCgpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3IF9ab2RPYmplY3Qoe1xuICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgc2hhcGU6ICgpID0+IG5ld1NoYXBlXG4gICAgfSk7XG4gIH1cbiAgcmVxdWlyZWQobWFzaykge1xuICAgIGNvbnN0IG5ld1NoYXBlID0ge307XG4gICAgZm9yIChjb25zdCBrZXkgb2YgdXRpbC5vYmplY3RLZXlzKHRoaXMuc2hhcGUpKSB7XG4gICAgICBpZiAobWFzayAmJiAhbWFza1trZXldKSB7XG4gICAgICAgIG5ld1NoYXBlW2tleV0gPSB0aGlzLnNoYXBlW2tleV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBmaWVsZFNjaGVtYSA9IHRoaXMuc2hhcGVba2V5XTtcbiAgICAgICAgbGV0IG5ld0ZpZWxkID0gZmllbGRTY2hlbWE7XG4gICAgICAgIHdoaWxlIChuZXdGaWVsZCBpbnN0YW5jZW9mIFpvZE9wdGlvbmFsKSB7XG4gICAgICAgICAgbmV3RmllbGQgPSBuZXdGaWVsZC5fZGVmLmlubmVyVHlwZTtcbiAgICAgICAgfVxuICAgICAgICBuZXdTaGFwZVtrZXldID0gbmV3RmllbGQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXcgX1pvZE9iamVjdCh7XG4gICAgICAuLi50aGlzLl9kZWYsXG4gICAgICBzaGFwZTogKCkgPT4gbmV3U2hhcGVcbiAgICB9KTtcbiAgfVxuICBrZXlvZigpIHtcbiAgICByZXR1cm4gY3JlYXRlWm9kRW51bSh1dGlsLm9iamVjdEtleXModGhpcy5zaGFwZSkpO1xuICB9XG59O1xuWm9kT2JqZWN0LmNyZWF0ZSA9IChzaGFwZSwgcGFyYW1zKSA9PiB7XG4gIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcbiAgICBzaGFwZTogKCkgPT4gc2hhcGUsXG4gICAgdW5rbm93bktleXM6IFwic3RyaXBcIixcbiAgICBjYXRjaGFsbDogWm9kTmV2ZXIuY3JlYXRlKCksXG4gICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RPYmplY3QsXG4gICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpXG4gIH0pO1xufTtcblpvZE9iamVjdC5zdHJpY3RDcmVhdGUgPSAoc2hhcGUsIHBhcmFtcykgPT4ge1xuICByZXR1cm4gbmV3IFpvZE9iamVjdCh7XG4gICAgc2hhcGU6ICgpID0+IHNoYXBlLFxuICAgIHVua25vd25LZXlzOiBcInN0cmljdFwiLFxuICAgIGNhdGNoYWxsOiBab2ROZXZlci5jcmVhdGUoKSxcbiAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZE9iamVjdCxcbiAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcylcbiAgfSk7XG59O1xuWm9kT2JqZWN0LmxhenljcmVhdGUgPSAoc2hhcGUsIHBhcmFtcykgPT4ge1xuICByZXR1cm4gbmV3IFpvZE9iamVjdCh7XG4gICAgc2hhcGUsXG4gICAgdW5rbm93bktleXM6IFwic3RyaXBcIixcbiAgICBjYXRjaGFsbDogWm9kTmV2ZXIuY3JlYXRlKCksXG4gICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RPYmplY3QsXG4gICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpXG4gIH0pO1xufTtcbnZhciBab2RVbmlvbiA9IGNsYXNzIGV4dGVuZHMgWm9kVHlwZSB7XG4gIF9wYXJzZShpbnB1dCkge1xuICAgIGNvbnN0IHsgY3R4IH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLl9kZWYub3B0aW9ucztcbiAgICBmdW5jdGlvbiBoYW5kbGVSZXN1bHRzKHJlc3VsdHMpIHtcbiAgICAgIGZvciAoY29uc3QgcmVzdWx0IG9mIHJlc3VsdHMpIHtcbiAgICAgICAgaWYgKHJlc3VsdC5yZXN1bHQuc3RhdHVzID09PSBcInZhbGlkXCIpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LnJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZm9yIChjb25zdCByZXN1bHQgb2YgcmVzdWx0cykge1xuICAgICAgICBpZiAocmVzdWx0LnJlc3VsdC5zdGF0dXMgPT09IFwiZGlydHlcIikge1xuICAgICAgICAgIGN0eC5jb21tb24uaXNzdWVzLnB1c2goLi4ucmVzdWx0LmN0eC5jb21tb24uaXNzdWVzKTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LnJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29uc3QgdW5pb25FcnJvcnMgPSByZXN1bHRzLm1hcCgocmVzdWx0KSA9PiBuZXcgWm9kRXJyb3IocmVzdWx0LmN0eC5jb21tb24uaXNzdWVzKSk7XG4gICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdW5pb24sXG4gICAgICAgIHVuaW9uRXJyb3JzXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBJTlZBTElEO1xuICAgIH1cbiAgICBpZiAoY3R4LmNvbW1vbi5hc3luYykge1xuICAgICAgcmV0dXJuIFByb21pc2UuYWxsKG9wdGlvbnMubWFwKGFzeW5jIChvcHRpb24pID0+IHtcbiAgICAgICAgY29uc3QgY2hpbGRDdHggPSB7XG4gICAgICAgICAgLi4uY3R4LFxuICAgICAgICAgIGNvbW1vbjoge1xuICAgICAgICAgICAgLi4uY3R4LmNvbW1vbixcbiAgICAgICAgICAgIGlzc3VlczogW11cbiAgICAgICAgICB9LFxuICAgICAgICAgIHBhcmVudDogbnVsbFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHJlc3VsdDogYXdhaXQgb3B0aW9uLl9wYXJzZUFzeW5jKHtcbiAgICAgICAgICAgIGRhdGE6IGN0eC5kYXRhLFxuICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICBwYXJlbnQ6IGNoaWxkQ3R4XG4gICAgICAgICAgfSksXG4gICAgICAgICAgY3R4OiBjaGlsZEN0eFxuICAgICAgICB9O1xuICAgICAgfSkpLnRoZW4oaGFuZGxlUmVzdWx0cyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBkaXJ0eSA9IHZvaWQgMDtcbiAgICAgIGNvbnN0IGlzc3VlcyA9IFtdO1xuICAgICAgZm9yIChjb25zdCBvcHRpb24gb2Ygb3B0aW9ucykge1xuICAgICAgICBjb25zdCBjaGlsZEN0eCA9IHtcbiAgICAgICAgICAuLi5jdHgsXG4gICAgICAgICAgY29tbW9uOiB7XG4gICAgICAgICAgICAuLi5jdHguY29tbW9uLFxuICAgICAgICAgICAgaXNzdWVzOiBbXVxuICAgICAgICAgIH0sXG4gICAgICAgICAgcGFyZW50OiBudWxsXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG9wdGlvbi5fcGFyc2VTeW5jKHtcbiAgICAgICAgICBkYXRhOiBjdHguZGF0YSxcbiAgICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgICBwYXJlbnQ6IGNoaWxkQ3R4XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAocmVzdWx0LnN0YXR1cyA9PT0gXCJ2YWxpZFwiKSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQuc3RhdHVzID09PSBcImRpcnR5XCIgJiYgIWRpcnR5KSB7XG4gICAgICAgICAgZGlydHkgPSB7IHJlc3VsdCwgY3R4OiBjaGlsZEN0eCB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaGlsZEN0eC5jb21tb24uaXNzdWVzLmxlbmd0aCkge1xuICAgICAgICAgIGlzc3Vlcy5wdXNoKGNoaWxkQ3R4LmNvbW1vbi5pc3N1ZXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZGlydHkpIHtcbiAgICAgICAgY3R4LmNvbW1vbi5pc3N1ZXMucHVzaCguLi5kaXJ0eS5jdHguY29tbW9uLmlzc3Vlcyk7XG4gICAgICAgIHJldHVybiBkaXJ0eS5yZXN1bHQ7XG4gICAgICB9XG4gICAgICBjb25zdCB1bmlvbkVycm9ycyA9IGlzc3Vlcy5tYXAoKGlzc3VlczIpID0+IG5ldyBab2RFcnJvcihpc3N1ZXMyKSk7XG4gICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdW5pb24sXG4gICAgICAgIHVuaW9uRXJyb3JzXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBJTlZBTElEO1xuICAgIH1cbiAgfVxuICBnZXQgb3B0aW9ucygpIHtcbiAgICByZXR1cm4gdGhpcy5fZGVmLm9wdGlvbnM7XG4gIH1cbn07XG5ab2RVbmlvbi5jcmVhdGUgPSAodHlwZXMsIHBhcmFtcykgPT4ge1xuICByZXR1cm4gbmV3IFpvZFVuaW9uKHtcbiAgICBvcHRpb25zOiB0eXBlcyxcbiAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZFVuaW9uLFxuICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKVxuICB9KTtcbn07XG52YXIgZ2V0RGlzY3JpbWluYXRvciA9ICh0eXBlKSA9PiB7XG4gIGlmICh0eXBlIGluc3RhbmNlb2YgWm9kTGF6eSkge1xuICAgIHJldHVybiBnZXREaXNjcmltaW5hdG9yKHR5cGUuc2NoZW1hKTtcbiAgfSBlbHNlIGlmICh0eXBlIGluc3RhbmNlb2YgWm9kRWZmZWN0cykge1xuICAgIHJldHVybiBnZXREaXNjcmltaW5hdG9yKHR5cGUuaW5uZXJUeXBlKCkpO1xuICB9IGVsc2UgaWYgKHR5cGUgaW5zdGFuY2VvZiBab2RMaXRlcmFsKSB7XG4gICAgcmV0dXJuIFt0eXBlLnZhbHVlXTtcbiAgfSBlbHNlIGlmICh0eXBlIGluc3RhbmNlb2YgWm9kRW51bSkge1xuICAgIHJldHVybiB0eXBlLm9wdGlvbnM7XG4gIH0gZWxzZSBpZiAodHlwZSBpbnN0YW5jZW9mIFpvZE5hdGl2ZUVudW0pIHtcbiAgICByZXR1cm4gdXRpbC5vYmplY3RWYWx1ZXModHlwZS5lbnVtKTtcbiAgfSBlbHNlIGlmICh0eXBlIGluc3RhbmNlb2YgWm9kRGVmYXVsdCkge1xuICAgIHJldHVybiBnZXREaXNjcmltaW5hdG9yKHR5cGUuX2RlZi5pbm5lclR5cGUpO1xuICB9IGVsc2UgaWYgKHR5cGUgaW5zdGFuY2VvZiBab2RVbmRlZmluZWQpIHtcbiAgICByZXR1cm4gW3ZvaWQgMF07XG4gIH0gZWxzZSBpZiAodHlwZSBpbnN0YW5jZW9mIFpvZE51bGwpIHtcbiAgICByZXR1cm4gW251bGxdO1xuICB9IGVsc2UgaWYgKHR5cGUgaW5zdGFuY2VvZiBab2RPcHRpb25hbCkge1xuICAgIHJldHVybiBbdm9pZCAwLCAuLi5nZXREaXNjcmltaW5hdG9yKHR5cGUudW53cmFwKCkpXTtcbiAgfSBlbHNlIGlmICh0eXBlIGluc3RhbmNlb2YgWm9kTnVsbGFibGUpIHtcbiAgICByZXR1cm4gW251bGwsIC4uLmdldERpc2NyaW1pbmF0b3IodHlwZS51bndyYXAoKSldO1xuICB9IGVsc2UgaWYgKHR5cGUgaW5zdGFuY2VvZiBab2RCcmFuZGVkKSB7XG4gICAgcmV0dXJuIGdldERpc2NyaW1pbmF0b3IodHlwZS51bndyYXAoKSk7XG4gIH0gZWxzZSBpZiAodHlwZSBpbnN0YW5jZW9mIFpvZFJlYWRvbmx5KSB7XG4gICAgcmV0dXJuIGdldERpc2NyaW1pbmF0b3IodHlwZS51bndyYXAoKSk7XG4gIH0gZWxzZSBpZiAodHlwZSBpbnN0YW5jZW9mIFpvZENhdGNoKSB7XG4gICAgcmV0dXJuIGdldERpc2NyaW1pbmF0b3IodHlwZS5fZGVmLmlubmVyVHlwZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG59O1xudmFyIFpvZERpc2NyaW1pbmF0ZWRVbmlvbiA9IGNsYXNzIF9ab2REaXNjcmltaW5hdGVkVW5pb24gZXh0ZW5kcyBab2RUeXBlIHtcbiAgX3BhcnNlKGlucHV0KSB7XG4gICAgY29uc3QgeyBjdHggfSA9IHRoaXMuX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCk7XG4gICAgaWYgKGN0eC5wYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLm9iamVjdCkge1xuICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGUsXG4gICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLm9iamVjdCxcbiAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBJTlZBTElEO1xuICAgIH1cbiAgICBjb25zdCBkaXNjcmltaW5hdG9yID0gdGhpcy5kaXNjcmltaW5hdG9yO1xuICAgIGNvbnN0IGRpc2NyaW1pbmF0b3JWYWx1ZSA9IGN0eC5kYXRhW2Rpc2NyaW1pbmF0b3JdO1xuICAgIGNvbnN0IG9wdGlvbiA9IHRoaXMub3B0aW9uc01hcC5nZXQoZGlzY3JpbWluYXRvclZhbHVlKTtcbiAgICBpZiAoIW9wdGlvbikge1xuICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3VuaW9uX2Rpc2NyaW1pbmF0b3IsXG4gICAgICAgIG9wdGlvbnM6IEFycmF5LmZyb20odGhpcy5vcHRpb25zTWFwLmtleXMoKSksXG4gICAgICAgIHBhdGg6IFtkaXNjcmltaW5hdG9yXVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICB9XG4gICAgaWYgKGN0eC5jb21tb24uYXN5bmMpIHtcbiAgICAgIHJldHVybiBvcHRpb24uX3BhcnNlQXN5bmMoe1xuICAgICAgICBkYXRhOiBjdHguZGF0YSxcbiAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgIHBhcmVudDogY3R4XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG9wdGlvbi5fcGFyc2VTeW5jKHtcbiAgICAgICAgZGF0YTogY3R4LmRhdGEsXG4gICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICBwYXJlbnQ6IGN0eFxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGdldCBkaXNjcmltaW5hdG9yKCkge1xuICAgIHJldHVybiB0aGlzLl9kZWYuZGlzY3JpbWluYXRvcjtcbiAgfVxuICBnZXQgb3B0aW9ucygpIHtcbiAgICByZXR1cm4gdGhpcy5fZGVmLm9wdGlvbnM7XG4gIH1cbiAgZ2V0IG9wdGlvbnNNYXAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RlZi5vcHRpb25zTWFwO1xuICB9XG4gIC8qKlxuICAgKiBUaGUgY29uc3RydWN0b3Igb2YgdGhlIGRpc2NyaW1pbmF0ZWQgdW5pb24gc2NoZW1hLiBJdHMgYmVoYXZpb3VyIGlzIHZlcnkgc2ltaWxhciB0byB0aGF0IG9mIHRoZSBub3JtYWwgei51bmlvbigpIGNvbnN0cnVjdG9yLlxuICAgKiBIb3dldmVyLCBpdCBvbmx5IGFsbG93cyBhIHVuaW9uIG9mIG9iamVjdHMsIGFsbCBvZiB3aGljaCBuZWVkIHRvIHNoYXJlIGEgZGlzY3JpbWluYXRvciBwcm9wZXJ0eS4gVGhpcyBwcm9wZXJ0eSBtdXN0XG4gICAqIGhhdmUgYSBkaWZmZXJlbnQgdmFsdWUgZm9yIGVhY2ggb2JqZWN0IGluIHRoZSB1bmlvbi5cbiAgICogQHBhcmFtIGRpc2NyaW1pbmF0b3IgdGhlIG5hbWUgb2YgdGhlIGRpc2NyaW1pbmF0b3IgcHJvcGVydHlcbiAgICogQHBhcmFtIHR5cGVzIGFuIGFycmF5IG9mIG9iamVjdCBzY2hlbWFzXG4gICAqIEBwYXJhbSBwYXJhbXNcbiAgICovXG4gIHN0YXRpYyBjcmVhdGUoZGlzY3JpbWluYXRvciwgb3B0aW9ucywgcGFyYW1zKSB7XG4gICAgY29uc3Qgb3B0aW9uc01hcCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gICAgZm9yIChjb25zdCB0eXBlIG9mIG9wdGlvbnMpIHtcbiAgICAgIGNvbnN0IGRpc2NyaW1pbmF0b3JWYWx1ZXMgPSBnZXREaXNjcmltaW5hdG9yKHR5cGUuc2hhcGVbZGlzY3JpbWluYXRvcl0pO1xuICAgICAgaWYgKCFkaXNjcmltaW5hdG9yVmFsdWVzLmxlbmd0aCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEEgZGlzY3JpbWluYXRvciB2YWx1ZSBmb3Iga2V5IFxcYCR7ZGlzY3JpbWluYXRvcn1cXGAgY291bGQgbm90IGJlIGV4dHJhY3RlZCBmcm9tIGFsbCBzY2hlbWEgb3B0aW9uc2ApO1xuICAgICAgfVxuICAgICAgZm9yIChjb25zdCB2YWx1ZSBvZiBkaXNjcmltaW5hdG9yVmFsdWVzKSB7XG4gICAgICAgIGlmIChvcHRpb25zTWFwLmhhcyh2YWx1ZSkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYERpc2NyaW1pbmF0b3IgcHJvcGVydHkgJHtTdHJpbmcoZGlzY3JpbWluYXRvcil9IGhhcyBkdXBsaWNhdGUgdmFsdWUgJHtTdHJpbmcodmFsdWUpfWApO1xuICAgICAgICB9XG4gICAgICAgIG9wdGlvbnNNYXAuc2V0KHZhbHVlLCB0eXBlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ldyBfWm9kRGlzY3JpbWluYXRlZFVuaW9uKHtcbiAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kRGlzY3JpbWluYXRlZFVuaW9uLFxuICAgICAgZGlzY3JpbWluYXRvcixcbiAgICAgIG9wdGlvbnMsXG4gICAgICBvcHRpb25zTWFwLFxuICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpXG4gICAgfSk7XG4gIH1cbn07XG5mdW5jdGlvbiBtZXJnZVZhbHVlcyhhLCBiKSB7XG4gIGNvbnN0IGFUeXBlID0gZ2V0UGFyc2VkVHlwZShhKTtcbiAgY29uc3QgYlR5cGUgPSBnZXRQYXJzZWRUeXBlKGIpO1xuICBpZiAoYSA9PT0gYikge1xuICAgIHJldHVybiB7IHZhbGlkOiB0cnVlLCBkYXRhOiBhIH07XG4gIH0gZWxzZSBpZiAoYVR5cGUgPT09IFpvZFBhcnNlZFR5cGUub2JqZWN0ICYmIGJUeXBlID09PSBab2RQYXJzZWRUeXBlLm9iamVjdCkge1xuICAgIGNvbnN0IGJLZXlzID0gdXRpbC5vYmplY3RLZXlzKGIpO1xuICAgIGNvbnN0IHNoYXJlZEtleXMgPSB1dGlsLm9iamVjdEtleXMoYSkuZmlsdGVyKChrZXkpID0+IGJLZXlzLmluZGV4T2Yoa2V5KSAhPT0gLTEpO1xuICAgIGNvbnN0IG5ld09iaiA9IHsgLi4uYSwgLi4uYiB9O1xuICAgIGZvciAoY29uc3Qga2V5IG9mIHNoYXJlZEtleXMpIHtcbiAgICAgIGNvbnN0IHNoYXJlZFZhbHVlID0gbWVyZ2VWYWx1ZXMoYVtrZXldLCBiW2tleV0pO1xuICAgICAgaWYgKCFzaGFyZWRWYWx1ZS52YWxpZCkge1xuICAgICAgICByZXR1cm4geyB2YWxpZDogZmFsc2UgfTtcbiAgICAgIH1cbiAgICAgIG5ld09ialtrZXldID0gc2hhcmVkVmFsdWUuZGF0YTtcbiAgICB9XG4gICAgcmV0dXJuIHsgdmFsaWQ6IHRydWUsIGRhdGE6IG5ld09iaiB9O1xuICB9IGVsc2UgaWYgKGFUeXBlID09PSBab2RQYXJzZWRUeXBlLmFycmF5ICYmIGJUeXBlID09PSBab2RQYXJzZWRUeXBlLmFycmF5KSB7XG4gICAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHsgdmFsaWQ6IGZhbHNlIH07XG4gICAgfVxuICAgIGNvbnN0IG5ld0FycmF5ID0gW107XG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGEubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICBjb25zdCBpdGVtQSA9IGFbaW5kZXhdO1xuICAgICAgY29uc3QgaXRlbUIgPSBiW2luZGV4XTtcbiAgICAgIGNvbnN0IHNoYXJlZFZhbHVlID0gbWVyZ2VWYWx1ZXMoaXRlbUEsIGl0ZW1CKTtcbiAgICAgIGlmICghc2hhcmVkVmFsdWUudmFsaWQpIHtcbiAgICAgICAgcmV0dXJuIHsgdmFsaWQ6IGZhbHNlIH07XG4gICAgICB9XG4gICAgICBuZXdBcnJheS5wdXNoKHNoYXJlZFZhbHVlLmRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4geyB2YWxpZDogdHJ1ZSwgZGF0YTogbmV3QXJyYXkgfTtcbiAgfSBlbHNlIGlmIChhVHlwZSA9PT0gWm9kUGFyc2VkVHlwZS5kYXRlICYmIGJUeXBlID09PSBab2RQYXJzZWRUeXBlLmRhdGUgJiYgK2EgPT09ICtiKSB7XG4gICAgcmV0dXJuIHsgdmFsaWQ6IHRydWUsIGRhdGE6IGEgfTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geyB2YWxpZDogZmFsc2UgfTtcbiAgfVxufVxudmFyIFpvZEludGVyc2VjdGlvbiA9IGNsYXNzIGV4dGVuZHMgWm9kVHlwZSB7XG4gIF9wYXJzZShpbnB1dCkge1xuICAgIGNvbnN0IHsgc3RhdHVzLCBjdHggfSA9IHRoaXMuX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCk7XG4gICAgY29uc3QgaGFuZGxlUGFyc2VkID0gKHBhcnNlZExlZnQsIHBhcnNlZFJpZ2h0KSA9PiB7XG4gICAgICBpZiAoaXNBYm9ydGVkKHBhcnNlZExlZnQpIHx8IGlzQWJvcnRlZChwYXJzZWRSaWdodCkpIHtcbiAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICB9XG4gICAgICBjb25zdCBtZXJnZWQgPSBtZXJnZVZhbHVlcyhwYXJzZWRMZWZ0LnZhbHVlLCBwYXJzZWRSaWdodC52YWx1ZSk7XG4gICAgICBpZiAoIW1lcmdlZC52YWxpZCkge1xuICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9pbnRlcnNlY3Rpb25fdHlwZXNcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgfVxuICAgICAgaWYgKGlzRGlydHkocGFyc2VkTGVmdCkgfHwgaXNEaXJ0eShwYXJzZWRSaWdodCkpIHtcbiAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICB9XG4gICAgICByZXR1cm4geyBzdGF0dXM6IHN0YXR1cy52YWx1ZSwgdmFsdWU6IG1lcmdlZC5kYXRhIH07XG4gICAgfTtcbiAgICBpZiAoY3R4LmNvbW1vbi5hc3luYykge1xuICAgICAgcmV0dXJuIFByb21pc2UuYWxsKFtcbiAgICAgICAgdGhpcy5fZGVmLmxlZnQuX3BhcnNlQXN5bmMoe1xuICAgICAgICAgIGRhdGE6IGN0eC5kYXRhLFxuICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgIHBhcmVudDogY3R4XG4gICAgICAgIH0pLFxuICAgICAgICB0aGlzLl9kZWYucmlnaHQuX3BhcnNlQXN5bmMoe1xuICAgICAgICAgIGRhdGE6IGN0eC5kYXRhLFxuICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgIHBhcmVudDogY3R4XG4gICAgICAgIH0pXG4gICAgICBdKS50aGVuKChbbGVmdCwgcmlnaHRdKSA9PiBoYW5kbGVQYXJzZWQobGVmdCwgcmlnaHQpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGhhbmRsZVBhcnNlZCh0aGlzLl9kZWYubGVmdC5fcGFyc2VTeW5jKHtcbiAgICAgICAgZGF0YTogY3R4LmRhdGEsXG4gICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICBwYXJlbnQ6IGN0eFxuICAgICAgfSksIHRoaXMuX2RlZi5yaWdodC5fcGFyc2VTeW5jKHtcbiAgICAgICAgZGF0YTogY3R4LmRhdGEsXG4gICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICBwYXJlbnQ6IGN0eFxuICAgICAgfSkpO1xuICAgIH1cbiAgfVxufTtcblpvZEludGVyc2VjdGlvbi5jcmVhdGUgPSAobGVmdCwgcmlnaHQsIHBhcmFtcykgPT4ge1xuICByZXR1cm4gbmV3IFpvZEludGVyc2VjdGlvbih7XG4gICAgbGVmdCxcbiAgICByaWdodCxcbiAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZEludGVyc2VjdGlvbixcbiAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcylcbiAgfSk7XG59O1xudmFyIFpvZFR1cGxlID0gY2xhc3MgX1pvZFR1cGxlIGV4dGVuZHMgWm9kVHlwZSB7XG4gIF9wYXJzZShpbnB1dCkge1xuICAgIGNvbnN0IHsgc3RhdHVzLCBjdHggfSA9IHRoaXMuX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCk7XG4gICAgaWYgKGN0eC5wYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLmFycmF5KSB7XG4gICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUuYXJyYXksXG4gICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICB9XG4gICAgaWYgKGN0eC5kYXRhLmxlbmd0aCA8IHRoaXMuX2RlZi5pdGVtcy5sZW5ndGgpIHtcbiAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUudG9vX3NtYWxsLFxuICAgICAgICBtaW5pbXVtOiB0aGlzLl9kZWYuaXRlbXMubGVuZ3RoLFxuICAgICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICAgIGV4YWN0OiBmYWxzZSxcbiAgICAgICAgdHlwZTogXCJhcnJheVwiXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBJTlZBTElEO1xuICAgIH1cbiAgICBjb25zdCByZXN0ID0gdGhpcy5fZGVmLnJlc3Q7XG4gICAgaWYgKCFyZXN0ICYmIGN0eC5kYXRhLmxlbmd0aCA+IHRoaXMuX2RlZi5pdGVtcy5sZW5ndGgpIHtcbiAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUudG9vX2JpZyxcbiAgICAgICAgbWF4aW11bTogdGhpcy5fZGVmLml0ZW1zLmxlbmd0aCxcbiAgICAgICAgaW5jbHVzaXZlOiB0cnVlLFxuICAgICAgICBleGFjdDogZmFsc2UsXG4gICAgICAgIHR5cGU6IFwiYXJyYXlcIlxuICAgICAgfSk7XG4gICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICB9XG4gICAgY29uc3QgaXRlbXMgPSBbLi4uY3R4LmRhdGFdLm1hcCgoaXRlbSwgaXRlbUluZGV4KSA9PiB7XG4gICAgICBjb25zdCBzY2hlbWEgPSB0aGlzLl9kZWYuaXRlbXNbaXRlbUluZGV4XSB8fCB0aGlzLl9kZWYucmVzdDtcbiAgICAgIGlmICghc2NoZW1hKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIHJldHVybiBzY2hlbWEuX3BhcnNlKG5ldyBQYXJzZUlucHV0TGF6eVBhdGgoY3R4LCBpdGVtLCBjdHgucGF0aCwgaXRlbUluZGV4KSk7XG4gICAgfSkuZmlsdGVyKCh4KSA9PiAhIXgpO1xuICAgIGlmIChjdHguY29tbW9uLmFzeW5jKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5hbGwoaXRlbXMpLnRoZW4oKHJlc3VsdHMpID0+IHtcbiAgICAgICAgcmV0dXJuIFBhcnNlU3RhdHVzLm1lcmdlQXJyYXkoc3RhdHVzLCByZXN1bHRzKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gUGFyc2VTdGF0dXMubWVyZ2VBcnJheShzdGF0dXMsIGl0ZW1zKTtcbiAgICB9XG4gIH1cbiAgZ2V0IGl0ZW1zKCkge1xuICAgIHJldHVybiB0aGlzLl9kZWYuaXRlbXM7XG4gIH1cbiAgcmVzdChyZXN0KSB7XG4gICAgcmV0dXJuIG5ldyBfWm9kVHVwbGUoe1xuICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgcmVzdFxuICAgIH0pO1xuICB9XG59O1xuWm9kVHVwbGUuY3JlYXRlID0gKHNjaGVtYXMsIHBhcmFtcykgPT4ge1xuICBpZiAoIUFycmF5LmlzQXJyYXkoc2NoZW1hcykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgbXVzdCBwYXNzIGFuIGFycmF5IG9mIHNjaGVtYXMgdG8gei50dXBsZShbIC4uLiBdKVwiKTtcbiAgfVxuICByZXR1cm4gbmV3IFpvZFR1cGxlKHtcbiAgICBpdGVtczogc2NoZW1hcyxcbiAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZFR1cGxlLFxuICAgIHJlc3Q6IG51bGwsXG4gICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpXG4gIH0pO1xufTtcbnZhciBab2RSZWNvcmQgPSBjbGFzcyBfWm9kUmVjb3JkIGV4dGVuZHMgWm9kVHlwZSB7XG4gIGdldCBrZXlTY2hlbWEoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RlZi5rZXlUeXBlO1xuICB9XG4gIGdldCB2YWx1ZVNjaGVtYSgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGVmLnZhbHVlVHlwZTtcbiAgfVxuICBfcGFyc2UoaW5wdXQpIHtcbiAgICBjb25zdCB7IHN0YXR1cywgY3R4IH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgIGlmIChjdHgucGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS5vYmplY3QpIHtcbiAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5vYmplY3QsXG4gICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICB9XG4gICAgY29uc3QgcGFpcnMgPSBbXTtcbiAgICBjb25zdCBrZXlUeXBlID0gdGhpcy5fZGVmLmtleVR5cGU7XG4gICAgY29uc3QgdmFsdWVUeXBlID0gdGhpcy5fZGVmLnZhbHVlVHlwZTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBjdHguZGF0YSkge1xuICAgICAgcGFpcnMucHVzaCh7XG4gICAgICAgIGtleToga2V5VHlwZS5fcGFyc2UobmV3IFBhcnNlSW5wdXRMYXp5UGF0aChjdHgsIGtleSwgY3R4LnBhdGgsIGtleSkpLFxuICAgICAgICB2YWx1ZTogdmFsdWVUeXBlLl9wYXJzZShuZXcgUGFyc2VJbnB1dExhenlQYXRoKGN0eCwgY3R4LmRhdGFba2V5XSwgY3R4LnBhdGgsIGtleSkpLFxuICAgICAgICBhbHdheXNTZXQ6IGtleSBpbiBjdHguZGF0YVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChjdHguY29tbW9uLmFzeW5jKSB7XG4gICAgICByZXR1cm4gUGFyc2VTdGF0dXMubWVyZ2VPYmplY3RBc3luYyhzdGF0dXMsIHBhaXJzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFBhcnNlU3RhdHVzLm1lcmdlT2JqZWN0U3luYyhzdGF0dXMsIHBhaXJzKTtcbiAgICB9XG4gIH1cbiAgZ2V0IGVsZW1lbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RlZi52YWx1ZVR5cGU7XG4gIH1cbiAgc3RhdGljIGNyZWF0ZShmaXJzdCwgc2Vjb25kLCB0aGlyZCkge1xuICAgIGlmIChzZWNvbmQgaW5zdGFuY2VvZiBab2RUeXBlKSB7XG4gICAgICByZXR1cm4gbmV3IF9ab2RSZWNvcmQoe1xuICAgICAgICBrZXlUeXBlOiBmaXJzdCxcbiAgICAgICAgdmFsdWVUeXBlOiBzZWNvbmQsXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kUmVjb3JkLFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHRoaXJkKVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgX1pvZFJlY29yZCh7XG4gICAgICBrZXlUeXBlOiBab2RTdHJpbmcuY3JlYXRlKCksXG4gICAgICB2YWx1ZVR5cGU6IGZpcnN0LFxuICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RSZWNvcmQsXG4gICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHNlY29uZClcbiAgICB9KTtcbiAgfVxufTtcbnZhciBab2RNYXAgPSBjbGFzcyBleHRlbmRzIFpvZFR5cGUge1xuICBnZXQga2V5U2NoZW1hKCkge1xuICAgIHJldHVybiB0aGlzLl9kZWYua2V5VHlwZTtcbiAgfVxuICBnZXQgdmFsdWVTY2hlbWEoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RlZi52YWx1ZVR5cGU7XG4gIH1cbiAgX3BhcnNlKGlucHV0KSB7XG4gICAgY29uc3QgeyBzdGF0dXMsIGN0eCB9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICBpZiAoY3R4LnBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUubWFwKSB7XG4gICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUubWFwLFxuICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgfVxuICAgIGNvbnN0IGtleVR5cGUgPSB0aGlzLl9kZWYua2V5VHlwZTtcbiAgICBjb25zdCB2YWx1ZVR5cGUgPSB0aGlzLl9kZWYudmFsdWVUeXBlO1xuICAgIGNvbnN0IHBhaXJzID0gWy4uLmN0eC5kYXRhLmVudHJpZXMoKV0ubWFwKChba2V5LCB2YWx1ZV0sIGluZGV4KSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBrZXk6IGtleVR5cGUuX3BhcnNlKG5ldyBQYXJzZUlucHV0TGF6eVBhdGgoY3R4LCBrZXksIGN0eC5wYXRoLCBbaW5kZXgsIFwia2V5XCJdKSksXG4gICAgICAgIHZhbHVlOiB2YWx1ZVR5cGUuX3BhcnNlKG5ldyBQYXJzZUlucHV0TGF6eVBhdGgoY3R4LCB2YWx1ZSwgY3R4LnBhdGgsIFtpbmRleCwgXCJ2YWx1ZVwiXSkpXG4gICAgICB9O1xuICAgIH0pO1xuICAgIGlmIChjdHguY29tbW9uLmFzeW5jKSB7XG4gICAgICBjb25zdCBmaW5hbE1hcCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihhc3luYyAoKSA9PiB7XG4gICAgICAgIGZvciAoY29uc3QgcGFpciBvZiBwYWlycykge1xuICAgICAgICAgIGNvbnN0IGtleSA9IGF3YWl0IHBhaXIua2V5O1xuICAgICAgICAgIGNvbnN0IHZhbHVlID0gYXdhaXQgcGFpci52YWx1ZTtcbiAgICAgICAgICBpZiAoa2V5LnN0YXR1cyA9PT0gXCJhYm9ydGVkXCIgfHwgdmFsdWUuc3RhdHVzID09PSBcImFib3J0ZWRcIikge1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChrZXkuc3RhdHVzID09PSBcImRpcnR5XCIgfHwgdmFsdWUuc3RhdHVzID09PSBcImRpcnR5XCIpIHtcbiAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmaW5hbE1hcC5zZXQoa2V5LnZhbHVlLCB2YWx1ZS52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBzdGF0dXMudmFsdWUsIHZhbHVlOiBmaW5hbE1hcCB9O1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGZpbmFsTWFwID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgICAgIGZvciAoY29uc3QgcGFpciBvZiBwYWlycykge1xuICAgICAgICBjb25zdCBrZXkgPSBwYWlyLmtleTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBwYWlyLnZhbHVlO1xuICAgICAgICBpZiAoa2V5LnN0YXR1cyA9PT0gXCJhYm9ydGVkXCIgfHwgdmFsdWUuc3RhdHVzID09PSBcImFib3J0ZWRcIikge1xuICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIGlmIChrZXkuc3RhdHVzID09PSBcImRpcnR5XCIgfHwgdmFsdWUuc3RhdHVzID09PSBcImRpcnR5XCIpIHtcbiAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbE1hcC5zZXQoa2V5LnZhbHVlLCB2YWx1ZS52YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4geyBzdGF0dXM6IHN0YXR1cy52YWx1ZSwgdmFsdWU6IGZpbmFsTWFwIH07XG4gICAgfVxuICB9XG59O1xuWm9kTWFwLmNyZWF0ZSA9IChrZXlUeXBlLCB2YWx1ZVR5cGUsIHBhcmFtcykgPT4ge1xuICByZXR1cm4gbmV3IFpvZE1hcCh7XG4gICAgdmFsdWVUeXBlLFxuICAgIGtleVR5cGUsXG4gICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RNYXAsXG4gICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpXG4gIH0pO1xufTtcbnZhciBab2RTZXQgPSBjbGFzcyBfWm9kU2V0IGV4dGVuZHMgWm9kVHlwZSB7XG4gIF9wYXJzZShpbnB1dCkge1xuICAgIGNvbnN0IHsgc3RhdHVzLCBjdHggfSA9IHRoaXMuX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCk7XG4gICAgaWYgKGN0eC5wYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLnNldCkge1xuICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGUsXG4gICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLnNldCxcbiAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBJTlZBTElEO1xuICAgIH1cbiAgICBjb25zdCBkZWYgPSB0aGlzLl9kZWY7XG4gICAgaWYgKGRlZi5taW5TaXplICE9PSBudWxsKSB7XG4gICAgICBpZiAoY3R4LmRhdGEuc2l6ZSA8IGRlZi5taW5TaXplLnZhbHVlKSB7XG4gICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS50b29fc21hbGwsXG4gICAgICAgICAgbWluaW11bTogZGVmLm1pblNpemUudmFsdWUsXG4gICAgICAgICAgdHlwZTogXCJzZXRcIixcbiAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICAgICAgZXhhY3Q6IGZhbHNlLFxuICAgICAgICAgIG1lc3NhZ2U6IGRlZi5taW5TaXplLm1lc3NhZ2VcbiAgICAgICAgfSk7XG4gICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZGVmLm1heFNpemUgIT09IG51bGwpIHtcbiAgICAgIGlmIChjdHguZGF0YS5zaXplID4gZGVmLm1heFNpemUudmFsdWUpIHtcbiAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnRvb19iaWcsXG4gICAgICAgICAgbWF4aW11bTogZGVmLm1heFNpemUudmFsdWUsXG4gICAgICAgICAgdHlwZTogXCJzZXRcIixcbiAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICAgICAgZXhhY3Q6IGZhbHNlLFxuICAgICAgICAgIG1lc3NhZ2U6IGRlZi5tYXhTaXplLm1lc3NhZ2VcbiAgICAgICAgfSk7XG4gICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCB2YWx1ZVR5cGUgPSB0aGlzLl9kZWYudmFsdWVUeXBlO1xuICAgIGZ1bmN0aW9uIGZpbmFsaXplU2V0KGVsZW1lbnRzMikge1xuICAgICAgY29uc3QgcGFyc2VkU2V0ID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKTtcbiAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBlbGVtZW50czIpIHtcbiAgICAgICAgaWYgKGVsZW1lbnQuc3RhdHVzID09PSBcImFib3J0ZWRcIilcbiAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgaWYgKGVsZW1lbnQuc3RhdHVzID09PSBcImRpcnR5XCIpXG4gICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgIHBhcnNlZFNldC5hZGQoZWxlbWVudC52YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4geyBzdGF0dXM6IHN0YXR1cy52YWx1ZSwgdmFsdWU6IHBhcnNlZFNldCB9O1xuICAgIH1cbiAgICBjb25zdCBlbGVtZW50cyA9IFsuLi5jdHguZGF0YS52YWx1ZXMoKV0ubWFwKChpdGVtLCBpKSA9PiB2YWx1ZVR5cGUuX3BhcnNlKG5ldyBQYXJzZUlucHV0TGF6eVBhdGgoY3R4LCBpdGVtLCBjdHgucGF0aCwgaSkpKTtcbiAgICBpZiAoY3R4LmNvbW1vbi5hc3luYykge1xuICAgICAgcmV0dXJuIFByb21pc2UuYWxsKGVsZW1lbnRzKS50aGVuKChlbGVtZW50czIpID0+IGZpbmFsaXplU2V0KGVsZW1lbnRzMikpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmluYWxpemVTZXQoZWxlbWVudHMpO1xuICAgIH1cbiAgfVxuICBtaW4obWluU2l6ZSwgbWVzc2FnZSkge1xuICAgIHJldHVybiBuZXcgX1pvZFNldCh7XG4gICAgICAuLi50aGlzLl9kZWYsXG4gICAgICBtaW5TaXplOiB7IHZhbHVlOiBtaW5TaXplLCBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSkgfVxuICAgIH0pO1xuICB9XG4gIG1heChtYXhTaXplLCBtZXNzYWdlKSB7XG4gICAgcmV0dXJuIG5ldyBfWm9kU2V0KHtcbiAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgIG1heFNpemU6IHsgdmFsdWU6IG1heFNpemUsIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSB9XG4gICAgfSk7XG4gIH1cbiAgc2l6ZShzaXplLCBtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMubWluKHNpemUsIG1lc3NhZ2UpLm1heChzaXplLCBtZXNzYWdlKTtcbiAgfVxuICBub25lbXB0eShtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMubWluKDEsIG1lc3NhZ2UpO1xuICB9XG59O1xuWm9kU2V0LmNyZWF0ZSA9ICh2YWx1ZVR5cGUsIHBhcmFtcykgPT4ge1xuICByZXR1cm4gbmV3IFpvZFNldCh7XG4gICAgdmFsdWVUeXBlLFxuICAgIG1pblNpemU6IG51bGwsXG4gICAgbWF4U2l6ZTogbnVsbCxcbiAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZFNldCxcbiAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcylcbiAgfSk7XG59O1xudmFyIFpvZEZ1bmN0aW9uID0gY2xhc3MgX1pvZEZ1bmN0aW9uIGV4dGVuZHMgWm9kVHlwZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgdGhpcy52YWxpZGF0ZSA9IHRoaXMuaW1wbGVtZW50O1xuICB9XG4gIF9wYXJzZShpbnB1dCkge1xuICAgIGNvbnN0IHsgY3R4IH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgIGlmIChjdHgucGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS5mdW5jdGlvbikge1xuICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGUsXG4gICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLmZ1bmN0aW9uLFxuICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG1ha2VBcmdzSXNzdWUoYXJncywgZXJyb3IpIHtcbiAgICAgIHJldHVybiBtYWtlSXNzdWUoe1xuICAgICAgICBkYXRhOiBhcmdzLFxuICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgZXJyb3JNYXBzOiBbY3R4LmNvbW1vbi5jb250ZXh0dWFsRXJyb3JNYXAsIGN0eC5zY2hlbWFFcnJvck1hcCwgZ2V0RXJyb3JNYXAoKSwgZW5fZGVmYXVsdF0uZmlsdGVyKCh4KSA9PiAhIXgpLFxuICAgICAgICBpc3N1ZURhdGE6IHtcbiAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9hcmd1bWVudHMsXG4gICAgICAgICAgYXJndW1lbnRzRXJyb3I6IGVycm9yXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBtYWtlUmV0dXJuc0lzc3VlKHJldHVybnMsIGVycm9yKSB7XG4gICAgICByZXR1cm4gbWFrZUlzc3VlKHtcbiAgICAgICAgZGF0YTogcmV0dXJucyxcbiAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgIGVycm9yTWFwczogW2N0eC5jb21tb24uY29udGV4dHVhbEVycm9yTWFwLCBjdHguc2NoZW1hRXJyb3JNYXAsIGdldEVycm9yTWFwKCksIGVuX2RlZmF1bHRdLmZpbHRlcigoeCkgPT4gISF4KSxcbiAgICAgICAgaXNzdWVEYXRhOiB7XG4gICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfcmV0dXJuX3R5cGUsXG4gICAgICAgICAgcmV0dXJuVHlwZUVycm9yOiBlcnJvclxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgY29uc3QgcGFyYW1zID0geyBlcnJvck1hcDogY3R4LmNvbW1vbi5jb250ZXh0dWFsRXJyb3JNYXAgfTtcbiAgICBjb25zdCBmbiA9IGN0eC5kYXRhO1xuICAgIGlmICh0aGlzLl9kZWYucmV0dXJucyBpbnN0YW5jZW9mIFpvZFByb21pc2UpIHtcbiAgICAgIGNvbnN0IG1lID0gdGhpcztcbiAgICAgIHJldHVybiBPSyhhc3luYyBmdW5jdGlvbiguLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IGVycm9yID0gbmV3IFpvZEVycm9yKFtdKTtcbiAgICAgICAgY29uc3QgcGFyc2VkQXJncyA9IGF3YWl0IG1lLl9kZWYuYXJncy5wYXJzZUFzeW5jKGFyZ3MsIHBhcmFtcykuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgICBlcnJvci5hZGRJc3N1ZShtYWtlQXJnc0lzc3VlKGFyZ3MsIGUpKTtcbiAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IFJlZmxlY3QuYXBwbHkoZm4sIHRoaXMsIHBhcnNlZEFyZ3MpO1xuICAgICAgICBjb25zdCBwYXJzZWRSZXR1cm5zID0gYXdhaXQgbWUuX2RlZi5yZXR1cm5zLl9kZWYudHlwZS5wYXJzZUFzeW5jKHJlc3VsdCwgcGFyYW1zKS5jYXRjaCgoZSkgPT4ge1xuICAgICAgICAgIGVycm9yLmFkZElzc3VlKG1ha2VSZXR1cm5zSXNzdWUocmVzdWx0LCBlKSk7XG4gICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcGFyc2VkUmV0dXJucztcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBtZSA9IHRoaXM7XG4gICAgICByZXR1cm4gT0soZnVuY3Rpb24oLi4uYXJncykge1xuICAgICAgICBjb25zdCBwYXJzZWRBcmdzID0gbWUuX2RlZi5hcmdzLnNhZmVQYXJzZShhcmdzLCBwYXJhbXMpO1xuICAgICAgICBpZiAoIXBhcnNlZEFyZ3Muc3VjY2Vzcykge1xuICAgICAgICAgIHRocm93IG5ldyBab2RFcnJvcihbbWFrZUFyZ3NJc3N1ZShhcmdzLCBwYXJzZWRBcmdzLmVycm9yKV0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFJlZmxlY3QuYXBwbHkoZm4sIHRoaXMsIHBhcnNlZEFyZ3MuZGF0YSk7XG4gICAgICAgIGNvbnN0IHBhcnNlZFJldHVybnMgPSBtZS5fZGVmLnJldHVybnMuc2FmZVBhcnNlKHJlc3VsdCwgcGFyYW1zKTtcbiAgICAgICAgaWYgKCFwYXJzZWRSZXR1cm5zLnN1Y2Nlc3MpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgWm9kRXJyb3IoW21ha2VSZXR1cm5zSXNzdWUocmVzdWx0LCBwYXJzZWRSZXR1cm5zLmVycm9yKV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZWRSZXR1cm5zLmRhdGE7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgcGFyYW1ldGVycygpIHtcbiAgICByZXR1cm4gdGhpcy5fZGVmLmFyZ3M7XG4gIH1cbiAgcmV0dXJuVHlwZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGVmLnJldHVybnM7XG4gIH1cbiAgYXJncyguLi5pdGVtcykge1xuICAgIHJldHVybiBuZXcgX1pvZEZ1bmN0aW9uKHtcbiAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgIGFyZ3M6IFpvZFR1cGxlLmNyZWF0ZShpdGVtcykucmVzdChab2RVbmtub3duLmNyZWF0ZSgpKVxuICAgIH0pO1xuICB9XG4gIHJldHVybnMocmV0dXJuVHlwZSkge1xuICAgIHJldHVybiBuZXcgX1pvZEZ1bmN0aW9uKHtcbiAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgIHJldHVybnM6IHJldHVyblR5cGVcbiAgICB9KTtcbiAgfVxuICBpbXBsZW1lbnQoZnVuYykge1xuICAgIGNvbnN0IHZhbGlkYXRlZEZ1bmMgPSB0aGlzLnBhcnNlKGZ1bmMpO1xuICAgIHJldHVybiB2YWxpZGF0ZWRGdW5jO1xuICB9XG4gIHN0cmljdEltcGxlbWVudChmdW5jKSB7XG4gICAgY29uc3QgdmFsaWRhdGVkRnVuYyA9IHRoaXMucGFyc2UoZnVuYyk7XG4gICAgcmV0dXJuIHZhbGlkYXRlZEZ1bmM7XG4gIH1cbiAgc3RhdGljIGNyZWF0ZShhcmdzLCByZXR1cm5zLCBwYXJhbXMpIHtcbiAgICByZXR1cm4gbmV3IF9ab2RGdW5jdGlvbih7XG4gICAgICBhcmdzOiBhcmdzID8gYXJncyA6IFpvZFR1cGxlLmNyZWF0ZShbXSkucmVzdChab2RVbmtub3duLmNyZWF0ZSgpKSxcbiAgICAgIHJldHVybnM6IHJldHVybnMgfHwgWm9kVW5rbm93bi5jcmVhdGUoKSxcbiAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kRnVuY3Rpb24sXG4gICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcylcbiAgICB9KTtcbiAgfVxufTtcbnZhciBab2RMYXp5ID0gY2xhc3MgZXh0ZW5kcyBab2RUeXBlIHtcbiAgZ2V0IHNjaGVtYSgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGVmLmdldHRlcigpO1xuICB9XG4gIF9wYXJzZShpbnB1dCkge1xuICAgIGNvbnN0IHsgY3R4IH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgIGNvbnN0IGxhenlTY2hlbWEgPSB0aGlzLl9kZWYuZ2V0dGVyKCk7XG4gICAgcmV0dXJuIGxhenlTY2hlbWEuX3BhcnNlKHsgZGF0YTogY3R4LmRhdGEsIHBhdGg6IGN0eC5wYXRoLCBwYXJlbnQ6IGN0eCB9KTtcbiAgfVxufTtcblpvZExhenkuY3JlYXRlID0gKGdldHRlciwgcGFyYW1zKSA9PiB7XG4gIHJldHVybiBuZXcgWm9kTGF6eSh7XG4gICAgZ2V0dGVyLFxuICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kTGF6eSxcbiAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcylcbiAgfSk7XG59O1xudmFyIFpvZExpdGVyYWwgPSBjbGFzcyBleHRlbmRzIFpvZFR5cGUge1xuICBfcGFyc2UoaW5wdXQpIHtcbiAgICBpZiAoaW5wdXQuZGF0YSAhPT0gdGhpcy5fZGVmLnZhbHVlKSB7XG4gICAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgcmVjZWl2ZWQ6IGN0eC5kYXRhLFxuICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9saXRlcmFsLFxuICAgICAgICBleHBlY3RlZDogdGhpcy5fZGVmLnZhbHVlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBJTlZBTElEO1xuICAgIH1cbiAgICByZXR1cm4geyBzdGF0dXM6IFwidmFsaWRcIiwgdmFsdWU6IGlucHV0LmRhdGEgfTtcbiAgfVxuICBnZXQgdmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RlZi52YWx1ZTtcbiAgfVxufTtcblpvZExpdGVyYWwuY3JlYXRlID0gKHZhbHVlLCBwYXJhbXMpID0+IHtcbiAgcmV0dXJuIG5ldyBab2RMaXRlcmFsKHtcbiAgICB2YWx1ZSxcbiAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZExpdGVyYWwsXG4gICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpXG4gIH0pO1xufTtcbmZ1bmN0aW9uIGNyZWF0ZVpvZEVudW0odmFsdWVzLCBwYXJhbXMpIHtcbiAgcmV0dXJuIG5ldyBab2RFbnVtKHtcbiAgICB2YWx1ZXMsXG4gICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RFbnVtLFxuICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKVxuICB9KTtcbn1cbnZhciBab2RFbnVtID0gY2xhc3MgX1pvZEVudW0gZXh0ZW5kcyBab2RUeXBlIHtcbiAgX3BhcnNlKGlucHV0KSB7XG4gICAgaWYgKHR5cGVvZiBpbnB1dC5kYXRhICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgICBjb25zdCBleHBlY3RlZFZhbHVlcyA9IHRoaXMuX2RlZi52YWx1ZXM7XG4gICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgZXhwZWN0ZWQ6IHV0aWwuam9pblZhbHVlcyhleHBlY3RlZFZhbHVlcyksXG4gICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZSxcbiAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICB9XG4gICAgaWYgKCF0aGlzLl9jYWNoZSkge1xuICAgICAgdGhpcy5fY2FjaGUgPSBuZXcgU2V0KHRoaXMuX2RlZi52YWx1ZXMpO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuX2NhY2hlLmhhcyhpbnB1dC5kYXRhKSkge1xuICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgY29uc3QgZXhwZWN0ZWRWYWx1ZXMgPSB0aGlzLl9kZWYudmFsdWVzO1xuICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgIHJlY2VpdmVkOiBjdHguZGF0YSxcbiAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfZW51bV92YWx1ZSxcbiAgICAgICAgb3B0aW9uczogZXhwZWN0ZWRWYWx1ZXNcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgfVxuICAgIHJldHVybiBPSyhpbnB1dC5kYXRhKTtcbiAgfVxuICBnZXQgb3B0aW9ucygpIHtcbiAgICByZXR1cm4gdGhpcy5fZGVmLnZhbHVlcztcbiAgfVxuICBnZXQgZW51bSgpIHtcbiAgICBjb25zdCBlbnVtVmFsdWVzID0ge307XG4gICAgZm9yIChjb25zdCB2YWwgb2YgdGhpcy5fZGVmLnZhbHVlcykge1xuICAgICAgZW51bVZhbHVlc1t2YWxdID0gdmFsO1xuICAgIH1cbiAgICByZXR1cm4gZW51bVZhbHVlcztcbiAgfVxuICBnZXQgVmFsdWVzKCkge1xuICAgIGNvbnN0IGVudW1WYWx1ZXMgPSB7fTtcbiAgICBmb3IgKGNvbnN0IHZhbCBvZiB0aGlzLl9kZWYudmFsdWVzKSB7XG4gICAgICBlbnVtVmFsdWVzW3ZhbF0gPSB2YWw7XG4gICAgfVxuICAgIHJldHVybiBlbnVtVmFsdWVzO1xuICB9XG4gIGdldCBFbnVtKCkge1xuICAgIGNvbnN0IGVudW1WYWx1ZXMgPSB7fTtcbiAgICBmb3IgKGNvbnN0IHZhbCBvZiB0aGlzLl9kZWYudmFsdWVzKSB7XG4gICAgICBlbnVtVmFsdWVzW3ZhbF0gPSB2YWw7XG4gICAgfVxuICAgIHJldHVybiBlbnVtVmFsdWVzO1xuICB9XG4gIGV4dHJhY3QodmFsdWVzLCBuZXdEZWYgPSB0aGlzLl9kZWYpIHtcbiAgICByZXR1cm4gX1pvZEVudW0uY3JlYXRlKHZhbHVlcywge1xuICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgLi4ubmV3RGVmXG4gICAgfSk7XG4gIH1cbiAgZXhjbHVkZSh2YWx1ZXMsIG5ld0RlZiA9IHRoaXMuX2RlZikge1xuICAgIHJldHVybiBfWm9kRW51bS5jcmVhdGUodGhpcy5vcHRpb25zLmZpbHRlcigob3B0KSA9PiAhdmFsdWVzLmluY2x1ZGVzKG9wdCkpLCB7XG4gICAgICAuLi50aGlzLl9kZWYsXG4gICAgICAuLi5uZXdEZWZcbiAgICB9KTtcbiAgfVxufTtcblpvZEVudW0uY3JlYXRlID0gY3JlYXRlWm9kRW51bTtcbnZhciBab2ROYXRpdmVFbnVtID0gY2xhc3MgZXh0ZW5kcyBab2RUeXBlIHtcbiAgX3BhcnNlKGlucHV0KSB7XG4gICAgY29uc3QgbmF0aXZlRW51bVZhbHVlcyA9IHV0aWwuZ2V0VmFsaWRFbnVtVmFsdWVzKHRoaXMuX2RlZi52YWx1ZXMpO1xuICAgIGNvbnN0IGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcbiAgICBpZiAoY3R4LnBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUuc3RyaW5nICYmIGN0eC5wYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLm51bWJlcikge1xuICAgICAgY29uc3QgZXhwZWN0ZWRWYWx1ZXMgPSB1dGlsLm9iamVjdFZhbHVlcyhuYXRpdmVFbnVtVmFsdWVzKTtcbiAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICBleHBlY3RlZDogdXRpbC5qb2luVmFsdWVzKGV4cGVjdGVkVmFsdWVzKSxcbiAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlLFxuICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBJTlZBTElEO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuX2NhY2hlKSB7XG4gICAgICB0aGlzLl9jYWNoZSA9IG5ldyBTZXQodXRpbC5nZXRWYWxpZEVudW1WYWx1ZXModGhpcy5fZGVmLnZhbHVlcykpO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuX2NhY2hlLmhhcyhpbnB1dC5kYXRhKSkge1xuICAgICAgY29uc3QgZXhwZWN0ZWRWYWx1ZXMgPSB1dGlsLm9iamVjdFZhbHVlcyhuYXRpdmVFbnVtVmFsdWVzKTtcbiAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICByZWNlaXZlZDogY3R4LmRhdGEsXG4gICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX2VudW1fdmFsdWUsXG4gICAgICAgIG9wdGlvbnM6IGV4cGVjdGVkVmFsdWVzXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBJTlZBTElEO1xuICAgIH1cbiAgICByZXR1cm4gT0soaW5wdXQuZGF0YSk7XG4gIH1cbiAgZ2V0IGVudW0oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RlZi52YWx1ZXM7XG4gIH1cbn07XG5ab2ROYXRpdmVFbnVtLmNyZWF0ZSA9ICh2YWx1ZXMsIHBhcmFtcykgPT4ge1xuICByZXR1cm4gbmV3IFpvZE5hdGl2ZUVudW0oe1xuICAgIHZhbHVlcyxcbiAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZE5hdGl2ZUVudW0sXG4gICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpXG4gIH0pO1xufTtcbnZhciBab2RQcm9taXNlID0gY2xhc3MgZXh0ZW5kcyBab2RUeXBlIHtcbiAgdW53cmFwKCkge1xuICAgIHJldHVybiB0aGlzLl9kZWYudHlwZTtcbiAgfVxuICBfcGFyc2UoaW5wdXQpIHtcbiAgICBjb25zdCB7IGN0eCB9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICBpZiAoY3R4LnBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUucHJvbWlzZSAmJiBjdHguY29tbW9uLmFzeW5jID09PSBmYWxzZSkge1xuICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGUsXG4gICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLnByb21pc2UsXG4gICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICB9XG4gICAgY29uc3QgcHJvbWlzaWZpZWQgPSBjdHgucGFyc2VkVHlwZSA9PT0gWm9kUGFyc2VkVHlwZS5wcm9taXNlID8gY3R4LmRhdGEgOiBQcm9taXNlLnJlc29sdmUoY3R4LmRhdGEpO1xuICAgIHJldHVybiBPSyhwcm9taXNpZmllZC50aGVuKChkYXRhKSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5fZGVmLnR5cGUucGFyc2VBc3luYyhkYXRhLCB7XG4gICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICBlcnJvck1hcDogY3R4LmNvbW1vbi5jb250ZXh0dWFsRXJyb3JNYXBcbiAgICAgIH0pO1xuICAgIH0pKTtcbiAgfVxufTtcblpvZFByb21pc2UuY3JlYXRlID0gKHNjaGVtYSwgcGFyYW1zKSA9PiB7XG4gIHJldHVybiBuZXcgWm9kUHJvbWlzZSh7XG4gICAgdHlwZTogc2NoZW1hLFxuICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kUHJvbWlzZSxcbiAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcylcbiAgfSk7XG59O1xudmFyIFpvZEVmZmVjdHMgPSBjbGFzcyBleHRlbmRzIFpvZFR5cGUge1xuICBpbm5lclR5cGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RlZi5zY2hlbWE7XG4gIH1cbiAgc291cmNlVHlwZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGVmLnNjaGVtYS5fZGVmLnR5cGVOYW1lID09PSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kRWZmZWN0cyA/IHRoaXMuX2RlZi5zY2hlbWEuc291cmNlVHlwZSgpIDogdGhpcy5fZGVmLnNjaGVtYTtcbiAgfVxuICBfcGFyc2UoaW5wdXQpIHtcbiAgICBjb25zdCB7IHN0YXR1cywgY3R4IH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgIGNvbnN0IGVmZmVjdCA9IHRoaXMuX2RlZi5lZmZlY3QgfHwgbnVsbDtcbiAgICBjb25zdCBjaGVja0N0eCA9IHtcbiAgICAgIGFkZElzc3VlOiAoYXJnKSA9PiB7XG4gICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwgYXJnKTtcbiAgICAgICAgaWYgKGFyZy5mYXRhbCkge1xuICAgICAgICAgIHN0YXR1cy5hYm9ydCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZ2V0IHBhdGgoKSB7XG4gICAgICAgIHJldHVybiBjdHgucGF0aDtcbiAgICAgIH1cbiAgICB9O1xuICAgIGNoZWNrQ3R4LmFkZElzc3VlID0gY2hlY2tDdHguYWRkSXNzdWUuYmluZChjaGVja0N0eCk7XG4gICAgaWYgKGVmZmVjdC50eXBlID09PSBcInByZXByb2Nlc3NcIikge1xuICAgICAgY29uc3QgcHJvY2Vzc2VkID0gZWZmZWN0LnRyYW5zZm9ybShjdHguZGF0YSwgY2hlY2tDdHgpO1xuICAgICAgaWYgKGN0eC5jb21tb24uYXN5bmMpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShwcm9jZXNzZWQpLnRoZW4oYXN5bmMgKHByb2Nlc3NlZDIpID0+IHtcbiAgICAgICAgICBpZiAoc3RhdHVzLnZhbHVlID09PSBcImFib3J0ZWRcIilcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuX2RlZi5zY2hlbWEuX3BhcnNlQXN5bmMoe1xuICAgICAgICAgICAgZGF0YTogcHJvY2Vzc2VkMixcbiAgICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgICAgcGFyZW50OiBjdHhcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpZiAocmVzdWx0LnN0YXR1cyA9PT0gXCJhYm9ydGVkXCIpXG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgICBpZiAocmVzdWx0LnN0YXR1cyA9PT0gXCJkaXJ0eVwiKVxuICAgICAgICAgICAgcmV0dXJuIERJUlRZKHJlc3VsdC52YWx1ZSk7XG4gICAgICAgICAgaWYgKHN0YXR1cy52YWx1ZSA9PT0gXCJkaXJ0eVwiKVxuICAgICAgICAgICAgcmV0dXJuIERJUlRZKHJlc3VsdC52YWx1ZSk7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoc3RhdHVzLnZhbHVlID09PSBcImFib3J0ZWRcIilcbiAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5fZGVmLnNjaGVtYS5fcGFyc2VTeW5jKHtcbiAgICAgICAgICBkYXRhOiBwcm9jZXNzZWQsXG4gICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgcGFyZW50OiBjdHhcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChyZXN1bHQuc3RhdHVzID09PSBcImFib3J0ZWRcIilcbiAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgaWYgKHJlc3VsdC5zdGF0dXMgPT09IFwiZGlydHlcIilcbiAgICAgICAgICByZXR1cm4gRElSVFkocmVzdWx0LnZhbHVlKTtcbiAgICAgICAgaWYgKHN0YXR1cy52YWx1ZSA9PT0gXCJkaXJ0eVwiKVxuICAgICAgICAgIHJldHVybiBESVJUWShyZXN1bHQudmFsdWUpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZWZmZWN0LnR5cGUgPT09IFwicmVmaW5lbWVudFwiKSB7XG4gICAgICBjb25zdCBleGVjdXRlUmVmaW5lbWVudCA9IChhY2MpID0+IHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gZWZmZWN0LnJlZmluZW1lbnQoYWNjLCBjaGVja0N0eCk7XG4gICAgICAgIGlmIChjdHguY29tbW9uLmFzeW5jKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQXN5bmMgcmVmaW5lbWVudCBlbmNvdW50ZXJlZCBkdXJpbmcgc3luY2hyb25vdXMgcGFyc2Ugb3BlcmF0aW9uLiBVc2UgLnBhcnNlQXN5bmMgaW5zdGVhZC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgIH07XG4gICAgICBpZiAoY3R4LmNvbW1vbi5hc3luYyA9PT0gZmFsc2UpIHtcbiAgICAgICAgY29uc3QgaW5uZXIgPSB0aGlzLl9kZWYuc2NoZW1hLl9wYXJzZVN5bmMoe1xuICAgICAgICAgIGRhdGE6IGN0eC5kYXRhLFxuICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgIHBhcmVudDogY3R4XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoaW5uZXIuc3RhdHVzID09PSBcImFib3J0ZWRcIilcbiAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgaWYgKGlubmVyLnN0YXR1cyA9PT0gXCJkaXJ0eVwiKVxuICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICBleGVjdXRlUmVmaW5lbWVudChpbm5lci52YWx1ZSk7XG4gICAgICAgIHJldHVybiB7IHN0YXR1czogc3RhdHVzLnZhbHVlLCB2YWx1ZTogaW5uZXIudmFsdWUgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYuc2NoZW1hLl9wYXJzZUFzeW5jKHsgZGF0YTogY3R4LmRhdGEsIHBhdGg6IGN0eC5wYXRoLCBwYXJlbnQ6IGN0eCB9KS50aGVuKChpbm5lcikgPT4ge1xuICAgICAgICAgIGlmIChpbm5lci5zdGF0dXMgPT09IFwiYWJvcnRlZFwiKVxuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgICAgaWYgKGlubmVyLnN0YXR1cyA9PT0gXCJkaXJ0eVwiKVxuICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgcmV0dXJuIGV4ZWN1dGVSZWZpbmVtZW50KGlubmVyLnZhbHVlKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7IHN0YXR1czogc3RhdHVzLnZhbHVlLCB2YWx1ZTogaW5uZXIudmFsdWUgfTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlZmZlY3QudHlwZSA9PT0gXCJ0cmFuc2Zvcm1cIikge1xuICAgICAgaWYgKGN0eC5jb21tb24uYXN5bmMgPT09IGZhbHNlKSB7XG4gICAgICAgIGNvbnN0IGJhc2UgPSB0aGlzLl9kZWYuc2NoZW1hLl9wYXJzZVN5bmMoe1xuICAgICAgICAgIGRhdGE6IGN0eC5kYXRhLFxuICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgIHBhcmVudDogY3R4XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIWlzVmFsaWQoYmFzZSkpXG4gICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGVmZmVjdC50cmFuc2Zvcm0oYmFzZS52YWx1ZSwgY2hlY2tDdHgpO1xuICAgICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQXN5bmNocm9ub3VzIHRyYW5zZm9ybSBlbmNvdW50ZXJlZCBkdXJpbmcgc3luY2hyb25vdXMgcGFyc2Ugb3BlcmF0aW9uLiBVc2UgLnBhcnNlQXN5bmMgaW5zdGVhZC5gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBzdGF0dXM6IHN0YXR1cy52YWx1ZSwgdmFsdWU6IHJlc3VsdCB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5zY2hlbWEuX3BhcnNlQXN5bmMoeyBkYXRhOiBjdHguZGF0YSwgcGF0aDogY3R4LnBhdGgsIHBhcmVudDogY3R4IH0pLnRoZW4oKGJhc2UpID0+IHtcbiAgICAgICAgICBpZiAoIWlzVmFsaWQoYmFzZSkpXG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGVmZmVjdC50cmFuc2Zvcm0oYmFzZS52YWx1ZSwgY2hlY2tDdHgpKS50aGVuKChyZXN1bHQpID0+ICh7XG4gICAgICAgICAgICBzdGF0dXM6IHN0YXR1cy52YWx1ZSxcbiAgICAgICAgICAgIHZhbHVlOiByZXN1bHRcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICB1dGlsLmFzc2VydE5ldmVyKGVmZmVjdCk7XG4gIH1cbn07XG5ab2RFZmZlY3RzLmNyZWF0ZSA9IChzY2hlbWEsIGVmZmVjdCwgcGFyYW1zKSA9PiB7XG4gIHJldHVybiBuZXcgWm9kRWZmZWN0cyh7XG4gICAgc2NoZW1hLFxuICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kRWZmZWN0cyxcbiAgICBlZmZlY3QsXG4gICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpXG4gIH0pO1xufTtcblpvZEVmZmVjdHMuY3JlYXRlV2l0aFByZXByb2Nlc3MgPSAocHJlcHJvY2Vzcywgc2NoZW1hLCBwYXJhbXMpID0+IHtcbiAgcmV0dXJuIG5ldyBab2RFZmZlY3RzKHtcbiAgICBzY2hlbWEsXG4gICAgZWZmZWN0OiB7IHR5cGU6IFwicHJlcHJvY2Vzc1wiLCB0cmFuc2Zvcm06IHByZXByb2Nlc3MgfSxcbiAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZEVmZmVjdHMsXG4gICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpXG4gIH0pO1xufTtcbnZhciBab2RPcHRpb25hbCA9IGNsYXNzIGV4dGVuZHMgWm9kVHlwZSB7XG4gIF9wYXJzZShpbnB1dCkge1xuICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcbiAgICBpZiAocGFyc2VkVHlwZSA9PT0gWm9kUGFyc2VkVHlwZS51bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBPSyh2b2lkIDApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fZGVmLmlubmVyVHlwZS5fcGFyc2UoaW5wdXQpO1xuICB9XG4gIHVud3JhcCgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGVmLmlubmVyVHlwZTtcbiAgfVxufTtcblpvZE9wdGlvbmFsLmNyZWF0ZSA9ICh0eXBlLCBwYXJhbXMpID0+IHtcbiAgcmV0dXJuIG5ldyBab2RPcHRpb25hbCh7XG4gICAgaW5uZXJUeXBlOiB0eXBlLFxuICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kT3B0aW9uYWwsXG4gICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpXG4gIH0pO1xufTtcbnZhciBab2ROdWxsYWJsZSA9IGNsYXNzIGV4dGVuZHMgWm9kVHlwZSB7XG4gIF9wYXJzZShpbnB1dCkge1xuICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcbiAgICBpZiAocGFyc2VkVHlwZSA9PT0gWm9kUGFyc2VkVHlwZS5udWxsKSB7XG4gICAgICByZXR1cm4gT0sobnVsbCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9kZWYuaW5uZXJUeXBlLl9wYXJzZShpbnB1dCk7XG4gIH1cbiAgdW53cmFwKCkge1xuICAgIHJldHVybiB0aGlzLl9kZWYuaW5uZXJUeXBlO1xuICB9XG59O1xuWm9kTnVsbGFibGUuY3JlYXRlID0gKHR5cGUsIHBhcmFtcykgPT4ge1xuICByZXR1cm4gbmV3IFpvZE51bGxhYmxlKHtcbiAgICBpbm5lclR5cGU6IHR5cGUsXG4gICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2ROdWxsYWJsZSxcbiAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcylcbiAgfSk7XG59O1xudmFyIFpvZERlZmF1bHQgPSBjbGFzcyBleHRlbmRzIFpvZFR5cGUge1xuICBfcGFyc2UoaW5wdXQpIHtcbiAgICBjb25zdCB7IGN0eCB9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICBsZXQgZGF0YSA9IGN0eC5kYXRhO1xuICAgIGlmIChjdHgucGFyc2VkVHlwZSA9PT0gWm9kUGFyc2VkVHlwZS51bmRlZmluZWQpIHtcbiAgICAgIGRhdGEgPSB0aGlzLl9kZWYuZGVmYXVsdFZhbHVlKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9kZWYuaW5uZXJUeXBlLl9wYXJzZSh7XG4gICAgICBkYXRhLFxuICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICBwYXJlbnQ6IGN0eFxuICAgIH0pO1xuICB9XG4gIHJlbW92ZURlZmF1bHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RlZi5pbm5lclR5cGU7XG4gIH1cbn07XG5ab2REZWZhdWx0LmNyZWF0ZSA9ICh0eXBlLCBwYXJhbXMpID0+IHtcbiAgcmV0dXJuIG5ldyBab2REZWZhdWx0KHtcbiAgICBpbm5lclR5cGU6IHR5cGUsXG4gICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2REZWZhdWx0LFxuICAgIGRlZmF1bHRWYWx1ZTogdHlwZW9mIHBhcmFtcy5kZWZhdWx0ID09PSBcImZ1bmN0aW9uXCIgPyBwYXJhbXMuZGVmYXVsdCA6ICgpID0+IHBhcmFtcy5kZWZhdWx0LFxuICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKVxuICB9KTtcbn07XG52YXIgWm9kQ2F0Y2ggPSBjbGFzcyBleHRlbmRzIFpvZFR5cGUge1xuICBfcGFyc2UoaW5wdXQpIHtcbiAgICBjb25zdCB7IGN0eCB9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICBjb25zdCBuZXdDdHggPSB7XG4gICAgICAuLi5jdHgsXG4gICAgICBjb21tb246IHtcbiAgICAgICAgLi4uY3R4LmNvbW1vbixcbiAgICAgICAgaXNzdWVzOiBbXVxuICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgcmVzdWx0ID0gdGhpcy5fZGVmLmlubmVyVHlwZS5fcGFyc2Uoe1xuICAgICAgZGF0YTogbmV3Q3R4LmRhdGEsXG4gICAgICBwYXRoOiBuZXdDdHgucGF0aCxcbiAgICAgIHBhcmVudDoge1xuICAgICAgICAuLi5uZXdDdHhcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoaXNBc3luYyhyZXN1bHQpKSB7XG4gICAgICByZXR1cm4gcmVzdWx0LnRoZW4oKHJlc3VsdDIpID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzdGF0dXM6IFwidmFsaWRcIixcbiAgICAgICAgICB2YWx1ZTogcmVzdWx0Mi5zdGF0dXMgPT09IFwidmFsaWRcIiA/IHJlc3VsdDIudmFsdWUgOiB0aGlzLl9kZWYuY2F0Y2hWYWx1ZSh7XG4gICAgICAgICAgICBnZXQgZXJyb3IoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBuZXcgWm9kRXJyb3IobmV3Q3R4LmNvbW1vbi5pc3N1ZXMpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGlucHV0OiBuZXdDdHguZGF0YVxuICAgICAgICAgIH0pXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3RhdHVzOiBcInZhbGlkXCIsXG4gICAgICAgIHZhbHVlOiByZXN1bHQuc3RhdHVzID09PSBcInZhbGlkXCIgPyByZXN1bHQudmFsdWUgOiB0aGlzLl9kZWYuY2F0Y2hWYWx1ZSh7XG4gICAgICAgICAgZ2V0IGVycm9yKCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBab2RFcnJvcihuZXdDdHguY29tbW9uLmlzc3Vlcyk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBpbnB1dDogbmV3Q3R4LmRhdGFcbiAgICAgICAgfSlcbiAgICAgIH07XG4gICAgfVxuICB9XG4gIHJlbW92ZUNhdGNoKCkge1xuICAgIHJldHVybiB0aGlzLl9kZWYuaW5uZXJUeXBlO1xuICB9XG59O1xuWm9kQ2F0Y2guY3JlYXRlID0gKHR5cGUsIHBhcmFtcykgPT4ge1xuICByZXR1cm4gbmV3IFpvZENhdGNoKHtcbiAgICBpbm5lclR5cGU6IHR5cGUsXG4gICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RDYXRjaCxcbiAgICBjYXRjaFZhbHVlOiB0eXBlb2YgcGFyYW1zLmNhdGNoID09PSBcImZ1bmN0aW9uXCIgPyBwYXJhbXMuY2F0Y2ggOiAoKSA9PiBwYXJhbXMuY2F0Y2gsXG4gICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpXG4gIH0pO1xufTtcbnZhciBab2ROYU4gPSBjbGFzcyBleHRlbmRzIFpvZFR5cGUge1xuICBfcGFyc2UoaW5wdXQpIHtcbiAgICBjb25zdCBwYXJzZWRUeXBlID0gdGhpcy5fZ2V0VHlwZShpbnB1dCk7XG4gICAgaWYgKHBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUubmFuKSB7XG4gICAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUubmFuLFxuICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgfVxuICAgIHJldHVybiB7IHN0YXR1czogXCJ2YWxpZFwiLCB2YWx1ZTogaW5wdXQuZGF0YSB9O1xuICB9XG59O1xuWm9kTmFOLmNyZWF0ZSA9IChwYXJhbXMpID0+IHtcbiAgcmV0dXJuIG5ldyBab2ROYU4oe1xuICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kTmFOLFxuICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKVxuICB9KTtcbn07XG52YXIgQlJBTkQgPSBTeW1ib2woXCJ6b2RfYnJhbmRcIik7XG52YXIgWm9kQnJhbmRlZCA9IGNsYXNzIGV4dGVuZHMgWm9kVHlwZSB7XG4gIF9wYXJzZShpbnB1dCkge1xuICAgIGNvbnN0IHsgY3R4IH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgIGNvbnN0IGRhdGEgPSBjdHguZGF0YTtcbiAgICByZXR1cm4gdGhpcy5fZGVmLnR5cGUuX3BhcnNlKHtcbiAgICAgIGRhdGEsXG4gICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgIHBhcmVudDogY3R4XG4gICAgfSk7XG4gIH1cbiAgdW53cmFwKCkge1xuICAgIHJldHVybiB0aGlzLl9kZWYudHlwZTtcbiAgfVxufTtcbnZhciBab2RQaXBlbGluZSA9IGNsYXNzIF9ab2RQaXBlbGluZSBleHRlbmRzIFpvZFR5cGUge1xuICBfcGFyc2UoaW5wdXQpIHtcbiAgICBjb25zdCB7IHN0YXR1cywgY3R4IH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgIGlmIChjdHguY29tbW9uLmFzeW5jKSB7XG4gICAgICBjb25zdCBoYW5kbGVBc3luYyA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgaW5SZXN1bHQgPSBhd2FpdCB0aGlzLl9kZWYuaW4uX3BhcnNlQXN5bmMoe1xuICAgICAgICAgIGRhdGE6IGN0eC5kYXRhLFxuICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgIHBhcmVudDogY3R4XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoaW5SZXN1bHQuc3RhdHVzID09PSBcImFib3J0ZWRcIilcbiAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgaWYgKGluUmVzdWx0LnN0YXR1cyA9PT0gXCJkaXJ0eVwiKSB7XG4gICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgcmV0dXJuIERJUlRZKGluUmVzdWx0LnZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5fZGVmLm91dC5fcGFyc2VBc3luYyh7XG4gICAgICAgICAgICBkYXRhOiBpblJlc3VsdC52YWx1ZSxcbiAgICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgICAgcGFyZW50OiBjdHhcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHJldHVybiBoYW5kbGVBc3luYygpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBpblJlc3VsdCA9IHRoaXMuX2RlZi5pbi5fcGFyc2VTeW5jKHtcbiAgICAgICAgZGF0YTogY3R4LmRhdGEsXG4gICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICBwYXJlbnQ6IGN0eFxuICAgICAgfSk7XG4gICAgICBpZiAoaW5SZXN1bHQuc3RhdHVzID09PSBcImFib3J0ZWRcIilcbiAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICBpZiAoaW5SZXN1bHQuc3RhdHVzID09PSBcImRpcnR5XCIpIHtcbiAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc3RhdHVzOiBcImRpcnR5XCIsXG4gICAgICAgICAgdmFsdWU6IGluUmVzdWx0LnZhbHVlXG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLm91dC5fcGFyc2VTeW5jKHtcbiAgICAgICAgICBkYXRhOiBpblJlc3VsdC52YWx1ZSxcbiAgICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgICBwYXJlbnQ6IGN0eFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgc3RhdGljIGNyZWF0ZShhLCBiKSB7XG4gICAgcmV0dXJuIG5ldyBfWm9kUGlwZWxpbmUoe1xuICAgICAgaW46IGEsXG4gICAgICBvdXQ6IGIsXG4gICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZFBpcGVsaW5lXG4gICAgfSk7XG4gIH1cbn07XG52YXIgWm9kUmVhZG9ubHkgPSBjbGFzcyBleHRlbmRzIFpvZFR5cGUge1xuICBfcGFyc2UoaW5wdXQpIHtcbiAgICBjb25zdCByZXN1bHQgPSB0aGlzLl9kZWYuaW5uZXJUeXBlLl9wYXJzZShpbnB1dCk7XG4gICAgY29uc3QgZnJlZXplID0gKGRhdGEpID0+IHtcbiAgICAgIGlmIChpc1ZhbGlkKGRhdGEpKSB7XG4gICAgICAgIGRhdGEudmFsdWUgPSBPYmplY3QuZnJlZXplKGRhdGEudmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfTtcbiAgICByZXR1cm4gaXNBc3luYyhyZXN1bHQpID8gcmVzdWx0LnRoZW4oKGRhdGEpID0+IGZyZWV6ZShkYXRhKSkgOiBmcmVlemUocmVzdWx0KTtcbiAgfVxuICB1bndyYXAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RlZi5pbm5lclR5cGU7XG4gIH1cbn07XG5ab2RSZWFkb25seS5jcmVhdGUgPSAodHlwZSwgcGFyYW1zKSA9PiB7XG4gIHJldHVybiBuZXcgWm9kUmVhZG9ubHkoe1xuICAgIGlubmVyVHlwZTogdHlwZSxcbiAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZFJlYWRvbmx5LFxuICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKVxuICB9KTtcbn07XG5mdW5jdGlvbiBjbGVhblBhcmFtcyhwYXJhbXMsIGRhdGEpIHtcbiAgY29uc3QgcCA9IHR5cGVvZiBwYXJhbXMgPT09IFwiZnVuY3Rpb25cIiA/IHBhcmFtcyhkYXRhKSA6IHR5cGVvZiBwYXJhbXMgPT09IFwic3RyaW5nXCIgPyB7IG1lc3NhZ2U6IHBhcmFtcyB9IDogcGFyYW1zO1xuICBjb25zdCBwMiA9IHR5cGVvZiBwID09PSBcInN0cmluZ1wiID8geyBtZXNzYWdlOiBwIH0gOiBwO1xuICByZXR1cm4gcDI7XG59XG5mdW5jdGlvbiBjdXN0b20oY2hlY2ssIF9wYXJhbXMgPSB7fSwgZmF0YWwpIHtcbiAgaWYgKGNoZWNrKVxuICAgIHJldHVybiBab2RBbnkuY3JlYXRlKCkuc3VwZXJSZWZpbmUoKGRhdGEsIGN0eCkgPT4ge1xuICAgICAgY29uc3QgciA9IGNoZWNrKGRhdGEpO1xuICAgICAgaWYgKHIgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgIHJldHVybiByLnRoZW4oKHIyKSA9PiB7XG4gICAgICAgICAgaWYgKCFyMikge1xuICAgICAgICAgICAgY29uc3QgcGFyYW1zID0gY2xlYW5QYXJhbXMoX3BhcmFtcywgZGF0YSk7XG4gICAgICAgICAgICBjb25zdCBfZmF0YWwgPSBwYXJhbXMuZmF0YWwgPz8gZmF0YWwgPz8gdHJ1ZTtcbiAgICAgICAgICAgIGN0eC5hZGRJc3N1ZSh7IGNvZGU6IFwiY3VzdG9tXCIsIC4uLnBhcmFtcywgZmF0YWw6IF9mYXRhbCB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKCFyKSB7XG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IGNsZWFuUGFyYW1zKF9wYXJhbXMsIGRhdGEpO1xuICAgICAgICBjb25zdCBfZmF0YWwgPSBwYXJhbXMuZmF0YWwgPz8gZmF0YWwgPz8gdHJ1ZTtcbiAgICAgICAgY3R4LmFkZElzc3VlKHsgY29kZTogXCJjdXN0b21cIiwgLi4ucGFyYW1zLCBmYXRhbDogX2ZhdGFsIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH0pO1xuICByZXR1cm4gWm9kQW55LmNyZWF0ZSgpO1xufVxudmFyIGxhdGUgPSB7XG4gIG9iamVjdDogWm9kT2JqZWN0LmxhenljcmVhdGVcbn07XG52YXIgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kO1xuKGZ1bmN0aW9uKFpvZEZpcnN0UGFydHlUeXBlS2luZDIpIHtcbiAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMltcIlpvZFN0cmluZ1wiXSA9IFwiWm9kU3RyaW5nXCI7XG4gIFpvZEZpcnN0UGFydHlUeXBlS2luZDJbXCJab2ROdW1iZXJcIl0gPSBcIlpvZE51bWJlclwiO1xuICBab2RGaXJzdFBhcnR5VHlwZUtpbmQyW1wiWm9kTmFOXCJdID0gXCJab2ROYU5cIjtcbiAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMltcIlpvZEJpZ0ludFwiXSA9IFwiWm9kQmlnSW50XCI7XG4gIFpvZEZpcnN0UGFydHlUeXBlS2luZDJbXCJab2RCb29sZWFuXCJdID0gXCJab2RCb29sZWFuXCI7XG4gIFpvZEZpcnN0UGFydHlUeXBlS2luZDJbXCJab2REYXRlXCJdID0gXCJab2REYXRlXCI7XG4gIFpvZEZpcnN0UGFydHlUeXBlS2luZDJbXCJab2RTeW1ib2xcIl0gPSBcIlpvZFN5bWJvbFwiO1xuICBab2RGaXJzdFBhcnR5VHlwZUtpbmQyW1wiWm9kVW5kZWZpbmVkXCJdID0gXCJab2RVbmRlZmluZWRcIjtcbiAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMltcIlpvZE51bGxcIl0gPSBcIlpvZE51bGxcIjtcbiAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMltcIlpvZEFueVwiXSA9IFwiWm9kQW55XCI7XG4gIFpvZEZpcnN0UGFydHlUeXBlS2luZDJbXCJab2RVbmtub3duXCJdID0gXCJab2RVbmtub3duXCI7XG4gIFpvZEZpcnN0UGFydHlUeXBlS2luZDJbXCJab2ROZXZlclwiXSA9IFwiWm9kTmV2ZXJcIjtcbiAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMltcIlpvZFZvaWRcIl0gPSBcIlpvZFZvaWRcIjtcbiAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMltcIlpvZEFycmF5XCJdID0gXCJab2RBcnJheVwiO1xuICBab2RGaXJzdFBhcnR5VHlwZUtpbmQyW1wiWm9kT2JqZWN0XCJdID0gXCJab2RPYmplY3RcIjtcbiAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMltcIlpvZFVuaW9uXCJdID0gXCJab2RVbmlvblwiO1xuICBab2RGaXJzdFBhcnR5VHlwZUtpbmQyW1wiWm9kRGlzY3JpbWluYXRlZFVuaW9uXCJdID0gXCJab2REaXNjcmltaW5hdGVkVW5pb25cIjtcbiAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMltcIlpvZEludGVyc2VjdGlvblwiXSA9IFwiWm9kSW50ZXJzZWN0aW9uXCI7XG4gIFpvZEZpcnN0UGFydHlUeXBlS2luZDJbXCJab2RUdXBsZVwiXSA9IFwiWm9kVHVwbGVcIjtcbiAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMltcIlpvZFJlY29yZFwiXSA9IFwiWm9kUmVjb3JkXCI7XG4gIFpvZEZpcnN0UGFydHlUeXBlS2luZDJbXCJab2RNYXBcIl0gPSBcIlpvZE1hcFwiO1xuICBab2RGaXJzdFBhcnR5VHlwZUtpbmQyW1wiWm9kU2V0XCJdID0gXCJab2RTZXRcIjtcbiAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMltcIlpvZEZ1bmN0aW9uXCJdID0gXCJab2RGdW5jdGlvblwiO1xuICBab2RGaXJzdFBhcnR5VHlwZUtpbmQyW1wiWm9kTGF6eVwiXSA9IFwiWm9kTGF6eVwiO1xuICBab2RGaXJzdFBhcnR5VHlwZUtpbmQyW1wiWm9kTGl0ZXJhbFwiXSA9IFwiWm9kTGl0ZXJhbFwiO1xuICBab2RGaXJzdFBhcnR5VHlwZUtpbmQyW1wiWm9kRW51bVwiXSA9IFwiWm9kRW51bVwiO1xuICBab2RGaXJzdFBhcnR5VHlwZUtpbmQyW1wiWm9kRWZmZWN0c1wiXSA9IFwiWm9kRWZmZWN0c1wiO1xuICBab2RGaXJzdFBhcnR5VHlwZUtpbmQyW1wiWm9kTmF0aXZlRW51bVwiXSA9IFwiWm9kTmF0aXZlRW51bVwiO1xuICBab2RGaXJzdFBhcnR5VHlwZUtpbmQyW1wiWm9kT3B0aW9uYWxcIl0gPSBcIlpvZE9wdGlvbmFsXCI7XG4gIFpvZEZpcnN0UGFydHlUeXBlS2luZDJbXCJab2ROdWxsYWJsZVwiXSA9IFwiWm9kTnVsbGFibGVcIjtcbiAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMltcIlpvZERlZmF1bHRcIl0gPSBcIlpvZERlZmF1bHRcIjtcbiAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMltcIlpvZENhdGNoXCJdID0gXCJab2RDYXRjaFwiO1xuICBab2RGaXJzdFBhcnR5VHlwZUtpbmQyW1wiWm9kUHJvbWlzZVwiXSA9IFwiWm9kUHJvbWlzZVwiO1xuICBab2RGaXJzdFBhcnR5VHlwZUtpbmQyW1wiWm9kQnJhbmRlZFwiXSA9IFwiWm9kQnJhbmRlZFwiO1xuICBab2RGaXJzdFBhcnR5VHlwZUtpbmQyW1wiWm9kUGlwZWxpbmVcIl0gPSBcIlpvZFBpcGVsaW5lXCI7XG4gIFpvZEZpcnN0UGFydHlUeXBlS2luZDJbXCJab2RSZWFkb25seVwiXSA9IFwiWm9kUmVhZG9ubHlcIjtcbn0pKFpvZEZpcnN0UGFydHlUeXBlS2luZCB8fCAoWm9kRmlyc3RQYXJ0eVR5cGVLaW5kID0ge30pKTtcbnZhciBpbnN0YW5jZU9mVHlwZSA9IChjbHMsIHBhcmFtcyA9IHtcbiAgbWVzc2FnZTogYElucHV0IG5vdCBpbnN0YW5jZSBvZiAke2Nscy5uYW1lfWBcbn0pID0+IGN1c3RvbSgoZGF0YSkgPT4gZGF0YSBpbnN0YW5jZW9mIGNscywgcGFyYW1zKTtcbnZhciBzdHJpbmdUeXBlID0gWm9kU3RyaW5nLmNyZWF0ZTtcbnZhciBudW1iZXJUeXBlID0gWm9kTnVtYmVyLmNyZWF0ZTtcbnZhciBuYW5UeXBlID0gWm9kTmFOLmNyZWF0ZTtcbnZhciBiaWdJbnRUeXBlID0gWm9kQmlnSW50LmNyZWF0ZTtcbnZhciBib29sZWFuVHlwZSA9IFpvZEJvb2xlYW4uY3JlYXRlO1xudmFyIGRhdGVUeXBlID0gWm9kRGF0ZS5jcmVhdGU7XG52YXIgc3ltYm9sVHlwZSA9IFpvZFN5bWJvbC5jcmVhdGU7XG52YXIgdW5kZWZpbmVkVHlwZSA9IFpvZFVuZGVmaW5lZC5jcmVhdGU7XG52YXIgbnVsbFR5cGUgPSBab2ROdWxsLmNyZWF0ZTtcbnZhciBhbnlUeXBlID0gWm9kQW55LmNyZWF0ZTtcbnZhciB1bmtub3duVHlwZSA9IFpvZFVua25vd24uY3JlYXRlO1xudmFyIG5ldmVyVHlwZSA9IFpvZE5ldmVyLmNyZWF0ZTtcbnZhciB2b2lkVHlwZSA9IFpvZFZvaWQuY3JlYXRlO1xudmFyIGFycmF5VHlwZSA9IFpvZEFycmF5LmNyZWF0ZTtcbnZhciBvYmplY3RUeXBlID0gWm9kT2JqZWN0LmNyZWF0ZTtcbnZhciBzdHJpY3RPYmplY3RUeXBlID0gWm9kT2JqZWN0LnN0cmljdENyZWF0ZTtcbnZhciB1bmlvblR5cGUgPSBab2RVbmlvbi5jcmVhdGU7XG52YXIgZGlzY3JpbWluYXRlZFVuaW9uVHlwZSA9IFpvZERpc2NyaW1pbmF0ZWRVbmlvbi5jcmVhdGU7XG52YXIgaW50ZXJzZWN0aW9uVHlwZSA9IFpvZEludGVyc2VjdGlvbi5jcmVhdGU7XG52YXIgdHVwbGVUeXBlID0gWm9kVHVwbGUuY3JlYXRlO1xudmFyIHJlY29yZFR5cGUgPSBab2RSZWNvcmQuY3JlYXRlO1xudmFyIG1hcFR5cGUgPSBab2RNYXAuY3JlYXRlO1xudmFyIHNldFR5cGUgPSBab2RTZXQuY3JlYXRlO1xudmFyIGZ1bmN0aW9uVHlwZSA9IFpvZEZ1bmN0aW9uLmNyZWF0ZTtcbnZhciBsYXp5VHlwZSA9IFpvZExhenkuY3JlYXRlO1xudmFyIGxpdGVyYWxUeXBlID0gWm9kTGl0ZXJhbC5jcmVhdGU7XG52YXIgZW51bVR5cGUgPSBab2RFbnVtLmNyZWF0ZTtcbnZhciBuYXRpdmVFbnVtVHlwZSA9IFpvZE5hdGl2ZUVudW0uY3JlYXRlO1xudmFyIHByb21pc2VUeXBlID0gWm9kUHJvbWlzZS5jcmVhdGU7XG52YXIgZWZmZWN0c1R5cGUgPSBab2RFZmZlY3RzLmNyZWF0ZTtcbnZhciBvcHRpb25hbFR5cGUgPSBab2RPcHRpb25hbC5jcmVhdGU7XG52YXIgbnVsbGFibGVUeXBlID0gWm9kTnVsbGFibGUuY3JlYXRlO1xudmFyIHByZXByb2Nlc3NUeXBlID0gWm9kRWZmZWN0cy5jcmVhdGVXaXRoUHJlcHJvY2VzcztcbnZhciBwaXBlbGluZVR5cGUgPSBab2RQaXBlbGluZS5jcmVhdGU7XG52YXIgb3N0cmluZyA9ICgpID0+IHN0cmluZ1R5cGUoKS5vcHRpb25hbCgpO1xudmFyIG9udW1iZXIgPSAoKSA9PiBudW1iZXJUeXBlKCkub3B0aW9uYWwoKTtcbnZhciBvYm9vbGVhbiA9ICgpID0+IGJvb2xlYW5UeXBlKCkub3B0aW9uYWwoKTtcbnZhciBjb2VyY2UgPSB7XG4gIHN0cmluZzogKChhcmcpID0+IFpvZFN0cmluZy5jcmVhdGUoeyAuLi5hcmcsIGNvZXJjZTogdHJ1ZSB9KSksXG4gIG51bWJlcjogKChhcmcpID0+IFpvZE51bWJlci5jcmVhdGUoeyAuLi5hcmcsIGNvZXJjZTogdHJ1ZSB9KSksXG4gIGJvb2xlYW46ICgoYXJnKSA9PiBab2RCb29sZWFuLmNyZWF0ZSh7XG4gICAgLi4uYXJnLFxuICAgIGNvZXJjZTogdHJ1ZVxuICB9KSksXG4gIGJpZ2ludDogKChhcmcpID0+IFpvZEJpZ0ludC5jcmVhdGUoeyAuLi5hcmcsIGNvZXJjZTogdHJ1ZSB9KSksXG4gIGRhdGU6ICgoYXJnKSA9PiBab2REYXRlLmNyZWF0ZSh7IC4uLmFyZywgY29lcmNlOiB0cnVlIH0pKVxufTtcbnZhciBORVZFUiA9IElOVkFMSUQ7XG5cbi8vIG5vZGVfbW9kdWxlcy9AbW9kZWxjb250ZXh0cHJvdG9jb2wvc2RrL2Rpc3QvZXNtL3R5cGVzLmpzXG52YXIgSlNPTlJQQ19WRVJTSU9OID0gXCIyLjBcIjtcbnZhciBQcm9ncmVzc1Rva2VuU2NoZW1hID0gZXh0ZXJuYWxfZXhwb3J0cy51bmlvbihbZXh0ZXJuYWxfZXhwb3J0cy5zdHJpbmcoKSwgZXh0ZXJuYWxfZXhwb3J0cy5udW1iZXIoKS5pbnQoKV0pO1xudmFyIEN1cnNvclNjaGVtYSA9IGV4dGVybmFsX2V4cG9ydHMuc3RyaW5nKCk7XG52YXIgUmVxdWVzdE1ldGFTY2hlbWEgPSBleHRlcm5hbF9leHBvcnRzLm9iamVjdCh7XG4gIC8qKlxuICAgKiBJZiBzcGVjaWZpZWQsIHRoZSBjYWxsZXIgaXMgcmVxdWVzdGluZyBvdXQtb2YtYmFuZCBwcm9ncmVzcyBub3RpZmljYXRpb25zIGZvciB0aGlzIHJlcXVlc3QgKGFzIHJlcHJlc2VudGVkIGJ5IG5vdGlmaWNhdGlvbnMvcHJvZ3Jlc3MpLiBUaGUgdmFsdWUgb2YgdGhpcyBwYXJhbWV0ZXIgaXMgYW4gb3BhcXVlIHRva2VuIHRoYXQgd2lsbCBiZSBhdHRhY2hlZCB0byBhbnkgc3Vic2VxdWVudCBub3RpZmljYXRpb25zLiBUaGUgcmVjZWl2ZXIgaXMgbm90IG9ibGlnYXRlZCB0byBwcm92aWRlIHRoZXNlIG5vdGlmaWNhdGlvbnMuXG4gICAqL1xuICBwcm9ncmVzc1Rva2VuOiBleHRlcm5hbF9leHBvcnRzLm9wdGlvbmFsKFByb2dyZXNzVG9rZW5TY2hlbWEpXG59KS5wYXNzdGhyb3VnaCgpO1xudmFyIEJhc2VSZXF1ZXN0UGFyYW1zU2NoZW1hID0gZXh0ZXJuYWxfZXhwb3J0cy5vYmplY3Qoe1xuICBfbWV0YTogZXh0ZXJuYWxfZXhwb3J0cy5vcHRpb25hbChSZXF1ZXN0TWV0YVNjaGVtYSlcbn0pLnBhc3N0aHJvdWdoKCk7XG52YXIgUmVxdWVzdFNjaGVtYSA9IGV4dGVybmFsX2V4cG9ydHMub2JqZWN0KHtcbiAgbWV0aG9kOiBleHRlcm5hbF9leHBvcnRzLnN0cmluZygpLFxuICBwYXJhbXM6IGV4dGVybmFsX2V4cG9ydHMub3B0aW9uYWwoQmFzZVJlcXVlc3RQYXJhbXNTY2hlbWEpXG59KTtcbnZhciBCYXNlTm90aWZpY2F0aW9uUGFyYW1zU2NoZW1hID0gZXh0ZXJuYWxfZXhwb3J0cy5vYmplY3Qoe1xuICAvKipcbiAgICogU2VlIFtNQ1Agc3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly9naXRodWIuY29tL21vZGVsY29udGV4dHByb3RvY29sL21vZGVsY29udGV4dHByb3RvY29sL2Jsb2IvNDczMzljMDNjMTQzYmI0ZWMwMWEyNmU3MjFhMWI4ZmU2NjYzNGViZS9kb2NzL3NwZWNpZmljYXRpb24vZHJhZnQvYmFzaWMvaW5kZXgubWR4I2dlbmVyYWwtZmllbGRzKVxuICAgKiBmb3Igbm90ZXMgb24gX21ldGEgdXNhZ2UuXG4gICAqL1xuICBfbWV0YTogZXh0ZXJuYWxfZXhwb3J0cy5vcHRpb25hbChleHRlcm5hbF9leHBvcnRzLm9iamVjdCh7fSkucGFzc3Rocm91Z2goKSlcbn0pLnBhc3N0aHJvdWdoKCk7XG52YXIgTm90aWZpY2F0aW9uU2NoZW1hID0gZXh0ZXJuYWxfZXhwb3J0cy5vYmplY3Qoe1xuICBtZXRob2Q6IGV4dGVybmFsX2V4cG9ydHMuc3RyaW5nKCksXG4gIHBhcmFtczogZXh0ZXJuYWxfZXhwb3J0cy5vcHRpb25hbChCYXNlTm90aWZpY2F0aW9uUGFyYW1zU2NoZW1hKVxufSk7XG52YXIgUmVzdWx0U2NoZW1hID0gZXh0ZXJuYWxfZXhwb3J0cy5vYmplY3Qoe1xuICAvKipcbiAgICogU2VlIFtNQ1Agc3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly9naXRodWIuY29tL21vZGVsY29udGV4dHByb3RvY29sL21vZGVsY29udGV4dHByb3RvY29sL2Jsb2IvNDczMzljMDNjMTQzYmI0ZWMwMWEyNmU3MjFhMWI4ZmU2NjYzNGViZS9kb2NzL3NwZWNpZmljYXRpb24vZHJhZnQvYmFzaWMvaW5kZXgubWR4I2dlbmVyYWwtZmllbGRzKVxuICAgKiBmb3Igbm90ZXMgb24gX21ldGEgdXNhZ2UuXG4gICAqL1xuICBfbWV0YTogZXh0ZXJuYWxfZXhwb3J0cy5vcHRpb25hbChleHRlcm5hbF9leHBvcnRzLm9iamVjdCh7fSkucGFzc3Rocm91Z2goKSlcbn0pLnBhc3N0aHJvdWdoKCk7XG52YXIgUmVxdWVzdElkU2NoZW1hID0gZXh0ZXJuYWxfZXhwb3J0cy51bmlvbihbZXh0ZXJuYWxfZXhwb3J0cy5zdHJpbmcoKSwgZXh0ZXJuYWxfZXhwb3J0cy5udW1iZXIoKS5pbnQoKV0pO1xudmFyIEpTT05SUENSZXF1ZXN0U2NoZW1hID0gZXh0ZXJuYWxfZXhwb3J0cy5vYmplY3Qoe1xuICBqc29ucnBjOiBleHRlcm5hbF9leHBvcnRzLmxpdGVyYWwoSlNPTlJQQ19WRVJTSU9OKSxcbiAgaWQ6IFJlcXVlc3RJZFNjaGVtYVxufSkubWVyZ2UoUmVxdWVzdFNjaGVtYSkuc3RyaWN0KCk7XG52YXIgSlNPTlJQQ05vdGlmaWNhdGlvblNjaGVtYSA9IGV4dGVybmFsX2V4cG9ydHMub2JqZWN0KHtcbiAganNvbnJwYzogZXh0ZXJuYWxfZXhwb3J0cy5saXRlcmFsKEpTT05SUENfVkVSU0lPTilcbn0pLm1lcmdlKE5vdGlmaWNhdGlvblNjaGVtYSkuc3RyaWN0KCk7XG52YXIgSlNPTlJQQ1Jlc3BvbnNlU2NoZW1hID0gZXh0ZXJuYWxfZXhwb3J0cy5vYmplY3Qoe1xuICBqc29ucnBjOiBleHRlcm5hbF9leHBvcnRzLmxpdGVyYWwoSlNPTlJQQ19WRVJTSU9OKSxcbiAgaWQ6IFJlcXVlc3RJZFNjaGVtYSxcbiAgcmVzdWx0OiBSZXN1bHRTY2hlbWFcbn0pLnN0cmljdCgpO1xudmFyIEVycm9yQ29kZTtcbihmdW5jdGlvbihFcnJvckNvZGUyKSB7XG4gIEVycm9yQ29kZTJbRXJyb3JDb2RlMltcIkNvbm5lY3Rpb25DbG9zZWRcIl0gPSAtMzJlM10gPSBcIkNvbm5lY3Rpb25DbG9zZWRcIjtcbiAgRXJyb3JDb2RlMltFcnJvckNvZGUyW1wiUmVxdWVzdFRpbWVvdXRcIl0gPSAtMzIwMDFdID0gXCJSZXF1ZXN0VGltZW91dFwiO1xuICBFcnJvckNvZGUyW0Vycm9yQ29kZTJbXCJQYXJzZUVycm9yXCJdID0gLTMyNzAwXSA9IFwiUGFyc2VFcnJvclwiO1xuICBFcnJvckNvZGUyW0Vycm9yQ29kZTJbXCJJbnZhbGlkUmVxdWVzdFwiXSA9IC0zMjYwMF0gPSBcIkludmFsaWRSZXF1ZXN0XCI7XG4gIEVycm9yQ29kZTJbRXJyb3JDb2RlMltcIk1ldGhvZE5vdEZvdW5kXCJdID0gLTMyNjAxXSA9IFwiTWV0aG9kTm90Rm91bmRcIjtcbiAgRXJyb3JDb2RlMltFcnJvckNvZGUyW1wiSW52YWxpZFBhcmFtc1wiXSA9IC0zMjYwMl0gPSBcIkludmFsaWRQYXJhbXNcIjtcbiAgRXJyb3JDb2RlMltFcnJvckNvZGUyW1wiSW50ZXJuYWxFcnJvclwiXSA9IC0zMjYwM10gPSBcIkludGVybmFsRXJyb3JcIjtcbn0pKEVycm9yQ29kZSB8fCAoRXJyb3JDb2RlID0ge30pKTtcbnZhciBKU09OUlBDRXJyb3JTY2hlbWEgPSBleHRlcm5hbF9leHBvcnRzLm9iamVjdCh7XG4gIGpzb25ycGM6IGV4dGVybmFsX2V4cG9ydHMubGl0ZXJhbChKU09OUlBDX1ZFUlNJT04pLFxuICBpZDogUmVxdWVzdElkU2NoZW1hLFxuICBlcnJvcjogZXh0ZXJuYWxfZXhwb3J0cy5vYmplY3Qoe1xuICAgIC8qKlxuICAgICAqIFRoZSBlcnJvciB0eXBlIHRoYXQgb2NjdXJyZWQuXG4gICAgICovXG4gICAgY29kZTogZXh0ZXJuYWxfZXhwb3J0cy5udW1iZXIoKS5pbnQoKSxcbiAgICAvKipcbiAgICAgKiBBIHNob3J0IGRlc2NyaXB0aW9uIG9mIHRoZSBlcnJvci4gVGhlIG1lc3NhZ2UgU0hPVUxEIGJlIGxpbWl0ZWQgdG8gYSBjb25jaXNlIHNpbmdsZSBzZW50ZW5jZS5cbiAgICAgKi9cbiAgICBtZXNzYWdlOiBleHRlcm5hbF9leHBvcnRzLnN0cmluZygpLFxuICAgIC8qKlxuICAgICAqIEFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGVycm9yLiBUaGUgdmFsdWUgb2YgdGhpcyBtZW1iZXIgaXMgZGVmaW5lZCBieSB0aGUgc2VuZGVyIChlLmcuIGRldGFpbGVkIGVycm9yIGluZm9ybWF0aW9uLCBuZXN0ZWQgZXJyb3JzIGV0Yy4pLlxuICAgICAqL1xuICAgIGRhdGE6IGV4dGVybmFsX2V4cG9ydHMub3B0aW9uYWwoZXh0ZXJuYWxfZXhwb3J0cy51bmtub3duKCkpXG4gIH0pXG59KS5zdHJpY3QoKTtcbnZhciBKU09OUlBDTWVzc2FnZVNjaGVtYSA9IGV4dGVybmFsX2V4cG9ydHMudW5pb24oW1xuICBKU09OUlBDUmVxdWVzdFNjaGVtYSxcbiAgSlNPTlJQQ05vdGlmaWNhdGlvblNjaGVtYSxcbiAgSlNPTlJQQ1Jlc3BvbnNlU2NoZW1hLFxuICBKU09OUlBDRXJyb3JTY2hlbWFcbl0pO1xudmFyIEVtcHR5UmVzdWx0U2NoZW1hID0gUmVzdWx0U2NoZW1hLnN0cmljdCgpO1xudmFyIENhbmNlbGxlZE5vdGlmaWNhdGlvblNjaGVtYSA9IE5vdGlmaWNhdGlvblNjaGVtYS5leHRlbmQoe1xuICBtZXRob2Q6IGV4dGVybmFsX2V4cG9ydHMubGl0ZXJhbChcIm5vdGlmaWNhdGlvbnMvY2FuY2VsbGVkXCIpLFxuICBwYXJhbXM6IEJhc2VOb3RpZmljYXRpb25QYXJhbXNTY2hlbWEuZXh0ZW5kKHtcbiAgICAvKipcbiAgICAgKiBUaGUgSUQgb2YgdGhlIHJlcXVlc3QgdG8gY2FuY2VsLlxuICAgICAqXG4gICAgICogVGhpcyBNVVNUIGNvcnJlc3BvbmQgdG8gdGhlIElEIG9mIGEgcmVxdWVzdCBwcmV2aW91c2x5IGlzc3VlZCBpbiB0aGUgc2FtZSBkaXJlY3Rpb24uXG4gICAgICovXG4gICAgcmVxdWVzdElkOiBSZXF1ZXN0SWRTY2hlbWEsXG4gICAgLyoqXG4gICAgICogQW4gb3B0aW9uYWwgc3RyaW5nIGRlc2NyaWJpbmcgdGhlIHJlYXNvbiBmb3IgdGhlIGNhbmNlbGxhdGlvbi4gVGhpcyBNQVkgYmUgbG9nZ2VkIG9yIHByZXNlbnRlZCB0byB0aGUgdXNlci5cbiAgICAgKi9cbiAgICByZWFzb246IGV4dGVybmFsX2V4cG9ydHMuc3RyaW5nKCkub3B0aW9uYWwoKVxuICB9KVxufSk7XG52YXIgQmFzZU1ldGFkYXRhU2NoZW1hID0gZXh0ZXJuYWxfZXhwb3J0cy5vYmplY3Qoe1xuICAvKiogSW50ZW5kZWQgZm9yIHByb2dyYW1tYXRpYyBvciBsb2dpY2FsIHVzZSwgYnV0IHVzZWQgYXMgYSBkaXNwbGF5IG5hbWUgaW4gcGFzdCBzcGVjcyBvciBmYWxsYmFjayAqL1xuICBuYW1lOiBleHRlcm5hbF9leHBvcnRzLnN0cmluZygpLFxuICAvKipcbiAgKiBJbnRlbmRlZCBmb3IgVUkgYW5kIGVuZC11c2VyIGNvbnRleHRzIFx1MjAxNCBvcHRpbWl6ZWQgdG8gYmUgaHVtYW4tcmVhZGFibGUgYW5kIGVhc2lseSB1bmRlcnN0b29kLFxuICAqIGV2ZW4gYnkgdGhvc2UgdW5mYW1pbGlhciB3aXRoIGRvbWFpbi1zcGVjaWZpYyB0ZXJtaW5vbG9neS5cbiAgKlxuICAqIElmIG5vdCBwcm92aWRlZCwgdGhlIG5hbWUgc2hvdWxkIGJlIHVzZWQgZm9yIGRpc3BsYXkgKGV4Y2VwdCBmb3IgVG9vbCxcbiAgKiB3aGVyZSBgYW5ub3RhdGlvbnMudGl0bGVgIHNob3VsZCBiZSBnaXZlbiBwcmVjZWRlbmNlIG92ZXIgdXNpbmcgYG5hbWVgLFxuICAqIGlmIHByZXNlbnQpLlxuICAqL1xuICB0aXRsZTogZXh0ZXJuYWxfZXhwb3J0cy5vcHRpb25hbChleHRlcm5hbF9leHBvcnRzLnN0cmluZygpKVxufSkucGFzc3Rocm91Z2goKTtcbnZhciBJbXBsZW1lbnRhdGlvblNjaGVtYSA9IEJhc2VNZXRhZGF0YVNjaGVtYS5leHRlbmQoe1xuICB2ZXJzaW9uOiBleHRlcm5hbF9leHBvcnRzLnN0cmluZygpXG59KTtcbnZhciBDbGllbnRDYXBhYmlsaXRpZXNTY2hlbWEgPSBleHRlcm5hbF9leHBvcnRzLm9iamVjdCh7XG4gIC8qKlxuICAgKiBFeHBlcmltZW50YWwsIG5vbi1zdGFuZGFyZCBjYXBhYmlsaXRpZXMgdGhhdCB0aGUgY2xpZW50IHN1cHBvcnRzLlxuICAgKi9cbiAgZXhwZXJpbWVudGFsOiBleHRlcm5hbF9leHBvcnRzLm9wdGlvbmFsKGV4dGVybmFsX2V4cG9ydHMub2JqZWN0KHt9KS5wYXNzdGhyb3VnaCgpKSxcbiAgLyoqXG4gICAqIFByZXNlbnQgaWYgdGhlIGNsaWVudCBzdXBwb3J0cyBzYW1wbGluZyBmcm9tIGFuIExMTS5cbiAgICovXG4gIHNhbXBsaW5nOiBleHRlcm5hbF9leHBvcnRzLm9wdGlvbmFsKGV4dGVybmFsX2V4cG9ydHMub2JqZWN0KHt9KS5wYXNzdGhyb3VnaCgpKSxcbiAgLyoqXG4gICAqIFByZXNlbnQgaWYgdGhlIGNsaWVudCBzdXBwb3J0cyBlbGljaXRpbmcgdXNlciBpbnB1dC5cbiAgICovXG4gIGVsaWNpdGF0aW9uOiBleHRlcm5hbF9leHBvcnRzLm9wdGlvbmFsKGV4dGVybmFsX2V4cG9ydHMub2JqZWN0KHt9KS5wYXNzdGhyb3VnaCgpKSxcbiAgLyoqXG4gICAqIFByZXNlbnQgaWYgdGhlIGNsaWVudCBzdXBwb3J0cyBsaXN0aW5nIHJvb3RzLlxuICAgKi9cbiAgcm9vdHM6IGV4dGVybmFsX2V4cG9ydHMub3B0aW9uYWwoZXh0ZXJuYWxfZXhwb3J0cy5vYmplY3Qoe1xuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIGNsaWVudCBzdXBwb3J0cyBpc3N1aW5nIG5vdGlmaWNhdGlvbnMgZm9yIGNoYW5nZXMgdG8gdGhlIHJvb3RzIGxpc3QuXG4gICAgICovXG4gICAgbGlzdENoYW5nZWQ6IGV4dGVybmFsX2V4cG9ydHMub3B0aW9uYWwoZXh0ZXJuYWxfZXhwb3J0cy5ib29sZWFuKCkpXG4gIH0pLnBhc3N0aHJvdWdoKCkpXG59KS5wYXNzdGhyb3VnaCgpO1xudmFyIEluaXRpYWxpemVSZXF1ZXN0U2NoZW1hID0gUmVxdWVzdFNjaGVtYS5leHRlbmQoe1xuICBtZXRob2Q6IGV4dGVybmFsX2V4cG9ydHMubGl0ZXJhbChcImluaXRpYWxpemVcIiksXG4gIHBhcmFtczogQmFzZVJlcXVlc3RQYXJhbXNTY2hlbWEuZXh0ZW5kKHtcbiAgICAvKipcbiAgICAgKiBUaGUgbGF0ZXN0IHZlcnNpb24gb2YgdGhlIE1vZGVsIENvbnRleHQgUHJvdG9jb2wgdGhhdCB0aGUgY2xpZW50IHN1cHBvcnRzLiBUaGUgY2xpZW50IE1BWSBkZWNpZGUgdG8gc3VwcG9ydCBvbGRlciB2ZXJzaW9ucyBhcyB3ZWxsLlxuICAgICAqL1xuICAgIHByb3RvY29sVmVyc2lvbjogZXh0ZXJuYWxfZXhwb3J0cy5zdHJpbmcoKSxcbiAgICBjYXBhYmlsaXRpZXM6IENsaWVudENhcGFiaWxpdGllc1NjaGVtYSxcbiAgICBjbGllbnRJbmZvOiBJbXBsZW1lbnRhdGlvblNjaGVtYVxuICB9KVxufSk7XG52YXIgU2VydmVyQ2FwYWJpbGl0aWVzU2NoZW1hID0gZXh0ZXJuYWxfZXhwb3J0cy5vYmplY3Qoe1xuICAvKipcbiAgICogRXhwZXJpbWVudGFsLCBub24tc3RhbmRhcmQgY2FwYWJpbGl0aWVzIHRoYXQgdGhlIHNlcnZlciBzdXBwb3J0cy5cbiAgICovXG4gIGV4cGVyaW1lbnRhbDogZXh0ZXJuYWxfZXhwb3J0cy5vcHRpb25hbChleHRlcm5hbF9leHBvcnRzLm9iamVjdCh7fSkucGFzc3Rocm91Z2goKSksXG4gIC8qKlxuICAgKiBQcmVzZW50IGlmIHRoZSBzZXJ2ZXIgc3VwcG9ydHMgc2VuZGluZyBsb2cgbWVzc2FnZXMgdG8gdGhlIGNsaWVudC5cbiAgICovXG4gIGxvZ2dpbmc6IGV4dGVybmFsX2V4cG9ydHMub3B0aW9uYWwoZXh0ZXJuYWxfZXhwb3J0cy5vYmplY3Qoe30pLnBhc3N0aHJvdWdoKCkpLFxuICAvKipcbiAgICogUHJlc2VudCBpZiB0aGUgc2VydmVyIHN1cHBvcnRzIHNlbmRpbmcgY29tcGxldGlvbnMgdG8gdGhlIGNsaWVudC5cbiAgICovXG4gIGNvbXBsZXRpb25zOiBleHRlcm5hbF9leHBvcnRzLm9wdGlvbmFsKGV4dGVybmFsX2V4cG9ydHMub2JqZWN0KHt9KS5wYXNzdGhyb3VnaCgpKSxcbiAgLyoqXG4gICAqIFByZXNlbnQgaWYgdGhlIHNlcnZlciBvZmZlcnMgYW55IHByb21wdCB0ZW1wbGF0ZXMuXG4gICAqL1xuICBwcm9tcHRzOiBleHRlcm5hbF9leHBvcnRzLm9wdGlvbmFsKGV4dGVybmFsX2V4cG9ydHMub2JqZWN0KHtcbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoaXMgc2VydmVyIHN1cHBvcnRzIGlzc3Vpbmcgbm90aWZpY2F0aW9ucyBmb3IgY2hhbmdlcyB0byB0aGUgcHJvbXB0IGxpc3QuXG4gICAgICovXG4gICAgbGlzdENoYW5nZWQ6IGV4dGVybmFsX2V4cG9ydHMub3B0aW9uYWwoZXh0ZXJuYWxfZXhwb3J0cy5ib29sZWFuKCkpXG4gIH0pLnBhc3N0aHJvdWdoKCkpLFxuICAvKipcbiAgICogUHJlc2VudCBpZiB0aGUgc2VydmVyIG9mZmVycyBhbnkgcmVzb3VyY2VzIHRvIHJlYWQuXG4gICAqL1xuICByZXNvdXJjZXM6IGV4dGVybmFsX2V4cG9ydHMub3B0aW9uYWwoZXh0ZXJuYWxfZXhwb3J0cy5vYmplY3Qoe1xuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhpcyBzZXJ2ZXIgc3VwcG9ydHMgY2xpZW50cyBzdWJzY3JpYmluZyB0byByZXNvdXJjZSB1cGRhdGVzLlxuICAgICAqL1xuICAgIHN1YnNjcmliZTogZXh0ZXJuYWxfZXhwb3J0cy5vcHRpb25hbChleHRlcm5hbF9leHBvcnRzLmJvb2xlYW4oKSksXG4gICAgLyoqXG4gICAgICogV2hldGhlciB0aGlzIHNlcnZlciBzdXBwb3J0cyBpc3N1aW5nIG5vdGlmaWNhdGlvbnMgZm9yIGNoYW5nZXMgdG8gdGhlIHJlc291cmNlIGxpc3QuXG4gICAgICovXG4gICAgbGlzdENoYW5nZWQ6IGV4dGVybmFsX2V4cG9ydHMub3B0aW9uYWwoZXh0ZXJuYWxfZXhwb3J0cy5ib29sZWFuKCkpXG4gIH0pLnBhc3N0aHJvdWdoKCkpLFxuICAvKipcbiAgICogUHJlc2VudCBpZiB0aGUgc2VydmVyIG9mZmVycyBhbnkgdG9vbHMgdG8gY2FsbC5cbiAgICovXG4gIHRvb2xzOiBleHRlcm5hbF9leHBvcnRzLm9wdGlvbmFsKGV4dGVybmFsX2V4cG9ydHMub2JqZWN0KHtcbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoaXMgc2VydmVyIHN1cHBvcnRzIGlzc3Vpbmcgbm90aWZpY2F0aW9ucyBmb3IgY2hhbmdlcyB0byB0aGUgdG9vbCBsaXN0LlxuICAgICAqL1xuICAgIGxpc3RDaGFuZ2VkOiBleHRlcm5hbF9leHBvcnRzLm9wdGlvbmFsKGV4dGVybmFsX2V4cG9ydHMuYm9vbGVhbigpKVxuICB9KS5wYXNzdGhyb3VnaCgpKVxufSkucGFzc3Rocm91Z2goKTtcbnZhciBJbml0aWFsaXplUmVzdWx0U2NoZW1hID0gUmVzdWx0U2NoZW1hLmV4dGVuZCh7XG4gIC8qKlxuICAgKiBUaGUgdmVyc2lvbiBvZiB0aGUgTW9kZWwgQ29udGV4dCBQcm90b2NvbCB0aGF0IHRoZSBzZXJ2ZXIgd2FudHMgdG8gdXNlLiBUaGlzIG1heSBub3QgbWF0Y2ggdGhlIHZlcnNpb24gdGhhdCB0aGUgY2xpZW50IHJlcXVlc3RlZC4gSWYgdGhlIGNsaWVudCBjYW5ub3Qgc3VwcG9ydCB0aGlzIHZlcnNpb24sIGl0IE1VU1QgZGlzY29ubmVjdC5cbiAgICovXG4gIHByb3RvY29sVmVyc2lvbjogZXh0ZXJuYWxfZXhwb3J0cy5zdHJpbmcoKSxcbiAgY2FwYWJpbGl0aWVzOiBTZXJ2ZXJDYXBhYmlsaXRpZXNTY2hlbWEsXG4gIHNlcnZlckluZm86IEltcGxlbWVudGF0aW9uU2NoZW1hLFxuICAvKipcbiAgICogSW5zdHJ1Y3Rpb25zIGRlc2NyaWJpbmcgaG93IHRvIHVzZSB0aGUgc2VydmVyIGFuZCBpdHMgZmVhdHVyZXMuXG4gICAqXG4gICAqIFRoaXMgY2FuIGJlIHVzZWQgYnkgY2xpZW50cyB0byBpbXByb3ZlIHRoZSBMTE0ncyB1bmRlcnN0YW5kaW5nIG9mIGF2YWlsYWJsZSB0b29scywgcmVzb3VyY2VzLCBldGMuIEl0IGNhbiBiZSB0aG91Z2h0IG9mIGxpa2UgYSBcImhpbnRcIiB0byB0aGUgbW9kZWwuIEZvciBleGFtcGxlLCB0aGlzIGluZm9ybWF0aW9uIE1BWSBiZSBhZGRlZCB0byB0aGUgc3lzdGVtIHByb21wdC5cbiAgICovXG4gIGluc3RydWN0aW9uczogZXh0ZXJuYWxfZXhwb3J0cy5vcHRpb25hbChleHRlcm5hbF9leHBvcnRzLnN0cmluZygpKVxufSk7XG52YXIgSW5pdGlhbGl6ZWROb3RpZmljYXRpb25TY2hlbWEgPSBOb3RpZmljYXRpb25TY2hlbWEuZXh0ZW5kKHtcbiAgbWV0aG9kOiBleHRlcm5hbF9leHBvcnRzLmxpdGVyYWwoXCJub3RpZmljYXRpb25zL2luaXRpYWxpemVkXCIpXG59KTtcbnZhciBQaW5nUmVxdWVzdFNjaGVtYSA9IFJlcXVlc3RTY2hlbWEuZXh0ZW5kKHtcbiAgbWV0aG9kOiBleHRlcm5hbF9leHBvcnRzLmxpdGVyYWwoXCJwaW5nXCIpXG59KTtcbnZhciBQcm9ncmVzc1NjaGVtYSA9IGV4dGVybmFsX2V4cG9ydHMub2JqZWN0KHtcbiAgLyoqXG4gICAqIFRoZSBwcm9ncmVzcyB0aHVzIGZhci4gVGhpcyBzaG91bGQgaW5jcmVhc2UgZXZlcnkgdGltZSBwcm9ncmVzcyBpcyBtYWRlLCBldmVuIGlmIHRoZSB0b3RhbCBpcyB1bmtub3duLlxuICAgKi9cbiAgcHJvZ3Jlc3M6IGV4dGVybmFsX2V4cG9ydHMubnVtYmVyKCksXG4gIC8qKlxuICAgKiBUb3RhbCBudW1iZXIgb2YgaXRlbXMgdG8gcHJvY2VzcyAob3IgdG90YWwgcHJvZ3Jlc3MgcmVxdWlyZWQpLCBpZiBrbm93bi5cbiAgICovXG4gIHRvdGFsOiBleHRlcm5hbF9leHBvcnRzLm9wdGlvbmFsKGV4dGVybmFsX2V4cG9ydHMubnVtYmVyKCkpLFxuICAvKipcbiAgICogQW4gb3B0aW9uYWwgbWVzc2FnZSBkZXNjcmliaW5nIHRoZSBjdXJyZW50IHByb2dyZXNzLlxuICAgKi9cbiAgbWVzc2FnZTogZXh0ZXJuYWxfZXhwb3J0cy5vcHRpb25hbChleHRlcm5hbF9leHBvcnRzLnN0cmluZygpKVxufSkucGFzc3Rocm91Z2goKTtcbnZhciBQcm9ncmVzc05vdGlmaWNhdGlvblNjaGVtYSA9IE5vdGlmaWNhdGlvblNjaGVtYS5leHRlbmQoe1xuICBtZXRob2Q6IGV4dGVybmFsX2V4cG9ydHMubGl0ZXJhbChcIm5vdGlmaWNhdGlvbnMvcHJvZ3Jlc3NcIiksXG4gIHBhcmFtczogQmFzZU5vdGlmaWNhdGlvblBhcmFtc1NjaGVtYS5tZXJnZShQcm9ncmVzc1NjaGVtYSkuZXh0ZW5kKHtcbiAgICAvKipcbiAgICAgKiBUaGUgcHJvZ3Jlc3MgdG9rZW4gd2hpY2ggd2FzIGdpdmVuIGluIHRoZSBpbml0aWFsIHJlcXVlc3QsIHVzZWQgdG8gYXNzb2NpYXRlIHRoaXMgbm90aWZpY2F0aW9uIHdpdGggdGhlIHJlcXVlc3QgdGhhdCBpcyBwcm9jZWVkaW5nLlxuICAgICAqL1xuICAgIHByb2dyZXNzVG9rZW46IFByb2dyZXNzVG9rZW5TY2hlbWFcbiAgfSlcbn0pO1xudmFyIFBhZ2luYXRlZFJlcXVlc3RTY2hlbWEgPSBSZXF1ZXN0U2NoZW1hLmV4dGVuZCh7XG4gIHBhcmFtczogQmFzZVJlcXVlc3RQYXJhbXNTY2hlbWEuZXh0ZW5kKHtcbiAgICAvKipcbiAgICAgKiBBbiBvcGFxdWUgdG9rZW4gcmVwcmVzZW50aW5nIHRoZSBjdXJyZW50IHBhZ2luYXRpb24gcG9zaXRpb24uXG4gICAgICogSWYgcHJvdmlkZWQsIHRoZSBzZXJ2ZXIgc2hvdWxkIHJldHVybiByZXN1bHRzIHN0YXJ0aW5nIGFmdGVyIHRoaXMgY3Vyc29yLlxuICAgICAqL1xuICAgIGN1cnNvcjogZXh0ZXJuYWxfZXhwb3J0cy5vcHRpb25hbChDdXJzb3JTY2hlbWEpXG4gIH0pLm9wdGlvbmFsKClcbn0pO1xudmFyIFBhZ2luYXRlZFJlc3VsdFNjaGVtYSA9IFJlc3VsdFNjaGVtYS5leHRlbmQoe1xuICAvKipcbiAgICogQW4gb3BhcXVlIHRva2VuIHJlcHJlc2VudGluZyB0aGUgcGFnaW5hdGlvbiBwb3NpdGlvbiBhZnRlciB0aGUgbGFzdCByZXR1cm5lZCByZXN1bHQuXG4gICAqIElmIHByZXNlbnQsIHRoZXJlIG1heSBiZSBtb3JlIHJlc3VsdHMgYXZhaWxhYmxlLlxuICAgKi9cbiAgbmV4dEN1cnNvcjogZXh0ZXJuYWxfZXhwb3J0cy5vcHRpb25hbChDdXJzb3JTY2hlbWEpXG59KTtcbnZhciBSZXNvdXJjZUNvbnRlbnRzU2NoZW1hID0gZXh0ZXJuYWxfZXhwb3J0cy5vYmplY3Qoe1xuICAvKipcbiAgICogVGhlIFVSSSBvZiB0aGlzIHJlc291cmNlLlxuICAgKi9cbiAgdXJpOiBleHRlcm5hbF9leHBvcnRzLnN0cmluZygpLFxuICAvKipcbiAgICogVGhlIE1JTUUgdHlwZSBvZiB0aGlzIHJlc291cmNlLCBpZiBrbm93bi5cbiAgICovXG4gIG1pbWVUeXBlOiBleHRlcm5hbF9leHBvcnRzLm9wdGlvbmFsKGV4dGVybmFsX2V4cG9ydHMuc3RyaW5nKCkpLFxuICAvKipcbiAgICogU2VlIFtNQ1Agc3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly9naXRodWIuY29tL21vZGVsY29udGV4dHByb3RvY29sL21vZGVsY29udGV4dHByb3RvY29sL2Jsb2IvNDczMzljMDNjMTQzYmI0ZWMwMWEyNmU3MjFhMWI4ZmU2NjYzNGViZS9kb2NzL3NwZWNpZmljYXRpb24vZHJhZnQvYmFzaWMvaW5kZXgubWR4I2dlbmVyYWwtZmllbGRzKVxuICAgKiBmb3Igbm90ZXMgb24gX21ldGEgdXNhZ2UuXG4gICAqL1xuICBfbWV0YTogZXh0ZXJuYWxfZXhwb3J0cy5vcHRpb25hbChleHRlcm5hbF9leHBvcnRzLm9iamVjdCh7fSkucGFzc3Rocm91Z2goKSlcbn0pLnBhc3N0aHJvdWdoKCk7XG52YXIgVGV4dFJlc291cmNlQ29udGVudHNTY2hlbWEgPSBSZXNvdXJjZUNvbnRlbnRzU2NoZW1hLmV4dGVuZCh7XG4gIC8qKlxuICAgKiBUaGUgdGV4dCBvZiB0aGUgaXRlbS4gVGhpcyBtdXN0IG9ubHkgYmUgc2V0IGlmIHRoZSBpdGVtIGNhbiBhY3R1YWxseSBiZSByZXByZXNlbnRlZCBhcyB0ZXh0IChub3QgYmluYXJ5IGRhdGEpLlxuICAgKi9cbiAgdGV4dDogZXh0ZXJuYWxfZXhwb3J0cy5zdHJpbmcoKVxufSk7XG52YXIgQmFzZTY0U2NoZW1hID0gZXh0ZXJuYWxfZXhwb3J0cy5zdHJpbmcoKS5yZWZpbmUoKHZhbCkgPT4ge1xuICB0cnkge1xuICAgIGF0b2IodmFsKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoX2EpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn0sIHsgbWVzc2FnZTogXCJJbnZhbGlkIEJhc2U2NCBzdHJpbmdcIiB9KTtcbnZhciBCbG9iUmVzb3VyY2VDb250ZW50c1NjaGVtYSA9IFJlc291cmNlQ29udGVudHNTY2hlbWEuZXh0ZW5kKHtcbiAgLyoqXG4gICAqIEEgYmFzZTY0LWVuY29kZWQgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgYmluYXJ5IGRhdGEgb2YgdGhlIGl0ZW0uXG4gICAqL1xuICBibG9iOiBCYXNlNjRTY2hlbWFcbn0pO1xudmFyIFJlc291cmNlU2NoZW1hID0gQmFzZU1ldGFkYXRhU2NoZW1hLmV4dGVuZCh7XG4gIC8qKlxuICAgKiBUaGUgVVJJIG9mIHRoaXMgcmVzb3VyY2UuXG4gICAqL1xuICB1cmk6IGV4dGVybmFsX2V4cG9ydHMuc3RyaW5nKCksXG4gIC8qKlxuICAgKiBBIGRlc2NyaXB0aW9uIG9mIHdoYXQgdGhpcyByZXNvdXJjZSByZXByZXNlbnRzLlxuICAgKlxuICAgKiBUaGlzIGNhbiBiZSB1c2VkIGJ5IGNsaWVudHMgdG8gaW1wcm92ZSB0aGUgTExNJ3MgdW5kZXJzdGFuZGluZyBvZiBhdmFpbGFibGUgcmVzb3VyY2VzLiBJdCBjYW4gYmUgdGhvdWdodCBvZiBsaWtlIGEgXCJoaW50XCIgdG8gdGhlIG1vZGVsLlxuICAgKi9cbiAgZGVzY3JpcHRpb246IGV4dGVybmFsX2V4cG9ydHMub3B0aW9uYWwoZXh0ZXJuYWxfZXhwb3J0cy5zdHJpbmcoKSksXG4gIC8qKlxuICAgKiBUaGUgTUlNRSB0eXBlIG9mIHRoaXMgcmVzb3VyY2UsIGlmIGtub3duLlxuICAgKi9cbiAgbWltZVR5cGU6IGV4dGVybmFsX2V4cG9ydHMub3B0aW9uYWwoZXh0ZXJuYWxfZXhwb3J0cy5zdHJpbmcoKSksXG4gIC8qKlxuICAgKiBTZWUgW01DUCBzcGVjaWZpY2F0aW9uXShodHRwczovL2dpdGh1Yi5jb20vbW9kZWxjb250ZXh0cHJvdG9jb2wvbW9kZWxjb250ZXh0cHJvdG9jb2wvYmxvYi80NzMzOWMwM2MxNDNiYjRlYzAxYTI2ZTcyMWExYjhmZTY2NjM0ZWJlL2RvY3Mvc3BlY2lmaWNhdGlvbi9kcmFmdC9iYXNpYy9pbmRleC5tZHgjZ2VuZXJhbC1maWVsZHMpXG4gICAqIGZvciBub3RlcyBvbiBfbWV0YSB1c2FnZS5cbiAgICovXG4gIF9tZXRhOiBleHRlcm5hbF9leHBvcnRzLm9wdGlvbmFsKGV4dGVybmFsX2V4cG9ydHMub2JqZWN0KHt9KS5wYXNzdGhyb3VnaCgpKVxufSk7XG52YXIgUmVzb3VyY2VUZW1wbGF0ZVNjaGVtYSA9IEJhc2VNZXRhZGF0YVNjaGVtYS5leHRlbmQoe1xuICAvKipcbiAgICogQSBVUkkgdGVtcGxhdGUgKGFjY29yZGluZyB0byBSRkMgNjU3MCkgdGhhdCBjYW4gYmUgdXNlZCB0byBjb25zdHJ1Y3QgcmVzb3VyY2UgVVJJcy5cbiAgICovXG4gIHVyaVRlbXBsYXRlOiBleHRlcm5hbF9leHBvcnRzLnN0cmluZygpLFxuICAvKipcbiAgICogQSBkZXNjcmlwdGlvbiBvZiB3aGF0IHRoaXMgdGVtcGxhdGUgaXMgZm9yLlxuICAgKlxuICAgKiBUaGlzIGNhbiBiZSB1c2VkIGJ5IGNsaWVudHMgdG8gaW1wcm92ZSB0aGUgTExNJ3MgdW5kZXJzdGFuZGluZyBvZiBhdmFpbGFibGUgcmVzb3VyY2VzLiBJdCBjYW4gYmUgdGhvdWdodCBvZiBsaWtlIGEgXCJoaW50XCIgdG8gdGhlIG1vZGVsLlxuICAgKi9cbiAgZGVzY3JpcHRpb246IGV4dGVybmFsX2V4cG9ydHMub3B0aW9uYWwoZXh0ZXJuYWxfZXhwb3J0cy5zdHJpbmcoKSksXG4gIC8qKlxuICAgKiBUaGUgTUlNRSB0eXBlIGZvciBhbGwgcmVzb3VyY2VzIHRoYXQgbWF0Y2ggdGhpcyB0ZW1wbGF0ZS4gVGhpcyBzaG91bGQgb25seSBiZSBpbmNsdWRlZCBpZiBhbGwgcmVzb3VyY2VzIG1hdGNoaW5nIHRoaXMgdGVtcGxhdGUgaGF2ZSB0aGUgc2FtZSB0eXBlLlxuICAgKi9cbiAgbWltZVR5cGU6IGV4dGVybmFsX2V4cG9ydHMub3B0aW9uYWwoZXh0ZXJuYWxfZXhwb3J0cy5zdHJpbmcoKSksXG4gIC8qKlxuICAgKiBTZWUgW01DUCBzcGVjaWZpY2F0aW9uXShodHRwczovL2dpdGh1Yi5jb20vbW9kZWxjb250ZXh0cHJvdG9jb2wvbW9kZWxjb250ZXh0cHJvdG9jb2wvYmxvYi80NzMzOWMwM2MxNDNiYjRlYzAxYTI2ZTcyMWExYjhmZTY2NjM0ZWJlL2RvY3Mvc3BlY2lmaWNhdGlvbi9kcmFmdC9iYXNpYy9pbmRleC5tZHgjZ2VuZXJhbC1maWVsZHMpXG4gICAqIGZvciBub3RlcyBvbiBfbWV0YSB1c2FnZS5cbiAgICovXG4gIF9tZXRhOiBleHRlcm5hbF9leHBvcnRzLm9wdGlvbmFsKGV4dGVybmFsX2V4cG9ydHMub2JqZWN0KHt9KS5wYXNzdGhyb3VnaCgpKVxufSk7XG52YXIgTGlzdFJlc291cmNlc1JlcXVlc3RTY2hlbWEgPSBQYWdpbmF0ZWRSZXF1ZXN0U2NoZW1hLmV4dGVuZCh7XG4gIG1ldGhvZDogZXh0ZXJuYWxfZXhwb3J0cy5saXRlcmFsKFwicmVzb3VyY2VzL2xpc3RcIilcbn0pO1xudmFyIExpc3RSZXNvdXJjZXNSZXN1bHRTY2hlbWEgPSBQYWdpbmF0ZWRSZXN1bHRTY2hlbWEuZXh0ZW5kKHtcbiAgcmVzb3VyY2VzOiBleHRlcm5hbF9leHBvcnRzLmFycmF5KFJlc291cmNlU2NoZW1hKVxufSk7XG52YXIgTGlzdFJlc291cmNlVGVtcGxhdGVzUmVxdWVzdFNjaGVtYSA9IFBhZ2luYXRlZFJlcXVlc3RTY2hlbWEuZXh0ZW5kKHtcbiAgbWV0aG9kOiBleHRlcm5hbF9leHBvcnRzLmxpdGVyYWwoXCJyZXNvdXJjZXMvdGVtcGxhdGVzL2xpc3RcIilcbn0pO1xudmFyIExpc3RSZXNvdXJjZVRlbXBsYXRlc1Jlc3VsdFNjaGVtYSA9IFBhZ2luYXRlZFJlc3VsdFNjaGVtYS5leHRlbmQoe1xuICByZXNvdXJjZVRlbXBsYXRlczogZXh0ZXJuYWxfZXhwb3J0cy5hcnJheShSZXNvdXJjZVRlbXBsYXRlU2NoZW1hKVxufSk7XG52YXIgUmVhZFJlc291cmNlUmVxdWVzdFNjaGVtYSA9IFJlcXVlc3RTY2hlbWEuZXh0ZW5kKHtcbiAgbWV0aG9kOiBleHRlcm5hbF9leHBvcnRzLmxpdGVyYWwoXCJyZXNvdXJjZXMvcmVhZFwiKSxcbiAgcGFyYW1zOiBCYXNlUmVxdWVzdFBhcmFtc1NjaGVtYS5leHRlbmQoe1xuICAgIC8qKlxuICAgICAqIFRoZSBVUkkgb2YgdGhlIHJlc291cmNlIHRvIHJlYWQuIFRoZSBVUkkgY2FuIHVzZSBhbnkgcHJvdG9jb2w7IGl0IGlzIHVwIHRvIHRoZSBzZXJ2ZXIgaG93IHRvIGludGVycHJldCBpdC5cbiAgICAgKi9cbiAgICB1cmk6IGV4dGVybmFsX2V4cG9ydHMuc3RyaW5nKClcbiAgfSlcbn0pO1xudmFyIFJlYWRSZXNvdXJjZVJlc3VsdFNjaGVtYSA9IFJlc3VsdFNjaGVtYS5leHRlbmQoe1xuICBjb250ZW50czogZXh0ZXJuYWxfZXhwb3J0cy5hcnJheShleHRlcm5hbF9leHBvcnRzLnVuaW9uKFtUZXh0UmVzb3VyY2VDb250ZW50c1NjaGVtYSwgQmxvYlJlc291cmNlQ29udGVudHNTY2hlbWFdKSlcbn0pO1xudmFyIFJlc291cmNlTGlzdENoYW5nZWROb3RpZmljYXRpb25TY2hlbWEgPSBOb3RpZmljYXRpb25TY2hlbWEuZXh0ZW5kKHtcbiAgbWV0aG9kOiBleHRlcm5hbF9leHBvcnRzLmxpdGVyYWwoXCJub3RpZmljYXRpb25zL3Jlc291cmNlcy9saXN0X2NoYW5nZWRcIilcbn0pO1xudmFyIFN1YnNjcmliZVJlcXVlc3RTY2hlbWEgPSBSZXF1ZXN0U2NoZW1hLmV4dGVuZCh7XG4gIG1ldGhvZDogZXh0ZXJuYWxfZXhwb3J0cy5saXRlcmFsKFwicmVzb3VyY2VzL3N1YnNjcmliZVwiKSxcbiAgcGFyYW1zOiBCYXNlUmVxdWVzdFBhcmFtc1NjaGVtYS5leHRlbmQoe1xuICAgIC8qKlxuICAgICAqIFRoZSBVUkkgb2YgdGhlIHJlc291cmNlIHRvIHN1YnNjcmliZSB0by4gVGhlIFVSSSBjYW4gdXNlIGFueSBwcm90b2NvbDsgaXQgaXMgdXAgdG8gdGhlIHNlcnZlciBob3cgdG8gaW50ZXJwcmV0IGl0LlxuICAgICAqL1xuICAgIHVyaTogZXh0ZXJuYWxfZXhwb3J0cy5zdHJpbmcoKVxuICB9KVxufSk7XG52YXIgVW5zdWJzY3JpYmVSZXF1ZXN0U2NoZW1hID0gUmVxdWVzdFNjaGVtYS5leHRlbmQoe1xuICBtZXRob2Q6IGV4dGVybmFsX2V4cG9ydHMubGl0ZXJhbChcInJlc291cmNlcy91bnN1YnNjcmliZVwiKSxcbiAgcGFyYW1zOiBCYXNlUmVxdWVzdFBhcmFtc1NjaGVtYS5leHRlbmQoe1xuICAgIC8qKlxuICAgICAqIFRoZSBVUkkgb2YgdGhlIHJlc291cmNlIHRvIHVuc3Vic2NyaWJlIGZyb20uXG4gICAgICovXG4gICAgdXJpOiBleHRlcm5hbF9leHBvcnRzLnN0cmluZygpXG4gIH0pXG59KTtcbnZhciBSZXNvdXJjZVVwZGF0ZWROb3RpZmljYXRpb25TY2hlbWEgPSBOb3RpZmljYXRpb25TY2hlbWEuZXh0ZW5kKHtcbiAgbWV0aG9kOiBleHRlcm5hbF9leHBvcnRzLmxpdGVyYWwoXCJub3RpZmljYXRpb25zL3Jlc291cmNlcy91cGRhdGVkXCIpLFxuICBwYXJhbXM6IEJhc2VOb3RpZmljYXRpb25QYXJhbXNTY2hlbWEuZXh0ZW5kKHtcbiAgICAvKipcbiAgICAgKiBUaGUgVVJJIG9mIHRoZSByZXNvdXJjZSB0aGF0IGhhcyBiZWVuIHVwZGF0ZWQuIFRoaXMgbWlnaHQgYmUgYSBzdWItcmVzb3VyY2Ugb2YgdGhlIG9uZSB0aGF0IHRoZSBjbGllbnQgYWN0dWFsbHkgc3Vic2NyaWJlZCB0by5cbiAgICAgKi9cbiAgICB1cmk6IGV4dGVybmFsX2V4cG9ydHMuc3RyaW5nKClcbiAgfSlcbn0pO1xudmFyIFByb21wdEFyZ3VtZW50U2NoZW1hID0gZXh0ZXJuYWxfZXhwb3J0cy5vYmplY3Qoe1xuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIGFyZ3VtZW50LlxuICAgKi9cbiAgbmFtZTogZXh0ZXJuYWxfZXhwb3J0cy5zdHJpbmcoKSxcbiAgLyoqXG4gICAqIEEgaHVtYW4tcmVhZGFibGUgZGVzY3JpcHRpb24gb2YgdGhlIGFyZ3VtZW50LlxuICAgKi9cbiAgZGVzY3JpcHRpb246IGV4dGVybmFsX2V4cG9ydHMub3B0aW9uYWwoZXh0ZXJuYWxfZXhwb3J0cy5zdHJpbmcoKSksXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoaXMgYXJndW1lbnQgbXVzdCBiZSBwcm92aWRlZC5cbiAgICovXG4gIHJlcXVpcmVkOiBleHRlcm5hbF9leHBvcnRzLm9wdGlvbmFsKGV4dGVybmFsX2V4cG9ydHMuYm9vbGVhbigpKVxufSkucGFzc3Rocm91Z2goKTtcbnZhciBQcm9tcHRTY2hlbWEgPSBCYXNlTWV0YWRhdGFTY2hlbWEuZXh0ZW5kKHtcbiAgLyoqXG4gICAqIEFuIG9wdGlvbmFsIGRlc2NyaXB0aW9uIG9mIHdoYXQgdGhpcyBwcm9tcHQgcHJvdmlkZXNcbiAgICovXG4gIGRlc2NyaXB0aW9uOiBleHRlcm5hbF9leHBvcnRzLm9wdGlvbmFsKGV4dGVybmFsX2V4cG9ydHMuc3RyaW5nKCkpLFxuICAvKipcbiAgICogQSBsaXN0IG9mIGFyZ3VtZW50cyB0byB1c2UgZm9yIHRlbXBsYXRpbmcgdGhlIHByb21wdC5cbiAgICovXG4gIGFyZ3VtZW50czogZXh0ZXJuYWxfZXhwb3J0cy5vcHRpb25hbChleHRlcm5hbF9leHBvcnRzLmFycmF5KFByb21wdEFyZ3VtZW50U2NoZW1hKSksXG4gIC8qKlxuICAgKiBTZWUgW01DUCBzcGVjaWZpY2F0aW9uXShodHRwczovL2dpdGh1Yi5jb20vbW9kZWxjb250ZXh0cHJvdG9jb2wvbW9kZWxjb250ZXh0cHJvdG9jb2wvYmxvYi80NzMzOWMwM2MxNDNiYjRlYzAxYTI2ZTcyMWExYjhmZTY2NjM0ZWJlL2RvY3Mvc3BlY2lmaWNhdGlvbi9kcmFmdC9iYXNpYy9pbmRleC5tZHgjZ2VuZXJhbC1maWVsZHMpXG4gICAqIGZvciBub3RlcyBvbiBfbWV0YSB1c2FnZS5cbiAgICovXG4gIF9tZXRhOiBleHRlcm5hbF9leHBvcnRzLm9wdGlvbmFsKGV4dGVybmFsX2V4cG9ydHMub2JqZWN0KHt9KS5wYXNzdGhyb3VnaCgpKVxufSk7XG52YXIgTGlzdFByb21wdHNSZXF1ZXN0U2NoZW1hID0gUGFnaW5hdGVkUmVxdWVzdFNjaGVtYS5leHRlbmQoe1xuICBtZXRob2Q6IGV4dGVybmFsX2V4cG9ydHMubGl0ZXJhbChcInByb21wdHMvbGlzdFwiKVxufSk7XG52YXIgTGlzdFByb21wdHNSZXN1bHRTY2hlbWEgPSBQYWdpbmF0ZWRSZXN1bHRTY2hlbWEuZXh0ZW5kKHtcbiAgcHJvbXB0czogZXh0ZXJuYWxfZXhwb3J0cy5hcnJheShQcm9tcHRTY2hlbWEpXG59KTtcbnZhciBHZXRQcm9tcHRSZXF1ZXN0U2NoZW1hID0gUmVxdWVzdFNjaGVtYS5leHRlbmQoe1xuICBtZXRob2Q6IGV4dGVybmFsX2V4cG9ydHMubGl0ZXJhbChcInByb21wdHMvZ2V0XCIpLFxuICBwYXJhbXM6IEJhc2VSZXF1ZXN0UGFyYW1zU2NoZW1hLmV4dGVuZCh7XG4gICAgLyoqXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIHByb21wdCBvciBwcm9tcHQgdGVtcGxhdGUuXG4gICAgICovXG4gICAgbmFtZTogZXh0ZXJuYWxfZXhwb3J0cy5zdHJpbmcoKSxcbiAgICAvKipcbiAgICAgKiBBcmd1bWVudHMgdG8gdXNlIGZvciB0ZW1wbGF0aW5nIHRoZSBwcm9tcHQuXG4gICAgICovXG4gICAgYXJndW1lbnRzOiBleHRlcm5hbF9leHBvcnRzLm9wdGlvbmFsKGV4dGVybmFsX2V4cG9ydHMucmVjb3JkKGV4dGVybmFsX2V4cG9ydHMuc3RyaW5nKCkpKVxuICB9KVxufSk7XG52YXIgVGV4dENvbnRlbnRTY2hlbWEgPSBleHRlcm5hbF9leHBvcnRzLm9iamVjdCh7XG4gIHR5cGU6IGV4dGVybmFsX2V4cG9ydHMubGl0ZXJhbChcInRleHRcIiksXG4gIC8qKlxuICAgKiBUaGUgdGV4dCBjb250ZW50IG9mIHRoZSBtZXNzYWdlLlxuICAgKi9cbiAgdGV4dDogZXh0ZXJuYWxfZXhwb3J0cy5zdHJpbmcoKSxcbiAgLyoqXG4gICAqIFNlZSBbTUNQIHNwZWNpZmljYXRpb25dKGh0dHBzOi8vZ2l0aHViLmNvbS9tb2RlbGNvbnRleHRwcm90b2NvbC9tb2RlbGNvbnRleHRwcm90b2NvbC9ibG9iLzQ3MzM5YzAzYzE0M2JiNGVjMDFhMjZlNzIxYTFiOGZlNjY2MzRlYmUvZG9jcy9zcGVjaWZpY2F0aW9uL2RyYWZ0L2Jhc2ljL2luZGV4Lm1keCNnZW5lcmFsLWZpZWxkcylcbiAgICogZm9yIG5vdGVzIG9uIF9tZXRhIHVzYWdlLlxuICAgKi9cbiAgX21ldGE6IGV4dGVybmFsX2V4cG9ydHMub3B0aW9uYWwoZXh0ZXJuYWxfZXhwb3J0cy5vYmplY3Qoe30pLnBhc3N0aHJvdWdoKCkpXG59KS5wYXNzdGhyb3VnaCgpO1xudmFyIEltYWdlQ29udGVudFNjaGVtYSA9IGV4dGVybmFsX2V4cG9ydHMub2JqZWN0KHtcbiAgdHlwZTogZXh0ZXJuYWxfZXhwb3J0cy5saXRlcmFsKFwiaW1hZ2VcIiksXG4gIC8qKlxuICAgKiBUaGUgYmFzZTY0LWVuY29kZWQgaW1hZ2UgZGF0YS5cbiAgICovXG4gIGRhdGE6IEJhc2U2NFNjaGVtYSxcbiAgLyoqXG4gICAqIFRoZSBNSU1FIHR5cGUgb2YgdGhlIGltYWdlLiBEaWZmZXJlbnQgcHJvdmlkZXJzIG1heSBzdXBwb3J0IGRpZmZlcmVudCBpbWFnZSB0eXBlcy5cbiAgICovXG4gIG1pbWVUeXBlOiBleHRlcm5hbF9leHBvcnRzLnN0cmluZygpLFxuICAvKipcbiAgICogU2VlIFtNQ1Agc3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly9naXRodWIuY29tL21vZGVsY29udGV4dHByb3RvY29sL21vZGVsY29udGV4dHByb3RvY29sL2Jsb2IvNDczMzljMDNjMTQzYmI0ZWMwMWEyNmU3MjFhMWI4ZmU2NjYzNGViZS9kb2NzL3NwZWNpZmljYXRpb24vZHJhZnQvYmFzaWMvaW5kZXgubWR4I2dlbmVyYWwtZmllbGRzKVxuICAgKiBmb3Igbm90ZXMgb24gX21ldGEgdXNhZ2UuXG4gICAqL1xuICBfbWV0YTogZXh0ZXJuYWxfZXhwb3J0cy5vcHRpb25hbChleHRlcm5hbF9leHBvcnRzLm9iamVjdCh7fSkucGFzc3Rocm91Z2goKSlcbn0pLnBhc3N0aHJvdWdoKCk7XG52YXIgQXVkaW9Db250ZW50U2NoZW1hID0gZXh0ZXJuYWxfZXhwb3J0cy5vYmplY3Qoe1xuICB0eXBlOiBleHRlcm5hbF9leHBvcnRzLmxpdGVyYWwoXCJhdWRpb1wiKSxcbiAgLyoqXG4gICAqIFRoZSBiYXNlNjQtZW5jb2RlZCBhdWRpbyBkYXRhLlxuICAgKi9cbiAgZGF0YTogQmFzZTY0U2NoZW1hLFxuICAvKipcbiAgICogVGhlIE1JTUUgdHlwZSBvZiB0aGUgYXVkaW8uIERpZmZlcmVudCBwcm92aWRlcnMgbWF5IHN1cHBvcnQgZGlmZmVyZW50IGF1ZGlvIHR5cGVzLlxuICAgKi9cbiAgbWltZVR5cGU6IGV4dGVybmFsX2V4cG9ydHMuc3RyaW5nKCksXG4gIC8qKlxuICAgKiBTZWUgW01DUCBzcGVjaWZpY2F0aW9uXShodHRwczovL2dpdGh1Yi5jb20vbW9kZWxjb250ZXh0cHJvdG9jb2wvbW9kZWxjb250ZXh0cHJvdG9jb2wvYmxvYi80NzMzOWMwM2MxNDNiYjRlYzAxYTI2ZTcyMWExYjhmZTY2NjM0ZWJlL2RvY3Mvc3BlY2lmaWNhdGlvbi9kcmFmdC9iYXNpYy9pbmRleC5tZHgjZ2VuZXJhbC1maWVsZHMpXG4gICAqIGZvciBub3RlcyBvbiBfbWV0YSB1c2FnZS5cbiAgICovXG4gIF9tZXRhOiBleHRlcm5hbF9leHBvcnRzLm9wdGlvbmFsKGV4dGVybmFsX2V4cG9ydHMub2JqZWN0KHt9KS5wYXNzdGhyb3VnaCgpKVxufSkucGFzc3Rocm91Z2goKTtcbnZhciBFbWJlZGRlZFJlc291cmNlU2NoZW1hID0gZXh0ZXJuYWxfZXhwb3J0cy5vYmplY3Qoe1xuICB0eXBlOiBleHRlcm5hbF9leHBvcnRzLmxpdGVyYWwoXCJyZXNvdXJjZVwiKSxcbiAgcmVzb3VyY2U6IGV4dGVybmFsX2V4cG9ydHMudW5pb24oW1RleHRSZXNvdXJjZUNvbnRlbnRzU2NoZW1hLCBCbG9iUmVzb3VyY2VDb250ZW50c1NjaGVtYV0pLFxuICAvKipcbiAgICogU2VlIFtNQ1Agc3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly9naXRodWIuY29tL21vZGVsY29udGV4dHByb3RvY29sL21vZGVsY29udGV4dHByb3RvY29sL2Jsb2IvNDczMzljMDNjMTQzYmI0ZWMwMWEyNmU3MjFhMWI4ZmU2NjYzNGViZS9kb2NzL3NwZWNpZmljYXRpb24vZHJhZnQvYmFzaWMvaW5kZXgubWR4I2dlbmVyYWwtZmllbGRzKVxuICAgKiBmb3Igbm90ZXMgb24gX21ldGEgdXNhZ2UuXG4gICAqL1xuICBfbWV0YTogZXh0ZXJuYWxfZXhwb3J0cy5vcHRpb25hbChleHRlcm5hbF9leHBvcnRzLm9iamVjdCh7fSkucGFzc3Rocm91Z2goKSlcbn0pLnBhc3N0aHJvdWdoKCk7XG52YXIgUmVzb3VyY2VMaW5rU2NoZW1hID0gUmVzb3VyY2VTY2hlbWEuZXh0ZW5kKHtcbiAgdHlwZTogZXh0ZXJuYWxfZXhwb3J0cy5saXRlcmFsKFwicmVzb3VyY2VfbGlua1wiKVxufSk7XG52YXIgQ29udGVudEJsb2NrU2NoZW1hID0gZXh0ZXJuYWxfZXhwb3J0cy51bmlvbihbXG4gIFRleHRDb250ZW50U2NoZW1hLFxuICBJbWFnZUNvbnRlbnRTY2hlbWEsXG4gIEF1ZGlvQ29udGVudFNjaGVtYSxcbiAgUmVzb3VyY2VMaW5rU2NoZW1hLFxuICBFbWJlZGRlZFJlc291cmNlU2NoZW1hXG5dKTtcbnZhciBQcm9tcHRNZXNzYWdlU2NoZW1hID0gZXh0ZXJuYWxfZXhwb3J0cy5vYmplY3Qoe1xuICByb2xlOiBleHRlcm5hbF9leHBvcnRzLmVudW0oW1widXNlclwiLCBcImFzc2lzdGFudFwiXSksXG4gIGNvbnRlbnQ6IENvbnRlbnRCbG9ja1NjaGVtYVxufSkucGFzc3Rocm91Z2goKTtcbnZhciBHZXRQcm9tcHRSZXN1bHRTY2hlbWEgPSBSZXN1bHRTY2hlbWEuZXh0ZW5kKHtcbiAgLyoqXG4gICAqIEFuIG9wdGlvbmFsIGRlc2NyaXB0aW9uIGZvciB0aGUgcHJvbXB0LlxuICAgKi9cbiAgZGVzY3JpcHRpb246IGV4dGVybmFsX2V4cG9ydHMub3B0aW9uYWwoZXh0ZXJuYWxfZXhwb3J0cy5zdHJpbmcoKSksXG4gIG1lc3NhZ2VzOiBleHRlcm5hbF9leHBvcnRzLmFycmF5KFByb21wdE1lc3NhZ2VTY2hlbWEpXG59KTtcbnZhciBQcm9tcHRMaXN0Q2hhbmdlZE5vdGlmaWNhdGlvblNjaGVtYSA9IE5vdGlmaWNhdGlvblNjaGVtYS5leHRlbmQoe1xuICBtZXRob2Q6IGV4dGVybmFsX2V4cG9ydHMubGl0ZXJhbChcIm5vdGlmaWNhdGlvbnMvcHJvbXB0cy9saXN0X2NoYW5nZWRcIilcbn0pO1xudmFyIFRvb2xBbm5vdGF0aW9uc1NjaGVtYSA9IGV4dGVybmFsX2V4cG9ydHMub2JqZWN0KHtcbiAgLyoqXG4gICAqIEEgaHVtYW4tcmVhZGFibGUgdGl0bGUgZm9yIHRoZSB0b29sLlxuICAgKi9cbiAgdGl0bGU6IGV4dGVybmFsX2V4cG9ydHMub3B0aW9uYWwoZXh0ZXJuYWxfZXhwb3J0cy5zdHJpbmcoKSksXG4gIC8qKlxuICAgKiBJZiB0cnVlLCB0aGUgdG9vbCBkb2VzIG5vdCBtb2RpZnkgaXRzIGVudmlyb25tZW50LlxuICAgKlxuICAgKiBEZWZhdWx0OiBmYWxzZVxuICAgKi9cbiAgcmVhZE9ubHlIaW50OiBleHRlcm5hbF9leHBvcnRzLm9wdGlvbmFsKGV4dGVybmFsX2V4cG9ydHMuYm9vbGVhbigpKSxcbiAgLyoqXG4gICAqIElmIHRydWUsIHRoZSB0b29sIG1heSBwZXJmb3JtIGRlc3RydWN0aXZlIHVwZGF0ZXMgdG8gaXRzIGVudmlyb25tZW50LlxuICAgKiBJZiBmYWxzZSwgdGhlIHRvb2wgcGVyZm9ybXMgb25seSBhZGRpdGl2ZSB1cGRhdGVzLlxuICAgKlxuICAgKiAoVGhpcyBwcm9wZXJ0eSBpcyBtZWFuaW5nZnVsIG9ubHkgd2hlbiBgcmVhZE9ubHlIaW50ID09IGZhbHNlYClcbiAgICpcbiAgICogRGVmYXVsdDogdHJ1ZVxuICAgKi9cbiAgZGVzdHJ1Y3RpdmVIaW50OiBleHRlcm5hbF9leHBvcnRzLm9wdGlvbmFsKGV4dGVybmFsX2V4cG9ydHMuYm9vbGVhbigpKSxcbiAgLyoqXG4gICAqIElmIHRydWUsIGNhbGxpbmcgdGhlIHRvb2wgcmVwZWF0ZWRseSB3aXRoIHRoZSBzYW1lIGFyZ3VtZW50c1xuICAgKiB3aWxsIGhhdmUgbm8gYWRkaXRpb25hbCBlZmZlY3Qgb24gdGhlIGl0cyBlbnZpcm9ubWVudC5cbiAgICpcbiAgICogKFRoaXMgcHJvcGVydHkgaXMgbWVhbmluZ2Z1bCBvbmx5IHdoZW4gYHJlYWRPbmx5SGludCA9PSBmYWxzZWApXG4gICAqXG4gICAqIERlZmF1bHQ6IGZhbHNlXG4gICAqL1xuICBpZGVtcG90ZW50SGludDogZXh0ZXJuYWxfZXhwb3J0cy5vcHRpb25hbChleHRlcm5hbF9leHBvcnRzLmJvb2xlYW4oKSksXG4gIC8qKlxuICAgKiBJZiB0cnVlLCB0aGlzIHRvb2wgbWF5IGludGVyYWN0IHdpdGggYW4gXCJvcGVuIHdvcmxkXCIgb2YgZXh0ZXJuYWxcbiAgICogZW50aXRpZXMuIElmIGZhbHNlLCB0aGUgdG9vbCdzIGRvbWFpbiBvZiBpbnRlcmFjdGlvbiBpcyBjbG9zZWQuXG4gICAqIEZvciBleGFtcGxlLCB0aGUgd29ybGQgb2YgYSB3ZWIgc2VhcmNoIHRvb2wgaXMgb3Blbiwgd2hlcmVhcyB0aGF0XG4gICAqIG9mIGEgbWVtb3J5IHRvb2wgaXMgbm90LlxuICAgKlxuICAgKiBEZWZhdWx0OiB0cnVlXG4gICAqL1xuICBvcGVuV29ybGRIaW50OiBleHRlcm5hbF9leHBvcnRzLm9wdGlvbmFsKGV4dGVybmFsX2V4cG9ydHMuYm9vbGVhbigpKVxufSkucGFzc3Rocm91Z2goKTtcbnZhciBUb29sU2NoZW1hID0gQmFzZU1ldGFkYXRhU2NoZW1hLmV4dGVuZCh7XG4gIC8qKlxuICAgKiBBIGh1bWFuLXJlYWRhYmxlIGRlc2NyaXB0aW9uIG9mIHRoZSB0b29sLlxuICAgKi9cbiAgZGVzY3JpcHRpb246IGV4dGVybmFsX2V4cG9ydHMub3B0aW9uYWwoZXh0ZXJuYWxfZXhwb3J0cy5zdHJpbmcoKSksXG4gIC8qKlxuICAgKiBBIEpTT04gU2NoZW1hIG9iamVjdCBkZWZpbmluZyB0aGUgZXhwZWN0ZWQgcGFyYW1ldGVycyBmb3IgdGhlIHRvb2wuXG4gICAqL1xuICBpbnB1dFNjaGVtYTogZXh0ZXJuYWxfZXhwb3J0cy5vYmplY3Qoe1xuICAgIHR5cGU6IGV4dGVybmFsX2V4cG9ydHMubGl0ZXJhbChcIm9iamVjdFwiKSxcbiAgICBwcm9wZXJ0aWVzOiBleHRlcm5hbF9leHBvcnRzLm9wdGlvbmFsKGV4dGVybmFsX2V4cG9ydHMub2JqZWN0KHt9KS5wYXNzdGhyb3VnaCgpKSxcbiAgICByZXF1aXJlZDogZXh0ZXJuYWxfZXhwb3J0cy5vcHRpb25hbChleHRlcm5hbF9leHBvcnRzLmFycmF5KGV4dGVybmFsX2V4cG9ydHMuc3RyaW5nKCkpKVxuICB9KS5wYXNzdGhyb3VnaCgpLFxuICAvKipcbiAgICogQW4gb3B0aW9uYWwgSlNPTiBTY2hlbWEgb2JqZWN0IGRlZmluaW5nIHRoZSBzdHJ1Y3R1cmUgb2YgdGhlIHRvb2wncyBvdXRwdXQgcmV0dXJuZWQgaW5cbiAgICogdGhlIHN0cnVjdHVyZWRDb250ZW50IGZpZWxkIG9mIGEgQ2FsbFRvb2xSZXN1bHQuXG4gICAqL1xuICBvdXRwdXRTY2hlbWE6IGV4dGVybmFsX2V4cG9ydHMub3B0aW9uYWwoZXh0ZXJuYWxfZXhwb3J0cy5vYmplY3Qoe1xuICAgIHR5cGU6IGV4dGVybmFsX2V4cG9ydHMubGl0ZXJhbChcIm9iamVjdFwiKSxcbiAgICBwcm9wZXJ0aWVzOiBleHRlcm5hbF9leHBvcnRzLm9wdGlvbmFsKGV4dGVybmFsX2V4cG9ydHMub2JqZWN0KHt9KS5wYXNzdGhyb3VnaCgpKSxcbiAgICByZXF1aXJlZDogZXh0ZXJuYWxfZXhwb3J0cy5vcHRpb25hbChleHRlcm5hbF9leHBvcnRzLmFycmF5KGV4dGVybmFsX2V4cG9ydHMuc3RyaW5nKCkpKVxuICB9KS5wYXNzdGhyb3VnaCgpKSxcbiAgLyoqXG4gICAqIE9wdGlvbmFsIGFkZGl0aW9uYWwgdG9vbCBpbmZvcm1hdGlvbi5cbiAgICovXG4gIGFubm90YXRpb25zOiBleHRlcm5hbF9leHBvcnRzLm9wdGlvbmFsKFRvb2xBbm5vdGF0aW9uc1NjaGVtYSksXG4gIC8qKlxuICAgKiBTZWUgW01DUCBzcGVjaWZpY2F0aW9uXShodHRwczovL2dpdGh1Yi5jb20vbW9kZWxjb250ZXh0cHJvdG9jb2wvbW9kZWxjb250ZXh0cHJvdG9jb2wvYmxvYi80NzMzOWMwM2MxNDNiYjRlYzAxYTI2ZTcyMWExYjhmZTY2NjM0ZWJlL2RvY3Mvc3BlY2lmaWNhdGlvbi9kcmFmdC9iYXNpYy9pbmRleC5tZHgjZ2VuZXJhbC1maWVsZHMpXG4gICAqIGZvciBub3RlcyBvbiBfbWV0YSB1c2FnZS5cbiAgICovXG4gIF9tZXRhOiBleHRlcm5hbF9leHBvcnRzLm9wdGlvbmFsKGV4dGVybmFsX2V4cG9ydHMub2JqZWN0KHt9KS5wYXNzdGhyb3VnaCgpKVxufSk7XG52YXIgTGlzdFRvb2xzUmVxdWVzdFNjaGVtYSA9IFBhZ2luYXRlZFJlcXVlc3RTY2hlbWEuZXh0ZW5kKHtcbiAgbWV0aG9kOiBleHRlcm5hbF9leHBvcnRzLmxpdGVyYWwoXCJ0b29scy9saXN0XCIpXG59KTtcbnZhciBMaXN0VG9vbHNSZXN1bHRTY2hlbWEgPSBQYWdpbmF0ZWRSZXN1bHRTY2hlbWEuZXh0ZW5kKHtcbiAgdG9vbHM6IGV4dGVybmFsX2V4cG9ydHMuYXJyYXkoVG9vbFNjaGVtYSlcbn0pO1xudmFyIENhbGxUb29sUmVzdWx0U2NoZW1hID0gUmVzdWx0U2NoZW1hLmV4dGVuZCh7XG4gIC8qKlxuICAgKiBBIGxpc3Qgb2YgY29udGVudCBvYmplY3RzIHRoYXQgcmVwcmVzZW50IHRoZSByZXN1bHQgb2YgdGhlIHRvb2wgY2FsbC5cbiAgICpcbiAgICogSWYgdGhlIFRvb2wgZG9lcyBub3QgZGVmaW5lIGFuIG91dHB1dFNjaGVtYSwgdGhpcyBmaWVsZCBNVVNUIGJlIHByZXNlbnQgaW4gdGhlIHJlc3VsdC5cbiAgICogRm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LCB0aGlzIGZpZWxkIGlzIGFsd2F5cyBwcmVzZW50LCBidXQgaXQgbWF5IGJlIGVtcHR5LlxuICAgKi9cbiAgY29udGVudDogZXh0ZXJuYWxfZXhwb3J0cy5hcnJheShDb250ZW50QmxvY2tTY2hlbWEpLmRlZmF1bHQoW10pLFxuICAvKipcbiAgICogQW4gb2JqZWN0IGNvbnRhaW5pbmcgc3RydWN0dXJlZCB0b29sIG91dHB1dC5cbiAgICpcbiAgICogSWYgdGhlIFRvb2wgZGVmaW5lcyBhbiBvdXRwdXRTY2hlbWEsIHRoaXMgZmllbGQgTVVTVCBiZSBwcmVzZW50IGluIHRoZSByZXN1bHQsIGFuZCBjb250YWluIGEgSlNPTiBvYmplY3QgdGhhdCBtYXRjaGVzIHRoZSBzY2hlbWEuXG4gICAqL1xuICBzdHJ1Y3R1cmVkQ29udGVudDogZXh0ZXJuYWxfZXhwb3J0cy5vYmplY3Qoe30pLnBhc3N0aHJvdWdoKCkub3B0aW9uYWwoKSxcbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIHRvb2wgY2FsbCBlbmRlZCBpbiBhbiBlcnJvci5cbiAgICpcbiAgICogSWYgbm90IHNldCwgdGhpcyBpcyBhc3N1bWVkIHRvIGJlIGZhbHNlICh0aGUgY2FsbCB3YXMgc3VjY2Vzc2Z1bCkuXG4gICAqXG4gICAqIEFueSBlcnJvcnMgdGhhdCBvcmlnaW5hdGUgZnJvbSB0aGUgdG9vbCBTSE9VTEQgYmUgcmVwb3J0ZWQgaW5zaWRlIHRoZSByZXN1bHRcbiAgICogb2JqZWN0LCB3aXRoIGBpc0Vycm9yYCBzZXQgdG8gdHJ1ZSwgX25vdF8gYXMgYW4gTUNQIHByb3RvY29sLWxldmVsIGVycm9yXG4gICAqIHJlc3BvbnNlLiBPdGhlcndpc2UsIHRoZSBMTE0gd291bGQgbm90IGJlIGFibGUgdG8gc2VlIHRoYXQgYW4gZXJyb3Igb2NjdXJyZWRcbiAgICogYW5kIHNlbGYtY29ycmVjdC5cbiAgICpcbiAgICogSG93ZXZlciwgYW55IGVycm9ycyBpbiBfZmluZGluZ18gdGhlIHRvb2wsIGFuIGVycm9yIGluZGljYXRpbmcgdGhhdCB0aGVcbiAgICogc2VydmVyIGRvZXMgbm90IHN1cHBvcnQgdG9vbCBjYWxscywgb3IgYW55IG90aGVyIGV4Y2VwdGlvbmFsIGNvbmRpdGlvbnMsXG4gICAqIHNob3VsZCBiZSByZXBvcnRlZCBhcyBhbiBNQ1AgZXJyb3IgcmVzcG9uc2UuXG4gICAqL1xuICBpc0Vycm9yOiBleHRlcm5hbF9leHBvcnRzLm9wdGlvbmFsKGV4dGVybmFsX2V4cG9ydHMuYm9vbGVhbigpKVxufSk7XG52YXIgQ29tcGF0aWJpbGl0eUNhbGxUb29sUmVzdWx0U2NoZW1hID0gQ2FsbFRvb2xSZXN1bHRTY2hlbWEub3IoUmVzdWx0U2NoZW1hLmV4dGVuZCh7XG4gIHRvb2xSZXN1bHQ6IGV4dGVybmFsX2V4cG9ydHMudW5rbm93bigpXG59KSk7XG52YXIgQ2FsbFRvb2xSZXF1ZXN0U2NoZW1hID0gUmVxdWVzdFNjaGVtYS5leHRlbmQoe1xuICBtZXRob2Q6IGV4dGVybmFsX2V4cG9ydHMubGl0ZXJhbChcInRvb2xzL2NhbGxcIiksXG4gIHBhcmFtczogQmFzZVJlcXVlc3RQYXJhbXNTY2hlbWEuZXh0ZW5kKHtcbiAgICBuYW1lOiBleHRlcm5hbF9leHBvcnRzLnN0cmluZygpLFxuICAgIGFyZ3VtZW50czogZXh0ZXJuYWxfZXhwb3J0cy5vcHRpb25hbChleHRlcm5hbF9leHBvcnRzLnJlY29yZChleHRlcm5hbF9leHBvcnRzLnVua25vd24oKSkpXG4gIH0pXG59KTtcbnZhciBUb29sTGlzdENoYW5nZWROb3RpZmljYXRpb25TY2hlbWEgPSBOb3RpZmljYXRpb25TY2hlbWEuZXh0ZW5kKHtcbiAgbWV0aG9kOiBleHRlcm5hbF9leHBvcnRzLmxpdGVyYWwoXCJub3RpZmljYXRpb25zL3Rvb2xzL2xpc3RfY2hhbmdlZFwiKVxufSk7XG52YXIgTG9nZ2luZ0xldmVsU2NoZW1hID0gZXh0ZXJuYWxfZXhwb3J0cy5lbnVtKFtcbiAgXCJkZWJ1Z1wiLFxuICBcImluZm9cIixcbiAgXCJub3RpY2VcIixcbiAgXCJ3YXJuaW5nXCIsXG4gIFwiZXJyb3JcIixcbiAgXCJjcml0aWNhbFwiLFxuICBcImFsZXJ0XCIsXG4gIFwiZW1lcmdlbmN5XCJcbl0pO1xudmFyIFNldExldmVsUmVxdWVzdFNjaGVtYSA9IFJlcXVlc3RTY2hlbWEuZXh0ZW5kKHtcbiAgbWV0aG9kOiBleHRlcm5hbF9leHBvcnRzLmxpdGVyYWwoXCJsb2dnaW5nL3NldExldmVsXCIpLFxuICBwYXJhbXM6IEJhc2VSZXF1ZXN0UGFyYW1zU2NoZW1hLmV4dGVuZCh7XG4gICAgLyoqXG4gICAgICogVGhlIGxldmVsIG9mIGxvZ2dpbmcgdGhhdCB0aGUgY2xpZW50IHdhbnRzIHRvIHJlY2VpdmUgZnJvbSB0aGUgc2VydmVyLiBUaGUgc2VydmVyIHNob3VsZCBzZW5kIGFsbCBsb2dzIGF0IHRoaXMgbGV2ZWwgYW5kIGhpZ2hlciAoaS5lLiwgbW9yZSBzZXZlcmUpIHRvIHRoZSBjbGllbnQgYXMgbm90aWZpY2F0aW9ucy9sb2dnaW5nL21lc3NhZ2UuXG4gICAgICovXG4gICAgbGV2ZWw6IExvZ2dpbmdMZXZlbFNjaGVtYVxuICB9KVxufSk7XG52YXIgTG9nZ2luZ01lc3NhZ2VOb3RpZmljYXRpb25TY2hlbWEgPSBOb3RpZmljYXRpb25TY2hlbWEuZXh0ZW5kKHtcbiAgbWV0aG9kOiBleHRlcm5hbF9leHBvcnRzLmxpdGVyYWwoXCJub3RpZmljYXRpb25zL21lc3NhZ2VcIiksXG4gIHBhcmFtczogQmFzZU5vdGlmaWNhdGlvblBhcmFtc1NjaGVtYS5leHRlbmQoe1xuICAgIC8qKlxuICAgICAqIFRoZSBzZXZlcml0eSBvZiB0aGlzIGxvZyBtZXNzYWdlLlxuICAgICAqL1xuICAgIGxldmVsOiBMb2dnaW5nTGV2ZWxTY2hlbWEsXG4gICAgLyoqXG4gICAgICogQW4gb3B0aW9uYWwgbmFtZSBvZiB0aGUgbG9nZ2VyIGlzc3VpbmcgdGhpcyBtZXNzYWdlLlxuICAgICAqL1xuICAgIGxvZ2dlcjogZXh0ZXJuYWxfZXhwb3J0cy5vcHRpb25hbChleHRlcm5hbF9leHBvcnRzLnN0cmluZygpKSxcbiAgICAvKipcbiAgICAgKiBUaGUgZGF0YSB0byBiZSBsb2dnZWQsIHN1Y2ggYXMgYSBzdHJpbmcgbWVzc2FnZSBvciBhbiBvYmplY3QuIEFueSBKU09OIHNlcmlhbGl6YWJsZSB0eXBlIGlzIGFsbG93ZWQgaGVyZS5cbiAgICAgKi9cbiAgICBkYXRhOiBleHRlcm5hbF9leHBvcnRzLnVua25vd24oKVxuICB9KVxufSk7XG52YXIgTW9kZWxIaW50U2NoZW1hID0gZXh0ZXJuYWxfZXhwb3J0cy5vYmplY3Qoe1xuICAvKipcbiAgICogQSBoaW50IGZvciBhIG1vZGVsIG5hbWUuXG4gICAqL1xuICBuYW1lOiBleHRlcm5hbF9leHBvcnRzLnN0cmluZygpLm9wdGlvbmFsKClcbn0pLnBhc3N0aHJvdWdoKCk7XG52YXIgTW9kZWxQcmVmZXJlbmNlc1NjaGVtYSA9IGV4dGVybmFsX2V4cG9ydHMub2JqZWN0KHtcbiAgLyoqXG4gICAqIE9wdGlvbmFsIGhpbnRzIHRvIHVzZSBmb3IgbW9kZWwgc2VsZWN0aW9uLlxuICAgKi9cbiAgaGludHM6IGV4dGVybmFsX2V4cG9ydHMub3B0aW9uYWwoZXh0ZXJuYWxfZXhwb3J0cy5hcnJheShNb2RlbEhpbnRTY2hlbWEpKSxcbiAgLyoqXG4gICAqIEhvdyBtdWNoIHRvIHByaW9yaXRpemUgY29zdCB3aGVuIHNlbGVjdGluZyBhIG1vZGVsLlxuICAgKi9cbiAgY29zdFByaW9yaXR5OiBleHRlcm5hbF9leHBvcnRzLm9wdGlvbmFsKGV4dGVybmFsX2V4cG9ydHMubnVtYmVyKCkubWluKDApLm1heCgxKSksXG4gIC8qKlxuICAgKiBIb3cgbXVjaCB0byBwcmlvcml0aXplIHNhbXBsaW5nIHNwZWVkIChsYXRlbmN5KSB3aGVuIHNlbGVjdGluZyBhIG1vZGVsLlxuICAgKi9cbiAgc3BlZWRQcmlvcml0eTogZXh0ZXJuYWxfZXhwb3J0cy5vcHRpb25hbChleHRlcm5hbF9leHBvcnRzLm51bWJlcigpLm1pbigwKS5tYXgoMSkpLFxuICAvKipcbiAgICogSG93IG11Y2ggdG8gcHJpb3JpdGl6ZSBpbnRlbGxpZ2VuY2UgYW5kIGNhcGFiaWxpdGllcyB3aGVuIHNlbGVjdGluZyBhIG1vZGVsLlxuICAgKi9cbiAgaW50ZWxsaWdlbmNlUHJpb3JpdHk6IGV4dGVybmFsX2V4cG9ydHMub3B0aW9uYWwoZXh0ZXJuYWxfZXhwb3J0cy5udW1iZXIoKS5taW4oMCkubWF4KDEpKVxufSkucGFzc3Rocm91Z2goKTtcbnZhciBTYW1wbGluZ01lc3NhZ2VTY2hlbWEgPSBleHRlcm5hbF9leHBvcnRzLm9iamVjdCh7XG4gIHJvbGU6IGV4dGVybmFsX2V4cG9ydHMuZW51bShbXCJ1c2VyXCIsIFwiYXNzaXN0YW50XCJdKSxcbiAgY29udGVudDogZXh0ZXJuYWxfZXhwb3J0cy51bmlvbihbVGV4dENvbnRlbnRTY2hlbWEsIEltYWdlQ29udGVudFNjaGVtYSwgQXVkaW9Db250ZW50U2NoZW1hXSlcbn0pLnBhc3N0aHJvdWdoKCk7XG52YXIgQ3JlYXRlTWVzc2FnZVJlcXVlc3RTY2hlbWEgPSBSZXF1ZXN0U2NoZW1hLmV4dGVuZCh7XG4gIG1ldGhvZDogZXh0ZXJuYWxfZXhwb3J0cy5saXRlcmFsKFwic2FtcGxpbmcvY3JlYXRlTWVzc2FnZVwiKSxcbiAgcGFyYW1zOiBCYXNlUmVxdWVzdFBhcmFtc1NjaGVtYS5leHRlbmQoe1xuICAgIG1lc3NhZ2VzOiBleHRlcm5hbF9leHBvcnRzLmFycmF5KFNhbXBsaW5nTWVzc2FnZVNjaGVtYSksXG4gICAgLyoqXG4gICAgICogQW4gb3B0aW9uYWwgc3lzdGVtIHByb21wdCB0aGUgc2VydmVyIHdhbnRzIHRvIHVzZSBmb3Igc2FtcGxpbmcuIFRoZSBjbGllbnQgTUFZIG1vZGlmeSBvciBvbWl0IHRoaXMgcHJvbXB0LlxuICAgICAqL1xuICAgIHN5c3RlbVByb21wdDogZXh0ZXJuYWxfZXhwb3J0cy5vcHRpb25hbChleHRlcm5hbF9leHBvcnRzLnN0cmluZygpKSxcbiAgICAvKipcbiAgICAgKiBBIHJlcXVlc3QgdG8gaW5jbHVkZSBjb250ZXh0IGZyb20gb25lIG9yIG1vcmUgTUNQIHNlcnZlcnMgKGluY2x1ZGluZyB0aGUgY2FsbGVyKSwgdG8gYmUgYXR0YWNoZWQgdG8gdGhlIHByb21wdC4gVGhlIGNsaWVudCBNQVkgaWdub3JlIHRoaXMgcmVxdWVzdC5cbiAgICAgKi9cbiAgICBpbmNsdWRlQ29udGV4dDogZXh0ZXJuYWxfZXhwb3J0cy5vcHRpb25hbChleHRlcm5hbF9leHBvcnRzLmVudW0oW1wibm9uZVwiLCBcInRoaXNTZXJ2ZXJcIiwgXCJhbGxTZXJ2ZXJzXCJdKSksXG4gICAgdGVtcGVyYXR1cmU6IGV4dGVybmFsX2V4cG9ydHMub3B0aW9uYWwoZXh0ZXJuYWxfZXhwb3J0cy5udW1iZXIoKSksXG4gICAgLyoqXG4gICAgICogVGhlIG1heGltdW0gbnVtYmVyIG9mIHRva2VucyB0byBzYW1wbGUsIGFzIHJlcXVlc3RlZCBieSB0aGUgc2VydmVyLiBUaGUgY2xpZW50IE1BWSBjaG9vc2UgdG8gc2FtcGxlIGZld2VyIHRva2VucyB0aGFuIHJlcXVlc3RlZC5cbiAgICAgKi9cbiAgICBtYXhUb2tlbnM6IGV4dGVybmFsX2V4cG9ydHMubnVtYmVyKCkuaW50KCksXG4gICAgc3RvcFNlcXVlbmNlczogZXh0ZXJuYWxfZXhwb3J0cy5vcHRpb25hbChleHRlcm5hbF9leHBvcnRzLmFycmF5KGV4dGVybmFsX2V4cG9ydHMuc3RyaW5nKCkpKSxcbiAgICAvKipcbiAgICAgKiBPcHRpb25hbCBtZXRhZGF0YSB0byBwYXNzIHRocm91Z2ggdG8gdGhlIExMTSBwcm92aWRlci4gVGhlIGZvcm1hdCBvZiB0aGlzIG1ldGFkYXRhIGlzIHByb3ZpZGVyLXNwZWNpZmljLlxuICAgICAqL1xuICAgIG1ldGFkYXRhOiBleHRlcm5hbF9leHBvcnRzLm9wdGlvbmFsKGV4dGVybmFsX2V4cG9ydHMub2JqZWN0KHt9KS5wYXNzdGhyb3VnaCgpKSxcbiAgICAvKipcbiAgICAgKiBUaGUgc2VydmVyJ3MgcHJlZmVyZW5jZXMgZm9yIHdoaWNoIG1vZGVsIHRvIHNlbGVjdC5cbiAgICAgKi9cbiAgICBtb2RlbFByZWZlcmVuY2VzOiBleHRlcm5hbF9leHBvcnRzLm9wdGlvbmFsKE1vZGVsUHJlZmVyZW5jZXNTY2hlbWEpXG4gIH0pXG59KTtcbnZhciBDcmVhdGVNZXNzYWdlUmVzdWx0U2NoZW1hID0gUmVzdWx0U2NoZW1hLmV4dGVuZCh7XG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgbW9kZWwgdGhhdCBnZW5lcmF0ZWQgdGhlIG1lc3NhZ2UuXG4gICAqL1xuICBtb2RlbDogZXh0ZXJuYWxfZXhwb3J0cy5zdHJpbmcoKSxcbiAgLyoqXG4gICAqIFRoZSByZWFzb24gd2h5IHNhbXBsaW5nIHN0b3BwZWQuXG4gICAqL1xuICBzdG9wUmVhc29uOiBleHRlcm5hbF9leHBvcnRzLm9wdGlvbmFsKGV4dGVybmFsX2V4cG9ydHMuZW51bShbXCJlbmRUdXJuXCIsIFwic3RvcFNlcXVlbmNlXCIsIFwibWF4VG9rZW5zXCJdKS5vcihleHRlcm5hbF9leHBvcnRzLnN0cmluZygpKSksXG4gIHJvbGU6IGV4dGVybmFsX2V4cG9ydHMuZW51bShbXCJ1c2VyXCIsIFwiYXNzaXN0YW50XCJdKSxcbiAgY29udGVudDogZXh0ZXJuYWxfZXhwb3J0cy5kaXNjcmltaW5hdGVkVW5pb24oXCJ0eXBlXCIsIFtcbiAgICBUZXh0Q29udGVudFNjaGVtYSxcbiAgICBJbWFnZUNvbnRlbnRTY2hlbWEsXG4gICAgQXVkaW9Db250ZW50U2NoZW1hXG4gIF0pXG59KTtcbnZhciBCb29sZWFuU2NoZW1hU2NoZW1hID0gZXh0ZXJuYWxfZXhwb3J0cy5vYmplY3Qoe1xuICB0eXBlOiBleHRlcm5hbF9leHBvcnRzLmxpdGVyYWwoXCJib29sZWFuXCIpLFxuICB0aXRsZTogZXh0ZXJuYWxfZXhwb3J0cy5vcHRpb25hbChleHRlcm5hbF9leHBvcnRzLnN0cmluZygpKSxcbiAgZGVzY3JpcHRpb246IGV4dGVybmFsX2V4cG9ydHMub3B0aW9uYWwoZXh0ZXJuYWxfZXhwb3J0cy5zdHJpbmcoKSksXG4gIGRlZmF1bHQ6IGV4dGVybmFsX2V4cG9ydHMub3B0aW9uYWwoZXh0ZXJuYWxfZXhwb3J0cy5ib29sZWFuKCkpXG59KS5wYXNzdGhyb3VnaCgpO1xudmFyIFN0cmluZ1NjaGVtYVNjaGVtYSA9IGV4dGVybmFsX2V4cG9ydHMub2JqZWN0KHtcbiAgdHlwZTogZXh0ZXJuYWxfZXhwb3J0cy5saXRlcmFsKFwic3RyaW5nXCIpLFxuICB0aXRsZTogZXh0ZXJuYWxfZXhwb3J0cy5vcHRpb25hbChleHRlcm5hbF9leHBvcnRzLnN0cmluZygpKSxcbiAgZGVzY3JpcHRpb246IGV4dGVybmFsX2V4cG9ydHMub3B0aW9uYWwoZXh0ZXJuYWxfZXhwb3J0cy5zdHJpbmcoKSksXG4gIG1pbkxlbmd0aDogZXh0ZXJuYWxfZXhwb3J0cy5vcHRpb25hbChleHRlcm5hbF9leHBvcnRzLm51bWJlcigpKSxcbiAgbWF4TGVuZ3RoOiBleHRlcm5hbF9leHBvcnRzLm9wdGlvbmFsKGV4dGVybmFsX2V4cG9ydHMubnVtYmVyKCkpLFxuICBmb3JtYXQ6IGV4dGVybmFsX2V4cG9ydHMub3B0aW9uYWwoZXh0ZXJuYWxfZXhwb3J0cy5lbnVtKFtcImVtYWlsXCIsIFwidXJpXCIsIFwiZGF0ZVwiLCBcImRhdGUtdGltZVwiXSkpXG59KS5wYXNzdGhyb3VnaCgpO1xudmFyIE51bWJlclNjaGVtYVNjaGVtYSA9IGV4dGVybmFsX2V4cG9ydHMub2JqZWN0KHtcbiAgdHlwZTogZXh0ZXJuYWxfZXhwb3J0cy5lbnVtKFtcIm51bWJlclwiLCBcImludGVnZXJcIl0pLFxuICB0aXRsZTogZXh0ZXJuYWxfZXhwb3J0cy5vcHRpb25hbChleHRlcm5hbF9leHBvcnRzLnN0cmluZygpKSxcbiAgZGVzY3JpcHRpb246IGV4dGVybmFsX2V4cG9ydHMub3B0aW9uYWwoZXh0ZXJuYWxfZXhwb3J0cy5zdHJpbmcoKSksXG4gIG1pbmltdW06IGV4dGVybmFsX2V4cG9ydHMub3B0aW9uYWwoZXh0ZXJuYWxfZXhwb3J0cy5udW1iZXIoKSksXG4gIG1heGltdW06IGV4dGVybmFsX2V4cG9ydHMub3B0aW9uYWwoZXh0ZXJuYWxfZXhwb3J0cy5udW1iZXIoKSlcbn0pLnBhc3N0aHJvdWdoKCk7XG52YXIgRW51bVNjaGVtYVNjaGVtYSA9IGV4dGVybmFsX2V4cG9ydHMub2JqZWN0KHtcbiAgdHlwZTogZXh0ZXJuYWxfZXhwb3J0cy5saXRlcmFsKFwic3RyaW5nXCIpLFxuICB0aXRsZTogZXh0ZXJuYWxfZXhwb3J0cy5vcHRpb25hbChleHRlcm5hbF9leHBvcnRzLnN0cmluZygpKSxcbiAgZGVzY3JpcHRpb246IGV4dGVybmFsX2V4cG9ydHMub3B0aW9uYWwoZXh0ZXJuYWxfZXhwb3J0cy5zdHJpbmcoKSksXG4gIGVudW06IGV4dGVybmFsX2V4cG9ydHMuYXJyYXkoZXh0ZXJuYWxfZXhwb3J0cy5zdHJpbmcoKSksXG4gIGVudW1OYW1lczogZXh0ZXJuYWxfZXhwb3J0cy5vcHRpb25hbChleHRlcm5hbF9leHBvcnRzLmFycmF5KGV4dGVybmFsX2V4cG9ydHMuc3RyaW5nKCkpKVxufSkucGFzc3Rocm91Z2goKTtcbnZhciBQcmltaXRpdmVTY2hlbWFEZWZpbml0aW9uU2NoZW1hID0gZXh0ZXJuYWxfZXhwb3J0cy51bmlvbihbXG4gIEJvb2xlYW5TY2hlbWFTY2hlbWEsXG4gIFN0cmluZ1NjaGVtYVNjaGVtYSxcbiAgTnVtYmVyU2NoZW1hU2NoZW1hLFxuICBFbnVtU2NoZW1hU2NoZW1hXG5dKTtcbnZhciBFbGljaXRSZXF1ZXN0U2NoZW1hID0gUmVxdWVzdFNjaGVtYS5leHRlbmQoe1xuICBtZXRob2Q6IGV4dGVybmFsX2V4cG9ydHMubGl0ZXJhbChcImVsaWNpdGF0aW9uL2NyZWF0ZVwiKSxcbiAgcGFyYW1zOiBCYXNlUmVxdWVzdFBhcmFtc1NjaGVtYS5leHRlbmQoe1xuICAgIC8qKlxuICAgICAqIFRoZSBtZXNzYWdlIHRvIHByZXNlbnQgdG8gdGhlIHVzZXIuXG4gICAgICovXG4gICAgbWVzc2FnZTogZXh0ZXJuYWxfZXhwb3J0cy5zdHJpbmcoKSxcbiAgICAvKipcbiAgICAgKiBUaGUgc2NoZW1hIGZvciB0aGUgcmVxdWVzdGVkIHVzZXIgaW5wdXQuXG4gICAgICovXG4gICAgcmVxdWVzdGVkU2NoZW1hOiBleHRlcm5hbF9leHBvcnRzLm9iamVjdCh7XG4gICAgICB0eXBlOiBleHRlcm5hbF9leHBvcnRzLmxpdGVyYWwoXCJvYmplY3RcIiksXG4gICAgICBwcm9wZXJ0aWVzOiBleHRlcm5hbF9leHBvcnRzLnJlY29yZChleHRlcm5hbF9leHBvcnRzLnN0cmluZygpLCBQcmltaXRpdmVTY2hlbWFEZWZpbml0aW9uU2NoZW1hKSxcbiAgICAgIHJlcXVpcmVkOiBleHRlcm5hbF9leHBvcnRzLm9wdGlvbmFsKGV4dGVybmFsX2V4cG9ydHMuYXJyYXkoZXh0ZXJuYWxfZXhwb3J0cy5zdHJpbmcoKSkpXG4gICAgfSkucGFzc3Rocm91Z2goKVxuICB9KVxufSk7XG52YXIgRWxpY2l0UmVzdWx0U2NoZW1hID0gUmVzdWx0U2NoZW1hLmV4dGVuZCh7XG4gIC8qKlxuICAgKiBUaGUgdXNlcidzIHJlc3BvbnNlIGFjdGlvbi5cbiAgICovXG4gIGFjdGlvbjogZXh0ZXJuYWxfZXhwb3J0cy5lbnVtKFtcImFjY2VwdFwiLCBcImRlY2xpbmVcIiwgXCJjYW5jZWxcIl0pLFxuICAvKipcbiAgICogVGhlIGNvbGxlY3RlZCB1c2VyIGlucHV0IGNvbnRlbnQgKG9ubHkgcHJlc2VudCBpZiBhY3Rpb24gaXMgXCJhY2NlcHRcIikuXG4gICAqL1xuICBjb250ZW50OiBleHRlcm5hbF9leHBvcnRzLm9wdGlvbmFsKGV4dGVybmFsX2V4cG9ydHMucmVjb3JkKGV4dGVybmFsX2V4cG9ydHMuc3RyaW5nKCksIGV4dGVybmFsX2V4cG9ydHMudW5rbm93bigpKSlcbn0pO1xudmFyIFJlc291cmNlVGVtcGxhdGVSZWZlcmVuY2VTY2hlbWEgPSBleHRlcm5hbF9leHBvcnRzLm9iamVjdCh7XG4gIHR5cGU6IGV4dGVybmFsX2V4cG9ydHMubGl0ZXJhbChcInJlZi9yZXNvdXJjZVwiKSxcbiAgLyoqXG4gICAqIFRoZSBVUkkgb3IgVVJJIHRlbXBsYXRlIG9mIHRoZSByZXNvdXJjZS5cbiAgICovXG4gIHVyaTogZXh0ZXJuYWxfZXhwb3J0cy5zdHJpbmcoKVxufSkucGFzc3Rocm91Z2goKTtcbnZhciBQcm9tcHRSZWZlcmVuY2VTY2hlbWEgPSBleHRlcm5hbF9leHBvcnRzLm9iamVjdCh7XG4gIHR5cGU6IGV4dGVybmFsX2V4cG9ydHMubGl0ZXJhbChcInJlZi9wcm9tcHRcIiksXG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgcHJvbXB0IG9yIHByb21wdCB0ZW1wbGF0ZVxuICAgKi9cbiAgbmFtZTogZXh0ZXJuYWxfZXhwb3J0cy5zdHJpbmcoKVxufSkucGFzc3Rocm91Z2goKTtcbnZhciBDb21wbGV0ZVJlcXVlc3RTY2hlbWEgPSBSZXF1ZXN0U2NoZW1hLmV4dGVuZCh7XG4gIG1ldGhvZDogZXh0ZXJuYWxfZXhwb3J0cy5saXRlcmFsKFwiY29tcGxldGlvbi9jb21wbGV0ZVwiKSxcbiAgcGFyYW1zOiBCYXNlUmVxdWVzdFBhcmFtc1NjaGVtYS5leHRlbmQoe1xuICAgIHJlZjogZXh0ZXJuYWxfZXhwb3J0cy51bmlvbihbUHJvbXB0UmVmZXJlbmNlU2NoZW1hLCBSZXNvdXJjZVRlbXBsYXRlUmVmZXJlbmNlU2NoZW1hXSksXG4gICAgLyoqXG4gICAgICogVGhlIGFyZ3VtZW50J3MgaW5mb3JtYXRpb25cbiAgICAgKi9cbiAgICBhcmd1bWVudDogZXh0ZXJuYWxfZXhwb3J0cy5vYmplY3Qoe1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgbmFtZSBvZiB0aGUgYXJndW1lbnRcbiAgICAgICAqL1xuICAgICAgbmFtZTogZXh0ZXJuYWxfZXhwb3J0cy5zdHJpbmcoKSxcbiAgICAgIC8qKlxuICAgICAgICogVGhlIHZhbHVlIG9mIHRoZSBhcmd1bWVudCB0byB1c2UgZm9yIGNvbXBsZXRpb24gbWF0Y2hpbmcuXG4gICAgICAgKi9cbiAgICAgIHZhbHVlOiBleHRlcm5hbF9leHBvcnRzLnN0cmluZygpXG4gICAgfSkucGFzc3Rocm91Z2goKSxcbiAgICBjb250ZXh0OiBleHRlcm5hbF9leHBvcnRzLm9wdGlvbmFsKGV4dGVybmFsX2V4cG9ydHMub2JqZWN0KHtcbiAgICAgIC8qKlxuICAgICAgICogUHJldmlvdXNseS1yZXNvbHZlZCB2YXJpYWJsZXMgaW4gYSBVUkkgdGVtcGxhdGUgb3IgcHJvbXB0LlxuICAgICAgICovXG4gICAgICBhcmd1bWVudHM6IGV4dGVybmFsX2V4cG9ydHMub3B0aW9uYWwoZXh0ZXJuYWxfZXhwb3J0cy5yZWNvcmQoZXh0ZXJuYWxfZXhwb3J0cy5zdHJpbmcoKSwgZXh0ZXJuYWxfZXhwb3J0cy5zdHJpbmcoKSkpXG4gICAgfSkpXG4gIH0pXG59KTtcbnZhciBDb21wbGV0ZVJlc3VsdFNjaGVtYSA9IFJlc3VsdFNjaGVtYS5leHRlbmQoe1xuICBjb21wbGV0aW9uOiBleHRlcm5hbF9leHBvcnRzLm9iamVjdCh7XG4gICAgLyoqXG4gICAgICogQW4gYXJyYXkgb2YgY29tcGxldGlvbiB2YWx1ZXMuIE11c3Qgbm90IGV4Y2VlZCAxMDAgaXRlbXMuXG4gICAgICovXG4gICAgdmFsdWVzOiBleHRlcm5hbF9leHBvcnRzLmFycmF5KGV4dGVybmFsX2V4cG9ydHMuc3RyaW5nKCkpLm1heCgxMDApLFxuICAgIC8qKlxuICAgICAqIFRoZSB0b3RhbCBudW1iZXIgb2YgY29tcGxldGlvbiBvcHRpb25zIGF2YWlsYWJsZS4gVGhpcyBjYW4gZXhjZWVkIHRoZSBudW1iZXIgb2YgdmFsdWVzIGFjdHVhbGx5IHNlbnQgaW4gdGhlIHJlc3BvbnNlLlxuICAgICAqL1xuICAgIHRvdGFsOiBleHRlcm5hbF9leHBvcnRzLm9wdGlvbmFsKGV4dGVybmFsX2V4cG9ydHMubnVtYmVyKCkuaW50KCkpLFxuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB3aGV0aGVyIHRoZXJlIGFyZSBhZGRpdGlvbmFsIGNvbXBsZXRpb24gb3B0aW9ucyBiZXlvbmQgdGhvc2UgcHJvdmlkZWQgaW4gdGhlIGN1cnJlbnQgcmVzcG9uc2UsIGV2ZW4gaWYgdGhlIGV4YWN0IHRvdGFsIGlzIHVua25vd24uXG4gICAgICovXG4gICAgaGFzTW9yZTogZXh0ZXJuYWxfZXhwb3J0cy5vcHRpb25hbChleHRlcm5hbF9leHBvcnRzLmJvb2xlYW4oKSlcbiAgfSkucGFzc3Rocm91Z2goKVxufSk7XG52YXIgUm9vdFNjaGVtYSA9IGV4dGVybmFsX2V4cG9ydHMub2JqZWN0KHtcbiAgLyoqXG4gICAqIFRoZSBVUkkgaWRlbnRpZnlpbmcgdGhlIHJvb3QuIFRoaXMgKm11c3QqIHN0YXJ0IHdpdGggZmlsZTovLyBmb3Igbm93LlxuICAgKi9cbiAgdXJpOiBleHRlcm5hbF9leHBvcnRzLnN0cmluZygpLnN0YXJ0c1dpdGgoXCJmaWxlOi8vXCIpLFxuICAvKipcbiAgICogQW4gb3B0aW9uYWwgbmFtZSBmb3IgdGhlIHJvb3QuXG4gICAqL1xuICBuYW1lOiBleHRlcm5hbF9leHBvcnRzLm9wdGlvbmFsKGV4dGVybmFsX2V4cG9ydHMuc3RyaW5nKCkpLFxuICAvKipcbiAgICogU2VlIFtNQ1Agc3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly9naXRodWIuY29tL21vZGVsY29udGV4dHByb3RvY29sL21vZGVsY29udGV4dHByb3RvY29sL2Jsb2IvNDczMzljMDNjMTQzYmI0ZWMwMWEyNmU3MjFhMWI4ZmU2NjYzNGViZS9kb2NzL3NwZWNpZmljYXRpb24vZHJhZnQvYmFzaWMvaW5kZXgubWR4I2dlbmVyYWwtZmllbGRzKVxuICAgKiBmb3Igbm90ZXMgb24gX21ldGEgdXNhZ2UuXG4gICAqL1xuICBfbWV0YTogZXh0ZXJuYWxfZXhwb3J0cy5vcHRpb25hbChleHRlcm5hbF9leHBvcnRzLm9iamVjdCh7fSkucGFzc3Rocm91Z2goKSlcbn0pLnBhc3N0aHJvdWdoKCk7XG52YXIgTGlzdFJvb3RzUmVxdWVzdFNjaGVtYSA9IFJlcXVlc3RTY2hlbWEuZXh0ZW5kKHtcbiAgbWV0aG9kOiBleHRlcm5hbF9leHBvcnRzLmxpdGVyYWwoXCJyb290cy9saXN0XCIpXG59KTtcbnZhciBMaXN0Um9vdHNSZXN1bHRTY2hlbWEgPSBSZXN1bHRTY2hlbWEuZXh0ZW5kKHtcbiAgcm9vdHM6IGV4dGVybmFsX2V4cG9ydHMuYXJyYXkoUm9vdFNjaGVtYSlcbn0pO1xudmFyIFJvb3RzTGlzdENoYW5nZWROb3RpZmljYXRpb25TY2hlbWEgPSBOb3RpZmljYXRpb25TY2hlbWEuZXh0ZW5kKHtcbiAgbWV0aG9kOiBleHRlcm5hbF9leHBvcnRzLmxpdGVyYWwoXCJub3RpZmljYXRpb25zL3Jvb3RzL2xpc3RfY2hhbmdlZFwiKVxufSk7XG52YXIgQ2xpZW50UmVxdWVzdFNjaGVtYSA9IGV4dGVybmFsX2V4cG9ydHMudW5pb24oW1xuICBQaW5nUmVxdWVzdFNjaGVtYSxcbiAgSW5pdGlhbGl6ZVJlcXVlc3RTY2hlbWEsXG4gIENvbXBsZXRlUmVxdWVzdFNjaGVtYSxcbiAgU2V0TGV2ZWxSZXF1ZXN0U2NoZW1hLFxuICBHZXRQcm9tcHRSZXF1ZXN0U2NoZW1hLFxuICBMaXN0UHJvbXB0c1JlcXVlc3RTY2hlbWEsXG4gIExpc3RSZXNvdXJjZXNSZXF1ZXN0U2NoZW1hLFxuICBMaXN0UmVzb3VyY2VUZW1wbGF0ZXNSZXF1ZXN0U2NoZW1hLFxuICBSZWFkUmVzb3VyY2VSZXF1ZXN0U2NoZW1hLFxuICBTdWJzY3JpYmVSZXF1ZXN0U2NoZW1hLFxuICBVbnN1YnNjcmliZVJlcXVlc3RTY2hlbWEsXG4gIENhbGxUb29sUmVxdWVzdFNjaGVtYSxcbiAgTGlzdFRvb2xzUmVxdWVzdFNjaGVtYVxuXSk7XG52YXIgQ2xpZW50Tm90aWZpY2F0aW9uU2NoZW1hID0gZXh0ZXJuYWxfZXhwb3J0cy51bmlvbihbXG4gIENhbmNlbGxlZE5vdGlmaWNhdGlvblNjaGVtYSxcbiAgUHJvZ3Jlc3NOb3RpZmljYXRpb25TY2hlbWEsXG4gIEluaXRpYWxpemVkTm90aWZpY2F0aW9uU2NoZW1hLFxuICBSb290c0xpc3RDaGFuZ2VkTm90aWZpY2F0aW9uU2NoZW1hXG5dKTtcbnZhciBDbGllbnRSZXN1bHRTY2hlbWEgPSBleHRlcm5hbF9leHBvcnRzLnVuaW9uKFtcbiAgRW1wdHlSZXN1bHRTY2hlbWEsXG4gIENyZWF0ZU1lc3NhZ2VSZXN1bHRTY2hlbWEsXG4gIEVsaWNpdFJlc3VsdFNjaGVtYSxcbiAgTGlzdFJvb3RzUmVzdWx0U2NoZW1hXG5dKTtcbnZhciBTZXJ2ZXJSZXF1ZXN0U2NoZW1hID0gZXh0ZXJuYWxfZXhwb3J0cy51bmlvbihbXG4gIFBpbmdSZXF1ZXN0U2NoZW1hLFxuICBDcmVhdGVNZXNzYWdlUmVxdWVzdFNjaGVtYSxcbiAgRWxpY2l0UmVxdWVzdFNjaGVtYSxcbiAgTGlzdFJvb3RzUmVxdWVzdFNjaGVtYVxuXSk7XG52YXIgU2VydmVyTm90aWZpY2F0aW9uU2NoZW1hID0gZXh0ZXJuYWxfZXhwb3J0cy51bmlvbihbXG4gIENhbmNlbGxlZE5vdGlmaWNhdGlvblNjaGVtYSxcbiAgUHJvZ3Jlc3NOb3RpZmljYXRpb25TY2hlbWEsXG4gIExvZ2dpbmdNZXNzYWdlTm90aWZpY2F0aW9uU2NoZW1hLFxuICBSZXNvdXJjZVVwZGF0ZWROb3RpZmljYXRpb25TY2hlbWEsXG4gIFJlc291cmNlTGlzdENoYW5nZWROb3RpZmljYXRpb25TY2hlbWEsXG4gIFRvb2xMaXN0Q2hhbmdlZE5vdGlmaWNhdGlvblNjaGVtYSxcbiAgUHJvbXB0TGlzdENoYW5nZWROb3RpZmljYXRpb25TY2hlbWFcbl0pO1xudmFyIFNlcnZlclJlc3VsdFNjaGVtYSA9IGV4dGVybmFsX2V4cG9ydHMudW5pb24oW1xuICBFbXB0eVJlc3VsdFNjaGVtYSxcbiAgSW5pdGlhbGl6ZVJlc3VsdFNjaGVtYSxcbiAgQ29tcGxldGVSZXN1bHRTY2hlbWEsXG4gIEdldFByb21wdFJlc3VsdFNjaGVtYSxcbiAgTGlzdFByb21wdHNSZXN1bHRTY2hlbWEsXG4gIExpc3RSZXNvdXJjZXNSZXN1bHRTY2hlbWEsXG4gIExpc3RSZXNvdXJjZVRlbXBsYXRlc1Jlc3VsdFNjaGVtYSxcbiAgUmVhZFJlc291cmNlUmVzdWx0U2NoZW1hLFxuICBDYWxsVG9vbFJlc3VsdFNjaGVtYSxcbiAgTGlzdFRvb2xzUmVzdWx0U2NoZW1hXG5dKTtcblxuLy8gbm9kZV9tb2R1bGVzL0Btb2RlbGNvbnRleHRwcm90b2NvbC9zZGsvZGlzdC9lc20vc2hhcmVkL3N0ZGlvLmpzXG52YXIgUmVhZEJ1ZmZlciA9IGNsYXNzIHtcbiAgYXBwZW5kKGNodW5rKSB7XG4gICAgdGhpcy5fYnVmZmVyID0gdGhpcy5fYnVmZmVyID8gQnVmZmVyLmNvbmNhdChbdGhpcy5fYnVmZmVyLCBjaHVua10pIDogY2h1bms7XG4gIH1cbiAgcmVhZE1lc3NhZ2UoKSB7XG4gICAgaWYgKCF0aGlzLl9idWZmZXIpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCBpbmRleCA9IHRoaXMuX2J1ZmZlci5pbmRleE9mKFwiXFxuXCIpO1xuICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCBsaW5lID0gdGhpcy5fYnVmZmVyLnRvU3RyaW5nKFwidXRmOFwiLCAwLCBpbmRleCkucmVwbGFjZSgvXFxyJC8sIFwiXCIpO1xuICAgIHRoaXMuX2J1ZmZlciA9IHRoaXMuX2J1ZmZlci5zdWJhcnJheShpbmRleCArIDEpO1xuICAgIHJldHVybiBkZXNlcmlhbGl6ZU1lc3NhZ2UobGluZSk7XG4gIH1cbiAgY2xlYXIoKSB7XG4gICAgdGhpcy5fYnVmZmVyID0gdm9pZCAwO1xuICB9XG59O1xuZnVuY3Rpb24gZGVzZXJpYWxpemVNZXNzYWdlKGxpbmUpIHtcbiAgcmV0dXJuIEpTT05SUENNZXNzYWdlU2NoZW1hLnBhcnNlKEpTT04ucGFyc2UobGluZSkpO1xufVxuZnVuY3Rpb24gc2VyaWFsaXplTWVzc2FnZShtZXNzYWdlKSB7XG4gIHJldHVybiBKU09OLnN0cmluZ2lmeShtZXNzYWdlKSArIFwiXFxuXCI7XG59XG5cbi8vIG5vZGVfbW9kdWxlcy9AbW9kZWxjb250ZXh0cHJvdG9jb2wvc2RrL2Rpc3QvZXNtL3NlcnZlci9zdGRpby5qc1xudmFyIFN0ZGlvU2VydmVyVHJhbnNwb3J0ID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihfc3RkaW4gPSBpbXBvcnRfbm9kZV9wcm9jZXNzLmRlZmF1bHQuc3RkaW4sIF9zdGRvdXQgPSBpbXBvcnRfbm9kZV9wcm9jZXNzLmRlZmF1bHQuc3Rkb3V0KSB7XG4gICAgdGhpcy5fc3RkaW4gPSBfc3RkaW47XG4gICAgdGhpcy5fc3Rkb3V0ID0gX3N0ZG91dDtcbiAgICB0aGlzLl9yZWFkQnVmZmVyID0gbmV3IFJlYWRCdWZmZXIoKTtcbiAgICB0aGlzLl9zdGFydGVkID0gZmFsc2U7XG4gICAgdGhpcy5fb25kYXRhID0gKGNodW5rKSA9PiB7XG4gICAgICB0aGlzLl9yZWFkQnVmZmVyLmFwcGVuZChjaHVuayk7XG4gICAgICB0aGlzLnByb2Nlc3NSZWFkQnVmZmVyKCk7XG4gICAgfTtcbiAgICB0aGlzLl9vbmVycm9yID0gKGVycm9yKSA9PiB7XG4gICAgICB2YXIgX2E7XG4gICAgICAoX2EgPSB0aGlzLm9uZXJyb3IpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHRoaXMsIGVycm9yKTtcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBTdGFydHMgbGlzdGVuaW5nIGZvciBtZXNzYWdlcyBvbiBzdGRpbi5cbiAgICovXG4gIGFzeW5jIHN0YXJ0KCkge1xuICAgIGlmICh0aGlzLl9zdGFydGVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTdGRpb1NlcnZlclRyYW5zcG9ydCBhbHJlYWR5IHN0YXJ0ZWQhIElmIHVzaW5nIFNlcnZlciBjbGFzcywgbm90ZSB0aGF0IGNvbm5lY3QoKSBjYWxscyBzdGFydCgpIGF1dG9tYXRpY2FsbHkuXCIpO1xuICAgIH1cbiAgICB0aGlzLl9zdGFydGVkID0gdHJ1ZTtcbiAgICB0aGlzLl9zdGRpbi5vbihcImRhdGFcIiwgdGhpcy5fb25kYXRhKTtcbiAgICB0aGlzLl9zdGRpbi5vbihcImVycm9yXCIsIHRoaXMuX29uZXJyb3IpO1xuICB9XG4gIHByb2Nlc3NSZWFkQnVmZmVyKCkge1xuICAgIHZhciBfYSwgX2I7XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSB0aGlzLl9yZWFkQnVmZmVyLnJlYWRNZXNzYWdlKCk7XG4gICAgICAgIGlmIChtZXNzYWdlID09PSBudWxsKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgKF9hID0gdGhpcy5vbm1lc3NhZ2UpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHRoaXMsIG1lc3NhZ2UpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgKF9iID0gdGhpcy5vbmVycm9yKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbCh0aGlzLCBlcnJvcik7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGFzeW5jIGNsb3NlKCkge1xuICAgIHZhciBfYTtcbiAgICB0aGlzLl9zdGRpbi5vZmYoXCJkYXRhXCIsIHRoaXMuX29uZGF0YSk7XG4gICAgdGhpcy5fc3RkaW4ub2ZmKFwiZXJyb3JcIiwgdGhpcy5fb25lcnJvcik7XG4gICAgY29uc3QgcmVtYWluaW5nRGF0YUxpc3RlbmVycyA9IHRoaXMuX3N0ZGluLmxpc3RlbmVyQ291bnQoXCJkYXRhXCIpO1xuICAgIGlmIChyZW1haW5pbmdEYXRhTGlzdGVuZXJzID09PSAwKSB7XG4gICAgICB0aGlzLl9zdGRpbi5wYXVzZSgpO1xuICAgIH1cbiAgICB0aGlzLl9yZWFkQnVmZmVyLmNsZWFyKCk7XG4gICAgKF9hID0gdGhpcy5vbmNsb3NlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbCh0aGlzKTtcbiAgfVxuICBzZW5kKG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgIGNvbnN0IGpzb24gPSBzZXJpYWxpemVNZXNzYWdlKG1lc3NhZ2UpO1xuICAgICAgaWYgKHRoaXMuX3N0ZG91dC53cml0ZShqc29uKSkge1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9zdGRvdXQub25jZShcImRyYWluXCIsIHJlc29sdmUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xuXG4vLyBzcmMvcnVudGltZS9zdGRpby1ib290c3RyYXAudHNcbnZhciBpbXBvcnRfY2hhbGsgPSBfX3RvRVNNKHJlcXVpcmVfc291cmNlKCkpO1xudmFyIGltcG9ydF9sb2Rhc2ggPSBfX3RvRVNNKHJlcXVpcmVfbG9kYXNoKCkpO1xuXG4vLyBub2RlX21vZHVsZXMvem9kLXRvLWpzb24tc2NoZW1hL2Rpc3QvZXNtL09wdGlvbnMuanNcbnZhciBpZ25vcmVPdmVycmlkZSA9IFN5bWJvbChcIkxldCB6b2RUb0pzb25TY2hlbWEgZGVjaWRlIG9uIHdoaWNoIHBhcnNlciB0byB1c2VcIik7XG52YXIgZGVmYXVsdE9wdGlvbnMgPSB7XG4gIG5hbWU6IHZvaWQgMCxcbiAgJHJlZlN0cmF0ZWd5OiBcInJvb3RcIixcbiAgYmFzZVBhdGg6IFtcIiNcIl0sXG4gIGVmZmVjdFN0cmF0ZWd5OiBcImlucHV0XCIsXG4gIHBpcGVTdHJhdGVneTogXCJhbGxcIixcbiAgZGF0ZVN0cmF0ZWd5OiBcImZvcm1hdDpkYXRlLXRpbWVcIixcbiAgbWFwU3RyYXRlZ3k6IFwiZW50cmllc1wiLFxuICByZW1vdmVBZGRpdGlvbmFsU3RyYXRlZ3k6IFwicGFzc3Rocm91Z2hcIixcbiAgYWxsb3dlZEFkZGl0aW9uYWxQcm9wZXJ0aWVzOiB0cnVlLFxuICByZWplY3RlZEFkZGl0aW9uYWxQcm9wZXJ0aWVzOiBmYWxzZSxcbiAgZGVmaW5pdGlvblBhdGg6IFwiZGVmaW5pdGlvbnNcIixcbiAgdGFyZ2V0OiBcImpzb25TY2hlbWE3XCIsXG4gIHN0cmljdFVuaW9uczogZmFsc2UsXG4gIGRlZmluaXRpb25zOiB7fSxcbiAgZXJyb3JNZXNzYWdlczogZmFsc2UsXG4gIG1hcmtkb3duRGVzY3JpcHRpb246IGZhbHNlLFxuICBwYXR0ZXJuU3RyYXRlZ3k6IFwiZXNjYXBlXCIsXG4gIGFwcGx5UmVnZXhGbGFnczogZmFsc2UsXG4gIGVtYWlsU3RyYXRlZ3k6IFwiZm9ybWF0OmVtYWlsXCIsXG4gIGJhc2U2NFN0cmF0ZWd5OiBcImNvbnRlbnRFbmNvZGluZzpiYXNlNjRcIixcbiAgbmFtZVN0cmF0ZWd5OiBcInJlZlwiLFxuICBvcGVuQWlBbnlUeXBlTmFtZTogXCJPcGVuQWlBbnlUeXBlXCJcbn07XG52YXIgZ2V0RGVmYXVsdE9wdGlvbnMgPSAob3B0aW9ucykgPT4gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgPyB7XG4gIC4uLmRlZmF1bHRPcHRpb25zLFxuICBuYW1lOiBvcHRpb25zXG59IDoge1xuICAuLi5kZWZhdWx0T3B0aW9ucyxcbiAgLi4ub3B0aW9uc1xufTtcblxuLy8gbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9SZWZzLmpzXG52YXIgZ2V0UmVmcyA9IChvcHRpb25zKSA9PiB7XG4gIGNvbnN0IF9vcHRpb25zID0gZ2V0RGVmYXVsdE9wdGlvbnMob3B0aW9ucyk7XG4gIGNvbnN0IGN1cnJlbnRQYXRoID0gX29wdGlvbnMubmFtZSAhPT0gdm9pZCAwID8gWy4uLl9vcHRpb25zLmJhc2VQYXRoLCBfb3B0aW9ucy5kZWZpbml0aW9uUGF0aCwgX29wdGlvbnMubmFtZV0gOiBfb3B0aW9ucy5iYXNlUGF0aDtcbiAgcmV0dXJuIHtcbiAgICAuLi5fb3B0aW9ucyxcbiAgICBmbGFnczogeyBoYXNSZWZlcmVuY2VkT3BlbkFpQW55VHlwZTogZmFsc2UgfSxcbiAgICBjdXJyZW50UGF0aCxcbiAgICBwcm9wZXJ0eVBhdGg6IHZvaWQgMCxcbiAgICBzZWVuOiBuZXcgTWFwKE9iamVjdC5lbnRyaWVzKF9vcHRpb25zLmRlZmluaXRpb25zKS5tYXAoKFtuYW1lLCBkZWZdKSA9PiBbXG4gICAgICBkZWYuX2RlZixcbiAgICAgIHtcbiAgICAgICAgZGVmOiBkZWYuX2RlZixcbiAgICAgICAgcGF0aDogWy4uLl9vcHRpb25zLmJhc2VQYXRoLCBfb3B0aW9ucy5kZWZpbml0aW9uUGF0aCwgbmFtZV0sXG4gICAgICAgIC8vIFJlc29sdXRpb24gb2YgcmVmZXJlbmNlcyB3aWxsIGJlIGZvcmNlZCBldmVuIHRob3VnaCBzZWVuLCBzbyBpdCdzIG9rIHRoYXQgdGhlIHNjaGVtYSBpcyB1bmRlZmluZWQgaGVyZSBmb3Igbm93LlxuICAgICAgICBqc29uU2NoZW1hOiB2b2lkIDBcbiAgICAgIH1cbiAgICBdKSlcbiAgfTtcbn07XG5cbi8vIG5vZGVfbW9kdWxlcy96b2QtdG8tanNvbi1zY2hlbWEvZGlzdC9lc20vZXJyb3JNZXNzYWdlcy5qc1xuZnVuY3Rpb24gYWRkRXJyb3JNZXNzYWdlKHJlcywga2V5LCBlcnJvck1lc3NhZ2UsIHJlZnMpIHtcbiAgaWYgKCFyZWZzPy5lcnJvck1lc3NhZ2VzKVxuICAgIHJldHVybjtcbiAgaWYgKGVycm9yTWVzc2FnZSkge1xuICAgIHJlcy5lcnJvck1lc3NhZ2UgPSB7XG4gICAgICAuLi5yZXMuZXJyb3JNZXNzYWdlLFxuICAgICAgW2tleV06IGVycm9yTWVzc2FnZVxuICAgIH07XG4gIH1cbn1cbmZ1bmN0aW9uIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMocmVzLCBrZXksIHZhbHVlLCBlcnJvck1lc3NhZ2UsIHJlZnMpIHtcbiAgcmVzW2tleV0gPSB2YWx1ZTtcbiAgYWRkRXJyb3JNZXNzYWdlKHJlcywga2V5LCBlcnJvck1lc3NhZ2UsIHJlZnMpO1xufVxuXG4vLyBub2RlX21vZHVsZXMvem9kLXRvLWpzb24tc2NoZW1hL2Rpc3QvZXNtL2dldFJlbGF0aXZlUGF0aC5qc1xudmFyIGdldFJlbGF0aXZlUGF0aCA9IChwYXRoQSwgcGF0aEIpID0+IHtcbiAgbGV0IGkgPSAwO1xuICBmb3IgKDsgaSA8IHBhdGhBLmxlbmd0aCAmJiBpIDwgcGF0aEIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAocGF0aEFbaV0gIT09IHBhdGhCW2ldKVxuICAgICAgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIFsocGF0aEEubGVuZ3RoIC0gaSkudG9TdHJpbmcoKSwgLi4ucGF0aEIuc2xpY2UoaSldLmpvaW4oXCIvXCIpO1xufTtcblxuLy8gbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9wYXJzZXJzL2FueS5qc1xuZnVuY3Rpb24gcGFyc2VBbnlEZWYocmVmcykge1xuICBpZiAocmVmcy50YXJnZXQgIT09IFwib3BlbkFpXCIpIHtcbiAgICByZXR1cm4ge307XG4gIH1cbiAgY29uc3QgYW55RGVmaW5pdGlvblBhdGggPSBbXG4gICAgLi4ucmVmcy5iYXNlUGF0aCxcbiAgICByZWZzLmRlZmluaXRpb25QYXRoLFxuICAgIHJlZnMub3BlbkFpQW55VHlwZU5hbWVcbiAgXTtcbiAgcmVmcy5mbGFncy5oYXNSZWZlcmVuY2VkT3BlbkFpQW55VHlwZSA9IHRydWU7XG4gIHJldHVybiB7XG4gICAgJHJlZjogcmVmcy4kcmVmU3RyYXRlZ3kgPT09IFwicmVsYXRpdmVcIiA/IGdldFJlbGF0aXZlUGF0aChhbnlEZWZpbml0aW9uUGF0aCwgcmVmcy5jdXJyZW50UGF0aCkgOiBhbnlEZWZpbml0aW9uUGF0aC5qb2luKFwiL1wiKVxuICB9O1xufVxuXG4vLyBub2RlX21vZHVsZXMvem9kLXRvLWpzb24tc2NoZW1hL2Rpc3QvZXNtL3BhcnNlcnMvYXJyYXkuanNcbmZ1bmN0aW9uIHBhcnNlQXJyYXlEZWYoZGVmLCByZWZzKSB7XG4gIGNvbnN0IHJlcyA9IHtcbiAgICB0eXBlOiBcImFycmF5XCJcbiAgfTtcbiAgaWYgKGRlZi50eXBlPy5fZGVmICYmIGRlZi50eXBlPy5fZGVmPy50eXBlTmFtZSAhPT0gWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZEFueSkge1xuICAgIHJlcy5pdGVtcyA9IHBhcnNlRGVmKGRlZi50eXBlLl9kZWYsIHtcbiAgICAgIC4uLnJlZnMsXG4gICAgICBjdXJyZW50UGF0aDogWy4uLnJlZnMuY3VycmVudFBhdGgsIFwiaXRlbXNcIl1cbiAgICB9KTtcbiAgfVxuICBpZiAoZGVmLm1pbkxlbmd0aCkge1xuICAgIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMocmVzLCBcIm1pbkl0ZW1zXCIsIGRlZi5taW5MZW5ndGgudmFsdWUsIGRlZi5taW5MZW5ndGgubWVzc2FnZSwgcmVmcyk7XG4gIH1cbiAgaWYgKGRlZi5tYXhMZW5ndGgpIHtcbiAgICBzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzKHJlcywgXCJtYXhJdGVtc1wiLCBkZWYubWF4TGVuZ3RoLnZhbHVlLCBkZWYubWF4TGVuZ3RoLm1lc3NhZ2UsIHJlZnMpO1xuICB9XG4gIGlmIChkZWYuZXhhY3RMZW5ndGgpIHtcbiAgICBzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzKHJlcywgXCJtaW5JdGVtc1wiLCBkZWYuZXhhY3RMZW5ndGgudmFsdWUsIGRlZi5leGFjdExlbmd0aC5tZXNzYWdlLCByZWZzKTtcbiAgICBzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzKHJlcywgXCJtYXhJdGVtc1wiLCBkZWYuZXhhY3RMZW5ndGgudmFsdWUsIGRlZi5leGFjdExlbmd0aC5tZXNzYWdlLCByZWZzKTtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuXG4vLyBub2RlX21vZHVsZXMvem9kLXRvLWpzb24tc2NoZW1hL2Rpc3QvZXNtL3BhcnNlcnMvYmlnaW50LmpzXG5mdW5jdGlvbiBwYXJzZUJpZ2ludERlZihkZWYsIHJlZnMpIHtcbiAgY29uc3QgcmVzID0ge1xuICAgIHR5cGU6IFwiaW50ZWdlclwiLFxuICAgIGZvcm1hdDogXCJpbnQ2NFwiXG4gIH07XG4gIGlmICghZGVmLmNoZWNrcylcbiAgICByZXR1cm4gcmVzO1xuICBmb3IgKGNvbnN0IGNoZWNrIG9mIGRlZi5jaGVja3MpIHtcbiAgICBzd2l0Y2ggKGNoZWNrLmtpbmQpIHtcbiAgICAgIGNhc2UgXCJtaW5cIjpcbiAgICAgICAgaWYgKHJlZnMudGFyZ2V0ID09PSBcImpzb25TY2hlbWE3XCIpIHtcbiAgICAgICAgICBpZiAoY2hlY2suaW5jbHVzaXZlKSB7XG4gICAgICAgICAgICBzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzKHJlcywgXCJtaW5pbXVtXCIsIGNoZWNrLnZhbHVlLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2V0UmVzcG9uc2VWYWx1ZUFuZEVycm9ycyhyZXMsIFwiZXhjbHVzaXZlTWluaW11bVwiLCBjaGVjay52YWx1ZSwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghY2hlY2suaW5jbHVzaXZlKSB7XG4gICAgICAgICAgICByZXMuZXhjbHVzaXZlTWluaW11bSA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMocmVzLCBcIm1pbmltdW1cIiwgY2hlY2sudmFsdWUsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIm1heFwiOlxuICAgICAgICBpZiAocmVmcy50YXJnZXQgPT09IFwianNvblNjaGVtYTdcIikge1xuICAgICAgICAgIGlmIChjaGVjay5pbmNsdXNpdmUpIHtcbiAgICAgICAgICAgIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMocmVzLCBcIm1heGltdW1cIiwgY2hlY2sudmFsdWUsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzKHJlcywgXCJleGNsdXNpdmVNYXhpbXVtXCIsIGNoZWNrLnZhbHVlLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCFjaGVjay5pbmNsdXNpdmUpIHtcbiAgICAgICAgICAgIHJlcy5leGNsdXNpdmVNYXhpbXVtID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2V0UmVzcG9uc2VWYWx1ZUFuZEVycm9ycyhyZXMsIFwibWF4aW11bVwiLCBjaGVjay52YWx1ZSwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwibXVsdGlwbGVPZlwiOlxuICAgICAgICBzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzKHJlcywgXCJtdWx0aXBsZU9mXCIsIGNoZWNrLnZhbHVlLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXM7XG59XG5cbi8vIG5vZGVfbW9kdWxlcy96b2QtdG8tanNvbi1zY2hlbWEvZGlzdC9lc20vcGFyc2Vycy9ib29sZWFuLmpzXG5mdW5jdGlvbiBwYXJzZUJvb2xlYW5EZWYoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogXCJib29sZWFuXCJcbiAgfTtcbn1cblxuLy8gbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9wYXJzZXJzL2JyYW5kZWQuanNcbmZ1bmN0aW9uIHBhcnNlQnJhbmRlZERlZihfZGVmLCByZWZzKSB7XG4gIHJldHVybiBwYXJzZURlZihfZGVmLnR5cGUuX2RlZiwgcmVmcyk7XG59XG5cbi8vIG5vZGVfbW9kdWxlcy96b2QtdG8tanNvbi1zY2hlbWEvZGlzdC9lc20vcGFyc2Vycy9jYXRjaC5qc1xudmFyIHBhcnNlQ2F0Y2hEZWYgPSAoZGVmLCByZWZzKSA9PiB7XG4gIHJldHVybiBwYXJzZURlZihkZWYuaW5uZXJUeXBlLl9kZWYsIHJlZnMpO1xufTtcblxuLy8gbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9wYXJzZXJzL2RhdGUuanNcbmZ1bmN0aW9uIHBhcnNlRGF0ZURlZihkZWYsIHJlZnMsIG92ZXJyaWRlRGF0ZVN0cmF0ZWd5KSB7XG4gIGNvbnN0IHN0cmF0ZWd5ID0gb3ZlcnJpZGVEYXRlU3RyYXRlZ3kgPz8gcmVmcy5kYXRlU3RyYXRlZ3k7XG4gIGlmIChBcnJheS5pc0FycmF5KHN0cmF0ZWd5KSkge1xuICAgIHJldHVybiB7XG4gICAgICBhbnlPZjogc3RyYXRlZ3kubWFwKChpdGVtLCBpKSA9PiBwYXJzZURhdGVEZWYoZGVmLCByZWZzLCBpdGVtKSlcbiAgICB9O1xuICB9XG4gIHN3aXRjaCAoc3RyYXRlZ3kpIHtcbiAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgY2FzZSBcImZvcm1hdDpkYXRlLXRpbWVcIjpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICAgIGZvcm1hdDogXCJkYXRlLXRpbWVcIlxuICAgICAgfTtcbiAgICBjYXNlIFwiZm9ybWF0OmRhdGVcIjpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICAgIGZvcm1hdDogXCJkYXRlXCJcbiAgICAgIH07XG4gICAgY2FzZSBcImludGVnZXJcIjpcbiAgICAgIHJldHVybiBpbnRlZ2VyRGF0ZVBhcnNlcihkZWYsIHJlZnMpO1xuICB9XG59XG52YXIgaW50ZWdlckRhdGVQYXJzZXIgPSAoZGVmLCByZWZzKSA9PiB7XG4gIGNvbnN0IHJlcyA9IHtcbiAgICB0eXBlOiBcImludGVnZXJcIixcbiAgICBmb3JtYXQ6IFwidW5peC10aW1lXCJcbiAgfTtcbiAgaWYgKHJlZnMudGFyZ2V0ID09PSBcIm9wZW5BcGkzXCIpIHtcbiAgICByZXR1cm4gcmVzO1xuICB9XG4gIGZvciAoY29uc3QgY2hlY2sgb2YgZGVmLmNoZWNrcykge1xuICAgIHN3aXRjaCAoY2hlY2sua2luZCkge1xuICAgICAgY2FzZSBcIm1pblwiOlxuICAgICAgICBzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzKFxuICAgICAgICAgIHJlcyxcbiAgICAgICAgICBcIm1pbmltdW1cIixcbiAgICAgICAgICBjaGVjay52YWx1ZSxcbiAgICAgICAgICAvLyBUaGlzIGlzIGluIG1pbGxpc2Vjb25kc1xuICAgICAgICAgIGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgcmVmc1xuICAgICAgICApO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJtYXhcIjpcbiAgICAgICAgc2V0UmVzcG9uc2VWYWx1ZUFuZEVycm9ycyhcbiAgICAgICAgICByZXMsXG4gICAgICAgICAgXCJtYXhpbXVtXCIsXG4gICAgICAgICAgY2hlY2sudmFsdWUsXG4gICAgICAgICAgLy8gVGhpcyBpcyBpbiBtaWxsaXNlY29uZHNcbiAgICAgICAgICBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgIHJlZnNcbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXM7XG59O1xuXG4vLyBub2RlX21vZHVsZXMvem9kLXRvLWpzb24tc2NoZW1hL2Rpc3QvZXNtL3BhcnNlcnMvZGVmYXVsdC5qc1xuZnVuY3Rpb24gcGFyc2VEZWZhdWx0RGVmKF9kZWYsIHJlZnMpIHtcbiAgcmV0dXJuIHtcbiAgICAuLi5wYXJzZURlZihfZGVmLmlubmVyVHlwZS5fZGVmLCByZWZzKSxcbiAgICBkZWZhdWx0OiBfZGVmLmRlZmF1bHRWYWx1ZSgpXG4gIH07XG59XG5cbi8vIG5vZGVfbW9kdWxlcy96b2QtdG8tanNvbi1zY2hlbWEvZGlzdC9lc20vcGFyc2Vycy9lZmZlY3RzLmpzXG5mdW5jdGlvbiBwYXJzZUVmZmVjdHNEZWYoX2RlZiwgcmVmcykge1xuICByZXR1cm4gcmVmcy5lZmZlY3RTdHJhdGVneSA9PT0gXCJpbnB1dFwiID8gcGFyc2VEZWYoX2RlZi5zY2hlbWEuX2RlZiwgcmVmcykgOiBwYXJzZUFueURlZihyZWZzKTtcbn1cblxuLy8gbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9wYXJzZXJzL2VudW0uanNcbmZ1bmN0aW9uIHBhcnNlRW51bURlZihkZWYpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgIGVudW06IEFycmF5LmZyb20oZGVmLnZhbHVlcylcbiAgfTtcbn1cblxuLy8gbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9wYXJzZXJzL2ludGVyc2VjdGlvbi5qc1xudmFyIGlzSnNvblNjaGVtYTdBbGxPZlR5cGUgPSAodHlwZSkgPT4ge1xuICBpZiAoXCJ0eXBlXCIgaW4gdHlwZSAmJiB0eXBlLnR5cGUgPT09IFwic3RyaW5nXCIpXG4gICAgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gXCJhbGxPZlwiIGluIHR5cGU7XG59O1xuZnVuY3Rpb24gcGFyc2VJbnRlcnNlY3Rpb25EZWYoZGVmLCByZWZzKSB7XG4gIGNvbnN0IGFsbE9mID0gW1xuICAgIHBhcnNlRGVmKGRlZi5sZWZ0Ll9kZWYsIHtcbiAgICAgIC4uLnJlZnMsXG4gICAgICBjdXJyZW50UGF0aDogWy4uLnJlZnMuY3VycmVudFBhdGgsIFwiYWxsT2ZcIiwgXCIwXCJdXG4gICAgfSksXG4gICAgcGFyc2VEZWYoZGVmLnJpZ2h0Ll9kZWYsIHtcbiAgICAgIC4uLnJlZnMsXG4gICAgICBjdXJyZW50UGF0aDogWy4uLnJlZnMuY3VycmVudFBhdGgsIFwiYWxsT2ZcIiwgXCIxXCJdXG4gICAgfSlcbiAgXS5maWx0ZXIoKHgpID0+ICEheCk7XG4gIGxldCB1bmV2YWx1YXRlZFByb3BlcnRpZXMgPSByZWZzLnRhcmdldCA9PT0gXCJqc29uU2NoZW1hMjAxOS0wOVwiID8geyB1bmV2YWx1YXRlZFByb3BlcnRpZXM6IGZhbHNlIH0gOiB2b2lkIDA7XG4gIGNvbnN0IG1lcmdlZEFsbE9mID0gW107XG4gIGFsbE9mLmZvckVhY2goKHNjaGVtYSkgPT4ge1xuICAgIGlmIChpc0pzb25TY2hlbWE3QWxsT2ZUeXBlKHNjaGVtYSkpIHtcbiAgICAgIG1lcmdlZEFsbE9mLnB1c2goLi4uc2NoZW1hLmFsbE9mKTtcbiAgICAgIGlmIChzY2hlbWEudW5ldmFsdWF0ZWRQcm9wZXJ0aWVzID09PSB2b2lkIDApIHtcbiAgICAgICAgdW5ldmFsdWF0ZWRQcm9wZXJ0aWVzID0gdm9pZCAwO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgbmVzdGVkU2NoZW1hID0gc2NoZW1hO1xuICAgICAgaWYgKFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIiBpbiBzY2hlbWEgJiYgc2NoZW1hLmFkZGl0aW9uYWxQcm9wZXJ0aWVzID09PSBmYWxzZSkge1xuICAgICAgICBjb25zdCB7IGFkZGl0aW9uYWxQcm9wZXJ0aWVzLCAuLi5yZXN0IH0gPSBzY2hlbWE7XG4gICAgICAgIG5lc3RlZFNjaGVtYSA9IHJlc3Q7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1bmV2YWx1YXRlZFByb3BlcnRpZXMgPSB2b2lkIDA7XG4gICAgICB9XG4gICAgICBtZXJnZWRBbGxPZi5wdXNoKG5lc3RlZFNjaGVtYSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG1lcmdlZEFsbE9mLmxlbmd0aCA/IHtcbiAgICBhbGxPZjogbWVyZ2VkQWxsT2YsXG4gICAgLi4udW5ldmFsdWF0ZWRQcm9wZXJ0aWVzXG4gIH0gOiB2b2lkIDA7XG59XG5cbi8vIG5vZGVfbW9kdWxlcy96b2QtdG8tanNvbi1zY2hlbWEvZGlzdC9lc20vcGFyc2Vycy9saXRlcmFsLmpzXG5mdW5jdGlvbiBwYXJzZUxpdGVyYWxEZWYoZGVmLCByZWZzKSB7XG4gIGNvbnN0IHBhcnNlZFR5cGUgPSB0eXBlb2YgZGVmLnZhbHVlO1xuICBpZiAocGFyc2VkVHlwZSAhPT0gXCJiaWdpbnRcIiAmJiBwYXJzZWRUeXBlICE9PSBcIm51bWJlclwiICYmIHBhcnNlZFR5cGUgIT09IFwiYm9vbGVhblwiICYmIHBhcnNlZFR5cGUgIT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogQXJyYXkuaXNBcnJheShkZWYudmFsdWUpID8gXCJhcnJheVwiIDogXCJvYmplY3RcIlxuICAgIH07XG4gIH1cbiAgaWYgKHJlZnMudGFyZ2V0ID09PSBcIm9wZW5BcGkzXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogcGFyc2VkVHlwZSA9PT0gXCJiaWdpbnRcIiA/IFwiaW50ZWdlclwiIDogcGFyc2VkVHlwZSxcbiAgICAgIGVudW06IFtkZWYudmFsdWVdXG4gICAgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHR5cGU6IHBhcnNlZFR5cGUgPT09IFwiYmlnaW50XCIgPyBcImludGVnZXJcIiA6IHBhcnNlZFR5cGUsXG4gICAgY29uc3Q6IGRlZi52YWx1ZVxuICB9O1xufVxuXG4vLyBub2RlX21vZHVsZXMvem9kLXRvLWpzb24tc2NoZW1hL2Rpc3QvZXNtL3BhcnNlcnMvc3RyaW5nLmpzXG52YXIgZW1vamlSZWdleDIgPSB2b2lkIDA7XG52YXIgem9kUGF0dGVybnMgPSB7XG4gIC8qKlxuICAgKiBgY2Agd2FzIGNoYW5nZWQgdG8gYFtjQ11gIHRvIHJlcGxpY2F0ZSAvaSBmbGFnXG4gICAqL1xuICBjdWlkOiAvXltjQ11bXlxccy1dezgsfSQvLFxuICBjdWlkMjogL15bMC05YS16XSskLyxcbiAgdWxpZDogL15bMC05QS1ISktNTlAtVFYtWl17MjZ9JC8sXG4gIC8qKlxuICAgKiBgYS16YCB3YXMgYWRkZWQgdG8gcmVwbGljYXRlIC9pIGZsYWdcbiAgICovXG4gIGVtYWlsOiAvXig/IVxcLikoPyEuKlxcLlxcLikoW2EtekEtWjAtOV8nK1xcLVxcLl0qKVthLXpBLVowLTlfKy1dQChbYS16QS1aMC05XVthLXpBLVowLTlcXC1dKlxcLikrW2EtekEtWl17Mix9JC8sXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RlZCBhIHZhbGlkIFVuaWNvZGUgUmVnRXhwXG4gICAqXG4gICAqIExhemlseSBpbnN0YW50aWF0ZSBzaW5jZSB0aGlzIHR5cGUgb2YgcmVnZXggaXNuJ3Qgc3VwcG9ydGVkXG4gICAqIGluIGFsbCBlbnZzIChlLmcuIFJlYWN0IE5hdGl2ZSkuXG4gICAqXG4gICAqIFNlZTpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL2NvbGluaGFja3Mvem9kL2lzc3Vlcy8yNDMzXG4gICAqIEZpeCBpbiBab2Q6XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jb2xpbmhhY2tzL3pvZC9jb21taXQvOTM0MGZkNTFlNDg1NzZhNzVhZGM5MTliZmY2NWRiYzRhNWQ0Yzk5YlxuICAgKi9cbiAgZW1vamk6ICgpID0+IHtcbiAgICBpZiAoZW1vamlSZWdleDIgPT09IHZvaWQgMCkge1xuICAgICAgZW1vamlSZWdleDIgPSBSZWdFeHAoXCJeKFxcXFxwe0V4dGVuZGVkX1BpY3RvZ3JhcGhpY318XFxcXHB7RW1vamlfQ29tcG9uZW50fSkrJFwiLCBcInVcIik7XG4gICAgfVxuICAgIHJldHVybiBlbW9qaVJlZ2V4MjtcbiAgfSxcbiAgLyoqXG4gICAqIFVudXNlZFxuICAgKi9cbiAgdXVpZDogL15bMC05YS1mQS1GXXs4fVxcYi1bMC05YS1mQS1GXXs0fVxcYi1bMC05YS1mQS1GXXs0fVxcYi1bMC05YS1mQS1GXXs0fVxcYi1bMC05YS1mQS1GXXsxMn0kLyxcbiAgLyoqXG4gICAqIFVudXNlZFxuICAgKi9cbiAgaXB2NDogL14oPzooPzoyNVswLTVdfDJbMC00XVswLTldfDFbMC05XVswLTldfFsxLTldWzAtOV18WzAtOV0pXFwuKXszfSg/OjI1WzAtNV18MlswLTRdWzAtOV18MVswLTldWzAtOV18WzEtOV1bMC05XXxbMC05XSkkLyxcbiAgaXB2NENpZHI6IC9eKD86KD86MjVbMC01XXwyWzAtNF1bMC05XXwxWzAtOV1bMC05XXxbMS05XVswLTldfFswLTldKVxcLil7M30oPzoyNVswLTVdfDJbMC00XVswLTldfDFbMC05XVswLTldfFsxLTldWzAtOV18WzAtOV0pXFwvKDNbMC0yXXxbMTJdP1swLTldKSQvLFxuICAvKipcbiAgICogVW51c2VkXG4gICAqL1xuICBpcHY2OiAvXigoW2EtZjAtOV17MSw0fTopezd9fDo6KFthLWYwLTldezEsNH06KXswLDZ9fChbYS1mMC05XXsxLDR9Oil7MX06KFthLWYwLTldezEsNH06KXswLDV9fChbYS1mMC05XXsxLDR9Oil7Mn06KFthLWYwLTldezEsNH06KXswLDR9fChbYS1mMC05XXsxLDR9Oil7M306KFthLWYwLTldezEsNH06KXswLDN9fChbYS1mMC05XXsxLDR9Oil7NH06KFthLWYwLTldezEsNH06KXswLDJ9fChbYS1mMC05XXsxLDR9Oil7NX06KFthLWYwLTldezEsNH06KXswLDF9KShbYS1mMC05XXsxLDR9fCgoKDI1WzAtNV0pfCgyWzAtNF1bMC05XSl8KDFbMC05XXsyfSl8KFswLTldezEsMn0pKVxcLil7M30oKDI1WzAtNV0pfCgyWzAtNF1bMC05XSl8KDFbMC05XXsyfSl8KFswLTldezEsMn0pKSkkLyxcbiAgaXB2NkNpZHI6IC9eKChbMC05YS1mQS1GXXsxLDR9Oil7Nyw3fVswLTlhLWZBLUZdezEsNH18KFswLTlhLWZBLUZdezEsNH06KXsxLDd9OnwoWzAtOWEtZkEtRl17MSw0fTopezEsNn06WzAtOWEtZkEtRl17MSw0fXwoWzAtOWEtZkEtRl17MSw0fTopezEsNX0oOlswLTlhLWZBLUZdezEsNH0pezEsMn18KFswLTlhLWZBLUZdezEsNH06KXsxLDR9KDpbMC05YS1mQS1GXXsxLDR9KXsxLDN9fChbMC05YS1mQS1GXXsxLDR9Oil7MSwzfSg6WzAtOWEtZkEtRl17MSw0fSl7MSw0fXwoWzAtOWEtZkEtRl17MSw0fTopezEsMn0oOlswLTlhLWZBLUZdezEsNH0pezEsNX18WzAtOWEtZkEtRl17MSw0fTooKDpbMC05YS1mQS1GXXsxLDR9KXsxLDZ9KXw6KCg6WzAtOWEtZkEtRl17MSw0fSl7MSw3fXw6KXxmZTgwOig6WzAtOWEtZkEtRl17MCw0fSl7MCw0fSVbMC05YS16QS1aXXsxLH18OjooZmZmZig6MHsxLDR9KXswLDF9Oil7MCwxfSgoMjVbMC01XXwoMlswLTRdfDF7MCwxfVswLTldKXswLDF9WzAtOV0pXFwuKXszLDN9KDI1WzAtNV18KDJbMC00XXwxezAsMX1bMC05XSl7MCwxfVswLTldKXwoWzAtOWEtZkEtRl17MSw0fTopezEsNH06KCgyNVswLTVdfCgyWzAtNF18MXswLDF9WzAtOV0pezAsMX1bMC05XSlcXC4pezMsM30oMjVbMC01XXwoMlswLTRdfDF7MCwxfVswLTldKXswLDF9WzAtOV0pKVxcLygxMlswLThdfDFbMDFdWzAtOV18WzEtOV0/WzAtOV0pJC8sXG4gIGJhc2U2NDogL14oWzAtOWEtekEtWisvXXs0fSkqKChbMC05YS16QS1aKy9dezJ9PT0pfChbMC05YS16QS1aKy9dezN9PSkpPyQvLFxuICBiYXNlNjR1cmw6IC9eKFswLTlhLXpBLVotX117NH0pKigoWzAtOWEtekEtWi1fXXsyfSg9PSk/KXwoWzAtOWEtekEtWi1fXXszfSg9KT8pKT8kLyxcbiAgbmFub2lkOiAvXlthLXpBLVowLTlfLV17MjF9JC8sXG4gIGp3dDogL15bQS1aYS16MC05LV9dK1xcLltBLVphLXowLTktX10rXFwuW0EtWmEtejAtOS1fXSokL1xufTtcbmZ1bmN0aW9uIHBhcnNlU3RyaW5nRGVmKGRlZiwgcmVmcykge1xuICBjb25zdCByZXMgPSB7XG4gICAgdHlwZTogXCJzdHJpbmdcIlxuICB9O1xuICBpZiAoZGVmLmNoZWNrcykge1xuICAgIGZvciAoY29uc3QgY2hlY2sgb2YgZGVmLmNoZWNrcykge1xuICAgICAgc3dpdGNoIChjaGVjay5raW5kKSB7XG4gICAgICAgIGNhc2UgXCJtaW5cIjpcbiAgICAgICAgICBzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzKHJlcywgXCJtaW5MZW5ndGhcIiwgdHlwZW9mIHJlcy5taW5MZW5ndGggPT09IFwibnVtYmVyXCIgPyBNYXRoLm1heChyZXMubWluTGVuZ3RoLCBjaGVjay52YWx1ZSkgOiBjaGVjay52YWx1ZSwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJtYXhcIjpcbiAgICAgICAgICBzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzKHJlcywgXCJtYXhMZW5ndGhcIiwgdHlwZW9mIHJlcy5tYXhMZW5ndGggPT09IFwibnVtYmVyXCIgPyBNYXRoLm1pbihyZXMubWF4TGVuZ3RoLCBjaGVjay52YWx1ZSkgOiBjaGVjay52YWx1ZSwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJlbWFpbFwiOlxuICAgICAgICAgIHN3aXRjaCAocmVmcy5lbWFpbFN0cmF0ZWd5KSB7XG4gICAgICAgICAgICBjYXNlIFwiZm9ybWF0OmVtYWlsXCI6XG4gICAgICAgICAgICAgIGFkZEZvcm1hdChyZXMsIFwiZW1haWxcIiwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImZvcm1hdDppZG4tZW1haWxcIjpcbiAgICAgICAgICAgICAgYWRkRm9ybWF0KHJlcywgXCJpZG4tZW1haWxcIiwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInBhdHRlcm46em9kXCI6XG4gICAgICAgICAgICAgIGFkZFBhdHRlcm4ocmVzLCB6b2RQYXR0ZXJucy5lbWFpbCwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcInVybFwiOlxuICAgICAgICAgIGFkZEZvcm1hdChyZXMsIFwidXJpXCIsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwidXVpZFwiOlxuICAgICAgICAgIGFkZEZvcm1hdChyZXMsIFwidXVpZFwiLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcInJlZ2V4XCI6XG4gICAgICAgICAgYWRkUGF0dGVybihyZXMsIGNoZWNrLnJlZ2V4LCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImN1aWRcIjpcbiAgICAgICAgICBhZGRQYXR0ZXJuKHJlcywgem9kUGF0dGVybnMuY3VpZCwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJjdWlkMlwiOlxuICAgICAgICAgIGFkZFBhdHRlcm4ocmVzLCB6b2RQYXR0ZXJucy5jdWlkMiwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJzdGFydHNXaXRoXCI6XG4gICAgICAgICAgYWRkUGF0dGVybihyZXMsIFJlZ0V4cChgXiR7ZXNjYXBlTGl0ZXJhbENoZWNrVmFsdWUoY2hlY2sudmFsdWUsIHJlZnMpfWApLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImVuZHNXaXRoXCI6XG4gICAgICAgICAgYWRkUGF0dGVybihyZXMsIFJlZ0V4cChgJHtlc2NhcGVMaXRlcmFsQ2hlY2tWYWx1ZShjaGVjay52YWx1ZSwgcmVmcyl9JGApLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImRhdGV0aW1lXCI6XG4gICAgICAgICAgYWRkRm9ybWF0KHJlcywgXCJkYXRlLXRpbWVcIiwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJkYXRlXCI6XG4gICAgICAgICAgYWRkRm9ybWF0KHJlcywgXCJkYXRlXCIsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwidGltZVwiOlxuICAgICAgICAgIGFkZEZvcm1hdChyZXMsIFwidGltZVwiLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImR1cmF0aW9uXCI6XG4gICAgICAgICAgYWRkRm9ybWF0KHJlcywgXCJkdXJhdGlvblwiLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImxlbmd0aFwiOlxuICAgICAgICAgIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMocmVzLCBcIm1pbkxlbmd0aFwiLCB0eXBlb2YgcmVzLm1pbkxlbmd0aCA9PT0gXCJudW1iZXJcIiA/IE1hdGgubWF4KHJlcy5taW5MZW5ndGgsIGNoZWNrLnZhbHVlKSA6IGNoZWNrLnZhbHVlLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICBzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzKHJlcywgXCJtYXhMZW5ndGhcIiwgdHlwZW9mIHJlcy5tYXhMZW5ndGggPT09IFwibnVtYmVyXCIgPyBNYXRoLm1pbihyZXMubWF4TGVuZ3RoLCBjaGVjay52YWx1ZSkgOiBjaGVjay52YWx1ZSwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJpbmNsdWRlc1wiOiB7XG4gICAgICAgICAgYWRkUGF0dGVybihyZXMsIFJlZ0V4cChlc2NhcGVMaXRlcmFsQ2hlY2tWYWx1ZShjaGVjay52YWx1ZSwgcmVmcykpLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiaXBcIjoge1xuICAgICAgICAgIGlmIChjaGVjay52ZXJzaW9uICE9PSBcInY2XCIpIHtcbiAgICAgICAgICAgIGFkZEZvcm1hdChyZXMsIFwiaXB2NFwiLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGNoZWNrLnZlcnNpb24gIT09IFwidjRcIikge1xuICAgICAgICAgICAgYWRkRm9ybWF0KHJlcywgXCJpcHY2XCIsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiYmFzZTY0dXJsXCI6XG4gICAgICAgICAgYWRkUGF0dGVybihyZXMsIHpvZFBhdHRlcm5zLmJhc2U2NHVybCwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJqd3RcIjpcbiAgICAgICAgICBhZGRQYXR0ZXJuKHJlcywgem9kUGF0dGVybnMuand0LCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImNpZHJcIjoge1xuICAgICAgICAgIGlmIChjaGVjay52ZXJzaW9uICE9PSBcInY2XCIpIHtcbiAgICAgICAgICAgIGFkZFBhdHRlcm4ocmVzLCB6b2RQYXR0ZXJucy5pcHY0Q2lkciwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjaGVjay52ZXJzaW9uICE9PSBcInY0XCIpIHtcbiAgICAgICAgICAgIGFkZFBhdHRlcm4ocmVzLCB6b2RQYXR0ZXJucy5pcHY2Q2lkciwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJlbW9qaVwiOlxuICAgICAgICAgIGFkZFBhdHRlcm4ocmVzLCB6b2RQYXR0ZXJucy5lbW9qaSgpLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcInVsaWRcIjoge1xuICAgICAgICAgIGFkZFBhdHRlcm4ocmVzLCB6b2RQYXR0ZXJucy51bGlkLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiYmFzZTY0XCI6IHtcbiAgICAgICAgICBzd2l0Y2ggKHJlZnMuYmFzZTY0U3RyYXRlZ3kpIHtcbiAgICAgICAgICAgIGNhc2UgXCJmb3JtYXQ6YmluYXJ5XCI6IHtcbiAgICAgICAgICAgICAgYWRkRm9ybWF0KHJlcywgXCJiaW5hcnlcIiwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBcImNvbnRlbnRFbmNvZGluZzpiYXNlNjRcIjoge1xuICAgICAgICAgICAgICBzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzKHJlcywgXCJjb250ZW50RW5jb2RpbmdcIiwgXCJiYXNlNjRcIiwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBcInBhdHRlcm46em9kXCI6IHtcbiAgICAgICAgICAgICAgYWRkUGF0dGVybihyZXMsIHpvZFBhdHRlcm5zLmJhc2U2NCwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwibmFub2lkXCI6IHtcbiAgICAgICAgICBhZGRQYXR0ZXJuKHJlcywgem9kUGF0dGVybnMubmFub2lkLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwidG9Mb3dlckNhc2VcIjpcbiAgICAgICAgY2FzZSBcInRvVXBwZXJDYXNlXCI6XG4gICAgICAgIGNhc2UgXCJ0cmltXCI6XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgLyogQF9fUFVSRV9fICovICgoXzIpID0+IHtcbiAgICAgICAgICB9KShjaGVjayk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiByZXM7XG59XG5mdW5jdGlvbiBlc2NhcGVMaXRlcmFsQ2hlY2tWYWx1ZShsaXRlcmFsLCByZWZzKSB7XG4gIHJldHVybiByZWZzLnBhdHRlcm5TdHJhdGVneSA9PT0gXCJlc2NhcGVcIiA/IGVzY2FwZU5vbkFscGhhTnVtZXJpYyhsaXRlcmFsKSA6IGxpdGVyYWw7XG59XG52YXIgQUxQSEFfTlVNRVJJQyA9IG5ldyBTZXQoXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnh5ejAxMjM0NTY3ODlcIik7XG5mdW5jdGlvbiBlc2NhcGVOb25BbHBoYU51bWVyaWMoc291cmNlKSB7XG4gIGxldCByZXN1bHQgPSBcIlwiO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHNvdXJjZS5sZW5ndGg7IGkrKykge1xuICAgIGlmICghQUxQSEFfTlVNRVJJQy5oYXMoc291cmNlW2ldKSkge1xuICAgICAgcmVzdWx0ICs9IFwiXFxcXFwiO1xuICAgIH1cbiAgICByZXN1bHQgKz0gc291cmNlW2ldO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBhZGRGb3JtYXQoc2NoZW1hLCB2YWx1ZSwgbWVzc2FnZSwgcmVmcykge1xuICBpZiAoc2NoZW1hLmZvcm1hdCB8fCBzY2hlbWEuYW55T2Y/LnNvbWUoKHgpID0+IHguZm9ybWF0KSkge1xuICAgIGlmICghc2NoZW1hLmFueU9mKSB7XG4gICAgICBzY2hlbWEuYW55T2YgPSBbXTtcbiAgICB9XG4gICAgaWYgKHNjaGVtYS5mb3JtYXQpIHtcbiAgICAgIHNjaGVtYS5hbnlPZi5wdXNoKHtcbiAgICAgICAgZm9ybWF0OiBzY2hlbWEuZm9ybWF0LFxuICAgICAgICAuLi5zY2hlbWEuZXJyb3JNZXNzYWdlICYmIHJlZnMuZXJyb3JNZXNzYWdlcyAmJiB7XG4gICAgICAgICAgZXJyb3JNZXNzYWdlOiB7IGZvcm1hdDogc2NoZW1hLmVycm9yTWVzc2FnZS5mb3JtYXQgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGRlbGV0ZSBzY2hlbWEuZm9ybWF0O1xuICAgICAgaWYgKHNjaGVtYS5lcnJvck1lc3NhZ2UpIHtcbiAgICAgICAgZGVsZXRlIHNjaGVtYS5lcnJvck1lc3NhZ2UuZm9ybWF0O1xuICAgICAgICBpZiAoT2JqZWN0LmtleXMoc2NoZW1hLmVycm9yTWVzc2FnZSkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgZGVsZXRlIHNjaGVtYS5lcnJvck1lc3NhZ2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgc2NoZW1hLmFueU9mLnB1c2goe1xuICAgICAgZm9ybWF0OiB2YWx1ZSxcbiAgICAgIC4uLm1lc3NhZ2UgJiYgcmVmcy5lcnJvck1lc3NhZ2VzICYmIHsgZXJyb3JNZXNzYWdlOiB7IGZvcm1hdDogbWVzc2FnZSB9IH1cbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzKHNjaGVtYSwgXCJmb3JtYXRcIiwgdmFsdWUsIG1lc3NhZ2UsIHJlZnMpO1xuICB9XG59XG5mdW5jdGlvbiBhZGRQYXR0ZXJuKHNjaGVtYSwgcmVnZXgsIG1lc3NhZ2UsIHJlZnMpIHtcbiAgaWYgKHNjaGVtYS5wYXR0ZXJuIHx8IHNjaGVtYS5hbGxPZj8uc29tZSgoeCkgPT4geC5wYXR0ZXJuKSkge1xuICAgIGlmICghc2NoZW1hLmFsbE9mKSB7XG4gICAgICBzY2hlbWEuYWxsT2YgPSBbXTtcbiAgICB9XG4gICAgaWYgKHNjaGVtYS5wYXR0ZXJuKSB7XG4gICAgICBzY2hlbWEuYWxsT2YucHVzaCh7XG4gICAgICAgIHBhdHRlcm46IHNjaGVtYS5wYXR0ZXJuLFxuICAgICAgICAuLi5zY2hlbWEuZXJyb3JNZXNzYWdlICYmIHJlZnMuZXJyb3JNZXNzYWdlcyAmJiB7XG4gICAgICAgICAgZXJyb3JNZXNzYWdlOiB7IHBhdHRlcm46IHNjaGVtYS5lcnJvck1lc3NhZ2UucGF0dGVybiB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgZGVsZXRlIHNjaGVtYS5wYXR0ZXJuO1xuICAgICAgaWYgKHNjaGVtYS5lcnJvck1lc3NhZ2UpIHtcbiAgICAgICAgZGVsZXRlIHNjaGVtYS5lcnJvck1lc3NhZ2UucGF0dGVybjtcbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKHNjaGVtYS5lcnJvck1lc3NhZ2UpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGRlbGV0ZSBzY2hlbWEuZXJyb3JNZXNzYWdlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHNjaGVtYS5hbGxPZi5wdXNoKHtcbiAgICAgIHBhdHRlcm46IHN0cmluZ2lmeVJlZ0V4cFdpdGhGbGFncyhyZWdleCwgcmVmcyksXG4gICAgICAuLi5tZXNzYWdlICYmIHJlZnMuZXJyb3JNZXNzYWdlcyAmJiB7IGVycm9yTWVzc2FnZTogeyBwYXR0ZXJuOiBtZXNzYWdlIH0gfVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMoc2NoZW1hLCBcInBhdHRlcm5cIiwgc3RyaW5naWZ5UmVnRXhwV2l0aEZsYWdzKHJlZ2V4LCByZWZzKSwgbWVzc2FnZSwgcmVmcyk7XG4gIH1cbn1cbmZ1bmN0aW9uIHN0cmluZ2lmeVJlZ0V4cFdpdGhGbGFncyhyZWdleCwgcmVmcykge1xuICBpZiAoIXJlZnMuYXBwbHlSZWdleEZsYWdzIHx8ICFyZWdleC5mbGFncykge1xuICAgIHJldHVybiByZWdleC5zb3VyY2U7XG4gIH1cbiAgY29uc3QgZmxhZ3MgPSB7XG4gICAgaTogcmVnZXguZmxhZ3MuaW5jbHVkZXMoXCJpXCIpLFxuICAgIG06IHJlZ2V4LmZsYWdzLmluY2x1ZGVzKFwibVwiKSxcbiAgICBzOiByZWdleC5mbGFncy5pbmNsdWRlcyhcInNcIilcbiAgICAvLyBgLmAgbWF0Y2hlcyBuZXdsaW5lc1xuICB9O1xuICBjb25zdCBzb3VyY2UgPSBmbGFncy5pID8gcmVnZXguc291cmNlLnRvTG93ZXJDYXNlKCkgOiByZWdleC5zb3VyY2U7XG4gIGxldCBwYXR0ZXJuID0gXCJcIjtcbiAgbGV0IGlzRXNjYXBlZCA9IGZhbHNlO1xuICBsZXQgaW5DaGFyR3JvdXAgPSBmYWxzZTtcbiAgbGV0IGluQ2hhclJhbmdlID0gZmFsc2U7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc291cmNlLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGlzRXNjYXBlZCkge1xuICAgICAgcGF0dGVybiArPSBzb3VyY2VbaV07XG4gICAgICBpc0VzY2FwZWQgPSBmYWxzZTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoZmxhZ3MuaSkge1xuICAgICAgaWYgKGluQ2hhckdyb3VwKSB7XG4gICAgICAgIGlmIChzb3VyY2VbaV0ubWF0Y2goL1thLXpdLykpIHtcbiAgICAgICAgICBpZiAoaW5DaGFyUmFuZ2UpIHtcbiAgICAgICAgICAgIHBhdHRlcm4gKz0gc291cmNlW2ldO1xuICAgICAgICAgICAgcGF0dGVybiArPSBgJHtzb3VyY2VbaSAtIDJdfS0ke3NvdXJjZVtpXX1gLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICBpbkNoYXJSYW5nZSA9IGZhbHNlO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc291cmNlW2kgKyAxXSA9PT0gXCItXCIgJiYgc291cmNlW2kgKyAyXT8ubWF0Y2goL1thLXpdLykpIHtcbiAgICAgICAgICAgIHBhdHRlcm4gKz0gc291cmNlW2ldO1xuICAgICAgICAgICAgaW5DaGFyUmFuZ2UgPSB0cnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXR0ZXJuICs9IGAke3NvdXJjZVtpXX0ke3NvdXJjZVtpXS50b1VwcGVyQ2FzZSgpfWA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHNvdXJjZVtpXS5tYXRjaCgvW2Etel0vKSkge1xuICAgICAgICBwYXR0ZXJuICs9IGBbJHtzb3VyY2VbaV19JHtzb3VyY2VbaV0udG9VcHBlckNhc2UoKX1dYDtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChmbGFncy5tKSB7XG4gICAgICBpZiAoc291cmNlW2ldID09PSBcIl5cIikge1xuICAgICAgICBwYXR0ZXJuICs9IGAoXnwoPzw9W1xcclxuXSkpYDtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9IGVsc2UgaWYgKHNvdXJjZVtpXSA9PT0gXCIkXCIpIHtcbiAgICAgICAgcGF0dGVybiArPSBgKCR8KD89W1xcclxuXSkpYDtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChmbGFncy5zICYmIHNvdXJjZVtpXSA9PT0gXCIuXCIpIHtcbiAgICAgIHBhdHRlcm4gKz0gaW5DaGFyR3JvdXAgPyBgJHtzb3VyY2VbaV19XFxyXG5gIDogYFske3NvdXJjZVtpXX1cXHJcbl1gO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHBhdHRlcm4gKz0gc291cmNlW2ldO1xuICAgIGlmIChzb3VyY2VbaV0gPT09IFwiXFxcXFwiKSB7XG4gICAgICBpc0VzY2FwZWQgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAoaW5DaGFyR3JvdXAgJiYgc291cmNlW2ldID09PSBcIl1cIikge1xuICAgICAgaW5DaGFyR3JvdXAgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKCFpbkNoYXJHcm91cCAmJiBzb3VyY2VbaV0gPT09IFwiW1wiKSB7XG4gICAgICBpbkNoYXJHcm91cCA9IHRydWU7XG4gICAgfVxuICB9XG4gIHRyeSB7XG4gICAgbmV3IFJlZ0V4cChwYXR0ZXJuKTtcbiAgfSBjYXRjaCB7XG4gICAgY29uc29sZS53YXJuKGBDb3VsZCBub3QgY29udmVydCByZWdleCBwYXR0ZXJuIGF0ICR7cmVmcy5jdXJyZW50UGF0aC5qb2luKFwiL1wiKX0gdG8gYSBmbGFnLWluZGVwZW5kZW50IGZvcm0hIEZhbGxpbmcgYmFjayB0byB0aGUgZmxhZy1pZ25vcmFudCBzb3VyY2VgKTtcbiAgICByZXR1cm4gcmVnZXguc291cmNlO1xuICB9XG4gIHJldHVybiBwYXR0ZXJuO1xufVxuXG4vLyBub2RlX21vZHVsZXMvem9kLXRvLWpzb24tc2NoZW1hL2Rpc3QvZXNtL3BhcnNlcnMvcmVjb3JkLmpzXG5mdW5jdGlvbiBwYXJzZVJlY29yZERlZihkZWYsIHJlZnMpIHtcbiAgaWYgKHJlZnMudGFyZ2V0ID09PSBcIm9wZW5BaVwiKSB7XG4gICAgY29uc29sZS53YXJuKFwiV2FybmluZzogT3BlbkFJIG1heSBub3Qgc3VwcG9ydCByZWNvcmRzIGluIHNjaGVtYXMhIFRyeSBhbiBhcnJheSBvZiBrZXktdmFsdWUgcGFpcnMgaW5zdGVhZC5cIik7XG4gIH1cbiAgaWYgKHJlZnMudGFyZ2V0ID09PSBcIm9wZW5BcGkzXCIgJiYgZGVmLmtleVR5cGU/Ll9kZWYudHlwZU5hbWUgPT09IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RFbnVtKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgICByZXF1aXJlZDogZGVmLmtleVR5cGUuX2RlZi52YWx1ZXMsXG4gICAgICBwcm9wZXJ0aWVzOiBkZWYua2V5VHlwZS5fZGVmLnZhbHVlcy5yZWR1Y2UoKGFjYywga2V5KSA9PiAoe1xuICAgICAgICAuLi5hY2MsXG4gICAgICAgIFtrZXldOiBwYXJzZURlZihkZWYudmFsdWVUeXBlLl9kZWYsIHtcbiAgICAgICAgICAuLi5yZWZzLFxuICAgICAgICAgIGN1cnJlbnRQYXRoOiBbLi4ucmVmcy5jdXJyZW50UGF0aCwgXCJwcm9wZXJ0aWVzXCIsIGtleV1cbiAgICAgICAgfSkgPz8gcGFyc2VBbnlEZWYocmVmcylcbiAgICAgIH0pLCB7fSksXG4gICAgICBhZGRpdGlvbmFsUHJvcGVydGllczogcmVmcy5yZWplY3RlZEFkZGl0aW9uYWxQcm9wZXJ0aWVzXG4gICAgfTtcbiAgfVxuICBjb25zdCBzY2hlbWEgPSB7XG4gICAgdHlwZTogXCJvYmplY3RcIixcbiAgICBhZGRpdGlvbmFsUHJvcGVydGllczogcGFyc2VEZWYoZGVmLnZhbHVlVHlwZS5fZGVmLCB7XG4gICAgICAuLi5yZWZzLFxuICAgICAgY3VycmVudFBhdGg6IFsuLi5yZWZzLmN1cnJlbnRQYXRoLCBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCJdXG4gICAgfSkgPz8gcmVmcy5hbGxvd2VkQWRkaXRpb25hbFByb3BlcnRpZXNcbiAgfTtcbiAgaWYgKHJlZnMudGFyZ2V0ID09PSBcIm9wZW5BcGkzXCIpIHtcbiAgICByZXR1cm4gc2NoZW1hO1xuICB9XG4gIGlmIChkZWYua2V5VHlwZT8uX2RlZi50eXBlTmFtZSA9PT0gWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZFN0cmluZyAmJiBkZWYua2V5VHlwZS5fZGVmLmNoZWNrcz8ubGVuZ3RoKSB7XG4gICAgY29uc3QgeyB0eXBlLCAuLi5rZXlUeXBlIH0gPSBwYXJzZVN0cmluZ0RlZihkZWYua2V5VHlwZS5fZGVmLCByZWZzKTtcbiAgICByZXR1cm4ge1xuICAgICAgLi4uc2NoZW1hLFxuICAgICAgcHJvcGVydHlOYW1lczoga2V5VHlwZVxuICAgIH07XG4gIH0gZWxzZSBpZiAoZGVmLmtleVR5cGU/Ll9kZWYudHlwZU5hbWUgPT09IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RFbnVtKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnNjaGVtYSxcbiAgICAgIHByb3BlcnR5TmFtZXM6IHtcbiAgICAgICAgZW51bTogZGVmLmtleVR5cGUuX2RlZi52YWx1ZXNcbiAgICAgIH1cbiAgICB9O1xuICB9IGVsc2UgaWYgKGRlZi5rZXlUeXBlPy5fZGVmLnR5cGVOYW1lID09PSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kQnJhbmRlZCAmJiBkZWYua2V5VHlwZS5fZGVmLnR5cGUuX2RlZi50eXBlTmFtZSA9PT0gWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZFN0cmluZyAmJiBkZWYua2V5VHlwZS5fZGVmLnR5cGUuX2RlZi5jaGVja3M/Lmxlbmd0aCkge1xuICAgIGNvbnN0IHsgdHlwZSwgLi4ua2V5VHlwZSB9ID0gcGFyc2VCcmFuZGVkRGVmKGRlZi5rZXlUeXBlLl9kZWYsIHJlZnMpO1xuICAgIHJldHVybiB7XG4gICAgICAuLi5zY2hlbWEsXG4gICAgICBwcm9wZXJ0eU5hbWVzOiBrZXlUeXBlXG4gICAgfTtcbiAgfVxuICByZXR1cm4gc2NoZW1hO1xufVxuXG4vLyBub2RlX21vZHVsZXMvem9kLXRvLWpzb24tc2NoZW1hL2Rpc3QvZXNtL3BhcnNlcnMvbWFwLmpzXG5mdW5jdGlvbiBwYXJzZU1hcERlZihkZWYsIHJlZnMpIHtcbiAgaWYgKHJlZnMubWFwU3RyYXRlZ3kgPT09IFwicmVjb3JkXCIpIHtcbiAgICByZXR1cm4gcGFyc2VSZWNvcmREZWYoZGVmLCByZWZzKTtcbiAgfVxuICBjb25zdCBrZXlzID0gcGFyc2VEZWYoZGVmLmtleVR5cGUuX2RlZiwge1xuICAgIC4uLnJlZnMsXG4gICAgY3VycmVudFBhdGg6IFsuLi5yZWZzLmN1cnJlbnRQYXRoLCBcIml0ZW1zXCIsIFwiaXRlbXNcIiwgXCIwXCJdXG4gIH0pIHx8IHBhcnNlQW55RGVmKHJlZnMpO1xuICBjb25zdCB2YWx1ZXMgPSBwYXJzZURlZihkZWYudmFsdWVUeXBlLl9kZWYsIHtcbiAgICAuLi5yZWZzLFxuICAgIGN1cnJlbnRQYXRoOiBbLi4ucmVmcy5jdXJyZW50UGF0aCwgXCJpdGVtc1wiLCBcIml0ZW1zXCIsIFwiMVwiXVxuICB9KSB8fCBwYXJzZUFueURlZihyZWZzKTtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBcImFycmF5XCIsXG4gICAgbWF4SXRlbXM6IDEyNSxcbiAgICBpdGVtczoge1xuICAgICAgdHlwZTogXCJhcnJheVwiLFxuICAgICAgaXRlbXM6IFtrZXlzLCB2YWx1ZXNdLFxuICAgICAgbWluSXRlbXM6IDIsXG4gICAgICBtYXhJdGVtczogMlxuICAgIH1cbiAgfTtcbn1cblxuLy8gbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9wYXJzZXJzL25hdGl2ZUVudW0uanNcbmZ1bmN0aW9uIHBhcnNlTmF0aXZlRW51bURlZihkZWYpIHtcbiAgY29uc3Qgb2JqZWN0ID0gZGVmLnZhbHVlcztcbiAgY29uc3QgYWN0dWFsS2V5cyA9IE9iamVjdC5rZXlzKGRlZi52YWx1ZXMpLmZpbHRlcigoa2V5KSA9PiB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmplY3Rbb2JqZWN0W2tleV1dICE9PSBcIm51bWJlclwiO1xuICB9KTtcbiAgY29uc3QgYWN0dWFsVmFsdWVzID0gYWN0dWFsS2V5cy5tYXAoKGtleSkgPT4gb2JqZWN0W2tleV0pO1xuICBjb25zdCBwYXJzZWRUeXBlcyA9IEFycmF5LmZyb20obmV3IFNldChhY3R1YWxWYWx1ZXMubWFwKCh2YWx1ZXMpID0+IHR5cGVvZiB2YWx1ZXMpKSk7XG4gIHJldHVybiB7XG4gICAgdHlwZTogcGFyc2VkVHlwZXMubGVuZ3RoID09PSAxID8gcGFyc2VkVHlwZXNbMF0gPT09IFwic3RyaW5nXCIgPyBcInN0cmluZ1wiIDogXCJudW1iZXJcIiA6IFtcInN0cmluZ1wiLCBcIm51bWJlclwiXSxcbiAgICBlbnVtOiBhY3R1YWxWYWx1ZXNcbiAgfTtcbn1cblxuLy8gbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9wYXJzZXJzL25ldmVyLmpzXG5mdW5jdGlvbiBwYXJzZU5ldmVyRGVmKHJlZnMpIHtcbiAgcmV0dXJuIHJlZnMudGFyZ2V0ID09PSBcIm9wZW5BaVwiID8gdm9pZCAwIDoge1xuICAgIG5vdDogcGFyc2VBbnlEZWYoe1xuICAgICAgLi4ucmVmcyxcbiAgICAgIGN1cnJlbnRQYXRoOiBbLi4ucmVmcy5jdXJyZW50UGF0aCwgXCJub3RcIl1cbiAgICB9KVxuICB9O1xufVxuXG4vLyBub2RlX21vZHVsZXMvem9kLXRvLWpzb24tc2NoZW1hL2Rpc3QvZXNtL3BhcnNlcnMvbnVsbC5qc1xuZnVuY3Rpb24gcGFyc2VOdWxsRGVmKHJlZnMpIHtcbiAgcmV0dXJuIHJlZnMudGFyZ2V0ID09PSBcIm9wZW5BcGkzXCIgPyB7XG4gICAgZW51bTogW1wibnVsbFwiXSxcbiAgICBudWxsYWJsZTogdHJ1ZVxuICB9IDoge1xuICAgIHR5cGU6IFwibnVsbFwiXG4gIH07XG59XG5cbi8vIG5vZGVfbW9kdWxlcy96b2QtdG8tanNvbi1zY2hlbWEvZGlzdC9lc20vcGFyc2Vycy91bmlvbi5qc1xudmFyIHByaW1pdGl2ZU1hcHBpbmdzID0ge1xuICBab2RTdHJpbmc6IFwic3RyaW5nXCIsXG4gIFpvZE51bWJlcjogXCJudW1iZXJcIixcbiAgWm9kQmlnSW50OiBcImludGVnZXJcIixcbiAgWm9kQm9vbGVhbjogXCJib29sZWFuXCIsXG4gIFpvZE51bGw6IFwibnVsbFwiXG59O1xuZnVuY3Rpb24gcGFyc2VVbmlvbkRlZihkZWYsIHJlZnMpIHtcbiAgaWYgKHJlZnMudGFyZ2V0ID09PSBcIm9wZW5BcGkzXCIpXG4gICAgcmV0dXJuIGFzQW55T2YoZGVmLCByZWZzKTtcbiAgY29uc3Qgb3B0aW9ucyA9IGRlZi5vcHRpb25zIGluc3RhbmNlb2YgTWFwID8gQXJyYXkuZnJvbShkZWYub3B0aW9ucy52YWx1ZXMoKSkgOiBkZWYub3B0aW9ucztcbiAgaWYgKG9wdGlvbnMuZXZlcnkoKHgpID0+IHguX2RlZi50eXBlTmFtZSBpbiBwcmltaXRpdmVNYXBwaW5ncyAmJiAoIXguX2RlZi5jaGVja3MgfHwgIXguX2RlZi5jaGVja3MubGVuZ3RoKSkpIHtcbiAgICBjb25zdCB0eXBlcyA9IG9wdGlvbnMucmVkdWNlKCh0eXBlczIsIHgpID0+IHtcbiAgICAgIGNvbnN0IHR5cGUgPSBwcmltaXRpdmVNYXBwaW5nc1t4Ll9kZWYudHlwZU5hbWVdO1xuICAgICAgcmV0dXJuIHR5cGUgJiYgIXR5cGVzMi5pbmNsdWRlcyh0eXBlKSA/IFsuLi50eXBlczIsIHR5cGVdIDogdHlwZXMyO1xuICAgIH0sIFtdKTtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogdHlwZXMubGVuZ3RoID4gMSA/IHR5cGVzIDogdHlwZXNbMF1cbiAgICB9O1xuICB9IGVsc2UgaWYgKG9wdGlvbnMuZXZlcnkoKHgpID0+IHguX2RlZi50eXBlTmFtZSA9PT0gXCJab2RMaXRlcmFsXCIgJiYgIXguZGVzY3JpcHRpb24pKSB7XG4gICAgY29uc3QgdHlwZXMgPSBvcHRpb25zLnJlZHVjZSgoYWNjLCB4KSA9PiB7XG4gICAgICBjb25zdCB0eXBlID0gdHlwZW9mIHguX2RlZi52YWx1ZTtcbiAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICAgIGNhc2UgXCJudW1iZXJcIjpcbiAgICAgICAgY2FzZSBcImJvb2xlYW5cIjpcbiAgICAgICAgICByZXR1cm4gWy4uLmFjYywgdHlwZV07XG4gICAgICAgIGNhc2UgXCJiaWdpbnRcIjpcbiAgICAgICAgICByZXR1cm4gWy4uLmFjYywgXCJpbnRlZ2VyXCJdO1xuICAgICAgICBjYXNlIFwib2JqZWN0XCI6XG4gICAgICAgICAgaWYgKHguX2RlZi52YWx1ZSA9PT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybiBbLi4uYWNjLCBcIm51bGxcIl07XG4gICAgICAgIGNhc2UgXCJzeW1ib2xcIjpcbiAgICAgICAgY2FzZSBcInVuZGVmaW5lZFwiOlxuICAgICAgICBjYXNlIFwiZnVuY3Rpb25cIjpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgfVxuICAgIH0sIFtdKTtcbiAgICBpZiAodHlwZXMubGVuZ3RoID09PSBvcHRpb25zLmxlbmd0aCkge1xuICAgICAgY29uc3QgdW5pcXVlVHlwZXMgPSB0eXBlcy5maWx0ZXIoKHgsIGksIGEpID0+IGEuaW5kZXhPZih4KSA9PT0gaSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiB1bmlxdWVUeXBlcy5sZW5ndGggPiAxID8gdW5pcXVlVHlwZXMgOiB1bmlxdWVUeXBlc1swXSxcbiAgICAgICAgZW51bTogb3B0aW9ucy5yZWR1Y2UoKGFjYywgeCkgPT4ge1xuICAgICAgICAgIHJldHVybiBhY2MuaW5jbHVkZXMoeC5fZGVmLnZhbHVlKSA/IGFjYyA6IFsuLi5hY2MsIHguX2RlZi52YWx1ZV07XG4gICAgICAgIH0sIFtdKVxuICAgICAgfTtcbiAgICB9XG4gIH0gZWxzZSBpZiAob3B0aW9ucy5ldmVyeSgoeCkgPT4geC5fZGVmLnR5cGVOYW1lID09PSBcIlpvZEVudW1cIikpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgIGVudW06IG9wdGlvbnMucmVkdWNlKChhY2MsIHgpID0+IFtcbiAgICAgICAgLi4uYWNjLFxuICAgICAgICAuLi54Ll9kZWYudmFsdWVzLmZpbHRlcigoeDIpID0+ICFhY2MuaW5jbHVkZXMoeDIpKVxuICAgICAgXSwgW10pXG4gICAgfTtcbiAgfVxuICByZXR1cm4gYXNBbnlPZihkZWYsIHJlZnMpO1xufVxudmFyIGFzQW55T2YgPSAoZGVmLCByZWZzKSA9PiB7XG4gIGNvbnN0IGFueU9mID0gKGRlZi5vcHRpb25zIGluc3RhbmNlb2YgTWFwID8gQXJyYXkuZnJvbShkZWYub3B0aW9ucy52YWx1ZXMoKSkgOiBkZWYub3B0aW9ucykubWFwKCh4LCBpKSA9PiBwYXJzZURlZih4Ll9kZWYsIHtcbiAgICAuLi5yZWZzLFxuICAgIGN1cnJlbnRQYXRoOiBbLi4ucmVmcy5jdXJyZW50UGF0aCwgXCJhbnlPZlwiLCBgJHtpfWBdXG4gIH0pKS5maWx0ZXIoKHgpID0+ICEheCAmJiAoIXJlZnMuc3RyaWN0VW5pb25zIHx8IHR5cGVvZiB4ID09PSBcIm9iamVjdFwiICYmIE9iamVjdC5rZXlzKHgpLmxlbmd0aCA+IDApKTtcbiAgcmV0dXJuIGFueU9mLmxlbmd0aCA/IHsgYW55T2YgfSA6IHZvaWQgMDtcbn07XG5cbi8vIG5vZGVfbW9kdWxlcy96b2QtdG8tanNvbi1zY2hlbWEvZGlzdC9lc20vcGFyc2Vycy9udWxsYWJsZS5qc1xuZnVuY3Rpb24gcGFyc2VOdWxsYWJsZURlZihkZWYsIHJlZnMpIHtcbiAgaWYgKFtcIlpvZFN0cmluZ1wiLCBcIlpvZE51bWJlclwiLCBcIlpvZEJpZ0ludFwiLCBcIlpvZEJvb2xlYW5cIiwgXCJab2ROdWxsXCJdLmluY2x1ZGVzKGRlZi5pbm5lclR5cGUuX2RlZi50eXBlTmFtZSkgJiYgKCFkZWYuaW5uZXJUeXBlLl9kZWYuY2hlY2tzIHx8ICFkZWYuaW5uZXJUeXBlLl9kZWYuY2hlY2tzLmxlbmd0aCkpIHtcbiAgICBpZiAocmVmcy50YXJnZXQgPT09IFwib3BlbkFwaTNcIikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogcHJpbWl0aXZlTWFwcGluZ3NbZGVmLmlubmVyVHlwZS5fZGVmLnR5cGVOYW1lXSxcbiAgICAgICAgbnVsbGFibGU6IHRydWVcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBbXG4gICAgICAgIHByaW1pdGl2ZU1hcHBpbmdzW2RlZi5pbm5lclR5cGUuX2RlZi50eXBlTmFtZV0sXG4gICAgICAgIFwibnVsbFwiXG4gICAgICBdXG4gICAgfTtcbiAgfVxuICBpZiAocmVmcy50YXJnZXQgPT09IFwib3BlbkFwaTNcIikge1xuICAgIGNvbnN0IGJhc2UyID0gcGFyc2VEZWYoZGVmLmlubmVyVHlwZS5fZGVmLCB7XG4gICAgICAuLi5yZWZzLFxuICAgICAgY3VycmVudFBhdGg6IFsuLi5yZWZzLmN1cnJlbnRQYXRoXVxuICAgIH0pO1xuICAgIGlmIChiYXNlMiAmJiBcIiRyZWZcIiBpbiBiYXNlMilcbiAgICAgIHJldHVybiB7IGFsbE9mOiBbYmFzZTJdLCBudWxsYWJsZTogdHJ1ZSB9O1xuICAgIHJldHVybiBiYXNlMiAmJiB7IC4uLmJhc2UyLCBudWxsYWJsZTogdHJ1ZSB9O1xuICB9XG4gIGNvbnN0IGJhc2UgPSBwYXJzZURlZihkZWYuaW5uZXJUeXBlLl9kZWYsIHtcbiAgICAuLi5yZWZzLFxuICAgIGN1cnJlbnRQYXRoOiBbLi4ucmVmcy5jdXJyZW50UGF0aCwgXCJhbnlPZlwiLCBcIjBcIl1cbiAgfSk7XG4gIHJldHVybiBiYXNlICYmIHsgYW55T2Y6IFtiYXNlLCB7IHR5cGU6IFwibnVsbFwiIH1dIH07XG59XG5cbi8vIG5vZGVfbW9kdWxlcy96b2QtdG8tanNvbi1zY2hlbWEvZGlzdC9lc20vcGFyc2Vycy9udW1iZXIuanNcbmZ1bmN0aW9uIHBhcnNlTnVtYmVyRGVmKGRlZiwgcmVmcykge1xuICBjb25zdCByZXMgPSB7XG4gICAgdHlwZTogXCJudW1iZXJcIlxuICB9O1xuICBpZiAoIWRlZi5jaGVja3MpXG4gICAgcmV0dXJuIHJlcztcbiAgZm9yIChjb25zdCBjaGVjayBvZiBkZWYuY2hlY2tzKSB7XG4gICAgc3dpdGNoIChjaGVjay5raW5kKSB7XG4gICAgICBjYXNlIFwiaW50XCI6XG4gICAgICAgIHJlcy50eXBlID0gXCJpbnRlZ2VyXCI7XG4gICAgICAgIGFkZEVycm9yTWVzc2FnZShyZXMsIFwidHlwZVwiLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwibWluXCI6XG4gICAgICAgIGlmIChyZWZzLnRhcmdldCA9PT0gXCJqc29uU2NoZW1hN1wiKSB7XG4gICAgICAgICAgaWYgKGNoZWNrLmluY2x1c2l2ZSkge1xuICAgICAgICAgICAgc2V0UmVzcG9uc2VWYWx1ZUFuZEVycm9ycyhyZXMsIFwibWluaW11bVwiLCBjaGVjay52YWx1ZSwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMocmVzLCBcImV4Y2x1c2l2ZU1pbmltdW1cIiwgY2hlY2sudmFsdWUsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoIWNoZWNrLmluY2x1c2l2ZSkge1xuICAgICAgICAgICAgcmVzLmV4Y2x1c2l2ZU1pbmltdW0gPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzKHJlcywgXCJtaW5pbXVtXCIsIGNoZWNrLnZhbHVlLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJtYXhcIjpcbiAgICAgICAgaWYgKHJlZnMudGFyZ2V0ID09PSBcImpzb25TY2hlbWE3XCIpIHtcbiAgICAgICAgICBpZiAoY2hlY2suaW5jbHVzaXZlKSB7XG4gICAgICAgICAgICBzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzKHJlcywgXCJtYXhpbXVtXCIsIGNoZWNrLnZhbHVlLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2V0UmVzcG9uc2VWYWx1ZUFuZEVycm9ycyhyZXMsIFwiZXhjbHVzaXZlTWF4aW11bVwiLCBjaGVjay52YWx1ZSwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghY2hlY2suaW5jbHVzaXZlKSB7XG4gICAgICAgICAgICByZXMuZXhjbHVzaXZlTWF4aW11bSA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMocmVzLCBcIm1heGltdW1cIiwgY2hlY2sudmFsdWUsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIm11bHRpcGxlT2ZcIjpcbiAgICAgICAgc2V0UmVzcG9uc2VWYWx1ZUFuZEVycm9ycyhyZXMsIFwibXVsdGlwbGVPZlwiLCBjaGVjay52YWx1ZSwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzO1xufVxuXG4vLyBub2RlX21vZHVsZXMvem9kLXRvLWpzb24tc2NoZW1hL2Rpc3QvZXNtL3BhcnNlcnMvb2JqZWN0LmpzXG5mdW5jdGlvbiBwYXJzZU9iamVjdERlZihkZWYsIHJlZnMpIHtcbiAgY29uc3QgZm9yY2VPcHRpb25hbEludG9OdWxsYWJsZSA9IHJlZnMudGFyZ2V0ID09PSBcIm9wZW5BaVwiO1xuICBjb25zdCByZXN1bHQgPSB7XG4gICAgdHlwZTogXCJvYmplY3RcIixcbiAgICBwcm9wZXJ0aWVzOiB7fVxuICB9O1xuICBjb25zdCByZXF1aXJlZCA9IFtdO1xuICBjb25zdCBzaGFwZSA9IGRlZi5zaGFwZSgpO1xuICBmb3IgKGNvbnN0IHByb3BOYW1lIGluIHNoYXBlKSB7XG4gICAgbGV0IHByb3BEZWYgPSBzaGFwZVtwcm9wTmFtZV07XG4gICAgaWYgKHByb3BEZWYgPT09IHZvaWQgMCB8fCBwcm9wRGVmLl9kZWYgPT09IHZvaWQgMCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGxldCBwcm9wT3B0aW9uYWwgPSBzYWZlSXNPcHRpb25hbChwcm9wRGVmKTtcbiAgICBpZiAocHJvcE9wdGlvbmFsICYmIGZvcmNlT3B0aW9uYWxJbnRvTnVsbGFibGUpIHtcbiAgICAgIGlmIChwcm9wRGVmLl9kZWYudHlwZU5hbWUgPT09IFwiWm9kT3B0aW9uYWxcIikge1xuICAgICAgICBwcm9wRGVmID0gcHJvcERlZi5fZGVmLmlubmVyVHlwZTtcbiAgICAgIH1cbiAgICAgIGlmICghcHJvcERlZi5pc051bGxhYmxlKCkpIHtcbiAgICAgICAgcHJvcERlZiA9IHByb3BEZWYubnVsbGFibGUoKTtcbiAgICAgIH1cbiAgICAgIHByb3BPcHRpb25hbCA9IGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBwYXJzZWREZWYgPSBwYXJzZURlZihwcm9wRGVmLl9kZWYsIHtcbiAgICAgIC4uLnJlZnMsXG4gICAgICBjdXJyZW50UGF0aDogWy4uLnJlZnMuY3VycmVudFBhdGgsIFwicHJvcGVydGllc1wiLCBwcm9wTmFtZV0sXG4gICAgICBwcm9wZXJ0eVBhdGg6IFsuLi5yZWZzLmN1cnJlbnRQYXRoLCBcInByb3BlcnRpZXNcIiwgcHJvcE5hbWVdXG4gICAgfSk7XG4gICAgaWYgKHBhcnNlZERlZiA9PT0gdm9pZCAwKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgcmVzdWx0LnByb3BlcnRpZXNbcHJvcE5hbWVdID0gcGFyc2VkRGVmO1xuICAgIGlmICghcHJvcE9wdGlvbmFsKSB7XG4gICAgICByZXF1aXJlZC5wdXNoKHByb3BOYW1lKTtcbiAgICB9XG4gIH1cbiAgaWYgKHJlcXVpcmVkLmxlbmd0aCkge1xuICAgIHJlc3VsdC5yZXF1aXJlZCA9IHJlcXVpcmVkO1xuICB9XG4gIGNvbnN0IGFkZGl0aW9uYWxQcm9wZXJ0aWVzID0gZGVjaWRlQWRkaXRpb25hbFByb3BlcnRpZXMoZGVmLCByZWZzKTtcbiAgaWYgKGFkZGl0aW9uYWxQcm9wZXJ0aWVzICE9PSB2b2lkIDApIHtcbiAgICByZXN1bHQuYWRkaXRpb25hbFByb3BlcnRpZXMgPSBhZGRpdGlvbmFsUHJvcGVydGllcztcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gZGVjaWRlQWRkaXRpb25hbFByb3BlcnRpZXMoZGVmLCByZWZzKSB7XG4gIGlmIChkZWYuY2F0Y2hhbGwuX2RlZi50eXBlTmFtZSAhPT0gXCJab2ROZXZlclwiKSB7XG4gICAgcmV0dXJuIHBhcnNlRGVmKGRlZi5jYXRjaGFsbC5fZGVmLCB7XG4gICAgICAuLi5yZWZzLFxuICAgICAgY3VycmVudFBhdGg6IFsuLi5yZWZzLmN1cnJlbnRQYXRoLCBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCJdXG4gICAgfSk7XG4gIH1cbiAgc3dpdGNoIChkZWYudW5rbm93bktleXMpIHtcbiAgICBjYXNlIFwicGFzc3Rocm91Z2hcIjpcbiAgICAgIHJldHVybiByZWZzLmFsbG93ZWRBZGRpdGlvbmFsUHJvcGVydGllcztcbiAgICBjYXNlIFwic3RyaWN0XCI6XG4gICAgICByZXR1cm4gcmVmcy5yZWplY3RlZEFkZGl0aW9uYWxQcm9wZXJ0aWVzO1xuICAgIGNhc2UgXCJzdHJpcFwiOlxuICAgICAgcmV0dXJuIHJlZnMucmVtb3ZlQWRkaXRpb25hbFN0cmF0ZWd5ID09PSBcInN0cmljdFwiID8gcmVmcy5hbGxvd2VkQWRkaXRpb25hbFByb3BlcnRpZXMgOiByZWZzLnJlamVjdGVkQWRkaXRpb25hbFByb3BlcnRpZXM7XG4gIH1cbn1cbmZ1bmN0aW9uIHNhZmVJc09wdGlvbmFsKHNjaGVtYSkge1xuICB0cnkge1xuICAgIHJldHVybiBzY2hlbWEuaXNPcHRpb25hbCgpO1xuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuXG4vLyBub2RlX21vZHVsZXMvem9kLXRvLWpzb24tc2NoZW1hL2Rpc3QvZXNtL3BhcnNlcnMvb3B0aW9uYWwuanNcbnZhciBwYXJzZU9wdGlvbmFsRGVmID0gKGRlZiwgcmVmcykgPT4ge1xuICBpZiAocmVmcy5jdXJyZW50UGF0aC50b1N0cmluZygpID09PSByZWZzLnByb3BlcnR5UGF0aD8udG9TdHJpbmcoKSkge1xuICAgIHJldHVybiBwYXJzZURlZihkZWYuaW5uZXJUeXBlLl9kZWYsIHJlZnMpO1xuICB9XG4gIGNvbnN0IGlubmVyU2NoZW1hID0gcGFyc2VEZWYoZGVmLmlubmVyVHlwZS5fZGVmLCB7XG4gICAgLi4ucmVmcyxcbiAgICBjdXJyZW50UGF0aDogWy4uLnJlZnMuY3VycmVudFBhdGgsIFwiYW55T2ZcIiwgXCIxXCJdXG4gIH0pO1xuICByZXR1cm4gaW5uZXJTY2hlbWEgPyB7XG4gICAgYW55T2Y6IFtcbiAgICAgIHtcbiAgICAgICAgbm90OiBwYXJzZUFueURlZihyZWZzKVxuICAgICAgfSxcbiAgICAgIGlubmVyU2NoZW1hXG4gICAgXVxuICB9IDogcGFyc2VBbnlEZWYocmVmcyk7XG59O1xuXG4vLyBub2RlX21vZHVsZXMvem9kLXRvLWpzb24tc2NoZW1hL2Rpc3QvZXNtL3BhcnNlcnMvcGlwZWxpbmUuanNcbnZhciBwYXJzZVBpcGVsaW5lRGVmID0gKGRlZiwgcmVmcykgPT4ge1xuICBpZiAocmVmcy5waXBlU3RyYXRlZ3kgPT09IFwiaW5wdXRcIikge1xuICAgIHJldHVybiBwYXJzZURlZihkZWYuaW4uX2RlZiwgcmVmcyk7XG4gIH0gZWxzZSBpZiAocmVmcy5waXBlU3RyYXRlZ3kgPT09IFwib3V0cHV0XCIpIHtcbiAgICByZXR1cm4gcGFyc2VEZWYoZGVmLm91dC5fZGVmLCByZWZzKTtcbiAgfVxuICBjb25zdCBhID0gcGFyc2VEZWYoZGVmLmluLl9kZWYsIHtcbiAgICAuLi5yZWZzLFxuICAgIGN1cnJlbnRQYXRoOiBbLi4ucmVmcy5jdXJyZW50UGF0aCwgXCJhbGxPZlwiLCBcIjBcIl1cbiAgfSk7XG4gIGNvbnN0IGIgPSBwYXJzZURlZihkZWYub3V0Ll9kZWYsIHtcbiAgICAuLi5yZWZzLFxuICAgIGN1cnJlbnRQYXRoOiBbLi4ucmVmcy5jdXJyZW50UGF0aCwgXCJhbGxPZlwiLCBhID8gXCIxXCIgOiBcIjBcIl1cbiAgfSk7XG4gIHJldHVybiB7XG4gICAgYWxsT2Y6IFthLCBiXS5maWx0ZXIoKHgpID0+IHggIT09IHZvaWQgMClcbiAgfTtcbn07XG5cbi8vIG5vZGVfbW9kdWxlcy96b2QtdG8tanNvbi1zY2hlbWEvZGlzdC9lc20vcGFyc2Vycy9wcm9taXNlLmpzXG5mdW5jdGlvbiBwYXJzZVByb21pc2VEZWYoZGVmLCByZWZzKSB7XG4gIHJldHVybiBwYXJzZURlZihkZWYudHlwZS5fZGVmLCByZWZzKTtcbn1cblxuLy8gbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9wYXJzZXJzL3NldC5qc1xuZnVuY3Rpb24gcGFyc2VTZXREZWYoZGVmLCByZWZzKSB7XG4gIGNvbnN0IGl0ZW1zID0gcGFyc2VEZWYoZGVmLnZhbHVlVHlwZS5fZGVmLCB7XG4gICAgLi4ucmVmcyxcbiAgICBjdXJyZW50UGF0aDogWy4uLnJlZnMuY3VycmVudFBhdGgsIFwiaXRlbXNcIl1cbiAgfSk7XG4gIGNvbnN0IHNjaGVtYSA9IHtcbiAgICB0eXBlOiBcImFycmF5XCIsXG4gICAgdW5pcXVlSXRlbXM6IHRydWUsXG4gICAgaXRlbXNcbiAgfTtcbiAgaWYgKGRlZi5taW5TaXplKSB7XG4gICAgc2V0UmVzcG9uc2VWYWx1ZUFuZEVycm9ycyhzY2hlbWEsIFwibWluSXRlbXNcIiwgZGVmLm1pblNpemUudmFsdWUsIGRlZi5taW5TaXplLm1lc3NhZ2UsIHJlZnMpO1xuICB9XG4gIGlmIChkZWYubWF4U2l6ZSkge1xuICAgIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMoc2NoZW1hLCBcIm1heEl0ZW1zXCIsIGRlZi5tYXhTaXplLnZhbHVlLCBkZWYubWF4U2l6ZS5tZXNzYWdlLCByZWZzKTtcbiAgfVxuICByZXR1cm4gc2NoZW1hO1xufVxuXG4vLyBub2RlX21vZHVsZXMvem9kLXRvLWpzb24tc2NoZW1hL2Rpc3QvZXNtL3BhcnNlcnMvdHVwbGUuanNcbmZ1bmN0aW9uIHBhcnNlVHVwbGVEZWYoZGVmLCByZWZzKSB7XG4gIGlmIChkZWYucmVzdCkge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcImFycmF5XCIsXG4gICAgICBtaW5JdGVtczogZGVmLml0ZW1zLmxlbmd0aCxcbiAgICAgIGl0ZW1zOiBkZWYuaXRlbXMubWFwKCh4LCBpKSA9PiBwYXJzZURlZih4Ll9kZWYsIHtcbiAgICAgICAgLi4ucmVmcyxcbiAgICAgICAgY3VycmVudFBhdGg6IFsuLi5yZWZzLmN1cnJlbnRQYXRoLCBcIml0ZW1zXCIsIGAke2l9YF1cbiAgICAgIH0pKS5yZWR1Y2UoKGFjYywgeCkgPT4geCA9PT0gdm9pZCAwID8gYWNjIDogWy4uLmFjYywgeF0sIFtdKSxcbiAgICAgIGFkZGl0aW9uYWxJdGVtczogcGFyc2VEZWYoZGVmLnJlc3QuX2RlZiwge1xuICAgICAgICAuLi5yZWZzLFxuICAgICAgICBjdXJyZW50UGF0aDogWy4uLnJlZnMuY3VycmVudFBhdGgsIFwiYWRkaXRpb25hbEl0ZW1zXCJdXG4gICAgICB9KVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiYXJyYXlcIixcbiAgICAgIG1pbkl0ZW1zOiBkZWYuaXRlbXMubGVuZ3RoLFxuICAgICAgbWF4SXRlbXM6IGRlZi5pdGVtcy5sZW5ndGgsXG4gICAgICBpdGVtczogZGVmLml0ZW1zLm1hcCgoeCwgaSkgPT4gcGFyc2VEZWYoeC5fZGVmLCB7XG4gICAgICAgIC4uLnJlZnMsXG4gICAgICAgIGN1cnJlbnRQYXRoOiBbLi4ucmVmcy5jdXJyZW50UGF0aCwgXCJpdGVtc1wiLCBgJHtpfWBdXG4gICAgICB9KSkucmVkdWNlKChhY2MsIHgpID0+IHggPT09IHZvaWQgMCA/IGFjYyA6IFsuLi5hY2MsIHhdLCBbXSlcbiAgICB9O1xuICB9XG59XG5cbi8vIG5vZGVfbW9kdWxlcy96b2QtdG8tanNvbi1zY2hlbWEvZGlzdC9lc20vcGFyc2Vycy91bmRlZmluZWQuanNcbmZ1bmN0aW9uIHBhcnNlVW5kZWZpbmVkRGVmKHJlZnMpIHtcbiAgcmV0dXJuIHtcbiAgICBub3Q6IHBhcnNlQW55RGVmKHJlZnMpXG4gIH07XG59XG5cbi8vIG5vZGVfbW9kdWxlcy96b2QtdG8tanNvbi1zY2hlbWEvZGlzdC9lc20vcGFyc2Vycy91bmtub3duLmpzXG5mdW5jdGlvbiBwYXJzZVVua25vd25EZWYocmVmcykge1xuICByZXR1cm4gcGFyc2VBbnlEZWYocmVmcyk7XG59XG5cbi8vIG5vZGVfbW9kdWxlcy96b2QtdG8tanNvbi1zY2hlbWEvZGlzdC9lc20vcGFyc2Vycy9yZWFkb25seS5qc1xudmFyIHBhcnNlUmVhZG9ubHlEZWYgPSAoZGVmLCByZWZzKSA9PiB7XG4gIHJldHVybiBwYXJzZURlZihkZWYuaW5uZXJUeXBlLl9kZWYsIHJlZnMpO1xufTtcblxuLy8gbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9zZWxlY3RQYXJzZXIuanNcbnZhciBzZWxlY3RQYXJzZXIgPSAoZGVmLCB0eXBlTmFtZSwgcmVmcykgPT4ge1xuICBzd2l0Y2ggKHR5cGVOYW1lKSB7XG4gICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kU3RyaW5nOlxuICAgICAgcmV0dXJuIHBhcnNlU3RyaW5nRGVmKGRlZiwgcmVmcyk7XG4gICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kTnVtYmVyOlxuICAgICAgcmV0dXJuIHBhcnNlTnVtYmVyRGVmKGRlZiwgcmVmcyk7XG4gICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kT2JqZWN0OlxuICAgICAgcmV0dXJuIHBhcnNlT2JqZWN0RGVmKGRlZiwgcmVmcyk7XG4gICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kQmlnSW50OlxuICAgICAgcmV0dXJuIHBhcnNlQmlnaW50RGVmKGRlZiwgcmVmcyk7XG4gICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kQm9vbGVhbjpcbiAgICAgIHJldHVybiBwYXJzZUJvb2xlYW5EZWYoKTtcbiAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2REYXRlOlxuICAgICAgcmV0dXJuIHBhcnNlRGF0ZURlZihkZWYsIHJlZnMpO1xuICAgIGNhc2UgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZFVuZGVmaW5lZDpcbiAgICAgIHJldHVybiBwYXJzZVVuZGVmaW5lZERlZihyZWZzKTtcbiAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2ROdWxsOlxuICAgICAgcmV0dXJuIHBhcnNlTnVsbERlZihyZWZzKTtcbiAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RBcnJheTpcbiAgICAgIHJldHVybiBwYXJzZUFycmF5RGVmKGRlZiwgcmVmcyk7XG4gICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kVW5pb246XG4gICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kRGlzY3JpbWluYXRlZFVuaW9uOlxuICAgICAgcmV0dXJuIHBhcnNlVW5pb25EZWYoZGVmLCByZWZzKTtcbiAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RJbnRlcnNlY3Rpb246XG4gICAgICByZXR1cm4gcGFyc2VJbnRlcnNlY3Rpb25EZWYoZGVmLCByZWZzKTtcbiAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RUdXBsZTpcbiAgICAgIHJldHVybiBwYXJzZVR1cGxlRGVmKGRlZiwgcmVmcyk7XG4gICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kUmVjb3JkOlxuICAgICAgcmV0dXJuIHBhcnNlUmVjb3JkRGVmKGRlZiwgcmVmcyk7XG4gICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kTGl0ZXJhbDpcbiAgICAgIHJldHVybiBwYXJzZUxpdGVyYWxEZWYoZGVmLCByZWZzKTtcbiAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RFbnVtOlxuICAgICAgcmV0dXJuIHBhcnNlRW51bURlZihkZWYpO1xuICAgIGNhc2UgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZE5hdGl2ZUVudW06XG4gICAgICByZXR1cm4gcGFyc2VOYXRpdmVFbnVtRGVmKGRlZik7XG4gICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kTnVsbGFibGU6XG4gICAgICByZXR1cm4gcGFyc2VOdWxsYWJsZURlZihkZWYsIHJlZnMpO1xuICAgIGNhc2UgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZE9wdGlvbmFsOlxuICAgICAgcmV0dXJuIHBhcnNlT3B0aW9uYWxEZWYoZGVmLCByZWZzKTtcbiAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RNYXA6XG4gICAgICByZXR1cm4gcGFyc2VNYXBEZWYoZGVmLCByZWZzKTtcbiAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RTZXQ6XG4gICAgICByZXR1cm4gcGFyc2VTZXREZWYoZGVmLCByZWZzKTtcbiAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RMYXp5OlxuICAgICAgcmV0dXJuICgpID0+IGRlZi5nZXR0ZXIoKS5fZGVmO1xuICAgIGNhc2UgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZFByb21pc2U6XG4gICAgICByZXR1cm4gcGFyc2VQcm9taXNlRGVmKGRlZiwgcmVmcyk7XG4gICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kTmFOOlxuICAgIGNhc2UgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZE5ldmVyOlxuICAgICAgcmV0dXJuIHBhcnNlTmV2ZXJEZWYocmVmcyk7XG4gICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kRWZmZWN0czpcbiAgICAgIHJldHVybiBwYXJzZUVmZmVjdHNEZWYoZGVmLCByZWZzKTtcbiAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RBbnk6XG4gICAgICByZXR1cm4gcGFyc2VBbnlEZWYocmVmcyk7XG4gICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kVW5rbm93bjpcbiAgICAgIHJldHVybiBwYXJzZVVua25vd25EZWYocmVmcyk7XG4gICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kRGVmYXVsdDpcbiAgICAgIHJldHVybiBwYXJzZURlZmF1bHREZWYoZGVmLCByZWZzKTtcbiAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RCcmFuZGVkOlxuICAgICAgcmV0dXJuIHBhcnNlQnJhbmRlZERlZihkZWYsIHJlZnMpO1xuICAgIGNhc2UgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZFJlYWRvbmx5OlxuICAgICAgcmV0dXJuIHBhcnNlUmVhZG9ubHlEZWYoZGVmLCByZWZzKTtcbiAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RDYXRjaDpcbiAgICAgIHJldHVybiBwYXJzZUNhdGNoRGVmKGRlZiwgcmVmcyk7XG4gICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kUGlwZWxpbmU6XG4gICAgICByZXR1cm4gcGFyc2VQaXBlbGluZURlZihkZWYsIHJlZnMpO1xuICAgIGNhc2UgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZEZ1bmN0aW9uOlxuICAgIGNhc2UgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZFZvaWQ6XG4gICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kU3ltYm9sOlxuICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyAoKF8yKSA9PiB2b2lkIDApKHR5cGVOYW1lKTtcbiAgfVxufTtcblxuLy8gbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9wYXJzZURlZi5qc1xuZnVuY3Rpb24gcGFyc2VEZWYoZGVmLCByZWZzLCBmb3JjZVJlc29sdXRpb24gPSBmYWxzZSkge1xuICBjb25zdCBzZWVuSXRlbSA9IHJlZnMuc2Vlbi5nZXQoZGVmKTtcbiAgaWYgKHJlZnMub3ZlcnJpZGUpIHtcbiAgICBjb25zdCBvdmVycmlkZVJlc3VsdCA9IHJlZnMub3ZlcnJpZGU/LihkZWYsIHJlZnMsIHNlZW5JdGVtLCBmb3JjZVJlc29sdXRpb24pO1xuICAgIGlmIChvdmVycmlkZVJlc3VsdCAhPT0gaWdub3JlT3ZlcnJpZGUpIHtcbiAgICAgIHJldHVybiBvdmVycmlkZVJlc3VsdDtcbiAgICB9XG4gIH1cbiAgaWYgKHNlZW5JdGVtICYmICFmb3JjZVJlc29sdXRpb24pIHtcbiAgICBjb25zdCBzZWVuU2NoZW1hID0gZ2V0JHJlZihzZWVuSXRlbSwgcmVmcyk7XG4gICAgaWYgKHNlZW5TY2hlbWEgIT09IHZvaWQgMCkge1xuICAgICAgcmV0dXJuIHNlZW5TY2hlbWE7XG4gICAgfVxuICB9XG4gIGNvbnN0IG5ld0l0ZW0gPSB7IGRlZiwgcGF0aDogcmVmcy5jdXJyZW50UGF0aCwganNvblNjaGVtYTogdm9pZCAwIH07XG4gIHJlZnMuc2Vlbi5zZXQoZGVmLCBuZXdJdGVtKTtcbiAgY29uc3QganNvblNjaGVtYU9yR2V0dGVyID0gc2VsZWN0UGFyc2VyKGRlZiwgZGVmLnR5cGVOYW1lLCByZWZzKTtcbiAgY29uc3QganNvblNjaGVtYSA9IHR5cGVvZiBqc29uU2NoZW1hT3JHZXR0ZXIgPT09IFwiZnVuY3Rpb25cIiA/IHBhcnNlRGVmKGpzb25TY2hlbWFPckdldHRlcigpLCByZWZzKSA6IGpzb25TY2hlbWFPckdldHRlcjtcbiAgaWYgKGpzb25TY2hlbWEpIHtcbiAgICBhZGRNZXRhKGRlZiwgcmVmcywganNvblNjaGVtYSk7XG4gIH1cbiAgaWYgKHJlZnMucG9zdFByb2Nlc3MpIHtcbiAgICBjb25zdCBwb3N0UHJvY2Vzc1Jlc3VsdCA9IHJlZnMucG9zdFByb2Nlc3MoanNvblNjaGVtYSwgZGVmLCByZWZzKTtcbiAgICBuZXdJdGVtLmpzb25TY2hlbWEgPSBqc29uU2NoZW1hO1xuICAgIHJldHVybiBwb3N0UHJvY2Vzc1Jlc3VsdDtcbiAgfVxuICBuZXdJdGVtLmpzb25TY2hlbWEgPSBqc29uU2NoZW1hO1xuICByZXR1cm4ganNvblNjaGVtYTtcbn1cbnZhciBnZXQkcmVmID0gKGl0ZW0sIHJlZnMpID0+IHtcbiAgc3dpdGNoIChyZWZzLiRyZWZTdHJhdGVneSkge1xuICAgIGNhc2UgXCJyb290XCI6XG4gICAgICByZXR1cm4geyAkcmVmOiBpdGVtLnBhdGguam9pbihcIi9cIikgfTtcbiAgICBjYXNlIFwicmVsYXRpdmVcIjpcbiAgICAgIHJldHVybiB7ICRyZWY6IGdldFJlbGF0aXZlUGF0aChyZWZzLmN1cnJlbnRQYXRoLCBpdGVtLnBhdGgpIH07XG4gICAgY2FzZSBcIm5vbmVcIjpcbiAgICBjYXNlIFwic2VlblwiOiB7XG4gICAgICBpZiAoaXRlbS5wYXRoLmxlbmd0aCA8IHJlZnMuY3VycmVudFBhdGgubGVuZ3RoICYmIGl0ZW0ucGF0aC5ldmVyeSgodmFsdWUsIGluZGV4KSA9PiByZWZzLmN1cnJlbnRQYXRoW2luZGV4XSA9PT0gdmFsdWUpKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihgUmVjdXJzaXZlIHJlZmVyZW5jZSBkZXRlY3RlZCBhdCAke3JlZnMuY3VycmVudFBhdGguam9pbihcIi9cIil9ISBEZWZhdWx0aW5nIHRvIGFueWApO1xuICAgICAgICByZXR1cm4gcGFyc2VBbnlEZWYocmVmcyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVmcy4kcmVmU3RyYXRlZ3kgPT09IFwic2VlblwiID8gcGFyc2VBbnlEZWYocmVmcykgOiB2b2lkIDA7XG4gICAgfVxuICB9XG59O1xudmFyIGFkZE1ldGEgPSAoZGVmLCByZWZzLCBqc29uU2NoZW1hKSA9PiB7XG4gIGlmIChkZWYuZGVzY3JpcHRpb24pIHtcbiAgICBqc29uU2NoZW1hLmRlc2NyaXB0aW9uID0gZGVmLmRlc2NyaXB0aW9uO1xuICAgIGlmIChyZWZzLm1hcmtkb3duRGVzY3JpcHRpb24pIHtcbiAgICAgIGpzb25TY2hlbWEubWFya2Rvd25EZXNjcmlwdGlvbiA9IGRlZi5kZXNjcmlwdGlvbjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGpzb25TY2hlbWE7XG59O1xuXG4vLyBub2RlX21vZHVsZXMvem9kLXRvLWpzb24tc2NoZW1hL2Rpc3QvZXNtL3pvZFRvSnNvblNjaGVtYS5qc1xudmFyIHpvZFRvSnNvblNjaGVtYSA9IChzY2hlbWEsIG9wdGlvbnMpID0+IHtcbiAgY29uc3QgcmVmcyA9IGdldFJlZnMob3B0aW9ucyk7XG4gIGxldCBkZWZpbml0aW9ucyA9IHR5cGVvZiBvcHRpb25zID09PSBcIm9iamVjdFwiICYmIG9wdGlvbnMuZGVmaW5pdGlvbnMgPyBPYmplY3QuZW50cmllcyhvcHRpb25zLmRlZmluaXRpb25zKS5yZWR1Y2UoKGFjYywgW25hbWUyLCBzY2hlbWEyXSkgPT4gKHtcbiAgICAuLi5hY2MsXG4gICAgW25hbWUyXTogcGFyc2VEZWYoc2NoZW1hMi5fZGVmLCB7XG4gICAgICAuLi5yZWZzLFxuICAgICAgY3VycmVudFBhdGg6IFsuLi5yZWZzLmJhc2VQYXRoLCByZWZzLmRlZmluaXRpb25QYXRoLCBuYW1lMl1cbiAgICB9LCB0cnVlKSA/PyBwYXJzZUFueURlZihyZWZzKVxuICB9KSwge30pIDogdm9pZCAwO1xuICBjb25zdCBuYW1lID0gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgPyBvcHRpb25zIDogb3B0aW9ucz8ubmFtZVN0cmF0ZWd5ID09PSBcInRpdGxlXCIgPyB2b2lkIDAgOiBvcHRpb25zPy5uYW1lO1xuICBjb25zdCBtYWluID0gcGFyc2VEZWYoc2NoZW1hLl9kZWYsIG5hbWUgPT09IHZvaWQgMCA/IHJlZnMgOiB7XG4gICAgLi4ucmVmcyxcbiAgICBjdXJyZW50UGF0aDogWy4uLnJlZnMuYmFzZVBhdGgsIHJlZnMuZGVmaW5pdGlvblBhdGgsIG5hbWVdXG4gIH0sIGZhbHNlKSA/PyBwYXJzZUFueURlZihyZWZzKTtcbiAgY29uc3QgdGl0bGUgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJvYmplY3RcIiAmJiBvcHRpb25zLm5hbWUgIT09IHZvaWQgMCAmJiBvcHRpb25zLm5hbWVTdHJhdGVneSA9PT0gXCJ0aXRsZVwiID8gb3B0aW9ucy5uYW1lIDogdm9pZCAwO1xuICBpZiAodGl0bGUgIT09IHZvaWQgMCkge1xuICAgIG1haW4udGl0bGUgPSB0aXRsZTtcbiAgfVxuICBpZiAocmVmcy5mbGFncy5oYXNSZWZlcmVuY2VkT3BlbkFpQW55VHlwZSkge1xuICAgIGlmICghZGVmaW5pdGlvbnMpIHtcbiAgICAgIGRlZmluaXRpb25zID0ge307XG4gICAgfVxuICAgIGlmICghZGVmaW5pdGlvbnNbcmVmcy5vcGVuQWlBbnlUeXBlTmFtZV0pIHtcbiAgICAgIGRlZmluaXRpb25zW3JlZnMub3BlbkFpQW55VHlwZU5hbWVdID0ge1xuICAgICAgICAvLyBTa2lwcGluZyBcIm9iamVjdFwiIGFzIG5vIHByb3BlcnRpZXMgY2FuIGJlIGRlZmluZWQgYW5kIGFkZGl0aW9uYWxQcm9wZXJ0aWVzIG11c3QgYmUgXCJmYWxzZVwiXG4gICAgICAgIHR5cGU6IFtcInN0cmluZ1wiLCBcIm51bWJlclwiLCBcImludGVnZXJcIiwgXCJib29sZWFuXCIsIFwiYXJyYXlcIiwgXCJudWxsXCJdLFxuICAgICAgICBpdGVtczoge1xuICAgICAgICAgICRyZWY6IHJlZnMuJHJlZlN0cmF0ZWd5ID09PSBcInJlbGF0aXZlXCIgPyBcIjFcIiA6IFtcbiAgICAgICAgICAgIC4uLnJlZnMuYmFzZVBhdGgsXG4gICAgICAgICAgICByZWZzLmRlZmluaXRpb25QYXRoLFxuICAgICAgICAgICAgcmVmcy5vcGVuQWlBbnlUeXBlTmFtZVxuICAgICAgICAgIF0uam9pbihcIi9cIilcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH1cbiAgY29uc3QgY29tYmluZWQgPSBuYW1lID09PSB2b2lkIDAgPyBkZWZpbml0aW9ucyA/IHtcbiAgICAuLi5tYWluLFxuICAgIFtyZWZzLmRlZmluaXRpb25QYXRoXTogZGVmaW5pdGlvbnNcbiAgfSA6IG1haW4gOiB7XG4gICAgJHJlZjogW1xuICAgICAgLi4ucmVmcy4kcmVmU3RyYXRlZ3kgPT09IFwicmVsYXRpdmVcIiA/IFtdIDogcmVmcy5iYXNlUGF0aCxcbiAgICAgIHJlZnMuZGVmaW5pdGlvblBhdGgsXG4gICAgICBuYW1lXG4gICAgXS5qb2luKFwiL1wiKSxcbiAgICBbcmVmcy5kZWZpbml0aW9uUGF0aF06IHtcbiAgICAgIC4uLmRlZmluaXRpb25zLFxuICAgICAgW25hbWVdOiBtYWluXG4gICAgfVxuICB9O1xuICBpZiAocmVmcy50YXJnZXQgPT09IFwianNvblNjaGVtYTdcIikge1xuICAgIGNvbWJpbmVkLiRzY2hlbWEgPSBcImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hI1wiO1xuICB9IGVsc2UgaWYgKHJlZnMudGFyZ2V0ID09PSBcImpzb25TY2hlbWEyMDE5LTA5XCIgfHwgcmVmcy50YXJnZXQgPT09IFwib3BlbkFpXCIpIHtcbiAgICBjb21iaW5lZC4kc2NoZW1hID0gXCJodHRwczovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC8yMDE5LTA5L3NjaGVtYSNcIjtcbiAgfVxuICBpZiAocmVmcy50YXJnZXQgPT09IFwib3BlbkFpXCIgJiYgKFwiYW55T2ZcIiBpbiBjb21iaW5lZCB8fCBcIm9uZU9mXCIgaW4gY29tYmluZWQgfHwgXCJhbGxPZlwiIGluIGNvbWJpbmVkIHx8IFwidHlwZVwiIGluIGNvbWJpbmVkICYmIEFycmF5LmlzQXJyYXkoY29tYmluZWQudHlwZSkpKSB7XG4gICAgY29uc29sZS53YXJuKFwiV2FybmluZzogT3BlbkFJIG1heSBub3Qgc3VwcG9ydCBzY2hlbWFzIHdpdGggdW5pb25zIGFzIHJvb3RzISBUcnkgd3JhcHBpbmcgaXQgaW4gYW4gb2JqZWN0IHByb3BlcnR5LlwiKTtcbiAgfVxuICByZXR1cm4gY29tYmluZWQ7XG59O1xuXG4vLyBzcmMvcnVudGltZS9zdGRpby1ib290c3RyYXAudHNcbnZhciBfZW50cnkgPSBfX3RvRVNNKHJlcXVpcmUoXCIvaG9tZS9mZWxpeC9leGEvZXhhLWNvZGUtbWNwL3NyYy9pbmRleC50c1wiKSk7XG52YXIgZW50cnkgPSBfZW50cnk7XG5mdW5jdGlvbiBwYXJzZUNsaUNvbmZpZyhhcmdzLCBzY2hlbWEpIHtcbiAgY29uc3QgY29uZmlnID0ge307XG4gIGZvciAoY29uc3QgYXJnIG9mIGFyZ3MpIHtcbiAgICBjb25zdCBtYXRjaCA9IGFyZy5tYXRjaCgvXihbXj1dKyk9KC4qKSQvKTtcbiAgICBpZiAoIW1hdGNoKSBjb250aW51ZTtcbiAgICBjb25zdCBbLCBrZXksIHJhd1ZhbHVlXSA9IG1hdGNoO1xuICAgIGNvbnN0IHBhdGhQYXJ0cyA9IGtleS5zcGxpdChcIi5cIik7XG4gICAgbGV0IHBhcnNlZFZhbHVlID0gcmF3VmFsdWU7XG4gICAgdHJ5IHtcbiAgICAgIHBhcnNlZFZhbHVlID0gSlNPTi5wYXJzZShyYXdWYWx1ZSk7XG4gICAgfSBjYXRjaCB7XG4gICAgfVxuICAgIGltcG9ydF9sb2Rhc2guZGVmYXVsdC5zZXQoY29uZmlnLCBwYXRoUGFydHMsIHBhcnNlZFZhbHVlKTtcbiAgfVxuICBpZiAoc2NoZW1hKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gc2NoZW1hLnNhZmVQYXJzZShjb25maWcpO1xuICAgIGlmICghcmVzdWx0LnN1Y2Nlc3MpIHtcbiAgICAgIGNvbnN0IGpzb25TY2hlbWEgPSB6b2RUb0pzb25TY2hlbWEoc2NoZW1hKTtcbiAgICAgIGNvbnN0IGVycm9ycyA9IHJlc3VsdC5lcnJvci5pc3N1ZXMubWFwKChpc3N1ZSkgPT4ge1xuICAgICAgICBjb25zdCBwYXRoID0gaXNzdWUucGF0aC5qb2luKFwiLlwiKTtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGlzc3VlLm1lc3NhZ2U7XG4gICAgICAgIGxldCByZWNlaXZlZCA9IGNvbmZpZztcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgaXNzdWUucGF0aCkge1xuICAgICAgICAgIGlmIChyZWNlaXZlZCAmJiB0eXBlb2YgcmVjZWl2ZWQgPT09IFwib2JqZWN0XCIgJiYga2V5IGluIHJlY2VpdmVkKSB7XG4gICAgICAgICAgICByZWNlaXZlZCA9IHJlY2VpdmVkW2tleV07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlY2VpdmVkID0gdm9pZCAwO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBgICAke3BhdGh9OiAke21lc3NhZ2V9IChyZWNlaXZlZDogJHtKU09OLnN0cmluZ2lmeShyZWNlaXZlZCl9KWA7XG4gICAgICB9KTtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgIGBcbiR7aW1wb3J0X2NoYWxrLmRlZmF1bHQucmVkKFwiW3NtaXRoZXJ5XVwiKX0gQ29uZmlndXJhdGlvbiB2YWxpZGF0aW9uIGZhaWxlZDpgXG4gICAgICApO1xuICAgICAgY29uc29sZS5lcnJvcihlcnJvcnMuam9pbihcIlxcblwiKSk7XG4gICAgICBjb25zb2xlLmVycm9yKFwiXFxuRXhwZWN0ZWQgc2NoZW1hOlwiKTtcbiAgICAgIGNvbnNvbGUuZXJyb3IoSlNPTi5zdHJpbmdpZnkoanNvblNjaGVtYSwgbnVsbCwgMikpO1xuICAgICAgY29uc29sZS5lcnJvcihcIlxcbkV4YW1wbGUgdXNhZ2U6XCIpO1xuICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgXCIgIG5vZGUgc2VydmVyLmpzIHNlcnZlci5ob3N0PWxvY2FsaG9zdCBzZXJ2ZXIucG9ydD04MDgwIGRlYnVnPXRydWVcIlxuICAgICAgKTtcbiAgICAgIHJldHVybiB7IGNvbmZpZywgZXJyb3JzIH07XG4gICAgfVxuICAgIHJldHVybiB7IGNvbmZpZzogcmVzdWx0LmRhdGEsIGVycm9yczogdm9pZCAwIH07XG4gIH1cbiAgcmV0dXJuIHsgY29uZmlnLCBlcnJvcnM6IHZvaWQgMCB9O1xufVxuYXN5bmMgZnVuY3Rpb24gc3RhcnRNY3BTZXJ2ZXIoKSB7XG4gIHRyeSB7XG4gICAgY29uc29sZS5lcnJvcihcbiAgICAgIGAke2ltcG9ydF9jaGFsay5kZWZhdWx0LmJsdWUoXCJbc21pdGhlcnldXCIpfSBTdGFydGluZyBNQ1Agc2VydmVyIHdpdGggc3RkaW8gdHJhbnNwb3J0YFxuICAgICk7XG4gICAgY29uc3QgYXJncyA9IHByb2Nlc3MuYXJndi5zbGljZSgyKTtcbiAgICBjb25zdCB7IGNvbmZpZywgZXJyb3JzIH0gPSBwYXJzZUNsaUNvbmZpZyhhcmdzLCBlbnRyeS5jb25maWdTY2hlbWEpO1xuICAgIGlmIChlcnJvcnMpIHtcbiAgICAgIHByb2Nlc3MuZXhpdCgxKTtcbiAgICB9XG4gICAgbGV0IG1jcFNlcnZlcjtcbiAgICBpZiAoZW50cnkuZGVmYXVsdCAmJiB0eXBlb2YgZW50cnkuZGVmYXVsdCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICBjb25zdCBzZXNzaW9uSWQgPSBgc3RkaW8tJHtEYXRlLm5vdygpfS0ke01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZygyKX1gO1xuICAgICAgY29uc29sZS5lcnJvcihgJHtpbXBvcnRfY2hhbGsuZGVmYXVsdC5ibHVlKFwiW3NtaXRoZXJ5XVwiKX0gQ3JlYXRpbmcgc2VydmVyLmApO1xuICAgICAgbWNwU2VydmVyID0gZW50cnkuZGVmYXVsdCh7IHNlc3Npb25JZCwgY29uZmlnIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIFwiTm8gdmFsaWQgc2VydmVyIGV4cG9ydCBmb3VuZC4gUGxlYXNlIGV4cG9ydDpcXG4tIGV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHsgc2Vzc2lvbklkLCBjb25maWcgfSkgeyAuLi4gfVwiXG4gICAgICApO1xuICAgIH1cbiAgICBjb25zdCB0cmFuc3BvcnQgPSBuZXcgU3RkaW9TZXJ2ZXJUcmFuc3BvcnQoKTtcbiAgICBhd2FpdCBtY3BTZXJ2ZXIuY29ubmVjdCh0cmFuc3BvcnQpO1xuICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICBgJHtpbXBvcnRfY2hhbGsuZGVmYXVsdC5ncmVlbihcIltzbWl0aGVyeV1cIil9IE1DUCBzZXJ2ZXIgY29ubmVjdGVkIHRvIHN0ZGlvIHRyYW5zcG9ydGBcbiAgICApO1xuICAgIGlmIChPYmplY3Qua2V5cyhjb25maWcpLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYCR7aW1wb3J0X2NoYWxrLmRlZmF1bHQuYmx1ZShcIltzbWl0aGVyeV1cIil9IENvbmZpZ3VyYXRpb24gbG9hZGVkOmAsIGNvbmZpZyk7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICBgJHtpbXBvcnRfY2hhbGsuZGVmYXVsdC5yZWQoXCJbc21pdGhlcnldXCIpfSBGYWlsZWQgdG8gc3RhcnQgTUNQIHNlcnZlcjpgLFxuICAgICAgZXJyb3JcbiAgICApO1xuICAgIHByb2Nlc3MuZXhpdCgxKTtcbiAgfVxufVxuc3RhcnRNY3BTZXJ2ZXIoKS5jYXRjaCgoZXJyb3IpID0+IHtcbiAgY29uc29sZS5lcnJvcihgJHtpbXBvcnRfY2hhbGsuZGVmYXVsdC5yZWQoXCJbc21pdGhlcnldXCIpfSBVbmhhbmRsZWQgZXJyb3I6YCwgZXJyb3IpO1xuICBwcm9jZXNzLmV4aXQoMSk7XG59KTtcbi8qISBCdW5kbGVkIGxpY2Vuc2UgaW5mb3JtYXRpb246XG5cbmxvZGFzaC9sb2Rhc2guanM6XG4gICgqKlxuICAgKiBAbGljZW5zZVxuICAgKiBMb2Rhc2ggPGh0dHBzOi8vbG9kYXNoLmNvbS8+XG4gICAqIENvcHlyaWdodCBPcGVuSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIDxodHRwczovL29wZW5qc2Yub3JnLz5cbiAgICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICAgKiBCYXNlZCBvbiBVbmRlcnNjb3JlLmpzIDEuOC4zIDxodHRwOi8vdW5kZXJzY29yZWpzLm9yZy9MSUNFTlNFPlxuICAgKiBDb3B5cmlnaHQgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnNcbiAgICopXG4qL1xuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFDYTtBQURiO0FBQUE7QUFBQTtBQUNPLElBQU0sYUFBYTtBQUFBLE1BQ3hCLFVBQVUsUUFBUSxJQUFJLGVBQWU7QUFBQSxN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QSxRQUNSLFFBQVE7QUFBQSxRQUNSLFFBQVE7QUFBQSxRQUNSLFFBQVE7QUFBQSxRQUNSLFFBQVE7QUFBQSxRQUNSLFFBQVE7QUFBQSxRQUNSLFFBQVE7QUFBQSxRQUNSLFFBQVE7QUFBQSxRQUNSLFFBQVE7QUFBQSxRQUNSLFFBQVE7QUFBQSxRQUNSLFFBQVE7QUFBQSxRQUNSLFFBQVE7QUFBQSxRQUNSLFFBQVE7QUFBQSxRQUNSLFFBQVE7QUFBQSxRQUNSLFFBQVE7QUFBQSxRQUNSLFFBQVE7QUFBQSxRQUNSLFFBQVE7QUFBQSxRQUNSLFFBQVE7QUFBQSxRQUNSLFFBQVE7QUFBQSxRQUNSLFFBQVE7QUFBQSxRQUNSLFFBQVE7QUFBQSxRQUNSLFFBQVE7QUFBQSxRQUNSLFFBQVE7QUFBQSxRQUNSLFFBQVE7QUFBQSxRQUNSLFFBQVE7QUFBQSxRQUNSLFFBQVE7QUFBQSxRQUNSLFFBQVE7QUFBQSxRQUNSLFFBQVE7QUFBQSxRQUNSLFFBQVE7QUFBQSxRQUNSLFFBQVE7QUFBQSxRQUNSLFFBQVE7QUFBQSxRQUNSLFFBQVE7QUFBQSxRQUNSLFFBQVE7QUFBQSxRQUNSLFFBQVE7QUFBQSxRQUNSLFFBQVE7QUFBQSxRQUNSLFFBQVE7QUFBQSxRQUNSLFFBQVE7QUFBQSxRQUNSLFFBQVE7QUFBQSxRQUNSLFFBQVE7QUFBQSxRQUNSLFFBQVE7QUFBQSxRQUNSLFFBQVE7QUFBQSxRQUNSLFFBQVE7QUFBQSxRQUNSLFFBQVE7QUFBQSxRQUNSLFFBQVE7QUFBQTtBQUFBLFFBRVIsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLE1BQ1o7QUFDQSxVQUFJLGNBQWM7QUFBQSxRQUNoQixLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQUEsTUFDUDtBQUNBLFVBQUksZ0JBQWdCO0FBQUEs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QUFNLE9BQU8sR0FBRyxVQUFVLFNBQVMsT0FBTyxFQUFFLENBQUM7QUFBQSxFQUN2RTtBQUFBLEVBQ0EsTUFBTSxTQUFTO0FBQ2IsV0FBTyxLQUFLLFVBQVUsRUFBRSxNQUFNLFNBQVMsR0FBRyxVQUFVLFNBQVMsT0FBTyxFQUFFLENBQUM7QUFBQSxFQUN6RTtBQUFBLEVBQ0EsS0FBSyxTQUFTO0FBQ1osV0FBTyxLQUFLLFVBQVUsRUFBRSxNQUFNLFFBQVEsR0FBRyxVQUFVLFNBQVMsT0FBTyxFQUFFLENBQUM7QUFBQSxFQUN4RTtBQUFBLEVBQ0EsT0FBTyxTQUFTO0FBQ2QsV0FBTyxLQUFLLFVBQVUsRUFBRSxNQUFNLFVBQVUsR0FBRyxVQUFVLFNBQVMsT0FBTyxFQUFFLENBQUM7QUFBQSxFQUMxRTtBQUFBLEVBQ0EsS0FBSyxTQUFTO0FBQ1osV0FBTyxLQUFLLFVBQVUsRUFBRSxNQUFNLFFBQVEsR0FBRyxVQUFVLFNBQVMsT0FBTyxFQUFFLENBQUM7QUFBQSxFQUN4RTtBQUFBLEVBQ0EsTUFBTSxTQUFTO0FBQ2IsV0FBTyxLQUFLLFVBQVUsRUFBRSxNQUFNLFNBQVMsR0FBRyxVQUFVLFNBQVMsT0FBTyxFQUFFLENBQUM7QUFBQSxFQUN6RTtBQUFBLEVBQ0EsS0FBSyxTQUFTO0FBQ1osV0FBTyxLQUFLLFVBQVUsRUFBRSxNQUFNLFFBQVEsR0FBRyxVQUFVLFNBQVMsT0FBTyxFQUFFLENBQUM7QUFBQSxFQUN4RTtBQUFBLEVBQ0EsT0FBTyxTQUFTO0FBQ2QsV0FBTyxLQUFLLFVBQVUsRUFBRSxNQUFNLFVBQVUsR0FBRyxVQUFVLFNBQVMsT0FBTyxFQUFFLENBQUM7QUFBQSxFQUMxRTtBQUFBLEVBQ0EsVUFBVSxTQUFTO0FBQ2pCLFdBQU8sS0FBSyxVQUFVO0FBQUEsTUFDcEIsTUFBTTtBQUFBLE1BQ04sR0FBRyxVQUFVLFNBQVMsT0FBTztBQUFBLElBQy9CLENBQUM7QUFBQSxFQUNIO0FBQUEsRUFDQSxJQUFJLFNBQVM7QUFDWCxXQUFPLEtBQUssVUFBVSxFQUFFLE1BQU0sT0FBTyxHQUFHLFVBQVUs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LFNBQVM7QUFDWCxXQUFPLENBQUMsQ0FBQyxLQUFLLEtBQUssT0FBTyxLQUFLLENBQUMsT0FBTyxHQUFHLFNBQVMsTUFBTTtBQUFBLEVBQzNEO0FBQUEsRUFDQSxJQUFJLGFBQWE7QUFDZixXQUFPLENBQUMsQ0FBQyxLQUFLLEtBQUssT0FBTyxLQUFLLENBQUMsT0FBTyxHQUFHLFNBQVMsVUFBVTtBQUFBLEVBQy9EO0FBQUEsRUFDQSxJQUFJLFVBQVU7QUFDWixXQUFPLENBQUMsQ0FBQyxLQUFLLEtBQUssT0FBTyxLQUFLLENBQUMsT0FBTyxHQUFHLFNBQVMsT0FBTztBQUFBLEVBQzVEO0FBQUEsRUFDQSxJQUFJLFFBQVE7QUFDVixXQUFPLENBQUMsQ0FBQyxLQUFLLEtBQUssT0FBTyxLQUFLLENBQUMsT0FBTyxHQUFHLFNBQVMsS0FBSztBQUFBLEVBQzFEO0FBQUEsRUFDQSxJQUFJLFVBQVU7QUFDWixXQUFPLENBQUMsQ0FBQyxLQUFLLEtBQUssT0FBTyxLQUFLLENBQUMsT0FBTyxHQUFHLFNBQVMsT0FBTztBQUFBLEVBQzVEO0FBQUEsRUFDQSxJQUFJLFNBQVM7QUFDWCxXQUFPLENBQUMsQ0FBQyxLQUFLLEtBQUssT0FBTyxLQUFLLENBQUMsT0FBTyxHQUFHLFNBQVMsTUFBTTtBQUFBLEVBQzNEO0FBQUEsRUFDQSxJQUFJLFdBQVc7QUFDYixXQUFPLENBQUMsQ0FBQyxLQUFLLEtBQUssT0FBTyxLQUFLLENBQUMsT0FBTyxHQUFHLFNBQVMsUUFBUTtBQUFBLEVBQzdEO0FBQUEsRUFDQSxJQUFJLFNBQVM7QUFDWCxXQUFPLENBQUMsQ0FBQyxLQUFLLEtBQUssT0FBTyxLQUFLLENBQUMsT0FBTyxHQUFHLFNBQVMsTUFBTTtBQUFBLEVBQzNEO0FBQUEsRUFDQSxJQUFJLFVBQVU7QUFDWixXQUFPLENBQUMsQ0FBQyxLQUFLLEtBQUssT0FBTyxLQUFLLENBQUMsT0FBTyxHQUFHLFNBQVMsT0FBTztBQUFBLEVBQzVEO0FBQUEsRUFDQSxJQUFJLFNBQVM7QUFDWCxXQUFPLENBQUMsQ0FBQyxLQUFLLEtBQUss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QVE7QUFDVixjQUFRLEtBQUssQ0FBQztBQUFBLElBQ2hCO0FBQ0EsUUFBSTtBQUNKLFFBQUksTUFBTSxXQUFXLE9BQU8sTUFBTSxZQUFZLFlBQVk7QUFDeEQsWUFBTSxZQUFZLFNBQVMsS0FBSyxJQUFJLENBQUMsSUFBSSxLQUFLLE9BQU8sRUFBRSxTQUFTLEVBQUUsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUNoRixjQUFRLE1BQU0sR0FBRyxhQUFhLFFBQVEsS0FBSyxZQUFZLENBQUMsbUJBQW1CO0FBQzNFLGtCQUFZLE1BQU0sUUFBUSxFQUFFLFdBQVcsT0FBTyxDQUFDO0FBQUEsSUFDakQsT0FBTztBQUNMLFlBQU0sSUFBSTtBQUFBLFFBQ1I7QUFBQSxNQUNGO0FBQUEsSUFDRjtBQUNBLFVBQU0sWUFBWSxJQUFJLHFCQUFxQjtBQUMzQyxVQUFNLFVBQVUsUUFBUSxTQUFTO0FBQ2pDLFlBQVE7QUFBQSxNQUNOLEdBQUcsYUFBYSxRQUFRLE1BQU0sWUFBWSxDQUFDO0FBQUEsSUFDN0M7QUFDQSxRQUFJLE9BQU8sS0FBSyxNQUFNLEVBQUUsU0FBUyxHQUFHO0FBQ2xDLGNBQVEsTUFBTSxHQUFHLGFBQWEsUUFBUSxLQUFLLFlBQVksQ0FBQywwQkFBMEIsTUFBTTtBQUFBLElBQzFGO0FBQUEsRUFDRixTQUFTLE9BQU87QUFDZCxZQUFRO0FBQUEsTUFDTixHQUFHLGFBQWEsUUFBUSxJQUFJLFlBQVksQ0FBQztBQUFBLE1BQ3pDO0FBQUEsSUFDRjtBQUNBLFlBQVEsS0FBSyxDQUFDO0FBQUEsRUFDaEI7QUFDRjtBQUNBLGVBQWUsRUFBRSxNQUFNLENBQUMsVUFBVTtBQUNoQyxVQUFRLE1BQU0sR0FBRyxhQUFhLFFBQVEsSUFBSSxZQUFZLENBQUMscUJBQXFCLEtBQUs7QUFDakYsVUFBUSxLQUFLLENBQUM7QUFDaEIsQ0FBQzsiLAogICJuYW1lcyI6IFsiYXhpb3MiLCAiaW1wb3J0X3pvZCIsICJfX2NyZWF0ZSIsICJfX2RlZlByb3AiLCAiX19nZXRPd25Qcm9wRGVzYyIsICJfX2dldE93blByb3BOYW1lcyIsICJfX2dldFByb3RvT2YiLCAiX19oYXNPd25Qcm9wIiwgIl9fZXhwb3J0IiwgIl9fY29weVByb3BzIiwgIl9fdG9FU00iLCAieiIsICJ6MiJdCn0K
