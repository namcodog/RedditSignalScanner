# GitHub Actions CI/CD 配置
# 每次推送代码或创建 PR 时自动运行

name: CI/CD Pipeline

# 触发条件
on:
  push:
    branches: [ main, develop ]  # 推送到 main 或 develop 分支时触发
  pull_request:
    branches: [ main ]  # 创建 PR 到 main 分支时触发

# 定义任务
jobs:
  # 任务 1: Backend 测试
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest  # 使用 Ubuntu 系统
    
    # 需要的服务（数据库、Redis）
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: reddit_scanner_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      # 1. 检出代码
      - name: Checkout code
        uses: actions/checkout@v4
      
      # 2. 设置 Python 环境
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'  # 缓存依赖，加快速度
      
      # 3. 安装依赖
      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt
      
      # 4. 运行数据库迁移
      - name: Run migrations
        env:
          DATABASE_URL: postgresql+asyncpg://test_user:test_pass@localhost:5432/reddit_scanner_test
          TEST_DB_HOST: localhost
          TEST_DB_PORT: 5432
          TEST_DB_USER: test_user
          TEST_DB_PASSWORD: test_pass
          TEST_DB_NAME: reddit_scanner_test
        run: |
          cd backend
          alembic upgrade head

      # 5. 运行测试
      - name: Run tests
        env:
          DATABASE_URL: postgresql+asyncpg://test_user:test_pass@localhost:5432/reddit_scanner_test
          REDIS_URL: redis://localhost:6379/5
          CELERY_BROKER_URL: redis://localhost:6379/1
          CELERY_RESULT_BACKEND: redis://localhost:6379/2
          TEST_DB_HOST: localhost
          TEST_DB_PORT: 5432
          TEST_DB_USER: test_user
          TEST_DB_PASSWORD: test_pass
          TEST_DB_NAME: reddit_scanner_test
        run: |
          cd backend
          # Run a focused subset to keep CI fast and stable; exclude long-running suites
          pytest -v -k "not e2e and not integration and not services and not tasks" \
            --maxfail=1 --disable-warnings \
            --cov=app --cov-report=xml --cov-report=term
      
      # 6. 上传测试覆盖率报告
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage
  
  # 任务 2: Backend 代码质量检查
  backend-quality:
    name: Backend Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt
      
      # 类型检查
      - name: Run mypy
        run: |
          cd backend
          mypy app/ --config-file=../mypy.ini || true
        continue-on-error: true  # 允许失败，但会显示警告
      
      # 代码格式检查
      - name: Check code formatting
        run: |
          cd backend
          pip install black isort
          black --check app/
          isort --check-only app/
        continue-on-error: true  # 暂时放宽，避免阻塞 PR

  # 任务 3: Frontend 测试
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        run: |
          cd frontend
          npm ci  # 使用 ci 而不是 install，更快更可靠
      
      - name: Run linter
        run: |
          cd frontend
          npm run lint
      
      - name: Run type check
        run: |
          cd frontend
          npm run type-check
      
      - name: Run tests
        run: |
          cd frontend
          npm test -- --run  # vitest 单次运行模式
      
      - name: Build
        run: |
          cd frontend
          npm run build
  
  # 任务 4: 安全扫描（可选）
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # 扫描依赖漏洞
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      # 上传扫描结果到 GitHub Security
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

