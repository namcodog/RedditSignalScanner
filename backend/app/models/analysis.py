from __future__ import annotations

import uuid
from datetime import datetime
from decimal import Decimal
from typing import TYPE_CHECKING, Any, Dict

from sqlalchemy import (
    CheckConstraint,
    DateTime,
    ForeignKey,
    Index,
    Numeric,
    String,
    UniqueConstraint,
    func,
)
from sqlalchemy.dialects.postgresql import JSONB
from sqlalchemy.orm import Mapped, mapped_column, relationship

from app.db.base import Base, uuid_pk_column

if TYPE_CHECKING:  # pragma: no cover
    from app.models.report import Report
    from app.models.task import Task


class Analysis(Base):
    """Structured results generated by the analysis pipeline."""

    __tablename__ = "analyses"
    __table_args__ = (
        UniqueConstraint("task_id", name="uq_analyses_task_id"),
        CheckConstraint(
            "validate_insights_schema(insights)", name="ck_analyses_insights_schema"
        ),
        CheckConstraint(
            "validate_sources_schema(sources)", name="ck_analyses_sources_schema"
        ),
        CheckConstraint(
            "(confidence_score IS NULL) OR (confidence_score BETWEEN 0.00 AND 1.00)",
            name="ck_analyses_confidence_score_range",
        ),
        Index("idx_analyses_confidence", "confidence_score"),
        Index("idx_analyses_version", "analysis_version"),
        Index("idx_analyses_created", "created_at"),
        Index("idx_analyses_insights_gin", "insights", postgresql_using="gin"),
        Index("idx_analyses_sources_gin", "sources", postgresql_using="gin"),
    )

    id: Mapped[uuid.UUID] = uuid_pk_column()
    task_id: Mapped[uuid.UUID] = mapped_column(
        ForeignKey("tasks.id", ondelete="CASCADE"), nullable=False, unique=True
    )
    insights: Mapped[Dict[str, Any]] = mapped_column(JSONB, nullable=False)
    sources: Mapped[Dict[str, Any]] = mapped_column(JSONB, nullable=False)
    action_items: Mapped[Dict[str, Any] | None] = mapped_column(
        JSONB, nullable=True, default=None
    )
    confidence_score: Mapped[Decimal | None] = mapped_column(
        Numeric(3, 2), nullable=True
    )
    analysis_version: Mapped[int] = mapped_column(
        default=1, nullable=False
    )
    created_at: Mapped[datetime] = mapped_column(
        DateTime(timezone=True), server_default=func.now(), nullable=False
    )

    task: Mapped["Task"] = relationship("Task", back_populates="analysis")
    report: Mapped["Report"] = relationship(
        "Report", back_populates="analysis", uselist=False, cascade="all, delete-orphan"
    )

    def __repr__(self) -> str:
        return f"Analysis(id={self.id!s}, task_id={self.task_id!s}, version={self.analysis_version})"
